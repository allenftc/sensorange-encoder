
sensorange encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000695c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08006a18  08006a18  00007a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b5c  08006b5c  00008014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006b5c  08006b5c  00007b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b64  08006b64  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b64  08006b64  00007b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b68  08006b68  00007b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006b6c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000014  08006b80  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08006b80  0000832c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001471e  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2c  00000000  00000000  0001c75a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0001f288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e7a  00000000  00000000  000204d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003135  00000000  00000000  0002134a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015862  00000000  00000000  0002447f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad2cc  00000000  00000000  00039ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6fad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004570  00000000  00000000  000e6ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000eb560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006a00 	.word	0x08006a00

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	08006a00 	.word	0x08006a00

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0008      	movs	r0, r1
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 fc97 	bl	8000d2c <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 fc1f 	bl	8000c4c <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fc89 	bl	8000d2c <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fc7f 	bl	8000d2c <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fc2d 	bl	8000c9c <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fc23 	bl	8000c9c <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_uldivmod>:
 8000464:	2b00      	cmp	r3, #0
 8000466:	d111      	bne.n	800048c <__aeabi_uldivmod+0x28>
 8000468:	2a00      	cmp	r2, #0
 800046a:	d10f      	bne.n	800048c <__aeabi_uldivmod+0x28>
 800046c:	2900      	cmp	r1, #0
 800046e:	d100      	bne.n	8000472 <__aeabi_uldivmod+0xe>
 8000470:	2800      	cmp	r0, #0
 8000472:	d002      	beq.n	800047a <__aeabi_uldivmod+0x16>
 8000474:	2100      	movs	r1, #0
 8000476:	43c9      	mvns	r1, r1
 8000478:	0008      	movs	r0, r1
 800047a:	b407      	push	{r0, r1, r2}
 800047c:	4802      	ldr	r0, [pc, #8]	@ (8000488 <__aeabi_uldivmod+0x24>)
 800047e:	a102      	add	r1, pc, #8	@ (adr r1, 8000488 <__aeabi_uldivmod+0x24>)
 8000480:	1840      	adds	r0, r0, r1
 8000482:	9002      	str	r0, [sp, #8]
 8000484:	bd03      	pop	{r0, r1, pc}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	ffffff65 	.word	0xffffff65
 800048c:	b403      	push	{r0, r1}
 800048e:	4668      	mov	r0, sp
 8000490:	b501      	push	{r0, lr}
 8000492:	9802      	ldr	r0, [sp, #8]
 8000494:	f000 f806 	bl	80004a4 <__udivmoddi4>
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	469e      	mov	lr, r3
 800049c:	b002      	add	sp, #8
 800049e:	bc0c      	pop	{r2, r3}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f001 f8c6 	bl	8001654 <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f001 f8c1 	bl	8001654 <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	d434      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004da:	469b      	mov	fp, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	465a      	mov	r2, fp
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83b      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e079      	b.n	80005ea <__udivmoddi4+0x146>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e076      	b.n	80005f0 <__udivmoddi4+0x14c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e029      	b.n	8000570 <__udivmoddi4+0xcc>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	469b      	mov	fp, r3
 8000548:	2320      	movs	r3, #32
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	4652      	mov	r2, sl
 800054e:	40da      	lsrs	r2, r3
 8000550:	4641      	mov	r1, r8
 8000552:	0013      	movs	r3, r2
 8000554:	464a      	mov	r2, r9
 8000556:	408a      	lsls	r2, r1
 8000558:	0017      	movs	r7, r2
 800055a:	4642      	mov	r2, r8
 800055c:	431f      	orrs	r7, r3
 800055e:	4653      	mov	r3, sl
 8000560:	4093      	lsls	r3, r2
 8000562:	001e      	movs	r6, r3
 8000564:	42af      	cmp	r7, r5
 8000566:	d9c3      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000568:	2200      	movs	r2, #0
 800056a:	2300      	movs	r3, #0
 800056c:	9200      	str	r2, [sp, #0]
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	4643      	mov	r3, r8
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0d8      	beq.n	8000528 <__udivmoddi4+0x84>
 8000576:	07fb      	lsls	r3, r7, #31
 8000578:	0872      	lsrs	r2, r6, #1
 800057a:	431a      	orrs	r2, r3
 800057c:	4646      	mov	r6, r8
 800057e:	087b      	lsrs	r3, r7, #1
 8000580:	e00e      	b.n	80005a0 <__udivmoddi4+0xfc>
 8000582:	42ab      	cmp	r3, r5
 8000584:	d101      	bne.n	800058a <__udivmoddi4+0xe6>
 8000586:	42a2      	cmp	r2, r4
 8000588:	d80c      	bhi.n	80005a4 <__udivmoddi4+0x100>
 800058a:	1aa4      	subs	r4, r4, r2
 800058c:	419d      	sbcs	r5, r3
 800058e:	2001      	movs	r0, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2100      	movs	r1, #0
 8000596:	3e01      	subs	r6, #1
 8000598:	1824      	adds	r4, r4, r0
 800059a:	414d      	adcs	r5, r1
 800059c:	2e00      	cmp	r6, #0
 800059e:	d006      	beq.n	80005ae <__udivmoddi4+0x10a>
 80005a0:	42ab      	cmp	r3, r5
 80005a2:	d9ee      	bls.n	8000582 <__udivmoddi4+0xde>
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1924      	adds	r4, r4, r4
 80005a8:	416d      	adcs	r5, r5
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d1f8      	bne.n	80005a0 <__udivmoddi4+0xfc>
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	465b      	mov	r3, fp
 80005b4:	1900      	adds	r0, r0, r4
 80005b6:	4169      	adcs	r1, r5
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db24      	blt.n	8000606 <__udivmoddi4+0x162>
 80005bc:	002b      	movs	r3, r5
 80005be:	465a      	mov	r2, fp
 80005c0:	4644      	mov	r4, r8
 80005c2:	40d3      	lsrs	r3, r2
 80005c4:	002a      	movs	r2, r5
 80005c6:	40e2      	lsrs	r2, r4
 80005c8:	001c      	movs	r4, r3
 80005ca:	465b      	mov	r3, fp
 80005cc:	0015      	movs	r5, r2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db2a      	blt.n	8000628 <__udivmoddi4+0x184>
 80005d2:	0026      	movs	r6, r4
 80005d4:	409e      	lsls	r6, r3
 80005d6:	0033      	movs	r3, r6
 80005d8:	0026      	movs	r6, r4
 80005da:	4647      	mov	r7, r8
 80005dc:	40be      	lsls	r6, r7
 80005de:	0032      	movs	r2, r6
 80005e0:	1a80      	subs	r0, r0, r2
 80005e2:	4199      	sbcs	r1, r3
 80005e4:	9000      	str	r0, [sp, #0]
 80005e6:	9101      	str	r1, [sp, #4]
 80005e8:	e79e      	b.n	8000528 <__udivmoddi4+0x84>
 80005ea:	42a3      	cmp	r3, r4
 80005ec:	d8bc      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80005ee:	e782      	b.n	80004f6 <__udivmoddi4+0x52>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	9100      	str	r1, [sp, #0]
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	2201      	movs	r2, #1
 8000600:	40da      	lsrs	r2, r3
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	e785      	b.n	8000512 <__udivmoddi4+0x6e>
 8000606:	4642      	mov	r2, r8
 8000608:	2320      	movs	r3, #32
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4646      	mov	r6, r8
 8000610:	409a      	lsls	r2, r3
 8000612:	0023      	movs	r3, r4
 8000614:	40f3      	lsrs	r3, r6
 8000616:	4644      	mov	r4, r8
 8000618:	4313      	orrs	r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	40e2      	lsrs	r2, r4
 800061e:	001c      	movs	r4, r3
 8000620:	465b      	mov	r3, fp
 8000622:	0015      	movs	r5, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	dad4      	bge.n	80005d2 <__udivmoddi4+0x12e>
 8000628:	4642      	mov	r2, r8
 800062a:	002f      	movs	r7, r5
 800062c:	2320      	movs	r3, #32
 800062e:	0026      	movs	r6, r4
 8000630:	4097      	lsls	r7, r2
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	40de      	lsrs	r6, r3
 8000636:	003b      	movs	r3, r7
 8000638:	4333      	orrs	r3, r6
 800063a:	e7cd      	b.n	80005d8 <__udivmoddi4+0x134>

0800063c <__aeabi_fadd>:
 800063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063e:	024b      	lsls	r3, r1, #9
 8000640:	0a5a      	lsrs	r2, r3, #9
 8000642:	4694      	mov	ip, r2
 8000644:	004a      	lsls	r2, r1, #1
 8000646:	0fc9      	lsrs	r1, r1, #31
 8000648:	46ce      	mov	lr, r9
 800064a:	4647      	mov	r7, r8
 800064c:	4689      	mov	r9, r1
 800064e:	0045      	lsls	r5, r0, #1
 8000650:	0246      	lsls	r6, r0, #9
 8000652:	0e2d      	lsrs	r5, r5, #24
 8000654:	0e12      	lsrs	r2, r2, #24
 8000656:	b580      	push	{r7, lr}
 8000658:	0999      	lsrs	r1, r3, #6
 800065a:	0a77      	lsrs	r7, r6, #9
 800065c:	0fc4      	lsrs	r4, r0, #31
 800065e:	09b6      	lsrs	r6, r6, #6
 8000660:	1aab      	subs	r3, r5, r2
 8000662:	454c      	cmp	r4, r9
 8000664:	d020      	beq.n	80006a8 <__aeabi_fadd+0x6c>
 8000666:	2b00      	cmp	r3, #0
 8000668:	dd0c      	ble.n	8000684 <__aeabi_fadd+0x48>
 800066a:	2a00      	cmp	r2, #0
 800066c:	d134      	bne.n	80006d8 <__aeabi_fadd+0x9c>
 800066e:	2900      	cmp	r1, #0
 8000670:	d02a      	beq.n	80006c8 <__aeabi_fadd+0x8c>
 8000672:	1e5a      	subs	r2, r3, #1
 8000674:	2b01      	cmp	r3, #1
 8000676:	d100      	bne.n	800067a <__aeabi_fadd+0x3e>
 8000678:	e08f      	b.n	800079a <__aeabi_fadd+0x15e>
 800067a:	2bff      	cmp	r3, #255	@ 0xff
 800067c:	d100      	bne.n	8000680 <__aeabi_fadd+0x44>
 800067e:	e0cd      	b.n	800081c <__aeabi_fadd+0x1e0>
 8000680:	0013      	movs	r3, r2
 8000682:	e02f      	b.n	80006e4 <__aeabi_fadd+0xa8>
 8000684:	2b00      	cmp	r3, #0
 8000686:	d060      	beq.n	800074a <__aeabi_fadd+0x10e>
 8000688:	1b53      	subs	r3, r2, r5
 800068a:	2d00      	cmp	r5, #0
 800068c:	d000      	beq.n	8000690 <__aeabi_fadd+0x54>
 800068e:	e0ee      	b.n	800086e <__aeabi_fadd+0x232>
 8000690:	2e00      	cmp	r6, #0
 8000692:	d100      	bne.n	8000696 <__aeabi_fadd+0x5a>
 8000694:	e13e      	b.n	8000914 <__aeabi_fadd+0x2d8>
 8000696:	1e5c      	subs	r4, r3, #1
 8000698:	2b01      	cmp	r3, #1
 800069a:	d100      	bne.n	800069e <__aeabi_fadd+0x62>
 800069c:	e16b      	b.n	8000976 <__aeabi_fadd+0x33a>
 800069e:	2bff      	cmp	r3, #255	@ 0xff
 80006a0:	d100      	bne.n	80006a4 <__aeabi_fadd+0x68>
 80006a2:	e0b9      	b.n	8000818 <__aeabi_fadd+0x1dc>
 80006a4:	0023      	movs	r3, r4
 80006a6:	e0e7      	b.n	8000878 <__aeabi_fadd+0x23c>
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	dc00      	bgt.n	80006ae <__aeabi_fadd+0x72>
 80006ac:	e0a4      	b.n	80007f8 <__aeabi_fadd+0x1bc>
 80006ae:	2a00      	cmp	r2, #0
 80006b0:	d069      	beq.n	8000786 <__aeabi_fadd+0x14a>
 80006b2:	2dff      	cmp	r5, #255	@ 0xff
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0x7c>
 80006b6:	e0b1      	b.n	800081c <__aeabi_fadd+0x1e0>
 80006b8:	2280      	movs	r2, #128	@ 0x80
 80006ba:	04d2      	lsls	r2, r2, #19
 80006bc:	4311      	orrs	r1, r2
 80006be:	2b1b      	cmp	r3, #27
 80006c0:	dc00      	bgt.n	80006c4 <__aeabi_fadd+0x88>
 80006c2:	e0e9      	b.n	8000898 <__aeabi_fadd+0x25c>
 80006c4:	002b      	movs	r3, r5
 80006c6:	3605      	adds	r6, #5
 80006c8:	08f7      	lsrs	r7, r6, #3
 80006ca:	2bff      	cmp	r3, #255	@ 0xff
 80006cc:	d100      	bne.n	80006d0 <__aeabi_fadd+0x94>
 80006ce:	e0a5      	b.n	800081c <__aeabi_fadd+0x1e0>
 80006d0:	027a      	lsls	r2, r7, #9
 80006d2:	0a52      	lsrs	r2, r2, #9
 80006d4:	b2d8      	uxtb	r0, r3
 80006d6:	e030      	b.n	800073a <__aeabi_fadd+0xfe>
 80006d8:	2dff      	cmp	r5, #255	@ 0xff
 80006da:	d100      	bne.n	80006de <__aeabi_fadd+0xa2>
 80006dc:	e09e      	b.n	800081c <__aeabi_fadd+0x1e0>
 80006de:	2280      	movs	r2, #128	@ 0x80
 80006e0:	04d2      	lsls	r2, r2, #19
 80006e2:	4311      	orrs	r1, r2
 80006e4:	2001      	movs	r0, #1
 80006e6:	2b1b      	cmp	r3, #27
 80006e8:	dc08      	bgt.n	80006fc <__aeabi_fadd+0xc0>
 80006ea:	0008      	movs	r0, r1
 80006ec:	2220      	movs	r2, #32
 80006ee:	40d8      	lsrs	r0, r3
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	4099      	lsls	r1, r3
 80006f4:	000b      	movs	r3, r1
 80006f6:	1e5a      	subs	r2, r3, #1
 80006f8:	4193      	sbcs	r3, r2
 80006fa:	4318      	orrs	r0, r3
 80006fc:	1a36      	subs	r6, r6, r0
 80006fe:	0173      	lsls	r3, r6, #5
 8000700:	d400      	bmi.n	8000704 <__aeabi_fadd+0xc8>
 8000702:	e071      	b.n	80007e8 <__aeabi_fadd+0x1ac>
 8000704:	01b6      	lsls	r6, r6, #6
 8000706:	09b7      	lsrs	r7, r6, #6
 8000708:	0038      	movs	r0, r7
 800070a:	f000 ff85 	bl	8001618 <__clzsi2>
 800070e:	003b      	movs	r3, r7
 8000710:	3805      	subs	r0, #5
 8000712:	4083      	lsls	r3, r0
 8000714:	4285      	cmp	r5, r0
 8000716:	dd4d      	ble.n	80007b4 <__aeabi_fadd+0x178>
 8000718:	4eb4      	ldr	r6, [pc, #720]	@ (80009ec <__aeabi_fadd+0x3b0>)
 800071a:	1a2d      	subs	r5, r5, r0
 800071c:	401e      	ands	r6, r3
 800071e:	075a      	lsls	r2, r3, #29
 8000720:	d068      	beq.n	80007f4 <__aeabi_fadd+0x1b8>
 8000722:	220f      	movs	r2, #15
 8000724:	4013      	ands	r3, r2
 8000726:	2b04      	cmp	r3, #4
 8000728:	d064      	beq.n	80007f4 <__aeabi_fadd+0x1b8>
 800072a:	3604      	adds	r6, #4
 800072c:	0173      	lsls	r3, r6, #5
 800072e:	d561      	bpl.n	80007f4 <__aeabi_fadd+0x1b8>
 8000730:	1c68      	adds	r0, r5, #1
 8000732:	2dfe      	cmp	r5, #254	@ 0xfe
 8000734:	d154      	bne.n	80007e0 <__aeabi_fadd+0x1a4>
 8000736:	20ff      	movs	r0, #255	@ 0xff
 8000738:	2200      	movs	r2, #0
 800073a:	05c0      	lsls	r0, r0, #23
 800073c:	4310      	orrs	r0, r2
 800073e:	07e4      	lsls	r4, r4, #31
 8000740:	4320      	orrs	r0, r4
 8000742:	bcc0      	pop	{r6, r7}
 8000744:	46b9      	mov	r9, r7
 8000746:	46b0      	mov	r8, r6
 8000748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800074a:	22fe      	movs	r2, #254	@ 0xfe
 800074c:	4690      	mov	r8, r2
 800074e:	1c68      	adds	r0, r5, #1
 8000750:	0002      	movs	r2, r0
 8000752:	4640      	mov	r0, r8
 8000754:	4210      	tst	r0, r2
 8000756:	d16b      	bne.n	8000830 <__aeabi_fadd+0x1f4>
 8000758:	2d00      	cmp	r5, #0
 800075a:	d000      	beq.n	800075e <__aeabi_fadd+0x122>
 800075c:	e0dd      	b.n	800091a <__aeabi_fadd+0x2de>
 800075e:	2e00      	cmp	r6, #0
 8000760:	d100      	bne.n	8000764 <__aeabi_fadd+0x128>
 8000762:	e102      	b.n	800096a <__aeabi_fadd+0x32e>
 8000764:	2900      	cmp	r1, #0
 8000766:	d0b3      	beq.n	80006d0 <__aeabi_fadd+0x94>
 8000768:	2280      	movs	r2, #128	@ 0x80
 800076a:	1a77      	subs	r7, r6, r1
 800076c:	04d2      	lsls	r2, r2, #19
 800076e:	4217      	tst	r7, r2
 8000770:	d100      	bne.n	8000774 <__aeabi_fadd+0x138>
 8000772:	e136      	b.n	80009e2 <__aeabi_fadd+0x3a6>
 8000774:	464c      	mov	r4, r9
 8000776:	1b8e      	subs	r6, r1, r6
 8000778:	d061      	beq.n	800083e <__aeabi_fadd+0x202>
 800077a:	2001      	movs	r0, #1
 800077c:	4216      	tst	r6, r2
 800077e:	d130      	bne.n	80007e2 <__aeabi_fadd+0x1a6>
 8000780:	2300      	movs	r3, #0
 8000782:	08f7      	lsrs	r7, r6, #3
 8000784:	e7a4      	b.n	80006d0 <__aeabi_fadd+0x94>
 8000786:	2900      	cmp	r1, #0
 8000788:	d09e      	beq.n	80006c8 <__aeabi_fadd+0x8c>
 800078a:	1e5a      	subs	r2, r3, #1
 800078c:	2b01      	cmp	r3, #1
 800078e:	d100      	bne.n	8000792 <__aeabi_fadd+0x156>
 8000790:	e0ca      	b.n	8000928 <__aeabi_fadd+0x2ec>
 8000792:	2bff      	cmp	r3, #255	@ 0xff
 8000794:	d042      	beq.n	800081c <__aeabi_fadd+0x1e0>
 8000796:	0013      	movs	r3, r2
 8000798:	e791      	b.n	80006be <__aeabi_fadd+0x82>
 800079a:	1a71      	subs	r1, r6, r1
 800079c:	014b      	lsls	r3, r1, #5
 800079e:	d400      	bmi.n	80007a2 <__aeabi_fadd+0x166>
 80007a0:	e0d1      	b.n	8000946 <__aeabi_fadd+0x30a>
 80007a2:	018f      	lsls	r7, r1, #6
 80007a4:	09bf      	lsrs	r7, r7, #6
 80007a6:	0038      	movs	r0, r7
 80007a8:	f000 ff36 	bl	8001618 <__clzsi2>
 80007ac:	003b      	movs	r3, r7
 80007ae:	3805      	subs	r0, #5
 80007b0:	4083      	lsls	r3, r0
 80007b2:	2501      	movs	r5, #1
 80007b4:	2220      	movs	r2, #32
 80007b6:	1b40      	subs	r0, r0, r5
 80007b8:	3001      	adds	r0, #1
 80007ba:	1a12      	subs	r2, r2, r0
 80007bc:	001e      	movs	r6, r3
 80007be:	4093      	lsls	r3, r2
 80007c0:	40c6      	lsrs	r6, r0
 80007c2:	1e5a      	subs	r2, r3, #1
 80007c4:	4193      	sbcs	r3, r2
 80007c6:	431e      	orrs	r6, r3
 80007c8:	d039      	beq.n	800083e <__aeabi_fadd+0x202>
 80007ca:	0773      	lsls	r3, r6, #29
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x194>
 80007ce:	e11b      	b.n	8000a08 <__aeabi_fadd+0x3cc>
 80007d0:	230f      	movs	r3, #15
 80007d2:	2500      	movs	r5, #0
 80007d4:	4033      	ands	r3, r6
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d1a7      	bne.n	800072a <__aeabi_fadd+0xee>
 80007da:	2001      	movs	r0, #1
 80007dc:	0172      	lsls	r2, r6, #5
 80007de:	d57c      	bpl.n	80008da <__aeabi_fadd+0x29e>
 80007e0:	b2c0      	uxtb	r0, r0
 80007e2:	01b2      	lsls	r2, r6, #6
 80007e4:	0a52      	lsrs	r2, r2, #9
 80007e6:	e7a8      	b.n	800073a <__aeabi_fadd+0xfe>
 80007e8:	0773      	lsls	r3, r6, #29
 80007ea:	d003      	beq.n	80007f4 <__aeabi_fadd+0x1b8>
 80007ec:	230f      	movs	r3, #15
 80007ee:	4033      	ands	r3, r6
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d19a      	bne.n	800072a <__aeabi_fadd+0xee>
 80007f4:	002b      	movs	r3, r5
 80007f6:	e767      	b.n	80006c8 <__aeabi_fadd+0x8c>
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d023      	beq.n	8000844 <__aeabi_fadd+0x208>
 80007fc:	1b53      	subs	r3, r2, r5
 80007fe:	2d00      	cmp	r5, #0
 8000800:	d17b      	bne.n	80008fa <__aeabi_fadd+0x2be>
 8000802:	2e00      	cmp	r6, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x1cc>
 8000806:	e086      	b.n	8000916 <__aeabi_fadd+0x2da>
 8000808:	1e5d      	subs	r5, r3, #1
 800080a:	2b01      	cmp	r3, #1
 800080c:	d100      	bne.n	8000810 <__aeabi_fadd+0x1d4>
 800080e:	e08b      	b.n	8000928 <__aeabi_fadd+0x2ec>
 8000810:	2bff      	cmp	r3, #255	@ 0xff
 8000812:	d002      	beq.n	800081a <__aeabi_fadd+0x1de>
 8000814:	002b      	movs	r3, r5
 8000816:	e075      	b.n	8000904 <__aeabi_fadd+0x2c8>
 8000818:	464c      	mov	r4, r9
 800081a:	4667      	mov	r7, ip
 800081c:	2f00      	cmp	r7, #0
 800081e:	d100      	bne.n	8000822 <__aeabi_fadd+0x1e6>
 8000820:	e789      	b.n	8000736 <__aeabi_fadd+0xfa>
 8000822:	2280      	movs	r2, #128	@ 0x80
 8000824:	03d2      	lsls	r2, r2, #15
 8000826:	433a      	orrs	r2, r7
 8000828:	0252      	lsls	r2, r2, #9
 800082a:	20ff      	movs	r0, #255	@ 0xff
 800082c:	0a52      	lsrs	r2, r2, #9
 800082e:	e784      	b.n	800073a <__aeabi_fadd+0xfe>
 8000830:	1a77      	subs	r7, r6, r1
 8000832:	017b      	lsls	r3, r7, #5
 8000834:	d46b      	bmi.n	800090e <__aeabi_fadd+0x2d2>
 8000836:	2f00      	cmp	r7, #0
 8000838:	d000      	beq.n	800083c <__aeabi_fadd+0x200>
 800083a:	e765      	b.n	8000708 <__aeabi_fadd+0xcc>
 800083c:	2400      	movs	r4, #0
 800083e:	2000      	movs	r0, #0
 8000840:	2200      	movs	r2, #0
 8000842:	e77a      	b.n	800073a <__aeabi_fadd+0xfe>
 8000844:	22fe      	movs	r2, #254	@ 0xfe
 8000846:	1c6b      	adds	r3, r5, #1
 8000848:	421a      	tst	r2, r3
 800084a:	d149      	bne.n	80008e0 <__aeabi_fadd+0x2a4>
 800084c:	2d00      	cmp	r5, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_fadd+0x216>
 8000850:	e09f      	b.n	8000992 <__aeabi_fadd+0x356>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_fadd+0x21c>
 8000856:	e0ba      	b.n	80009ce <__aeabi_fadd+0x392>
 8000858:	2900      	cmp	r1, #0
 800085a:	d100      	bne.n	800085e <__aeabi_fadd+0x222>
 800085c:	e0cf      	b.n	80009fe <__aeabi_fadd+0x3c2>
 800085e:	1872      	adds	r2, r6, r1
 8000860:	0153      	lsls	r3, r2, #5
 8000862:	d400      	bmi.n	8000866 <__aeabi_fadd+0x22a>
 8000864:	e0cd      	b.n	8000a02 <__aeabi_fadd+0x3c6>
 8000866:	0192      	lsls	r2, r2, #6
 8000868:	2001      	movs	r0, #1
 800086a:	0a52      	lsrs	r2, r2, #9
 800086c:	e765      	b.n	800073a <__aeabi_fadd+0xfe>
 800086e:	2aff      	cmp	r2, #255	@ 0xff
 8000870:	d0d2      	beq.n	8000818 <__aeabi_fadd+0x1dc>
 8000872:	2080      	movs	r0, #128	@ 0x80
 8000874:	04c0      	lsls	r0, r0, #19
 8000876:	4306      	orrs	r6, r0
 8000878:	2001      	movs	r0, #1
 800087a:	2b1b      	cmp	r3, #27
 800087c:	dc08      	bgt.n	8000890 <__aeabi_fadd+0x254>
 800087e:	0030      	movs	r0, r6
 8000880:	2420      	movs	r4, #32
 8000882:	40d8      	lsrs	r0, r3
 8000884:	1ae3      	subs	r3, r4, r3
 8000886:	409e      	lsls	r6, r3
 8000888:	0033      	movs	r3, r6
 800088a:	1e5c      	subs	r4, r3, #1
 800088c:	41a3      	sbcs	r3, r4
 800088e:	4318      	orrs	r0, r3
 8000890:	464c      	mov	r4, r9
 8000892:	0015      	movs	r5, r2
 8000894:	1a0e      	subs	r6, r1, r0
 8000896:	e732      	b.n	80006fe <__aeabi_fadd+0xc2>
 8000898:	0008      	movs	r0, r1
 800089a:	2220      	movs	r2, #32
 800089c:	40d8      	lsrs	r0, r3
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	4099      	lsls	r1, r3
 80008a2:	000b      	movs	r3, r1
 80008a4:	1e5a      	subs	r2, r3, #1
 80008a6:	4193      	sbcs	r3, r2
 80008a8:	4303      	orrs	r3, r0
 80008aa:	18f6      	adds	r6, r6, r3
 80008ac:	0173      	lsls	r3, r6, #5
 80008ae:	d59b      	bpl.n	80007e8 <__aeabi_fadd+0x1ac>
 80008b0:	3501      	adds	r5, #1
 80008b2:	2dff      	cmp	r5, #255	@ 0xff
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fadd+0x27c>
 80008b6:	e73e      	b.n	8000736 <__aeabi_fadd+0xfa>
 80008b8:	2301      	movs	r3, #1
 80008ba:	494d      	ldr	r1, [pc, #308]	@ (80009f0 <__aeabi_fadd+0x3b4>)
 80008bc:	0872      	lsrs	r2, r6, #1
 80008be:	4033      	ands	r3, r6
 80008c0:	400a      	ands	r2, r1
 80008c2:	431a      	orrs	r2, r3
 80008c4:	0016      	movs	r6, r2
 80008c6:	0753      	lsls	r3, r2, #29
 80008c8:	d004      	beq.n	80008d4 <__aeabi_fadd+0x298>
 80008ca:	230f      	movs	r3, #15
 80008cc:	4013      	ands	r3, r2
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	d000      	beq.n	80008d4 <__aeabi_fadd+0x298>
 80008d2:	e72a      	b.n	800072a <__aeabi_fadd+0xee>
 80008d4:	0173      	lsls	r3, r6, #5
 80008d6:	d500      	bpl.n	80008da <__aeabi_fadd+0x29e>
 80008d8:	e72a      	b.n	8000730 <__aeabi_fadd+0xf4>
 80008da:	002b      	movs	r3, r5
 80008dc:	08f7      	lsrs	r7, r6, #3
 80008de:	e6f7      	b.n	80006d0 <__aeabi_fadd+0x94>
 80008e0:	2bff      	cmp	r3, #255	@ 0xff
 80008e2:	d100      	bne.n	80008e6 <__aeabi_fadd+0x2aa>
 80008e4:	e727      	b.n	8000736 <__aeabi_fadd+0xfa>
 80008e6:	1871      	adds	r1, r6, r1
 80008e8:	0849      	lsrs	r1, r1, #1
 80008ea:	074a      	lsls	r2, r1, #29
 80008ec:	d02f      	beq.n	800094e <__aeabi_fadd+0x312>
 80008ee:	220f      	movs	r2, #15
 80008f0:	400a      	ands	r2, r1
 80008f2:	2a04      	cmp	r2, #4
 80008f4:	d02b      	beq.n	800094e <__aeabi_fadd+0x312>
 80008f6:	1d0e      	adds	r6, r1, #4
 80008f8:	e6e6      	b.n	80006c8 <__aeabi_fadd+0x8c>
 80008fa:	2aff      	cmp	r2, #255	@ 0xff
 80008fc:	d08d      	beq.n	800081a <__aeabi_fadd+0x1de>
 80008fe:	2080      	movs	r0, #128	@ 0x80
 8000900:	04c0      	lsls	r0, r0, #19
 8000902:	4306      	orrs	r6, r0
 8000904:	2b1b      	cmp	r3, #27
 8000906:	dd24      	ble.n	8000952 <__aeabi_fadd+0x316>
 8000908:	0013      	movs	r3, r2
 800090a:	1d4e      	adds	r6, r1, #5
 800090c:	e6dc      	b.n	80006c8 <__aeabi_fadd+0x8c>
 800090e:	464c      	mov	r4, r9
 8000910:	1b8f      	subs	r7, r1, r6
 8000912:	e6f9      	b.n	8000708 <__aeabi_fadd+0xcc>
 8000914:	464c      	mov	r4, r9
 8000916:	000e      	movs	r6, r1
 8000918:	e6d6      	b.n	80006c8 <__aeabi_fadd+0x8c>
 800091a:	2e00      	cmp	r6, #0
 800091c:	d149      	bne.n	80009b2 <__aeabi_fadd+0x376>
 800091e:	2900      	cmp	r1, #0
 8000920:	d068      	beq.n	80009f4 <__aeabi_fadd+0x3b8>
 8000922:	4667      	mov	r7, ip
 8000924:	464c      	mov	r4, r9
 8000926:	e77c      	b.n	8000822 <__aeabi_fadd+0x1e6>
 8000928:	1870      	adds	r0, r6, r1
 800092a:	0143      	lsls	r3, r0, #5
 800092c:	d574      	bpl.n	8000a18 <__aeabi_fadd+0x3dc>
 800092e:	4930      	ldr	r1, [pc, #192]	@ (80009f0 <__aeabi_fadd+0x3b4>)
 8000930:	0840      	lsrs	r0, r0, #1
 8000932:	4001      	ands	r1, r0
 8000934:	0743      	lsls	r3, r0, #29
 8000936:	d009      	beq.n	800094c <__aeabi_fadd+0x310>
 8000938:	230f      	movs	r3, #15
 800093a:	4003      	ands	r3, r0
 800093c:	2b04      	cmp	r3, #4
 800093e:	d005      	beq.n	800094c <__aeabi_fadd+0x310>
 8000940:	2302      	movs	r3, #2
 8000942:	1d0e      	adds	r6, r1, #4
 8000944:	e6c0      	b.n	80006c8 <__aeabi_fadd+0x8c>
 8000946:	2301      	movs	r3, #1
 8000948:	08cf      	lsrs	r7, r1, #3
 800094a:	e6c1      	b.n	80006d0 <__aeabi_fadd+0x94>
 800094c:	2302      	movs	r3, #2
 800094e:	08cf      	lsrs	r7, r1, #3
 8000950:	e6be      	b.n	80006d0 <__aeabi_fadd+0x94>
 8000952:	2520      	movs	r5, #32
 8000954:	0030      	movs	r0, r6
 8000956:	40d8      	lsrs	r0, r3
 8000958:	1aeb      	subs	r3, r5, r3
 800095a:	409e      	lsls	r6, r3
 800095c:	0033      	movs	r3, r6
 800095e:	1e5d      	subs	r5, r3, #1
 8000960:	41ab      	sbcs	r3, r5
 8000962:	4303      	orrs	r3, r0
 8000964:	0015      	movs	r5, r2
 8000966:	185e      	adds	r6, r3, r1
 8000968:	e7a0      	b.n	80008ac <__aeabi_fadd+0x270>
 800096a:	2900      	cmp	r1, #0
 800096c:	d100      	bne.n	8000970 <__aeabi_fadd+0x334>
 800096e:	e765      	b.n	800083c <__aeabi_fadd+0x200>
 8000970:	464c      	mov	r4, r9
 8000972:	4667      	mov	r7, ip
 8000974:	e6ac      	b.n	80006d0 <__aeabi_fadd+0x94>
 8000976:	1b8f      	subs	r7, r1, r6
 8000978:	017b      	lsls	r3, r7, #5
 800097a:	d52e      	bpl.n	80009da <__aeabi_fadd+0x39e>
 800097c:	01bf      	lsls	r7, r7, #6
 800097e:	09bf      	lsrs	r7, r7, #6
 8000980:	0038      	movs	r0, r7
 8000982:	f000 fe49 	bl	8001618 <__clzsi2>
 8000986:	003b      	movs	r3, r7
 8000988:	3805      	subs	r0, #5
 800098a:	4083      	lsls	r3, r0
 800098c:	464c      	mov	r4, r9
 800098e:	3501      	adds	r5, #1
 8000990:	e710      	b.n	80007b4 <__aeabi_fadd+0x178>
 8000992:	2e00      	cmp	r6, #0
 8000994:	d100      	bne.n	8000998 <__aeabi_fadd+0x35c>
 8000996:	e740      	b.n	800081a <__aeabi_fadd+0x1de>
 8000998:	2900      	cmp	r1, #0
 800099a:	d100      	bne.n	800099e <__aeabi_fadd+0x362>
 800099c:	e741      	b.n	8000822 <__aeabi_fadd+0x1e6>
 800099e:	2380      	movs	r3, #128	@ 0x80
 80009a0:	03db      	lsls	r3, r3, #15
 80009a2:	429f      	cmp	r7, r3
 80009a4:	d200      	bcs.n	80009a8 <__aeabi_fadd+0x36c>
 80009a6:	e73c      	b.n	8000822 <__aeabi_fadd+0x1e6>
 80009a8:	459c      	cmp	ip, r3
 80009aa:	d300      	bcc.n	80009ae <__aeabi_fadd+0x372>
 80009ac:	e739      	b.n	8000822 <__aeabi_fadd+0x1e6>
 80009ae:	4667      	mov	r7, ip
 80009b0:	e737      	b.n	8000822 <__aeabi_fadd+0x1e6>
 80009b2:	2900      	cmp	r1, #0
 80009b4:	d100      	bne.n	80009b8 <__aeabi_fadd+0x37c>
 80009b6:	e734      	b.n	8000822 <__aeabi_fadd+0x1e6>
 80009b8:	2380      	movs	r3, #128	@ 0x80
 80009ba:	03db      	lsls	r3, r3, #15
 80009bc:	429f      	cmp	r7, r3
 80009be:	d200      	bcs.n	80009c2 <__aeabi_fadd+0x386>
 80009c0:	e72f      	b.n	8000822 <__aeabi_fadd+0x1e6>
 80009c2:	459c      	cmp	ip, r3
 80009c4:	d300      	bcc.n	80009c8 <__aeabi_fadd+0x38c>
 80009c6:	e72c      	b.n	8000822 <__aeabi_fadd+0x1e6>
 80009c8:	464c      	mov	r4, r9
 80009ca:	4667      	mov	r7, ip
 80009cc:	e729      	b.n	8000822 <__aeabi_fadd+0x1e6>
 80009ce:	2900      	cmp	r1, #0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_fadd+0x398>
 80009d2:	e734      	b.n	800083e <__aeabi_fadd+0x202>
 80009d4:	2300      	movs	r3, #0
 80009d6:	08cf      	lsrs	r7, r1, #3
 80009d8:	e67a      	b.n	80006d0 <__aeabi_fadd+0x94>
 80009da:	464c      	mov	r4, r9
 80009dc:	2301      	movs	r3, #1
 80009de:	08ff      	lsrs	r7, r7, #3
 80009e0:	e676      	b.n	80006d0 <__aeabi_fadd+0x94>
 80009e2:	2f00      	cmp	r7, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x3ac>
 80009e6:	e729      	b.n	800083c <__aeabi_fadd+0x200>
 80009e8:	08ff      	lsrs	r7, r7, #3
 80009ea:	e671      	b.n	80006d0 <__aeabi_fadd+0x94>
 80009ec:	fbffffff 	.word	0xfbffffff
 80009f0:	7dffffff 	.word	0x7dffffff
 80009f4:	2280      	movs	r2, #128	@ 0x80
 80009f6:	2400      	movs	r4, #0
 80009f8:	20ff      	movs	r0, #255	@ 0xff
 80009fa:	03d2      	lsls	r2, r2, #15
 80009fc:	e69d      	b.n	800073a <__aeabi_fadd+0xfe>
 80009fe:	2300      	movs	r3, #0
 8000a00:	e666      	b.n	80006d0 <__aeabi_fadd+0x94>
 8000a02:	2300      	movs	r3, #0
 8000a04:	08d7      	lsrs	r7, r2, #3
 8000a06:	e663      	b.n	80006d0 <__aeabi_fadd+0x94>
 8000a08:	2001      	movs	r0, #1
 8000a0a:	0172      	lsls	r2, r6, #5
 8000a0c:	d500      	bpl.n	8000a10 <__aeabi_fadd+0x3d4>
 8000a0e:	e6e7      	b.n	80007e0 <__aeabi_fadd+0x1a4>
 8000a10:	0031      	movs	r1, r6
 8000a12:	2300      	movs	r3, #0
 8000a14:	08cf      	lsrs	r7, r1, #3
 8000a16:	e65b      	b.n	80006d0 <__aeabi_fadd+0x94>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	08c7      	lsrs	r7, r0, #3
 8000a1c:	e658      	b.n	80006d0 <__aeabi_fadd+0x94>
 8000a1e:	46c0      	nop			@ (mov r8, r8)

08000a20 <__aeabi_fdiv>:
 8000a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a22:	4646      	mov	r6, r8
 8000a24:	464f      	mov	r7, r9
 8000a26:	46d6      	mov	lr, sl
 8000a28:	0245      	lsls	r5, r0, #9
 8000a2a:	b5c0      	push	{r6, r7, lr}
 8000a2c:	0fc3      	lsrs	r3, r0, #31
 8000a2e:	0047      	lsls	r7, r0, #1
 8000a30:	4698      	mov	r8, r3
 8000a32:	1c0e      	adds	r6, r1, #0
 8000a34:	0a6d      	lsrs	r5, r5, #9
 8000a36:	0e3f      	lsrs	r7, r7, #24
 8000a38:	d05b      	beq.n	8000af2 <__aeabi_fdiv+0xd2>
 8000a3a:	2fff      	cmp	r7, #255	@ 0xff
 8000a3c:	d021      	beq.n	8000a82 <__aeabi_fdiv+0x62>
 8000a3e:	2380      	movs	r3, #128	@ 0x80
 8000a40:	00ed      	lsls	r5, r5, #3
 8000a42:	04db      	lsls	r3, r3, #19
 8000a44:	431d      	orrs	r5, r3
 8000a46:	2300      	movs	r3, #0
 8000a48:	4699      	mov	r9, r3
 8000a4a:	469a      	mov	sl, r3
 8000a4c:	3f7f      	subs	r7, #127	@ 0x7f
 8000a4e:	0274      	lsls	r4, r6, #9
 8000a50:	0073      	lsls	r3, r6, #1
 8000a52:	0a64      	lsrs	r4, r4, #9
 8000a54:	0e1b      	lsrs	r3, r3, #24
 8000a56:	0ff6      	lsrs	r6, r6, #31
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d020      	beq.n	8000a9e <__aeabi_fdiv+0x7e>
 8000a5c:	2bff      	cmp	r3, #255	@ 0xff
 8000a5e:	d043      	beq.n	8000ae8 <__aeabi_fdiv+0xc8>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	2000      	movs	r0, #0
 8000a64:	00e4      	lsls	r4, r4, #3
 8000a66:	04d2      	lsls	r2, r2, #19
 8000a68:	4314      	orrs	r4, r2
 8000a6a:	3b7f      	subs	r3, #127	@ 0x7f
 8000a6c:	4642      	mov	r2, r8
 8000a6e:	1aff      	subs	r7, r7, r3
 8000a70:	464b      	mov	r3, r9
 8000a72:	4072      	eors	r2, r6
 8000a74:	2b0f      	cmp	r3, #15
 8000a76:	d900      	bls.n	8000a7a <__aeabi_fdiv+0x5a>
 8000a78:	e09d      	b.n	8000bb6 <__aeabi_fdiv+0x196>
 8000a7a:	4971      	ldr	r1, [pc, #452]	@ (8000c40 <__aeabi_fdiv+0x220>)
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	58cb      	ldr	r3, [r1, r3]
 8000a80:	469f      	mov	pc, r3
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d15a      	bne.n	8000b3c <__aeabi_fdiv+0x11c>
 8000a86:	2308      	movs	r3, #8
 8000a88:	4699      	mov	r9, r3
 8000a8a:	3b06      	subs	r3, #6
 8000a8c:	0274      	lsls	r4, r6, #9
 8000a8e:	469a      	mov	sl, r3
 8000a90:	0073      	lsls	r3, r6, #1
 8000a92:	27ff      	movs	r7, #255	@ 0xff
 8000a94:	0a64      	lsrs	r4, r4, #9
 8000a96:	0e1b      	lsrs	r3, r3, #24
 8000a98:	0ff6      	lsrs	r6, r6, #31
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1de      	bne.n	8000a5c <__aeabi_fdiv+0x3c>
 8000a9e:	2c00      	cmp	r4, #0
 8000aa0:	d13b      	bne.n	8000b1a <__aeabi_fdiv+0xfa>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	4649      	mov	r1, r9
 8000aa8:	4072      	eors	r2, r6
 8000aaa:	4319      	orrs	r1, r3
 8000aac:	290e      	cmp	r1, #14
 8000aae:	d818      	bhi.n	8000ae2 <__aeabi_fdiv+0xc2>
 8000ab0:	4864      	ldr	r0, [pc, #400]	@ (8000c44 <__aeabi_fdiv+0x224>)
 8000ab2:	0089      	lsls	r1, r1, #2
 8000ab4:	5841      	ldr	r1, [r0, r1]
 8000ab6:	468f      	mov	pc, r1
 8000ab8:	4653      	mov	r3, sl
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_fdiv+0xa0>
 8000abe:	e0b8      	b.n	8000c32 <__aeabi_fdiv+0x212>
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d06e      	beq.n	8000ba2 <__aeabi_fdiv+0x182>
 8000ac4:	4642      	mov	r2, r8
 8000ac6:	002c      	movs	r4, r5
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d140      	bne.n	8000b4e <__aeabi_fdiv+0x12e>
 8000acc:	2000      	movs	r0, #0
 8000ace:	2400      	movs	r4, #0
 8000ad0:	05c0      	lsls	r0, r0, #23
 8000ad2:	4320      	orrs	r0, r4
 8000ad4:	07d2      	lsls	r2, r2, #31
 8000ad6:	4310      	orrs	r0, r2
 8000ad8:	bce0      	pop	{r5, r6, r7}
 8000ada:	46ba      	mov	sl, r7
 8000adc:	46b1      	mov	r9, r6
 8000ade:	46a8      	mov	r8, r5
 8000ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae2:	20ff      	movs	r0, #255	@ 0xff
 8000ae4:	2400      	movs	r4, #0
 8000ae6:	e7f3      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000ae8:	2c00      	cmp	r4, #0
 8000aea:	d120      	bne.n	8000b2e <__aeabi_fdiv+0x10e>
 8000aec:	2302      	movs	r3, #2
 8000aee:	3fff      	subs	r7, #255	@ 0xff
 8000af0:	e7d8      	b.n	8000aa4 <__aeabi_fdiv+0x84>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	d105      	bne.n	8000b02 <__aeabi_fdiv+0xe2>
 8000af6:	2304      	movs	r3, #4
 8000af8:	4699      	mov	r9, r3
 8000afa:	3b03      	subs	r3, #3
 8000afc:	2700      	movs	r7, #0
 8000afe:	469a      	mov	sl, r3
 8000b00:	e7a5      	b.n	8000a4e <__aeabi_fdiv+0x2e>
 8000b02:	0028      	movs	r0, r5
 8000b04:	f000 fd88 	bl	8001618 <__clzsi2>
 8000b08:	2776      	movs	r7, #118	@ 0x76
 8000b0a:	1f43      	subs	r3, r0, #5
 8000b0c:	409d      	lsls	r5, r3
 8000b0e:	2300      	movs	r3, #0
 8000b10:	427f      	negs	r7, r7
 8000b12:	4699      	mov	r9, r3
 8000b14:	469a      	mov	sl, r3
 8000b16:	1a3f      	subs	r7, r7, r0
 8000b18:	e799      	b.n	8000a4e <__aeabi_fdiv+0x2e>
 8000b1a:	0020      	movs	r0, r4
 8000b1c:	f000 fd7c 	bl	8001618 <__clzsi2>
 8000b20:	1f43      	subs	r3, r0, #5
 8000b22:	409c      	lsls	r4, r3
 8000b24:	2376      	movs	r3, #118	@ 0x76
 8000b26:	425b      	negs	r3, r3
 8000b28:	1a1b      	subs	r3, r3, r0
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	e79e      	b.n	8000a6c <__aeabi_fdiv+0x4c>
 8000b2e:	2303      	movs	r3, #3
 8000b30:	464a      	mov	r2, r9
 8000b32:	431a      	orrs	r2, r3
 8000b34:	4691      	mov	r9, r2
 8000b36:	2003      	movs	r0, #3
 8000b38:	33fc      	adds	r3, #252	@ 0xfc
 8000b3a:	e797      	b.n	8000a6c <__aeabi_fdiv+0x4c>
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	4699      	mov	r9, r3
 8000b40:	3b09      	subs	r3, #9
 8000b42:	27ff      	movs	r7, #255	@ 0xff
 8000b44:	469a      	mov	sl, r3
 8000b46:	e782      	b.n	8000a4e <__aeabi_fdiv+0x2e>
 8000b48:	2803      	cmp	r0, #3
 8000b4a:	d02c      	beq.n	8000ba6 <__aeabi_fdiv+0x186>
 8000b4c:	0032      	movs	r2, r6
 8000b4e:	0038      	movs	r0, r7
 8000b50:	307f      	adds	r0, #127	@ 0x7f
 8000b52:	2800      	cmp	r0, #0
 8000b54:	dd47      	ble.n	8000be6 <__aeabi_fdiv+0x1c6>
 8000b56:	0763      	lsls	r3, r4, #29
 8000b58:	d004      	beq.n	8000b64 <__aeabi_fdiv+0x144>
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	4023      	ands	r3, r4
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d000      	beq.n	8000b64 <__aeabi_fdiv+0x144>
 8000b62:	3404      	adds	r4, #4
 8000b64:	0123      	lsls	r3, r4, #4
 8000b66:	d503      	bpl.n	8000b70 <__aeabi_fdiv+0x150>
 8000b68:	0038      	movs	r0, r7
 8000b6a:	4b37      	ldr	r3, [pc, #220]	@ (8000c48 <__aeabi_fdiv+0x228>)
 8000b6c:	3080      	adds	r0, #128	@ 0x80
 8000b6e:	401c      	ands	r4, r3
 8000b70:	28fe      	cmp	r0, #254	@ 0xfe
 8000b72:	dcb6      	bgt.n	8000ae2 <__aeabi_fdiv+0xc2>
 8000b74:	01a4      	lsls	r4, r4, #6
 8000b76:	0a64      	lsrs	r4, r4, #9
 8000b78:	b2c0      	uxtb	r0, r0
 8000b7a:	e7a9      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000b7c:	2480      	movs	r4, #128	@ 0x80
 8000b7e:	2200      	movs	r2, #0
 8000b80:	20ff      	movs	r0, #255	@ 0xff
 8000b82:	03e4      	lsls	r4, r4, #15
 8000b84:	e7a4      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000b86:	2380      	movs	r3, #128	@ 0x80
 8000b88:	03db      	lsls	r3, r3, #15
 8000b8a:	421d      	tst	r5, r3
 8000b8c:	d001      	beq.n	8000b92 <__aeabi_fdiv+0x172>
 8000b8e:	421c      	tst	r4, r3
 8000b90:	d00b      	beq.n	8000baa <__aeabi_fdiv+0x18a>
 8000b92:	2480      	movs	r4, #128	@ 0x80
 8000b94:	03e4      	lsls	r4, r4, #15
 8000b96:	432c      	orrs	r4, r5
 8000b98:	0264      	lsls	r4, r4, #9
 8000b9a:	4642      	mov	r2, r8
 8000b9c:	20ff      	movs	r0, #255	@ 0xff
 8000b9e:	0a64      	lsrs	r4, r4, #9
 8000ba0:	e796      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000ba2:	4646      	mov	r6, r8
 8000ba4:	002c      	movs	r4, r5
 8000ba6:	2380      	movs	r3, #128	@ 0x80
 8000ba8:	03db      	lsls	r3, r3, #15
 8000baa:	431c      	orrs	r4, r3
 8000bac:	0264      	lsls	r4, r4, #9
 8000bae:	0032      	movs	r2, r6
 8000bb0:	20ff      	movs	r0, #255	@ 0xff
 8000bb2:	0a64      	lsrs	r4, r4, #9
 8000bb4:	e78c      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000bb6:	016d      	lsls	r5, r5, #5
 8000bb8:	0160      	lsls	r0, r4, #5
 8000bba:	4285      	cmp	r5, r0
 8000bbc:	d22d      	bcs.n	8000c1a <__aeabi_fdiv+0x1fa>
 8000bbe:	231b      	movs	r3, #27
 8000bc0:	2400      	movs	r4, #0
 8000bc2:	3f01      	subs	r7, #1
 8000bc4:	2601      	movs	r6, #1
 8000bc6:	0029      	movs	r1, r5
 8000bc8:	0064      	lsls	r4, r4, #1
 8000bca:	006d      	lsls	r5, r5, #1
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	db01      	blt.n	8000bd4 <__aeabi_fdiv+0x1b4>
 8000bd0:	4285      	cmp	r5, r0
 8000bd2:	d301      	bcc.n	8000bd8 <__aeabi_fdiv+0x1b8>
 8000bd4:	1a2d      	subs	r5, r5, r0
 8000bd6:	4334      	orrs	r4, r6
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1f3      	bne.n	8000bc6 <__aeabi_fdiv+0x1a6>
 8000bde:	1e6b      	subs	r3, r5, #1
 8000be0:	419d      	sbcs	r5, r3
 8000be2:	432c      	orrs	r4, r5
 8000be4:	e7b3      	b.n	8000b4e <__aeabi_fdiv+0x12e>
 8000be6:	2301      	movs	r3, #1
 8000be8:	1a1b      	subs	r3, r3, r0
 8000bea:	2b1b      	cmp	r3, #27
 8000bec:	dd00      	ble.n	8000bf0 <__aeabi_fdiv+0x1d0>
 8000bee:	e76d      	b.n	8000acc <__aeabi_fdiv+0xac>
 8000bf0:	0021      	movs	r1, r4
 8000bf2:	379e      	adds	r7, #158	@ 0x9e
 8000bf4:	40d9      	lsrs	r1, r3
 8000bf6:	40bc      	lsls	r4, r7
 8000bf8:	000b      	movs	r3, r1
 8000bfa:	1e61      	subs	r1, r4, #1
 8000bfc:	418c      	sbcs	r4, r1
 8000bfe:	4323      	orrs	r3, r4
 8000c00:	0759      	lsls	r1, r3, #29
 8000c02:	d004      	beq.n	8000c0e <__aeabi_fdiv+0x1ee>
 8000c04:	210f      	movs	r1, #15
 8000c06:	4019      	ands	r1, r3
 8000c08:	2904      	cmp	r1, #4
 8000c0a:	d000      	beq.n	8000c0e <__aeabi_fdiv+0x1ee>
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	0159      	lsls	r1, r3, #5
 8000c10:	d413      	bmi.n	8000c3a <__aeabi_fdiv+0x21a>
 8000c12:	019b      	lsls	r3, r3, #6
 8000c14:	2000      	movs	r0, #0
 8000c16:	0a5c      	lsrs	r4, r3, #9
 8000c18:	e75a      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000c1a:	231a      	movs	r3, #26
 8000c1c:	2401      	movs	r4, #1
 8000c1e:	1a2d      	subs	r5, r5, r0
 8000c20:	e7d0      	b.n	8000bc4 <__aeabi_fdiv+0x1a4>
 8000c22:	1e98      	subs	r0, r3, #2
 8000c24:	4243      	negs	r3, r0
 8000c26:	4158      	adcs	r0, r3
 8000c28:	4240      	negs	r0, r0
 8000c2a:	0032      	movs	r2, r6
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	b2c0      	uxtb	r0, r0
 8000c30:	e74e      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000c32:	4642      	mov	r2, r8
 8000c34:	20ff      	movs	r0, #255	@ 0xff
 8000c36:	2400      	movs	r4, #0
 8000c38:	e74a      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	e747      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000c40:	08006a18 	.word	0x08006a18
 8000c44:	08006a58 	.word	0x08006a58
 8000c48:	f7ffffff 	.word	0xf7ffffff

08000c4c <__eqsf2>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	0042      	lsls	r2, r0, #1
 8000c50:	024e      	lsls	r6, r1, #9
 8000c52:	004c      	lsls	r4, r1, #1
 8000c54:	0245      	lsls	r5, r0, #9
 8000c56:	0a6d      	lsrs	r5, r5, #9
 8000c58:	0e12      	lsrs	r2, r2, #24
 8000c5a:	0fc3      	lsrs	r3, r0, #31
 8000c5c:	0a76      	lsrs	r6, r6, #9
 8000c5e:	0e24      	lsrs	r4, r4, #24
 8000c60:	0fc9      	lsrs	r1, r1, #31
 8000c62:	2aff      	cmp	r2, #255	@ 0xff
 8000c64:	d010      	beq.n	8000c88 <__eqsf2+0x3c>
 8000c66:	2cff      	cmp	r4, #255	@ 0xff
 8000c68:	d00c      	beq.n	8000c84 <__eqsf2+0x38>
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	42a2      	cmp	r2, r4
 8000c6e:	d10a      	bne.n	8000c86 <__eqsf2+0x3a>
 8000c70:	42b5      	cmp	r5, r6
 8000c72:	d108      	bne.n	8000c86 <__eqsf2+0x3a>
 8000c74:	428b      	cmp	r3, r1
 8000c76:	d00f      	beq.n	8000c98 <__eqsf2+0x4c>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d104      	bne.n	8000c86 <__eqsf2+0x3a>
 8000c7c:	0028      	movs	r0, r5
 8000c7e:	1e43      	subs	r3, r0, #1
 8000c80:	4198      	sbcs	r0, r3
 8000c82:	e000      	b.n	8000c86 <__eqsf2+0x3a>
 8000c84:	2001      	movs	r0, #1
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	2001      	movs	r0, #1
 8000c8a:	2cff      	cmp	r4, #255	@ 0xff
 8000c8c:	d1fb      	bne.n	8000c86 <__eqsf2+0x3a>
 8000c8e:	4335      	orrs	r5, r6
 8000c90:	d1f9      	bne.n	8000c86 <__eqsf2+0x3a>
 8000c92:	404b      	eors	r3, r1
 8000c94:	0018      	movs	r0, r3
 8000c96:	e7f6      	b.n	8000c86 <__eqsf2+0x3a>
 8000c98:	2000      	movs	r0, #0
 8000c9a:	e7f4      	b.n	8000c86 <__eqsf2+0x3a>

08000c9c <__gesf2>:
 8000c9c:	b530      	push	{r4, r5, lr}
 8000c9e:	0042      	lsls	r2, r0, #1
 8000ca0:	0244      	lsls	r4, r0, #9
 8000ca2:	024d      	lsls	r5, r1, #9
 8000ca4:	0fc3      	lsrs	r3, r0, #31
 8000ca6:	0048      	lsls	r0, r1, #1
 8000ca8:	0a64      	lsrs	r4, r4, #9
 8000caa:	0e12      	lsrs	r2, r2, #24
 8000cac:	0a6d      	lsrs	r5, r5, #9
 8000cae:	0e00      	lsrs	r0, r0, #24
 8000cb0:	0fc9      	lsrs	r1, r1, #31
 8000cb2:	2aff      	cmp	r2, #255	@ 0xff
 8000cb4:	d018      	beq.n	8000ce8 <__gesf2+0x4c>
 8000cb6:	28ff      	cmp	r0, #255	@ 0xff
 8000cb8:	d00a      	beq.n	8000cd0 <__gesf2+0x34>
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	d11e      	bne.n	8000cfc <__gesf2+0x60>
 8000cbe:	2800      	cmp	r0, #0
 8000cc0:	d10a      	bne.n	8000cd8 <__gesf2+0x3c>
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d029      	beq.n	8000d1a <__gesf2+0x7e>
 8000cc6:	2c00      	cmp	r4, #0
 8000cc8:	d12d      	bne.n	8000d26 <__gesf2+0x8a>
 8000cca:	0048      	lsls	r0, r1, #1
 8000ccc:	3801      	subs	r0, #1
 8000cce:	bd30      	pop	{r4, r5, pc}
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	d125      	bne.n	8000d20 <__gesf2+0x84>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	d101      	bne.n	8000cdc <__gesf2+0x40>
 8000cd8:	2c00      	cmp	r4, #0
 8000cda:	d0f6      	beq.n	8000cca <__gesf2+0x2e>
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d019      	beq.n	8000d14 <__gesf2+0x78>
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	4318      	orrs	r0, r3
 8000ce6:	e7f2      	b.n	8000cce <__gesf2+0x32>
 8000ce8:	2c00      	cmp	r4, #0
 8000cea:	d119      	bne.n	8000d20 <__gesf2+0x84>
 8000cec:	28ff      	cmp	r0, #255	@ 0xff
 8000cee:	d1f7      	bne.n	8000ce0 <__gesf2+0x44>
 8000cf0:	2d00      	cmp	r5, #0
 8000cf2:	d115      	bne.n	8000d20 <__gesf2+0x84>
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d1f2      	bne.n	8000ce0 <__gesf2+0x44>
 8000cfa:	e7e8      	b.n	8000cce <__gesf2+0x32>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d0ef      	beq.n	8000ce0 <__gesf2+0x44>
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d1ed      	bne.n	8000ce0 <__gesf2+0x44>
 8000d04:	4282      	cmp	r2, r0
 8000d06:	dceb      	bgt.n	8000ce0 <__gesf2+0x44>
 8000d08:	db04      	blt.n	8000d14 <__gesf2+0x78>
 8000d0a:	42ac      	cmp	r4, r5
 8000d0c:	d8e8      	bhi.n	8000ce0 <__gesf2+0x44>
 8000d0e:	2000      	movs	r0, #0
 8000d10:	42ac      	cmp	r4, r5
 8000d12:	d2dc      	bcs.n	8000cce <__gesf2+0x32>
 8000d14:	0058      	lsls	r0, r3, #1
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7d9      	b.n	8000cce <__gesf2+0x32>
 8000d1a:	2c00      	cmp	r4, #0
 8000d1c:	d0d7      	beq.n	8000cce <__gesf2+0x32>
 8000d1e:	e7df      	b.n	8000ce0 <__gesf2+0x44>
 8000d20:	2002      	movs	r0, #2
 8000d22:	4240      	negs	r0, r0
 8000d24:	e7d3      	b.n	8000cce <__gesf2+0x32>
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d1da      	bne.n	8000ce0 <__gesf2+0x44>
 8000d2a:	e7ee      	b.n	8000d0a <__gesf2+0x6e>

08000d2c <__lesf2>:
 8000d2c:	b530      	push	{r4, r5, lr}
 8000d2e:	0042      	lsls	r2, r0, #1
 8000d30:	0244      	lsls	r4, r0, #9
 8000d32:	024d      	lsls	r5, r1, #9
 8000d34:	0fc3      	lsrs	r3, r0, #31
 8000d36:	0048      	lsls	r0, r1, #1
 8000d38:	0a64      	lsrs	r4, r4, #9
 8000d3a:	0e12      	lsrs	r2, r2, #24
 8000d3c:	0a6d      	lsrs	r5, r5, #9
 8000d3e:	0e00      	lsrs	r0, r0, #24
 8000d40:	0fc9      	lsrs	r1, r1, #31
 8000d42:	2aff      	cmp	r2, #255	@ 0xff
 8000d44:	d017      	beq.n	8000d76 <__lesf2+0x4a>
 8000d46:	28ff      	cmp	r0, #255	@ 0xff
 8000d48:	d00a      	beq.n	8000d60 <__lesf2+0x34>
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d11b      	bne.n	8000d86 <__lesf2+0x5a>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	d10a      	bne.n	8000d68 <__lesf2+0x3c>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d01d      	beq.n	8000d92 <__lesf2+0x66>
 8000d56:	2c00      	cmp	r4, #0
 8000d58:	d12d      	bne.n	8000db6 <__lesf2+0x8a>
 8000d5a:	0048      	lsls	r0, r1, #1
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	e011      	b.n	8000d84 <__lesf2+0x58>
 8000d60:	2d00      	cmp	r5, #0
 8000d62:	d10e      	bne.n	8000d82 <__lesf2+0x56>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	d101      	bne.n	8000d6c <__lesf2+0x40>
 8000d68:	2c00      	cmp	r4, #0
 8000d6a:	d0f6      	beq.n	8000d5a <__lesf2+0x2e>
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d10c      	bne.n	8000d8a <__lesf2+0x5e>
 8000d70:	0058      	lsls	r0, r3, #1
 8000d72:	3801      	subs	r0, #1
 8000d74:	e006      	b.n	8000d84 <__lesf2+0x58>
 8000d76:	2c00      	cmp	r4, #0
 8000d78:	d103      	bne.n	8000d82 <__lesf2+0x56>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d105      	bne.n	8000d8a <__lesf2+0x5e>
 8000d7e:	2d00      	cmp	r5, #0
 8000d80:	d015      	beq.n	8000dae <__lesf2+0x82>
 8000d82:	2002      	movs	r0, #2
 8000d84:	bd30      	pop	{r4, r5, pc}
 8000d86:	2800      	cmp	r0, #0
 8000d88:	d106      	bne.n	8000d98 <__lesf2+0x6c>
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	425b      	negs	r3, r3
 8000d8e:	4318      	orrs	r0, r3
 8000d90:	e7f8      	b.n	8000d84 <__lesf2+0x58>
 8000d92:	2c00      	cmp	r4, #0
 8000d94:	d0f6      	beq.n	8000d84 <__lesf2+0x58>
 8000d96:	e7f8      	b.n	8000d8a <__lesf2+0x5e>
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d1f6      	bne.n	8000d8a <__lesf2+0x5e>
 8000d9c:	4282      	cmp	r2, r0
 8000d9e:	dcf4      	bgt.n	8000d8a <__lesf2+0x5e>
 8000da0:	dbe6      	blt.n	8000d70 <__lesf2+0x44>
 8000da2:	42ac      	cmp	r4, r5
 8000da4:	d8f1      	bhi.n	8000d8a <__lesf2+0x5e>
 8000da6:	2000      	movs	r0, #0
 8000da8:	42ac      	cmp	r4, r5
 8000daa:	d2eb      	bcs.n	8000d84 <__lesf2+0x58>
 8000dac:	e7e0      	b.n	8000d70 <__lesf2+0x44>
 8000dae:	2000      	movs	r0, #0
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d1ea      	bne.n	8000d8a <__lesf2+0x5e>
 8000db4:	e7e6      	b.n	8000d84 <__lesf2+0x58>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d1e7      	bne.n	8000d8a <__lesf2+0x5e>
 8000dba:	e7f2      	b.n	8000da2 <__lesf2+0x76>

08000dbc <__aeabi_fmul>:
 8000dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dbe:	464f      	mov	r7, r9
 8000dc0:	4646      	mov	r6, r8
 8000dc2:	46d6      	mov	lr, sl
 8000dc4:	0044      	lsls	r4, r0, #1
 8000dc6:	b5c0      	push	{r6, r7, lr}
 8000dc8:	0246      	lsls	r6, r0, #9
 8000dca:	1c0f      	adds	r7, r1, #0
 8000dcc:	0a76      	lsrs	r6, r6, #9
 8000dce:	0e24      	lsrs	r4, r4, #24
 8000dd0:	0fc5      	lsrs	r5, r0, #31
 8000dd2:	2c00      	cmp	r4, #0
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_fmul+0x1c>
 8000dd6:	e0da      	b.n	8000f8e <__aeabi_fmul+0x1d2>
 8000dd8:	2cff      	cmp	r4, #255	@ 0xff
 8000dda:	d074      	beq.n	8000ec6 <__aeabi_fmul+0x10a>
 8000ddc:	2380      	movs	r3, #128	@ 0x80
 8000dde:	00f6      	lsls	r6, r6, #3
 8000de0:	04db      	lsls	r3, r3, #19
 8000de2:	431e      	orrs	r6, r3
 8000de4:	2300      	movs	r3, #0
 8000de6:	4699      	mov	r9, r3
 8000de8:	469a      	mov	sl, r3
 8000dea:	3c7f      	subs	r4, #127	@ 0x7f
 8000dec:	027b      	lsls	r3, r7, #9
 8000dee:	0a5b      	lsrs	r3, r3, #9
 8000df0:	4698      	mov	r8, r3
 8000df2:	007b      	lsls	r3, r7, #1
 8000df4:	0e1b      	lsrs	r3, r3, #24
 8000df6:	0fff      	lsrs	r7, r7, #31
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d074      	beq.n	8000ee6 <__aeabi_fmul+0x12a>
 8000dfc:	2bff      	cmp	r3, #255	@ 0xff
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_fmul+0x46>
 8000e00:	e08e      	b.n	8000f20 <__aeabi_fmul+0x164>
 8000e02:	4642      	mov	r2, r8
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	00d2      	lsls	r2, r2, #3
 8000e08:	04c9      	lsls	r1, r1, #19
 8000e0a:	4311      	orrs	r1, r2
 8000e0c:	3b7f      	subs	r3, #127	@ 0x7f
 8000e0e:	002a      	movs	r2, r5
 8000e10:	18e4      	adds	r4, r4, r3
 8000e12:	464b      	mov	r3, r9
 8000e14:	407a      	eors	r2, r7
 8000e16:	4688      	mov	r8, r1
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	2b0a      	cmp	r3, #10
 8000e1c:	dc75      	bgt.n	8000f0a <__aeabi_fmul+0x14e>
 8000e1e:	464b      	mov	r3, r9
 8000e20:	2000      	movs	r0, #0
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	dd0f      	ble.n	8000e46 <__aeabi_fmul+0x8a>
 8000e26:	4649      	mov	r1, r9
 8000e28:	2301      	movs	r3, #1
 8000e2a:	408b      	lsls	r3, r1
 8000e2c:	21a6      	movs	r1, #166	@ 0xa6
 8000e2e:	00c9      	lsls	r1, r1, #3
 8000e30:	420b      	tst	r3, r1
 8000e32:	d169      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000e34:	2190      	movs	r1, #144	@ 0x90
 8000e36:	0089      	lsls	r1, r1, #2
 8000e38:	420b      	tst	r3, r1
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_fmul+0x82>
 8000e3c:	e100      	b.n	8001040 <__aeabi_fmul+0x284>
 8000e3e:	2188      	movs	r1, #136	@ 0x88
 8000e40:	4219      	tst	r1, r3
 8000e42:	d000      	beq.n	8000e46 <__aeabi_fmul+0x8a>
 8000e44:	e0f5      	b.n	8001032 <__aeabi_fmul+0x276>
 8000e46:	4641      	mov	r1, r8
 8000e48:	0409      	lsls	r1, r1, #16
 8000e4a:	0c09      	lsrs	r1, r1, #16
 8000e4c:	4643      	mov	r3, r8
 8000e4e:	0008      	movs	r0, r1
 8000e50:	0c35      	lsrs	r5, r6, #16
 8000e52:	0436      	lsls	r6, r6, #16
 8000e54:	0c1b      	lsrs	r3, r3, #16
 8000e56:	0c36      	lsrs	r6, r6, #16
 8000e58:	4370      	muls	r0, r6
 8000e5a:	4369      	muls	r1, r5
 8000e5c:	435e      	muls	r6, r3
 8000e5e:	435d      	muls	r5, r3
 8000e60:	1876      	adds	r6, r6, r1
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	199b      	adds	r3, r3, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d903      	bls.n	8000e72 <__aeabi_fmul+0xb6>
 8000e6a:	2180      	movs	r1, #128	@ 0x80
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	468c      	mov	ip, r1
 8000e70:	4465      	add	r5, ip
 8000e72:	0400      	lsls	r0, r0, #16
 8000e74:	0419      	lsls	r1, r3, #16
 8000e76:	0c00      	lsrs	r0, r0, #16
 8000e78:	1809      	adds	r1, r1, r0
 8000e7a:	018e      	lsls	r6, r1, #6
 8000e7c:	1e70      	subs	r0, r6, #1
 8000e7e:	4186      	sbcs	r6, r0
 8000e80:	0c1b      	lsrs	r3, r3, #16
 8000e82:	0e89      	lsrs	r1, r1, #26
 8000e84:	195b      	adds	r3, r3, r5
 8000e86:	430e      	orrs	r6, r1
 8000e88:	019b      	lsls	r3, r3, #6
 8000e8a:	431e      	orrs	r6, r3
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	d46c      	bmi.n	8000f6a <__aeabi_fmul+0x1ae>
 8000e90:	0023      	movs	r3, r4
 8000e92:	337f      	adds	r3, #127	@ 0x7f
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	dc00      	bgt.n	8000e9a <__aeabi_fmul+0xde>
 8000e98:	e0b1      	b.n	8000ffe <__aeabi_fmul+0x242>
 8000e9a:	0015      	movs	r5, r2
 8000e9c:	0771      	lsls	r1, r6, #29
 8000e9e:	d00b      	beq.n	8000eb8 <__aeabi_fmul+0xfc>
 8000ea0:	200f      	movs	r0, #15
 8000ea2:	0021      	movs	r1, r4
 8000ea4:	4030      	ands	r0, r6
 8000ea6:	2804      	cmp	r0, #4
 8000ea8:	d006      	beq.n	8000eb8 <__aeabi_fmul+0xfc>
 8000eaa:	3604      	adds	r6, #4
 8000eac:	0132      	lsls	r2, r6, #4
 8000eae:	d503      	bpl.n	8000eb8 <__aeabi_fmul+0xfc>
 8000eb0:	4b6e      	ldr	r3, [pc, #440]	@ (800106c <__aeabi_fmul+0x2b0>)
 8000eb2:	401e      	ands	r6, r3
 8000eb4:	000b      	movs	r3, r1
 8000eb6:	3380      	adds	r3, #128	@ 0x80
 8000eb8:	2bfe      	cmp	r3, #254	@ 0xfe
 8000eba:	dd00      	ble.n	8000ebe <__aeabi_fmul+0x102>
 8000ebc:	e0bd      	b.n	800103a <__aeabi_fmul+0x27e>
 8000ebe:	01b2      	lsls	r2, r6, #6
 8000ec0:	0a52      	lsrs	r2, r2, #9
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	e048      	b.n	8000f58 <__aeabi_fmul+0x19c>
 8000ec6:	2e00      	cmp	r6, #0
 8000ec8:	d000      	beq.n	8000ecc <__aeabi_fmul+0x110>
 8000eca:	e092      	b.n	8000ff2 <__aeabi_fmul+0x236>
 8000ecc:	2308      	movs	r3, #8
 8000ece:	4699      	mov	r9, r3
 8000ed0:	3b06      	subs	r3, #6
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	027b      	lsls	r3, r7, #9
 8000ed6:	0a5b      	lsrs	r3, r3, #9
 8000ed8:	4698      	mov	r8, r3
 8000eda:	007b      	lsls	r3, r7, #1
 8000edc:	24ff      	movs	r4, #255	@ 0xff
 8000ede:	0e1b      	lsrs	r3, r3, #24
 8000ee0:	0fff      	lsrs	r7, r7, #31
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d18a      	bne.n	8000dfc <__aeabi_fmul+0x40>
 8000ee6:	4642      	mov	r2, r8
 8000ee8:	2a00      	cmp	r2, #0
 8000eea:	d164      	bne.n	8000fb6 <__aeabi_fmul+0x1fa>
 8000eec:	4649      	mov	r1, r9
 8000eee:	3201      	adds	r2, #1
 8000ef0:	4311      	orrs	r1, r2
 8000ef2:	4689      	mov	r9, r1
 8000ef4:	290a      	cmp	r1, #10
 8000ef6:	dc08      	bgt.n	8000f0a <__aeabi_fmul+0x14e>
 8000ef8:	407d      	eors	r5, r7
 8000efa:	2001      	movs	r0, #1
 8000efc:	b2ea      	uxtb	r2, r5
 8000efe:	2902      	cmp	r1, #2
 8000f00:	dc91      	bgt.n	8000e26 <__aeabi_fmul+0x6a>
 8000f02:	0015      	movs	r5, r2
 8000f04:	2200      	movs	r2, #0
 8000f06:	e027      	b.n	8000f58 <__aeabi_fmul+0x19c>
 8000f08:	0015      	movs	r5, r2
 8000f0a:	4653      	mov	r3, sl
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fmul+0x156>
 8000f10:	e093      	b.n	800103a <__aeabi_fmul+0x27e>
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d01a      	beq.n	8000f4c <__aeabi_fmul+0x190>
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d12c      	bne.n	8000f74 <__aeabi_fmul+0x1b8>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	e01b      	b.n	8000f58 <__aeabi_fmul+0x19c>
 8000f20:	4643      	mov	r3, r8
 8000f22:	34ff      	adds	r4, #255	@ 0xff
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d055      	beq.n	8000fd4 <__aeabi_fmul+0x218>
 8000f28:	2103      	movs	r1, #3
 8000f2a:	464b      	mov	r3, r9
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	0019      	movs	r1, r3
 8000f30:	2b0a      	cmp	r3, #10
 8000f32:	dc00      	bgt.n	8000f36 <__aeabi_fmul+0x17a>
 8000f34:	e092      	b.n	800105c <__aeabi_fmul+0x2a0>
 8000f36:	2b0f      	cmp	r3, #15
 8000f38:	d000      	beq.n	8000f3c <__aeabi_fmul+0x180>
 8000f3a:	e08c      	b.n	8001056 <__aeabi_fmul+0x29a>
 8000f3c:	2280      	movs	r2, #128	@ 0x80
 8000f3e:	03d2      	lsls	r2, r2, #15
 8000f40:	4216      	tst	r6, r2
 8000f42:	d003      	beq.n	8000f4c <__aeabi_fmul+0x190>
 8000f44:	4643      	mov	r3, r8
 8000f46:	4213      	tst	r3, r2
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fmul+0x190>
 8000f4a:	e07d      	b.n	8001048 <__aeabi_fmul+0x28c>
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	03d2      	lsls	r2, r2, #15
 8000f50:	4332      	orrs	r2, r6
 8000f52:	0252      	lsls	r2, r2, #9
 8000f54:	0a52      	lsrs	r2, r2, #9
 8000f56:	23ff      	movs	r3, #255	@ 0xff
 8000f58:	05d8      	lsls	r0, r3, #23
 8000f5a:	07ed      	lsls	r5, r5, #31
 8000f5c:	4310      	orrs	r0, r2
 8000f5e:	4328      	orrs	r0, r5
 8000f60:	bce0      	pop	{r5, r6, r7}
 8000f62:	46ba      	mov	sl, r7
 8000f64:	46b1      	mov	r9, r6
 8000f66:	46a8      	mov	r8, r5
 8000f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	0015      	movs	r5, r2
 8000f6e:	0871      	lsrs	r1, r6, #1
 8000f70:	401e      	ands	r6, r3
 8000f72:	430e      	orrs	r6, r1
 8000f74:	0023      	movs	r3, r4
 8000f76:	3380      	adds	r3, #128	@ 0x80
 8000f78:	1c61      	adds	r1, r4, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	dd41      	ble.n	8001002 <__aeabi_fmul+0x246>
 8000f7e:	0772      	lsls	r2, r6, #29
 8000f80:	d094      	beq.n	8000eac <__aeabi_fmul+0xf0>
 8000f82:	220f      	movs	r2, #15
 8000f84:	4032      	ands	r2, r6
 8000f86:	2a04      	cmp	r2, #4
 8000f88:	d000      	beq.n	8000f8c <__aeabi_fmul+0x1d0>
 8000f8a:	e78e      	b.n	8000eaa <__aeabi_fmul+0xee>
 8000f8c:	e78e      	b.n	8000eac <__aeabi_fmul+0xf0>
 8000f8e:	2e00      	cmp	r6, #0
 8000f90:	d105      	bne.n	8000f9e <__aeabi_fmul+0x1e2>
 8000f92:	2304      	movs	r3, #4
 8000f94:	4699      	mov	r9, r3
 8000f96:	3b03      	subs	r3, #3
 8000f98:	2400      	movs	r4, #0
 8000f9a:	469a      	mov	sl, r3
 8000f9c:	e726      	b.n	8000dec <__aeabi_fmul+0x30>
 8000f9e:	0030      	movs	r0, r6
 8000fa0:	f000 fb3a 	bl	8001618 <__clzsi2>
 8000fa4:	2476      	movs	r4, #118	@ 0x76
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409e      	lsls	r6, r3
 8000faa:	2300      	movs	r3, #0
 8000fac:	4264      	negs	r4, r4
 8000fae:	4699      	mov	r9, r3
 8000fb0:	469a      	mov	sl, r3
 8000fb2:	1a24      	subs	r4, r4, r0
 8000fb4:	e71a      	b.n	8000dec <__aeabi_fmul+0x30>
 8000fb6:	4640      	mov	r0, r8
 8000fb8:	f000 fb2e 	bl	8001618 <__clzsi2>
 8000fbc:	464b      	mov	r3, r9
 8000fbe:	1a24      	subs	r4, r4, r0
 8000fc0:	3c76      	subs	r4, #118	@ 0x76
 8000fc2:	2b0a      	cmp	r3, #10
 8000fc4:	dca1      	bgt.n	8000f0a <__aeabi_fmul+0x14e>
 8000fc6:	4643      	mov	r3, r8
 8000fc8:	3805      	subs	r0, #5
 8000fca:	4083      	lsls	r3, r0
 8000fcc:	407d      	eors	r5, r7
 8000fce:	4698      	mov	r8, r3
 8000fd0:	b2ea      	uxtb	r2, r5
 8000fd2:	e724      	b.n	8000e1e <__aeabi_fmul+0x62>
 8000fd4:	464a      	mov	r2, r9
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	002a      	movs	r2, r5
 8000fdc:	407a      	eors	r2, r7
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	2b0a      	cmp	r3, #10
 8000fe2:	dc92      	bgt.n	8000f0a <__aeabi_fmul+0x14e>
 8000fe4:	4649      	mov	r1, r9
 8000fe6:	0015      	movs	r5, r2
 8000fe8:	2900      	cmp	r1, #0
 8000fea:	d026      	beq.n	800103a <__aeabi_fmul+0x27e>
 8000fec:	4699      	mov	r9, r3
 8000fee:	2002      	movs	r0, #2
 8000ff0:	e719      	b.n	8000e26 <__aeabi_fmul+0x6a>
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	4699      	mov	r9, r3
 8000ff6:	3b09      	subs	r3, #9
 8000ff8:	24ff      	movs	r4, #255	@ 0xff
 8000ffa:	469a      	mov	sl, r3
 8000ffc:	e6f6      	b.n	8000dec <__aeabi_fmul+0x30>
 8000ffe:	0015      	movs	r5, r2
 8001000:	0021      	movs	r1, r4
 8001002:	2201      	movs	r2, #1
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b1b      	cmp	r3, #27
 8001008:	dd00      	ble.n	800100c <__aeabi_fmul+0x250>
 800100a:	e786      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800100c:	319e      	adds	r1, #158	@ 0x9e
 800100e:	0032      	movs	r2, r6
 8001010:	408e      	lsls	r6, r1
 8001012:	40da      	lsrs	r2, r3
 8001014:	1e73      	subs	r3, r6, #1
 8001016:	419e      	sbcs	r6, r3
 8001018:	4332      	orrs	r2, r6
 800101a:	0753      	lsls	r3, r2, #29
 800101c:	d004      	beq.n	8001028 <__aeabi_fmul+0x26c>
 800101e:	230f      	movs	r3, #15
 8001020:	4013      	ands	r3, r2
 8001022:	2b04      	cmp	r3, #4
 8001024:	d000      	beq.n	8001028 <__aeabi_fmul+0x26c>
 8001026:	3204      	adds	r2, #4
 8001028:	0153      	lsls	r3, r2, #5
 800102a:	d510      	bpl.n	800104e <__aeabi_fmul+0x292>
 800102c:	2301      	movs	r3, #1
 800102e:	2200      	movs	r2, #0
 8001030:	e792      	b.n	8000f58 <__aeabi_fmul+0x19c>
 8001032:	003d      	movs	r5, r7
 8001034:	4646      	mov	r6, r8
 8001036:	4682      	mov	sl, r0
 8001038:	e767      	b.n	8000f0a <__aeabi_fmul+0x14e>
 800103a:	23ff      	movs	r3, #255	@ 0xff
 800103c:	2200      	movs	r2, #0
 800103e:	e78b      	b.n	8000f58 <__aeabi_fmul+0x19c>
 8001040:	2280      	movs	r2, #128	@ 0x80
 8001042:	2500      	movs	r5, #0
 8001044:	03d2      	lsls	r2, r2, #15
 8001046:	e786      	b.n	8000f56 <__aeabi_fmul+0x19a>
 8001048:	003d      	movs	r5, r7
 800104a:	431a      	orrs	r2, r3
 800104c:	e783      	b.n	8000f56 <__aeabi_fmul+0x19a>
 800104e:	0192      	lsls	r2, r2, #6
 8001050:	2300      	movs	r3, #0
 8001052:	0a52      	lsrs	r2, r2, #9
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0x19c>
 8001056:	003d      	movs	r5, r7
 8001058:	4646      	mov	r6, r8
 800105a:	e777      	b.n	8000f4c <__aeabi_fmul+0x190>
 800105c:	002a      	movs	r2, r5
 800105e:	2301      	movs	r3, #1
 8001060:	407a      	eors	r2, r7
 8001062:	408b      	lsls	r3, r1
 8001064:	2003      	movs	r0, #3
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	e6e9      	b.n	8000e3e <__aeabi_fmul+0x82>
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	f7ffffff 	.word	0xf7ffffff

08001070 <__aeabi_fsub>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	4647      	mov	r7, r8
 8001074:	46ce      	mov	lr, r9
 8001076:	0243      	lsls	r3, r0, #9
 8001078:	b580      	push	{r7, lr}
 800107a:	0a5f      	lsrs	r7, r3, #9
 800107c:	099b      	lsrs	r3, r3, #6
 800107e:	0045      	lsls	r5, r0, #1
 8001080:	004a      	lsls	r2, r1, #1
 8001082:	469c      	mov	ip, r3
 8001084:	024b      	lsls	r3, r1, #9
 8001086:	0fc4      	lsrs	r4, r0, #31
 8001088:	0fce      	lsrs	r6, r1, #31
 800108a:	0e2d      	lsrs	r5, r5, #24
 800108c:	0a58      	lsrs	r0, r3, #9
 800108e:	0e12      	lsrs	r2, r2, #24
 8001090:	0999      	lsrs	r1, r3, #6
 8001092:	2aff      	cmp	r2, #255	@ 0xff
 8001094:	d06b      	beq.n	800116e <__aeabi_fsub+0xfe>
 8001096:	2301      	movs	r3, #1
 8001098:	405e      	eors	r6, r3
 800109a:	1aab      	subs	r3, r5, r2
 800109c:	42b4      	cmp	r4, r6
 800109e:	d04b      	beq.n	8001138 <__aeabi_fsub+0xc8>
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	dc00      	bgt.n	80010a6 <__aeabi_fsub+0x36>
 80010a4:	e0ff      	b.n	80012a6 <__aeabi_fsub+0x236>
 80010a6:	2a00      	cmp	r2, #0
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x3c>
 80010aa:	e088      	b.n	80011be <__aeabi_fsub+0x14e>
 80010ac:	2dff      	cmp	r5, #255	@ 0xff
 80010ae:	d100      	bne.n	80010b2 <__aeabi_fsub+0x42>
 80010b0:	e0ef      	b.n	8001292 <__aeabi_fsub+0x222>
 80010b2:	2280      	movs	r2, #128	@ 0x80
 80010b4:	04d2      	lsls	r2, r2, #19
 80010b6:	4311      	orrs	r1, r2
 80010b8:	2001      	movs	r0, #1
 80010ba:	2b1b      	cmp	r3, #27
 80010bc:	dc08      	bgt.n	80010d0 <__aeabi_fsub+0x60>
 80010be:	0008      	movs	r0, r1
 80010c0:	2220      	movs	r2, #32
 80010c2:	40d8      	lsrs	r0, r3
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	4099      	lsls	r1, r3
 80010c8:	000b      	movs	r3, r1
 80010ca:	1e5a      	subs	r2, r3, #1
 80010cc:	4193      	sbcs	r3, r2
 80010ce:	4318      	orrs	r0, r3
 80010d0:	4663      	mov	r3, ip
 80010d2:	1a1b      	subs	r3, r3, r0
 80010d4:	469c      	mov	ip, r3
 80010d6:	4663      	mov	r3, ip
 80010d8:	015b      	lsls	r3, r3, #5
 80010da:	d400      	bmi.n	80010de <__aeabi_fsub+0x6e>
 80010dc:	e0cd      	b.n	800127a <__aeabi_fsub+0x20a>
 80010de:	4663      	mov	r3, ip
 80010e0:	019f      	lsls	r7, r3, #6
 80010e2:	09bf      	lsrs	r7, r7, #6
 80010e4:	0038      	movs	r0, r7
 80010e6:	f000 fa97 	bl	8001618 <__clzsi2>
 80010ea:	003b      	movs	r3, r7
 80010ec:	3805      	subs	r0, #5
 80010ee:	4083      	lsls	r3, r0
 80010f0:	4285      	cmp	r5, r0
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_fsub+0x86>
 80010f4:	e0a2      	b.n	800123c <__aeabi_fsub+0x1cc>
 80010f6:	4ab7      	ldr	r2, [pc, #732]	@ (80013d4 <__aeabi_fsub+0x364>)
 80010f8:	1a2d      	subs	r5, r5, r0
 80010fa:	401a      	ands	r2, r3
 80010fc:	4694      	mov	ip, r2
 80010fe:	075a      	lsls	r2, r3, #29
 8001100:	d100      	bne.n	8001104 <__aeabi_fsub+0x94>
 8001102:	e0c3      	b.n	800128c <__aeabi_fsub+0x21c>
 8001104:	220f      	movs	r2, #15
 8001106:	4013      	ands	r3, r2
 8001108:	2b04      	cmp	r3, #4
 800110a:	d100      	bne.n	800110e <__aeabi_fsub+0x9e>
 800110c:	e0be      	b.n	800128c <__aeabi_fsub+0x21c>
 800110e:	2304      	movs	r3, #4
 8001110:	4698      	mov	r8, r3
 8001112:	44c4      	add	ip, r8
 8001114:	4663      	mov	r3, ip
 8001116:	015b      	lsls	r3, r3, #5
 8001118:	d400      	bmi.n	800111c <__aeabi_fsub+0xac>
 800111a:	e0b7      	b.n	800128c <__aeabi_fsub+0x21c>
 800111c:	1c68      	adds	r0, r5, #1
 800111e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001120:	d000      	beq.n	8001124 <__aeabi_fsub+0xb4>
 8001122:	e0a5      	b.n	8001270 <__aeabi_fsub+0x200>
 8001124:	20ff      	movs	r0, #255	@ 0xff
 8001126:	2200      	movs	r2, #0
 8001128:	05c0      	lsls	r0, r0, #23
 800112a:	4310      	orrs	r0, r2
 800112c:	07e4      	lsls	r4, r4, #31
 800112e:	4320      	orrs	r0, r4
 8001130:	bcc0      	pop	{r6, r7}
 8001132:	46b9      	mov	r9, r7
 8001134:	46b0      	mov	r8, r6
 8001136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001138:	2b00      	cmp	r3, #0
 800113a:	dc00      	bgt.n	800113e <__aeabi_fsub+0xce>
 800113c:	e1eb      	b.n	8001516 <__aeabi_fsub+0x4a6>
 800113e:	2a00      	cmp	r2, #0
 8001140:	d046      	beq.n	80011d0 <__aeabi_fsub+0x160>
 8001142:	2dff      	cmp	r5, #255	@ 0xff
 8001144:	d100      	bne.n	8001148 <__aeabi_fsub+0xd8>
 8001146:	e0a4      	b.n	8001292 <__aeabi_fsub+0x222>
 8001148:	2280      	movs	r2, #128	@ 0x80
 800114a:	04d2      	lsls	r2, r2, #19
 800114c:	4311      	orrs	r1, r2
 800114e:	2b1b      	cmp	r3, #27
 8001150:	dc00      	bgt.n	8001154 <__aeabi_fsub+0xe4>
 8001152:	e0fb      	b.n	800134c <__aeabi_fsub+0x2dc>
 8001154:	2305      	movs	r3, #5
 8001156:	4698      	mov	r8, r3
 8001158:	002b      	movs	r3, r5
 800115a:	44c4      	add	ip, r8
 800115c:	4662      	mov	r2, ip
 800115e:	08d7      	lsrs	r7, r2, #3
 8001160:	2bff      	cmp	r3, #255	@ 0xff
 8001162:	d100      	bne.n	8001166 <__aeabi_fsub+0xf6>
 8001164:	e095      	b.n	8001292 <__aeabi_fsub+0x222>
 8001166:	027a      	lsls	r2, r7, #9
 8001168:	0a52      	lsrs	r2, r2, #9
 800116a:	b2d8      	uxtb	r0, r3
 800116c:	e7dc      	b.n	8001128 <__aeabi_fsub+0xb8>
 800116e:	002b      	movs	r3, r5
 8001170:	3bff      	subs	r3, #255	@ 0xff
 8001172:	4699      	mov	r9, r3
 8001174:	2900      	cmp	r1, #0
 8001176:	d118      	bne.n	80011aa <__aeabi_fsub+0x13a>
 8001178:	2301      	movs	r3, #1
 800117a:	405e      	eors	r6, r3
 800117c:	42b4      	cmp	r4, r6
 800117e:	d100      	bne.n	8001182 <__aeabi_fsub+0x112>
 8001180:	e0ca      	b.n	8001318 <__aeabi_fsub+0x2a8>
 8001182:	464b      	mov	r3, r9
 8001184:	2b00      	cmp	r3, #0
 8001186:	d02d      	beq.n	80011e4 <__aeabi_fsub+0x174>
 8001188:	2d00      	cmp	r5, #0
 800118a:	d000      	beq.n	800118e <__aeabi_fsub+0x11e>
 800118c:	e13c      	b.n	8001408 <__aeabi_fsub+0x398>
 800118e:	23ff      	movs	r3, #255	@ 0xff
 8001190:	4664      	mov	r4, ip
 8001192:	2c00      	cmp	r4, #0
 8001194:	d100      	bne.n	8001198 <__aeabi_fsub+0x128>
 8001196:	e15f      	b.n	8001458 <__aeabi_fsub+0x3e8>
 8001198:	1e5d      	subs	r5, r3, #1
 800119a:	2b01      	cmp	r3, #1
 800119c:	d100      	bne.n	80011a0 <__aeabi_fsub+0x130>
 800119e:	e174      	b.n	800148a <__aeabi_fsub+0x41a>
 80011a0:	0034      	movs	r4, r6
 80011a2:	2bff      	cmp	r3, #255	@ 0xff
 80011a4:	d074      	beq.n	8001290 <__aeabi_fsub+0x220>
 80011a6:	002b      	movs	r3, r5
 80011a8:	e103      	b.n	80013b2 <__aeabi_fsub+0x342>
 80011aa:	42b4      	cmp	r4, r6
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x140>
 80011ae:	e09c      	b.n	80012ea <__aeabi_fsub+0x27a>
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d017      	beq.n	80011e4 <__aeabi_fsub+0x174>
 80011b4:	2d00      	cmp	r5, #0
 80011b6:	d0ea      	beq.n	800118e <__aeabi_fsub+0x11e>
 80011b8:	0007      	movs	r7, r0
 80011ba:	0034      	movs	r4, r6
 80011bc:	e06c      	b.n	8001298 <__aeabi_fsub+0x228>
 80011be:	2900      	cmp	r1, #0
 80011c0:	d0cc      	beq.n	800115c <__aeabi_fsub+0xec>
 80011c2:	1e5a      	subs	r2, r3, #1
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d02b      	beq.n	8001220 <__aeabi_fsub+0x1b0>
 80011c8:	2bff      	cmp	r3, #255	@ 0xff
 80011ca:	d062      	beq.n	8001292 <__aeabi_fsub+0x222>
 80011cc:	0013      	movs	r3, r2
 80011ce:	e773      	b.n	80010b8 <__aeabi_fsub+0x48>
 80011d0:	2900      	cmp	r1, #0
 80011d2:	d0c3      	beq.n	800115c <__aeabi_fsub+0xec>
 80011d4:	1e5a      	subs	r2, r3, #1
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d100      	bne.n	80011dc <__aeabi_fsub+0x16c>
 80011da:	e11e      	b.n	800141a <__aeabi_fsub+0x3aa>
 80011dc:	2bff      	cmp	r3, #255	@ 0xff
 80011de:	d058      	beq.n	8001292 <__aeabi_fsub+0x222>
 80011e0:	0013      	movs	r3, r2
 80011e2:	e7b4      	b.n	800114e <__aeabi_fsub+0xde>
 80011e4:	22fe      	movs	r2, #254	@ 0xfe
 80011e6:	1c6b      	adds	r3, r5, #1
 80011e8:	421a      	tst	r2, r3
 80011ea:	d10d      	bne.n	8001208 <__aeabi_fsub+0x198>
 80011ec:	2d00      	cmp	r5, #0
 80011ee:	d060      	beq.n	80012b2 <__aeabi_fsub+0x242>
 80011f0:	4663      	mov	r3, ip
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0x188>
 80011f6:	e120      	b.n	800143a <__aeabi_fsub+0x3ca>
 80011f8:	2900      	cmp	r1, #0
 80011fa:	d000      	beq.n	80011fe <__aeabi_fsub+0x18e>
 80011fc:	e128      	b.n	8001450 <__aeabi_fsub+0x3e0>
 80011fe:	2280      	movs	r2, #128	@ 0x80
 8001200:	2400      	movs	r4, #0
 8001202:	20ff      	movs	r0, #255	@ 0xff
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	e78f      	b.n	8001128 <__aeabi_fsub+0xb8>
 8001208:	4663      	mov	r3, ip
 800120a:	1a5f      	subs	r7, r3, r1
 800120c:	017b      	lsls	r3, r7, #5
 800120e:	d500      	bpl.n	8001212 <__aeabi_fsub+0x1a2>
 8001210:	e0fe      	b.n	8001410 <__aeabi_fsub+0x3a0>
 8001212:	2f00      	cmp	r7, #0
 8001214:	d000      	beq.n	8001218 <__aeabi_fsub+0x1a8>
 8001216:	e765      	b.n	80010e4 <__aeabi_fsub+0x74>
 8001218:	2400      	movs	r4, #0
 800121a:	2000      	movs	r0, #0
 800121c:	2200      	movs	r2, #0
 800121e:	e783      	b.n	8001128 <__aeabi_fsub+0xb8>
 8001220:	4663      	mov	r3, ip
 8001222:	1a59      	subs	r1, r3, r1
 8001224:	014b      	lsls	r3, r1, #5
 8001226:	d400      	bmi.n	800122a <__aeabi_fsub+0x1ba>
 8001228:	e119      	b.n	800145e <__aeabi_fsub+0x3ee>
 800122a:	018f      	lsls	r7, r1, #6
 800122c:	09bf      	lsrs	r7, r7, #6
 800122e:	0038      	movs	r0, r7
 8001230:	f000 f9f2 	bl	8001618 <__clzsi2>
 8001234:	003b      	movs	r3, r7
 8001236:	3805      	subs	r0, #5
 8001238:	4083      	lsls	r3, r0
 800123a:	2501      	movs	r5, #1
 800123c:	2220      	movs	r2, #32
 800123e:	1b40      	subs	r0, r0, r5
 8001240:	3001      	adds	r0, #1
 8001242:	1a12      	subs	r2, r2, r0
 8001244:	0019      	movs	r1, r3
 8001246:	4093      	lsls	r3, r2
 8001248:	40c1      	lsrs	r1, r0
 800124a:	1e5a      	subs	r2, r3, #1
 800124c:	4193      	sbcs	r3, r2
 800124e:	4319      	orrs	r1, r3
 8001250:	468c      	mov	ip, r1
 8001252:	1e0b      	subs	r3, r1, #0
 8001254:	d0e1      	beq.n	800121a <__aeabi_fsub+0x1aa>
 8001256:	075b      	lsls	r3, r3, #29
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x1ec>
 800125a:	e152      	b.n	8001502 <__aeabi_fsub+0x492>
 800125c:	230f      	movs	r3, #15
 800125e:	2500      	movs	r5, #0
 8001260:	400b      	ands	r3, r1
 8001262:	2b04      	cmp	r3, #4
 8001264:	d000      	beq.n	8001268 <__aeabi_fsub+0x1f8>
 8001266:	e752      	b.n	800110e <__aeabi_fsub+0x9e>
 8001268:	2001      	movs	r0, #1
 800126a:	014a      	lsls	r2, r1, #5
 800126c:	d400      	bmi.n	8001270 <__aeabi_fsub+0x200>
 800126e:	e092      	b.n	8001396 <__aeabi_fsub+0x326>
 8001270:	b2c0      	uxtb	r0, r0
 8001272:	4663      	mov	r3, ip
 8001274:	019a      	lsls	r2, r3, #6
 8001276:	0a52      	lsrs	r2, r2, #9
 8001278:	e756      	b.n	8001128 <__aeabi_fsub+0xb8>
 800127a:	4663      	mov	r3, ip
 800127c:	075b      	lsls	r3, r3, #29
 800127e:	d005      	beq.n	800128c <__aeabi_fsub+0x21c>
 8001280:	230f      	movs	r3, #15
 8001282:	4662      	mov	r2, ip
 8001284:	4013      	ands	r3, r2
 8001286:	2b04      	cmp	r3, #4
 8001288:	d000      	beq.n	800128c <__aeabi_fsub+0x21c>
 800128a:	e740      	b.n	800110e <__aeabi_fsub+0x9e>
 800128c:	002b      	movs	r3, r5
 800128e:	e765      	b.n	800115c <__aeabi_fsub+0xec>
 8001290:	0007      	movs	r7, r0
 8001292:	2f00      	cmp	r7, #0
 8001294:	d100      	bne.n	8001298 <__aeabi_fsub+0x228>
 8001296:	e745      	b.n	8001124 <__aeabi_fsub+0xb4>
 8001298:	2280      	movs	r2, #128	@ 0x80
 800129a:	03d2      	lsls	r2, r2, #15
 800129c:	433a      	orrs	r2, r7
 800129e:	0252      	lsls	r2, r2, #9
 80012a0:	20ff      	movs	r0, #255	@ 0xff
 80012a2:	0a52      	lsrs	r2, r2, #9
 80012a4:	e740      	b.n	8001128 <__aeabi_fsub+0xb8>
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d179      	bne.n	800139e <__aeabi_fsub+0x32e>
 80012aa:	22fe      	movs	r2, #254	@ 0xfe
 80012ac:	1c6b      	adds	r3, r5, #1
 80012ae:	421a      	tst	r2, r3
 80012b0:	d1aa      	bne.n	8001208 <__aeabi_fsub+0x198>
 80012b2:	4663      	mov	r3, ip
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d100      	bne.n	80012ba <__aeabi_fsub+0x24a>
 80012b8:	e0f5      	b.n	80014a6 <__aeabi_fsub+0x436>
 80012ba:	2900      	cmp	r1, #0
 80012bc:	d100      	bne.n	80012c0 <__aeabi_fsub+0x250>
 80012be:	e0d1      	b.n	8001464 <__aeabi_fsub+0x3f4>
 80012c0:	1a5f      	subs	r7, r3, r1
 80012c2:	2380      	movs	r3, #128	@ 0x80
 80012c4:	04db      	lsls	r3, r3, #19
 80012c6:	421f      	tst	r7, r3
 80012c8:	d100      	bne.n	80012cc <__aeabi_fsub+0x25c>
 80012ca:	e10e      	b.n	80014ea <__aeabi_fsub+0x47a>
 80012cc:	4662      	mov	r2, ip
 80012ce:	2401      	movs	r4, #1
 80012d0:	1a8a      	subs	r2, r1, r2
 80012d2:	4694      	mov	ip, r2
 80012d4:	2000      	movs	r0, #0
 80012d6:	4034      	ands	r4, r6
 80012d8:	2a00      	cmp	r2, #0
 80012da:	d100      	bne.n	80012de <__aeabi_fsub+0x26e>
 80012dc:	e724      	b.n	8001128 <__aeabi_fsub+0xb8>
 80012de:	2001      	movs	r0, #1
 80012e0:	421a      	tst	r2, r3
 80012e2:	d1c6      	bne.n	8001272 <__aeabi_fsub+0x202>
 80012e4:	2300      	movs	r3, #0
 80012e6:	08d7      	lsrs	r7, r2, #3
 80012e8:	e73d      	b.n	8001166 <__aeabi_fsub+0xf6>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d017      	beq.n	800131e <__aeabi_fsub+0x2ae>
 80012ee:	2d00      	cmp	r5, #0
 80012f0:	d000      	beq.n	80012f4 <__aeabi_fsub+0x284>
 80012f2:	e0af      	b.n	8001454 <__aeabi_fsub+0x3e4>
 80012f4:	23ff      	movs	r3, #255	@ 0xff
 80012f6:	4665      	mov	r5, ip
 80012f8:	2d00      	cmp	r5, #0
 80012fa:	d100      	bne.n	80012fe <__aeabi_fsub+0x28e>
 80012fc:	e0ad      	b.n	800145a <__aeabi_fsub+0x3ea>
 80012fe:	1e5e      	subs	r6, r3, #1
 8001300:	2b01      	cmp	r3, #1
 8001302:	d100      	bne.n	8001306 <__aeabi_fsub+0x296>
 8001304:	e089      	b.n	800141a <__aeabi_fsub+0x3aa>
 8001306:	2bff      	cmp	r3, #255	@ 0xff
 8001308:	d0c2      	beq.n	8001290 <__aeabi_fsub+0x220>
 800130a:	2e1b      	cmp	r6, #27
 800130c:	dc00      	bgt.n	8001310 <__aeabi_fsub+0x2a0>
 800130e:	e0ab      	b.n	8001468 <__aeabi_fsub+0x3f8>
 8001310:	1d4b      	adds	r3, r1, #5
 8001312:	469c      	mov	ip, r3
 8001314:	0013      	movs	r3, r2
 8001316:	e721      	b.n	800115c <__aeabi_fsub+0xec>
 8001318:	464b      	mov	r3, r9
 800131a:	2b00      	cmp	r3, #0
 800131c:	d170      	bne.n	8001400 <__aeabi_fsub+0x390>
 800131e:	22fe      	movs	r2, #254	@ 0xfe
 8001320:	1c6b      	adds	r3, r5, #1
 8001322:	421a      	tst	r2, r3
 8001324:	d15e      	bne.n	80013e4 <__aeabi_fsub+0x374>
 8001326:	2d00      	cmp	r5, #0
 8001328:	d000      	beq.n	800132c <__aeabi_fsub+0x2bc>
 800132a:	e0c3      	b.n	80014b4 <__aeabi_fsub+0x444>
 800132c:	4663      	mov	r3, ip
 800132e:	2b00      	cmp	r3, #0
 8001330:	d100      	bne.n	8001334 <__aeabi_fsub+0x2c4>
 8001332:	e0d0      	b.n	80014d6 <__aeabi_fsub+0x466>
 8001334:	2900      	cmp	r1, #0
 8001336:	d100      	bne.n	800133a <__aeabi_fsub+0x2ca>
 8001338:	e094      	b.n	8001464 <__aeabi_fsub+0x3f4>
 800133a:	000a      	movs	r2, r1
 800133c:	4462      	add	r2, ip
 800133e:	0153      	lsls	r3, r2, #5
 8001340:	d400      	bmi.n	8001344 <__aeabi_fsub+0x2d4>
 8001342:	e0d8      	b.n	80014f6 <__aeabi_fsub+0x486>
 8001344:	0192      	lsls	r2, r2, #6
 8001346:	2001      	movs	r0, #1
 8001348:	0a52      	lsrs	r2, r2, #9
 800134a:	e6ed      	b.n	8001128 <__aeabi_fsub+0xb8>
 800134c:	0008      	movs	r0, r1
 800134e:	2220      	movs	r2, #32
 8001350:	40d8      	lsrs	r0, r3
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	4099      	lsls	r1, r3
 8001356:	000b      	movs	r3, r1
 8001358:	1e5a      	subs	r2, r3, #1
 800135a:	4193      	sbcs	r3, r2
 800135c:	4303      	orrs	r3, r0
 800135e:	449c      	add	ip, r3
 8001360:	4663      	mov	r3, ip
 8001362:	015b      	lsls	r3, r3, #5
 8001364:	d589      	bpl.n	800127a <__aeabi_fsub+0x20a>
 8001366:	3501      	adds	r5, #1
 8001368:	2dff      	cmp	r5, #255	@ 0xff
 800136a:	d100      	bne.n	800136e <__aeabi_fsub+0x2fe>
 800136c:	e6da      	b.n	8001124 <__aeabi_fsub+0xb4>
 800136e:	4662      	mov	r2, ip
 8001370:	2301      	movs	r3, #1
 8001372:	4919      	ldr	r1, [pc, #100]	@ (80013d8 <__aeabi_fsub+0x368>)
 8001374:	4013      	ands	r3, r2
 8001376:	0852      	lsrs	r2, r2, #1
 8001378:	400a      	ands	r2, r1
 800137a:	431a      	orrs	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	4694      	mov	ip, r2
 8001380:	075b      	lsls	r3, r3, #29
 8001382:	d004      	beq.n	800138e <__aeabi_fsub+0x31e>
 8001384:	230f      	movs	r3, #15
 8001386:	4013      	ands	r3, r2
 8001388:	2b04      	cmp	r3, #4
 800138a:	d000      	beq.n	800138e <__aeabi_fsub+0x31e>
 800138c:	e6bf      	b.n	800110e <__aeabi_fsub+0x9e>
 800138e:	4663      	mov	r3, ip
 8001390:	015b      	lsls	r3, r3, #5
 8001392:	d500      	bpl.n	8001396 <__aeabi_fsub+0x326>
 8001394:	e6c2      	b.n	800111c <__aeabi_fsub+0xac>
 8001396:	4663      	mov	r3, ip
 8001398:	08df      	lsrs	r7, r3, #3
 800139a:	002b      	movs	r3, r5
 800139c:	e6e3      	b.n	8001166 <__aeabi_fsub+0xf6>
 800139e:	1b53      	subs	r3, r2, r5
 80013a0:	2d00      	cmp	r5, #0
 80013a2:	d100      	bne.n	80013a6 <__aeabi_fsub+0x336>
 80013a4:	e6f4      	b.n	8001190 <__aeabi_fsub+0x120>
 80013a6:	2080      	movs	r0, #128	@ 0x80
 80013a8:	4664      	mov	r4, ip
 80013aa:	04c0      	lsls	r0, r0, #19
 80013ac:	4304      	orrs	r4, r0
 80013ae:	46a4      	mov	ip, r4
 80013b0:	0034      	movs	r4, r6
 80013b2:	2001      	movs	r0, #1
 80013b4:	2b1b      	cmp	r3, #27
 80013b6:	dc09      	bgt.n	80013cc <__aeabi_fsub+0x35c>
 80013b8:	2520      	movs	r5, #32
 80013ba:	4660      	mov	r0, ip
 80013bc:	40d8      	lsrs	r0, r3
 80013be:	1aeb      	subs	r3, r5, r3
 80013c0:	4665      	mov	r5, ip
 80013c2:	409d      	lsls	r5, r3
 80013c4:	002b      	movs	r3, r5
 80013c6:	1e5d      	subs	r5, r3, #1
 80013c8:	41ab      	sbcs	r3, r5
 80013ca:	4318      	orrs	r0, r3
 80013cc:	1a0b      	subs	r3, r1, r0
 80013ce:	469c      	mov	ip, r3
 80013d0:	0015      	movs	r5, r2
 80013d2:	e680      	b.n	80010d6 <__aeabi_fsub+0x66>
 80013d4:	fbffffff 	.word	0xfbffffff
 80013d8:	7dffffff 	.word	0x7dffffff
 80013dc:	22fe      	movs	r2, #254	@ 0xfe
 80013de:	1c6b      	adds	r3, r5, #1
 80013e0:	4213      	tst	r3, r2
 80013e2:	d0a3      	beq.n	800132c <__aeabi_fsub+0x2bc>
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0x37a>
 80013e8:	e69c      	b.n	8001124 <__aeabi_fsub+0xb4>
 80013ea:	4461      	add	r1, ip
 80013ec:	0849      	lsrs	r1, r1, #1
 80013ee:	074a      	lsls	r2, r1, #29
 80013f0:	d049      	beq.n	8001486 <__aeabi_fsub+0x416>
 80013f2:	220f      	movs	r2, #15
 80013f4:	400a      	ands	r2, r1
 80013f6:	2a04      	cmp	r2, #4
 80013f8:	d045      	beq.n	8001486 <__aeabi_fsub+0x416>
 80013fa:	1d0a      	adds	r2, r1, #4
 80013fc:	4694      	mov	ip, r2
 80013fe:	e6ad      	b.n	800115c <__aeabi_fsub+0xec>
 8001400:	2d00      	cmp	r5, #0
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x396>
 8001404:	e776      	b.n	80012f4 <__aeabi_fsub+0x284>
 8001406:	e68d      	b.n	8001124 <__aeabi_fsub+0xb4>
 8001408:	0034      	movs	r4, r6
 800140a:	20ff      	movs	r0, #255	@ 0xff
 800140c:	2200      	movs	r2, #0
 800140e:	e68b      	b.n	8001128 <__aeabi_fsub+0xb8>
 8001410:	4663      	mov	r3, ip
 8001412:	2401      	movs	r4, #1
 8001414:	1acf      	subs	r7, r1, r3
 8001416:	4034      	ands	r4, r6
 8001418:	e664      	b.n	80010e4 <__aeabi_fsub+0x74>
 800141a:	4461      	add	r1, ip
 800141c:	014b      	lsls	r3, r1, #5
 800141e:	d56d      	bpl.n	80014fc <__aeabi_fsub+0x48c>
 8001420:	0848      	lsrs	r0, r1, #1
 8001422:	4944      	ldr	r1, [pc, #272]	@ (8001534 <__aeabi_fsub+0x4c4>)
 8001424:	4001      	ands	r1, r0
 8001426:	0743      	lsls	r3, r0, #29
 8001428:	d02c      	beq.n	8001484 <__aeabi_fsub+0x414>
 800142a:	230f      	movs	r3, #15
 800142c:	4003      	ands	r3, r0
 800142e:	2b04      	cmp	r3, #4
 8001430:	d028      	beq.n	8001484 <__aeabi_fsub+0x414>
 8001432:	1d0b      	adds	r3, r1, #4
 8001434:	469c      	mov	ip, r3
 8001436:	2302      	movs	r3, #2
 8001438:	e690      	b.n	800115c <__aeabi_fsub+0xec>
 800143a:	2900      	cmp	r1, #0
 800143c:	d100      	bne.n	8001440 <__aeabi_fsub+0x3d0>
 800143e:	e72b      	b.n	8001298 <__aeabi_fsub+0x228>
 8001440:	2380      	movs	r3, #128	@ 0x80
 8001442:	03db      	lsls	r3, r3, #15
 8001444:	429f      	cmp	r7, r3
 8001446:	d200      	bcs.n	800144a <__aeabi_fsub+0x3da>
 8001448:	e726      	b.n	8001298 <__aeabi_fsub+0x228>
 800144a:	4298      	cmp	r0, r3
 800144c:	d300      	bcc.n	8001450 <__aeabi_fsub+0x3e0>
 800144e:	e723      	b.n	8001298 <__aeabi_fsub+0x228>
 8001450:	2401      	movs	r4, #1
 8001452:	4034      	ands	r4, r6
 8001454:	0007      	movs	r7, r0
 8001456:	e71f      	b.n	8001298 <__aeabi_fsub+0x228>
 8001458:	0034      	movs	r4, r6
 800145a:	468c      	mov	ip, r1
 800145c:	e67e      	b.n	800115c <__aeabi_fsub+0xec>
 800145e:	2301      	movs	r3, #1
 8001460:	08cf      	lsrs	r7, r1, #3
 8001462:	e680      	b.n	8001166 <__aeabi_fsub+0xf6>
 8001464:	2300      	movs	r3, #0
 8001466:	e67e      	b.n	8001166 <__aeabi_fsub+0xf6>
 8001468:	2020      	movs	r0, #32
 800146a:	4665      	mov	r5, ip
 800146c:	1b80      	subs	r0, r0, r6
 800146e:	4085      	lsls	r5, r0
 8001470:	4663      	mov	r3, ip
 8001472:	0028      	movs	r0, r5
 8001474:	40f3      	lsrs	r3, r6
 8001476:	1e45      	subs	r5, r0, #1
 8001478:	41a8      	sbcs	r0, r5
 800147a:	4303      	orrs	r3, r0
 800147c:	469c      	mov	ip, r3
 800147e:	0015      	movs	r5, r2
 8001480:	448c      	add	ip, r1
 8001482:	e76d      	b.n	8001360 <__aeabi_fsub+0x2f0>
 8001484:	2302      	movs	r3, #2
 8001486:	08cf      	lsrs	r7, r1, #3
 8001488:	e66d      	b.n	8001166 <__aeabi_fsub+0xf6>
 800148a:	1b0f      	subs	r7, r1, r4
 800148c:	017b      	lsls	r3, r7, #5
 800148e:	d528      	bpl.n	80014e2 <__aeabi_fsub+0x472>
 8001490:	01bf      	lsls	r7, r7, #6
 8001492:	09bf      	lsrs	r7, r7, #6
 8001494:	0038      	movs	r0, r7
 8001496:	f000 f8bf 	bl	8001618 <__clzsi2>
 800149a:	003b      	movs	r3, r7
 800149c:	3805      	subs	r0, #5
 800149e:	4083      	lsls	r3, r0
 80014a0:	0034      	movs	r4, r6
 80014a2:	2501      	movs	r5, #1
 80014a4:	e6ca      	b.n	800123c <__aeabi_fsub+0x1cc>
 80014a6:	2900      	cmp	r1, #0
 80014a8:	d100      	bne.n	80014ac <__aeabi_fsub+0x43c>
 80014aa:	e6b5      	b.n	8001218 <__aeabi_fsub+0x1a8>
 80014ac:	2401      	movs	r4, #1
 80014ae:	0007      	movs	r7, r0
 80014b0:	4034      	ands	r4, r6
 80014b2:	e658      	b.n	8001166 <__aeabi_fsub+0xf6>
 80014b4:	4663      	mov	r3, ip
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d100      	bne.n	80014bc <__aeabi_fsub+0x44c>
 80014ba:	e6e9      	b.n	8001290 <__aeabi_fsub+0x220>
 80014bc:	2900      	cmp	r1, #0
 80014be:	d100      	bne.n	80014c2 <__aeabi_fsub+0x452>
 80014c0:	e6ea      	b.n	8001298 <__aeabi_fsub+0x228>
 80014c2:	2380      	movs	r3, #128	@ 0x80
 80014c4:	03db      	lsls	r3, r3, #15
 80014c6:	429f      	cmp	r7, r3
 80014c8:	d200      	bcs.n	80014cc <__aeabi_fsub+0x45c>
 80014ca:	e6e5      	b.n	8001298 <__aeabi_fsub+0x228>
 80014cc:	4298      	cmp	r0, r3
 80014ce:	d300      	bcc.n	80014d2 <__aeabi_fsub+0x462>
 80014d0:	e6e2      	b.n	8001298 <__aeabi_fsub+0x228>
 80014d2:	0007      	movs	r7, r0
 80014d4:	e6e0      	b.n	8001298 <__aeabi_fsub+0x228>
 80014d6:	2900      	cmp	r1, #0
 80014d8:	d100      	bne.n	80014dc <__aeabi_fsub+0x46c>
 80014da:	e69e      	b.n	800121a <__aeabi_fsub+0x1aa>
 80014dc:	2300      	movs	r3, #0
 80014de:	08cf      	lsrs	r7, r1, #3
 80014e0:	e641      	b.n	8001166 <__aeabi_fsub+0xf6>
 80014e2:	0034      	movs	r4, r6
 80014e4:	2301      	movs	r3, #1
 80014e6:	08ff      	lsrs	r7, r7, #3
 80014e8:	e63d      	b.n	8001166 <__aeabi_fsub+0xf6>
 80014ea:	2f00      	cmp	r7, #0
 80014ec:	d100      	bne.n	80014f0 <__aeabi_fsub+0x480>
 80014ee:	e693      	b.n	8001218 <__aeabi_fsub+0x1a8>
 80014f0:	2300      	movs	r3, #0
 80014f2:	08ff      	lsrs	r7, r7, #3
 80014f4:	e637      	b.n	8001166 <__aeabi_fsub+0xf6>
 80014f6:	2300      	movs	r3, #0
 80014f8:	08d7      	lsrs	r7, r2, #3
 80014fa:	e634      	b.n	8001166 <__aeabi_fsub+0xf6>
 80014fc:	2301      	movs	r3, #1
 80014fe:	08cf      	lsrs	r7, r1, #3
 8001500:	e631      	b.n	8001166 <__aeabi_fsub+0xf6>
 8001502:	2280      	movs	r2, #128	@ 0x80
 8001504:	000b      	movs	r3, r1
 8001506:	04d2      	lsls	r2, r2, #19
 8001508:	2001      	movs	r0, #1
 800150a:	4013      	ands	r3, r2
 800150c:	4211      	tst	r1, r2
 800150e:	d000      	beq.n	8001512 <__aeabi_fsub+0x4a2>
 8001510:	e6ae      	b.n	8001270 <__aeabi_fsub+0x200>
 8001512:	08cf      	lsrs	r7, r1, #3
 8001514:	e627      	b.n	8001166 <__aeabi_fsub+0xf6>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x4ac>
 800151a:	e75f      	b.n	80013dc <__aeabi_fsub+0x36c>
 800151c:	1b56      	subs	r6, r2, r5
 800151e:	2d00      	cmp	r5, #0
 8001520:	d101      	bne.n	8001526 <__aeabi_fsub+0x4b6>
 8001522:	0033      	movs	r3, r6
 8001524:	e6e7      	b.n	80012f6 <__aeabi_fsub+0x286>
 8001526:	2380      	movs	r3, #128	@ 0x80
 8001528:	4660      	mov	r0, ip
 800152a:	04db      	lsls	r3, r3, #19
 800152c:	4318      	orrs	r0, r3
 800152e:	4684      	mov	ip, r0
 8001530:	e6eb      	b.n	800130a <__aeabi_fsub+0x29a>
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	7dffffff 	.word	0x7dffffff

08001538 <__aeabi_f2iz>:
 8001538:	0241      	lsls	r1, r0, #9
 800153a:	0042      	lsls	r2, r0, #1
 800153c:	0fc3      	lsrs	r3, r0, #31
 800153e:	0a49      	lsrs	r1, r1, #9
 8001540:	2000      	movs	r0, #0
 8001542:	0e12      	lsrs	r2, r2, #24
 8001544:	2a7e      	cmp	r2, #126	@ 0x7e
 8001546:	dd03      	ble.n	8001550 <__aeabi_f2iz+0x18>
 8001548:	2a9d      	cmp	r2, #157	@ 0x9d
 800154a:	dd02      	ble.n	8001552 <__aeabi_f2iz+0x1a>
 800154c:	4a09      	ldr	r2, [pc, #36]	@ (8001574 <__aeabi_f2iz+0x3c>)
 800154e:	1898      	adds	r0, r3, r2
 8001550:	4770      	bx	lr
 8001552:	2080      	movs	r0, #128	@ 0x80
 8001554:	0400      	lsls	r0, r0, #16
 8001556:	4301      	orrs	r1, r0
 8001558:	2a95      	cmp	r2, #149	@ 0x95
 800155a:	dc07      	bgt.n	800156c <__aeabi_f2iz+0x34>
 800155c:	2096      	movs	r0, #150	@ 0x96
 800155e:	1a82      	subs	r2, r0, r2
 8001560:	40d1      	lsrs	r1, r2
 8001562:	4248      	negs	r0, r1
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f3      	bne.n	8001550 <__aeabi_f2iz+0x18>
 8001568:	0008      	movs	r0, r1
 800156a:	e7f1      	b.n	8001550 <__aeabi_f2iz+0x18>
 800156c:	3a96      	subs	r2, #150	@ 0x96
 800156e:	4091      	lsls	r1, r2
 8001570:	e7f7      	b.n	8001562 <__aeabi_f2iz+0x2a>
 8001572:	46c0      	nop			@ (mov r8, r8)
 8001574:	7fffffff 	.word	0x7fffffff

08001578 <__aeabi_i2f>:
 8001578:	b570      	push	{r4, r5, r6, lr}
 800157a:	2800      	cmp	r0, #0
 800157c:	d012      	beq.n	80015a4 <__aeabi_i2f+0x2c>
 800157e:	17c3      	asrs	r3, r0, #31
 8001580:	18c5      	adds	r5, r0, r3
 8001582:	405d      	eors	r5, r3
 8001584:	0fc4      	lsrs	r4, r0, #31
 8001586:	0028      	movs	r0, r5
 8001588:	f000 f846 	bl	8001618 <__clzsi2>
 800158c:	239e      	movs	r3, #158	@ 0x9e
 800158e:	1a1b      	subs	r3, r3, r0
 8001590:	2b96      	cmp	r3, #150	@ 0x96
 8001592:	dc0f      	bgt.n	80015b4 <__aeabi_i2f+0x3c>
 8001594:	2808      	cmp	r0, #8
 8001596:	d038      	beq.n	800160a <__aeabi_i2f+0x92>
 8001598:	3808      	subs	r0, #8
 800159a:	4085      	lsls	r5, r0
 800159c:	026d      	lsls	r5, r5, #9
 800159e:	0a6d      	lsrs	r5, r5, #9
 80015a0:	b2d8      	uxtb	r0, r3
 80015a2:	e002      	b.n	80015aa <__aeabi_i2f+0x32>
 80015a4:	2400      	movs	r4, #0
 80015a6:	2000      	movs	r0, #0
 80015a8:	2500      	movs	r5, #0
 80015aa:	05c0      	lsls	r0, r0, #23
 80015ac:	4328      	orrs	r0, r5
 80015ae:	07e4      	lsls	r4, r4, #31
 80015b0:	4320      	orrs	r0, r4
 80015b2:	bd70      	pop	{r4, r5, r6, pc}
 80015b4:	2b99      	cmp	r3, #153	@ 0x99
 80015b6:	dc14      	bgt.n	80015e2 <__aeabi_i2f+0x6a>
 80015b8:	1f42      	subs	r2, r0, #5
 80015ba:	4095      	lsls	r5, r2
 80015bc:	002a      	movs	r2, r5
 80015be:	4915      	ldr	r1, [pc, #84]	@ (8001614 <__aeabi_i2f+0x9c>)
 80015c0:	4011      	ands	r1, r2
 80015c2:	0755      	lsls	r5, r2, #29
 80015c4:	d01c      	beq.n	8001600 <__aeabi_i2f+0x88>
 80015c6:	250f      	movs	r5, #15
 80015c8:	402a      	ands	r2, r5
 80015ca:	2a04      	cmp	r2, #4
 80015cc:	d018      	beq.n	8001600 <__aeabi_i2f+0x88>
 80015ce:	3104      	adds	r1, #4
 80015d0:	08ca      	lsrs	r2, r1, #3
 80015d2:	0149      	lsls	r1, r1, #5
 80015d4:	d515      	bpl.n	8001602 <__aeabi_i2f+0x8a>
 80015d6:	239f      	movs	r3, #159	@ 0x9f
 80015d8:	0252      	lsls	r2, r2, #9
 80015da:	1a18      	subs	r0, r3, r0
 80015dc:	0a55      	lsrs	r5, r2, #9
 80015de:	b2c0      	uxtb	r0, r0
 80015e0:	e7e3      	b.n	80015aa <__aeabi_i2f+0x32>
 80015e2:	2205      	movs	r2, #5
 80015e4:	0029      	movs	r1, r5
 80015e6:	1a12      	subs	r2, r2, r0
 80015e8:	40d1      	lsrs	r1, r2
 80015ea:	0002      	movs	r2, r0
 80015ec:	321b      	adds	r2, #27
 80015ee:	4095      	lsls	r5, r2
 80015f0:	002a      	movs	r2, r5
 80015f2:	1e55      	subs	r5, r2, #1
 80015f4:	41aa      	sbcs	r2, r5
 80015f6:	430a      	orrs	r2, r1
 80015f8:	4906      	ldr	r1, [pc, #24]	@ (8001614 <__aeabi_i2f+0x9c>)
 80015fa:	4011      	ands	r1, r2
 80015fc:	0755      	lsls	r5, r2, #29
 80015fe:	d1e2      	bne.n	80015c6 <__aeabi_i2f+0x4e>
 8001600:	08ca      	lsrs	r2, r1, #3
 8001602:	0252      	lsls	r2, r2, #9
 8001604:	0a55      	lsrs	r5, r2, #9
 8001606:	b2d8      	uxtb	r0, r3
 8001608:	e7cf      	b.n	80015aa <__aeabi_i2f+0x32>
 800160a:	026d      	lsls	r5, r5, #9
 800160c:	0a6d      	lsrs	r5, r5, #9
 800160e:	308e      	adds	r0, #142	@ 0x8e
 8001610:	e7cb      	b.n	80015aa <__aeabi_i2f+0x32>
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	fbffffff 	.word	0xfbffffff

08001618 <__clzsi2>:
 8001618:	211c      	movs	r1, #28
 800161a:	2301      	movs	r3, #1
 800161c:	041b      	lsls	r3, r3, #16
 800161e:	4298      	cmp	r0, r3
 8001620:	d301      	bcc.n	8001626 <__clzsi2+0xe>
 8001622:	0c00      	lsrs	r0, r0, #16
 8001624:	3910      	subs	r1, #16
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	4298      	cmp	r0, r3
 800162a:	d301      	bcc.n	8001630 <__clzsi2+0x18>
 800162c:	0a00      	lsrs	r0, r0, #8
 800162e:	3908      	subs	r1, #8
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	4298      	cmp	r0, r3
 8001634:	d301      	bcc.n	800163a <__clzsi2+0x22>
 8001636:	0900      	lsrs	r0, r0, #4
 8001638:	3904      	subs	r1, #4
 800163a:	a202      	add	r2, pc, #8	@ (adr r2, 8001644 <__clzsi2+0x2c>)
 800163c:	5c10      	ldrb	r0, [r2, r0]
 800163e:	1840      	adds	r0, r0, r1
 8001640:	4770      	bx	lr
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	02020304 	.word	0x02020304
 8001648:	01010101 	.word	0x01010101
	...

08001654 <__clzdi2>:
 8001654:	b510      	push	{r4, lr}
 8001656:	2900      	cmp	r1, #0
 8001658:	d103      	bne.n	8001662 <__clzdi2+0xe>
 800165a:	f7ff ffdd 	bl	8001618 <__clzsi2>
 800165e:	3020      	adds	r0, #32
 8001660:	e002      	b.n	8001668 <__clzdi2+0x14>
 8001662:	0008      	movs	r0, r1
 8001664:	f7ff ffd8 	bl	8001618 <__clzsi2>
 8001668:	bd10      	pop	{r4, pc}
 800166a:	46c0      	nop			@ (mov r8, r8)

0800166c <PA4_PA5_SetInput>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PA4_PA5_SetInput(void) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	0018      	movs	r0, r3
 8001676:	2314      	movs	r3, #20
 8001678:	001a      	movs	r2, r3
 800167a:	2100      	movs	r1, #0
 800167c:	f004 ffde 	bl	800663c <memset>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <PA4_PA5_SetInput+0x54>)
 8001682:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <PA4_PA5_SetInput+0x54>)
 8001686:	2101      	movs	r1, #1
 8001688:	430a      	orrs	r2, r1
 800168a:	635a      	str	r2, [r3, #52]	@ 0x34
 800168c:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <PA4_PA5_SetInput+0x54>)
 800168e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001690:	2201      	movs	r2, #1
 8001692:	4013      	ands	r3, r2
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	683b      	ldr	r3, [r7, #0]


    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2230      	movs	r2, #48	@ 0x30
 800169c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2200      	movs	r2, #0
 80016a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	1d3a      	adds	r2, r7, #4
 80016ac:	23a0      	movs	r3, #160	@ 0xa0
 80016ae:	05db      	lsls	r3, r3, #23
 80016b0:	0011      	movs	r1, r2
 80016b2:	0018      	movs	r0, r3
 80016b4:	f002 fe4a 	bl	800434c <HAL_GPIO_Init>

}
 80016b8:	46c0      	nop			@ (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b006      	add	sp, #24
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000

080016c4 <PA4_PA5_SetOutput>:

void PA4_PA5_SetOutput(void) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	0018      	movs	r0, r3
 80016ce:	2314      	movs	r3, #20
 80016d0:	001a      	movs	r2, r3
 80016d2:	2100      	movs	r1, #0
 80016d4:	f004 ffb2 	bl	800663c <memset>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <PA4_PA5_SetOutput+0x5c>)
 80016da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016dc:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <PA4_PA5_SetOutput+0x5c>)
 80016de:	2101      	movs	r1, #1
 80016e0:	430a      	orrs	r2, r1
 80016e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80016e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <PA4_PA5_SetOutput+0x5c>)
 80016e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016e8:	2201      	movs	r2, #1
 80016ea:	4013      	ands	r3, r2
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	683b      	ldr	r3, [r7, #0]


    GPIO_InitStruct.Pin = GPIO_PIN_4| GPIO_PIN_5;
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2230      	movs	r2, #48	@ 0x30
 80016f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2211      	movs	r2, #17
 80016fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2201      	movs	r2, #1
 8001706:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	1d3a      	adds	r2, r7, #4
 800170a:	23a0      	movs	r3, #160	@ 0xa0
 800170c:	05db      	lsls	r3, r3, #23
 800170e:	0011      	movs	r1, r2
 8001710:	0018      	movs	r0, r3
 8001712:	f002 fe1b 	bl	800434c <HAL_GPIO_Init>

}
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	b006      	add	sp, #24
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	40021000 	.word	0x40021000

08001724 <PA4_PA5_SetDAC>:

void PA4_PA5_SetDAC(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
    MX_DAC1_Init();
 8001728:	f000 fa94 	bl	8001c54 <MX_DAC1_Init>
}
 800172c:	46c0      	nop			@ (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <Quad_OutputStep>:

void Quad_OutputStep(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
    if (edges_remaining == 0) return;
 8001738:	4b2b      	ldr	r3, [pc, #172]	@ (80017e8 <Quad_OutputStep+0xb4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d04f      	beq.n	80017e0 <Quad_OutputStep+0xac>

    // Advance state
    if (dir > 0) quad_state = (quad_state + 1) & 0x03;
 8001740:	4b2a      	ldr	r3, [pc, #168]	@ (80017ec <Quad_OutputStep+0xb8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	dd09      	ble.n	800175c <Quad_OutputStep+0x28>
 8001748:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <Quad_OutputStep+0xbc>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2203      	movs	r2, #3
 8001752:	4013      	ands	r3, r2
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b26      	ldr	r3, [pc, #152]	@ (80017f0 <Quad_OutputStep+0xbc>)
 8001758:	701a      	strb	r2, [r3, #0]
 800175a:	e008      	b.n	800176e <Quad_OutputStep+0x3a>
    else         quad_state = (quad_state - 1) & 0x03;
 800175c:	4b24      	ldr	r3, [pc, #144]	@ (80017f0 <Quad_OutputStep+0xbc>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	3b01      	subs	r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2203      	movs	r2, #3
 8001766:	4013      	ands	r3, r2
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <Quad_OutputStep+0xbc>)
 800176c:	701a      	strb	r2, [r3, #0]

    // Write pins
    pa4_state = states[quad_state][0];
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <Quad_OutputStep+0xbc>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	001a      	movs	r2, r3
 8001774:	4b1f      	ldr	r3, [pc, #124]	@ (80017f4 <Quad_OutputStep+0xc0>)
 8001776:	0052      	lsls	r2, r2, #1
 8001778:	5cd2      	ldrb	r2, [r2, r3]
 800177a:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <Quad_OutputStep+0xc4>)
 800177c:	701a      	strb	r2, [r3, #0]
    pa5_state = states[quad_state][1];
 800177e:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <Quad_OutputStep+0xbc>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	4a1c      	ldr	r2, [pc, #112]	@ (80017f4 <Quad_OutputStep+0xc0>)
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	18d3      	adds	r3, r2, r3
 8001788:	3301      	adds	r3, #1
 800178a:	781a      	ldrb	r2, [r3, #0]
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <Quad_OutputStep+0xc8>)
 800178e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(QUAD_PORT, QUAD_A_PIN, pa4_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001790:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <Quad_OutputStep+0xc4>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	1e5a      	subs	r2, r3, #1
 8001798:	4193      	sbcs	r3, r2
 800179a:	b2db      	uxtb	r3, r3
 800179c:	001a      	movs	r2, r3
 800179e:	23a0      	movs	r3, #160	@ 0xa0
 80017a0:	05db      	lsls	r3, r3, #23
 80017a2:	2110      	movs	r1, #16
 80017a4:	0018      	movs	r0, r3
 80017a6:	f002 ff52 	bl	800464e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(QUAD_PORT, QUAD_B_PIN, pa5_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80017aa:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <Quad_OutputStep+0xc8>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	1e5a      	subs	r2, r3, #1
 80017b2:	4193      	sbcs	r3, r2
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	001a      	movs	r2, r3
 80017b8:	23a0      	movs	r3, #160	@ 0xa0
 80017ba:	05db      	lsls	r3, r3, #23
 80017bc:	2120      	movs	r1, #32
 80017be:	0018      	movs	r0, r3
 80017c0:	f002 ff45 	bl	800464e <HAL_GPIO_WritePin>

    edges_remaining--;
 80017c4:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <Quad_OutputStep+0xb4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	1e5a      	subs	r2, r3, #1
 80017ca:	4b07      	ldr	r3, [pc, #28]	@ (80017e8 <Quad_OutputStep+0xb4>)
 80017cc:	601a      	str	r2, [r3, #0]
    if (edges_remaining == 0) {
 80017ce:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <Quad_OutputStep+0xb4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d105      	bne.n	80017e2 <Quad_OutputStep+0xae>
        HAL_TIM_Base_Stop_IT(&htim14); // stop timer if done
 80017d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001800 <Quad_OutputStep+0xcc>)
 80017d8:	0018      	movs	r0, r3
 80017da:	f003 fed1 	bl	8005580 <HAL_TIM_Base_Stop_IT>
 80017de:	e000      	b.n	80017e2 <Quad_OutputStep+0xae>
    if (edges_remaining == 0) return;
 80017e0:	46c0      	nop			@ (mov r8, r8)
    }
}
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	2000031c 	.word	0x2000031c
 80017ec:	20000000 	.word	0x20000000
 80017f0:	2000031a 	.word	0x2000031a
 80017f4:	08006a94 	.word	0x08006a94
 80017f8:	20000318 	.word	0x20000318
 80017fc:	20000319 	.word	0x20000319
 8001800:	200001bc 	.word	0x200001bc

08001804 <Quad_Update>:

// Called every 200 Hz with new angle
void Quad_Update(float angle)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
    // Compute desired absolute edge index
    int32_t target_edge_index = (int32_t)roundf((angle / 360.0f) * EDGES_PER_CYCLE);
 800180c:	4935      	ldr	r1, [pc, #212]	@ (80018e4 <Quad_Update+0xe0>)
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff f906 	bl	8000a20 <__aeabi_fdiv>
 8001814:	1c03      	adds	r3, r0, #0
 8001816:	4933      	ldr	r1, [pc, #204]	@ (80018e4 <Quad_Update+0xe0>)
 8001818:	1c18      	adds	r0, r3, #0
 800181a:	f7ff facf 	bl	8000dbc <__aeabi_fmul>
 800181e:	1c03      	adds	r3, r0, #0
 8001820:	1c18      	adds	r0, r3, #0
 8001822:	f004 ff3b 	bl	800669c <roundf>
 8001826:	1c03      	adds	r3, r0, #0
 8001828:	1c18      	adds	r0, r3, #0
 800182a:	f7ff fe85 	bl	8001538 <__aeabi_f2iz>
 800182e:	0003      	movs	r3, r0
 8001830:	60fb      	str	r3, [r7, #12]

    // Wrap into valid range
    target_edge_index = (target_edge_index % EDGES_PER_CYCLE + EDGES_PER_CYCLE) % EDGES_PER_CYCLE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	22b4      	movs	r2, #180	@ 0xb4
 8001836:	0051      	lsls	r1, r2, #1
 8001838:	0018      	movs	r0, r3
 800183a:	f7fe fdd3 	bl	80003e4 <__aeabi_idivmod>
 800183e:	000b      	movs	r3, r1
 8001840:	3369      	adds	r3, #105	@ 0x69
 8001842:	33ff      	adds	r3, #255	@ 0xff
 8001844:	22b4      	movs	r2, #180	@ 0xb4
 8001846:	0051      	lsls	r1, r2, #1
 8001848:	0018      	movs	r0, r3
 800184a:	f7fe fdcb 	bl	80003e4 <__aeabi_idivmod>
 800184e:	000b      	movs	r3, r1
 8001850:	60fb      	str	r3, [r7, #12]

    // Compute difference (how many steps we need to take)
    int32_t diff = target_edge_index - current_edge_index;
 8001852:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <Quad_Update+0xe4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]

    // Handle wraparound shortest path
    if (diff >  EDGES_PER_CYCLE/2) diff -= EDGES_PER_CYCLE;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	2bb4      	cmp	r3, #180	@ 0xb4
 8001860:	dd03      	ble.n	800186a <Quad_Update+0x66>
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3b69      	subs	r3, #105	@ 0x69
 8001866:	3bff      	subs	r3, #255	@ 0xff
 8001868:	617b      	str	r3, [r7, #20]
    if (diff < -EDGES_PER_CYCLE/2) diff += EDGES_PER_CYCLE;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	33b4      	adds	r3, #180	@ 0xb4
 800186e:	da03      	bge.n	8001878 <Quad_Update+0x74>
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3369      	adds	r3, #105	@ 0x69
 8001874:	33ff      	adds	r3, #255	@ 0xff
 8001876:	617b      	str	r3, [r7, #20]

    if (diff == 0) return;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d02e      	beq.n	80018dc <Quad_Update+0xd8>

    dir = (diff > 0) ? +1 : -1;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b00      	cmp	r3, #0
 8001882:	dd01      	ble.n	8001888 <Quad_Update+0x84>
 8001884:	2201      	movs	r2, #1
 8001886:	e001      	b.n	800188c <Quad_Update+0x88>
 8001888:	2301      	movs	r3, #1
 800188a:	425a      	negs	r2, r3
 800188c:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <Quad_Update+0xe8>)
 800188e:	601a      	str	r2, [r3, #0]
    edges_remaining = (diff > 0) ? diff : -diff;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	17d9      	asrs	r1, r3, #31
 8001894:	185a      	adds	r2, r3, r1
 8001896:	404a      	eors	r2, r1
 8001898:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <Quad_Update+0xec>)
 800189a:	601a      	str	r2, [r3, #0]

    // Save new "goal"
    current_edge_index = target_edge_index;
 800189c:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <Quad_Update+0xe4>)
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	601a      	str	r2, [r3, #0]

    // Timer ticks per edge (scale with loop period, speed, etc.)
    uint32_t ticks_per_edge_us = 2500 / edges_remaining;
 80018a2:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <Quad_Update+0xec>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	0019      	movs	r1, r3
 80018a8:	4812      	ldr	r0, [pc, #72]	@ (80018f4 <Quad_Update+0xf0>)
 80018aa:	f7fe fcb5 	bl	8000218 <__divsi3>
 80018ae:	0003      	movs	r3, r0
 80018b0:	613b      	str	r3, [r7, #16]
    if (ticks_per_edge_us < 10) ticks_per_edge_us = 10;
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	2b09      	cmp	r3, #9
 80018b6:	d801      	bhi.n	80018bc <Quad_Update+0xb8>
 80018b8:	230a      	movs	r3, #10
 80018ba:	613b      	str	r3, [r7, #16]

    __HAL_TIM_SET_AUTORELOAD(&htim14, ticks_per_edge_us);
 80018bc:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <Quad_Update+0xf4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018c4:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <Quad_Update+0xf4>)
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COUNTER(&htim14, 0);
 80018ca:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <Quad_Update+0xf4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2200      	movs	r2, #0
 80018d0:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start_IT(&htim14);
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <Quad_Update+0xf4>)
 80018d4:	0018      	movs	r0, r3
 80018d6:	f003 fdf7 	bl	80054c8 <HAL_TIM_Base_Start_IT>
 80018da:	e000      	b.n	80018de <Quad_Update+0xda>
    if (diff == 0) return;
 80018dc:	46c0      	nop			@ (mov r8, r8)
}
 80018de:	46bd      	mov	sp, r7
 80018e0:	b006      	add	sp, #24
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	43b40000 	.word	0x43b40000
 80018e8:	20000324 	.word	0x20000324
 80018ec:	20000000 	.word	0x20000000
 80018f0:	2000031c 	.word	0x2000031c
 80018f4:	000009c4 	.word	0x000009c4
 80018f8:	200001bc 	.word	0x200001bc

080018fc <Quad_Init>:

// Init GPIO
void Quad_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0


    HAL_GPIO_WritePin(QUAD_PORT, QUAD_A_PIN | QUAD_B_PIN, GPIO_PIN_RESET);
 8001900:	23a0      	movs	r3, #160	@ 0xa0
 8001902:	05db      	lsls	r3, r3, #23
 8001904:	2200      	movs	r2, #0
 8001906:	2130      	movs	r1, #48	@ 0x30
 8001908:	0018      	movs	r0, r3
 800190a:	f002 fea0 	bl	800464e <HAL_GPIO_WritePin>
    quad_state = 0;
 800190e:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <Quad_Init+0x24>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
    edges_remaining = 0;
 8001914:	4b03      	ldr	r3, [pc, #12]	@ (8001924 <Quad_Init+0x28>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	2000031a 	.word	0x2000031a
 8001924:	2000031c 	.word	0x2000031c

08001928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800192e:	f000 fee7 	bl	8002700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001932:	f000 f88f 	bl	8001a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001936:	f000 fa8d 	bl	8001e54 <MX_GPIO_Init>
  MX_DMA_Init();
 800193a:	f000 fa65 	bl	8001e08 <MX_DMA_Init>
  MX_ADC1_Init();
 800193e:	f000 f8e7 	bl	8001b10 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001942:	f000 f987 	bl	8001c54 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8001946:	f000 fa11 	bl	8001d6c <MX_USART1_UART_Init>
  MX_TIM16_Init();
 800194a:	f000 f9e7 	bl	8001d1c <MX_TIM16_Init>
  MX_TIM14_Init();
 800194e:	f000 f9c1 	bl	8001cd4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001952:	4b38      	ldr	r3, [pc, #224]	@ (8001a34 <main+0x10c>)
 8001954:	0018      	movs	r0, r3
 8001956:	f001 fefd 	bl	8003754 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AD_RES_BUFFER, 4);
 800195a:	4937      	ldr	r1, [pc, #220]	@ (8001a38 <main+0x110>)
 800195c:	4b35      	ldr	r3, [pc, #212]	@ (8001a34 <main+0x10c>)
 800195e:	2204      	movs	r2, #4
 8001960:	0018      	movs	r0, r3
 8001962:	f001 fa77 	bl	8002e54 <HAL_ADC_Start_DMA>

  // Set PA4/PA5 as input for first 0.5s
  PA4_PA5_SetInput();
 8001966:	f7ff fe81 	bl	800166c <PA4_PA5_SetInput>

  HAL_Delay(10);
 800196a:	200a      	movs	r0, #10
 800196c:	f000 ff4e 	bl	800280c <HAL_Delay>

  // Read PA4 and PA5 input states and save to byte
  for (int i = 0; i < 20; i++) {
 8001970:	2300      	movs	r3, #0
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	e027      	b.n	80019c6 <main+0x9e>
	  mode1 += ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) ? 1 : 0));
 8001976:	23a0      	movs	r3, #160	@ 0xa0
 8001978:	05db      	lsls	r3, r3, #23
 800197a:	2110      	movs	r1, #16
 800197c:	0018      	movs	r0, r3
 800197e:	f002 fe49 	bl	8004614 <HAL_GPIO_ReadPin>
 8001982:	0003      	movs	r3, r0
 8001984:	1e5a      	subs	r2, r3, #1
 8001986:	4193      	sbcs	r3, r2
 8001988:	b2db      	uxtb	r3, r3
 800198a:	b2da      	uxtb	r2, r3
 800198c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a3c <main+0x114>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	18d3      	adds	r3, r2, r3
 8001992:	b2da      	uxtb	r2, r3
 8001994:	4b29      	ldr	r3, [pc, #164]	@ (8001a3c <main+0x114>)
 8001996:	701a      	strb	r2, [r3, #0]
	  mode2 += ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) ? 1 : 0));
 8001998:	23a0      	movs	r3, #160	@ 0xa0
 800199a:	05db      	lsls	r3, r3, #23
 800199c:	2120      	movs	r1, #32
 800199e:	0018      	movs	r0, r3
 80019a0:	f002 fe38 	bl	8004614 <HAL_GPIO_ReadPin>
 80019a4:	0003      	movs	r3, r0
 80019a6:	1e5a      	subs	r2, r3, #1
 80019a8:	4193      	sbcs	r3, r2
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4b24      	ldr	r3, [pc, #144]	@ (8001a40 <main+0x118>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	18d3      	adds	r3, r2, r3
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b22      	ldr	r3, [pc, #136]	@ (8001a40 <main+0x118>)
 80019b8:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 80019ba:	2001      	movs	r0, #1
 80019bc:	f000 ff26 	bl	800280c <HAL_Delay>
  for (int i = 0; i < 20; i++) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3301      	adds	r3, #1
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b13      	cmp	r3, #19
 80019ca:	ddd4      	ble.n	8001976 <main+0x4e>
  }
  if (mode1 > 17 && mode2 > 17) {
 80019cc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <main+0x114>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b11      	cmp	r3, #17
 80019d2:	d907      	bls.n	80019e4 <main+0xbc>
 80019d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <main+0x118>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b11      	cmp	r3, #17
 80019da:	d903      	bls.n	80019e4 <main+0xbc>
	  // Both pins high, enter quadrature mode
	  mode = 1;
 80019dc:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <main+0x11c>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	e002      	b.n	80019ea <main+0xc2>
  }
  else {
	  mode = 0;
 80019e4:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <main+0x11c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
  }



  // Set PA4/PA5 back to DAC mode
  if (mode == 0) {
 80019ea:	4b16      	ldr	r3, [pc, #88]	@ (8001a44 <main+0x11c>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10d      	bne.n	8001a0e <main+0xe6>
	  MX_DAC1_Init();
 80019f2:	f000 f92f 	bl	8001c54 <MX_DAC1_Init>
	  PA4_PA5_SetDAC();
 80019f6:	f7ff fe95 	bl	8001724 <PA4_PA5_SetDAC>

	  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80019fa:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <main+0x120>)
 80019fc:	2100      	movs	r1, #0
 80019fe:	0018      	movs	r0, r3
 8001a00:	f002 f8a5 	bl	8003b4e <HAL_DAC_Start>
	  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8001a04:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <main+0x120>)
 8001a06:	2110      	movs	r1, #16
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f002 f8a0 	bl	8003b4e <HAL_DAC_Start>
  }

  if (mode == 1) {
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a44 <main+0x11c>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d107      	bne.n	8001a26 <main+0xfe>
	  PA4_PA5_SetOutput();
 8001a16:	f7ff fe55 	bl	80016c4 <PA4_PA5_SetOutput>
	  Quad_Init();
 8001a1a:	f7ff ff6f 	bl	80018fc <Quad_Init>
	  HAL_TIM_Base_Start_IT(&htim14);
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <main+0x124>)
 8001a20:	0018      	movs	r0, r3
 8001a22:	f003 fd51 	bl	80054c8 <HAL_TIM_Base_Start_IT>

  }

  HAL_TIM_Base_Start_IT(&htim16);
 8001a26:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <main+0x128>)
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f003 fd4d 	bl	80054c8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	e7fd      	b.n	8001a2e <main+0x106>
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	20000030 	.word	0x20000030
 8001a38:	200002fc 	.word	0x200002fc
 8001a3c:	20000315 	.word	0x20000315
 8001a40:	20000316 	.word	0x20000316
 8001a44:	20000317 	.word	0x20000317
 8001a48:	200000f0 	.word	0x200000f0
 8001a4c:	200001bc 	.word	0x200001bc
 8001a50:	20000208 	.word	0x20000208

08001a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b093      	sub	sp, #76	@ 0x4c
 8001a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5a:	2410      	movs	r4, #16
 8001a5c:	193b      	adds	r3, r7, r4
 8001a5e:	0018      	movs	r0, r3
 8001a60:	2338      	movs	r3, #56	@ 0x38
 8001a62:	001a      	movs	r2, r3
 8001a64:	2100      	movs	r1, #0
 8001a66:	f004 fde9 	bl	800663c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a6a:	003b      	movs	r3, r7
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	2310      	movs	r3, #16
 8001a70:	001a      	movs	r2, r3
 8001a72:	2100      	movs	r1, #0
 8001a74:	f004 fde2 	bl	800663c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a78:	2380      	movs	r3, #128	@ 0x80
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f002 fe03 	bl	8004688 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a82:	193b      	adds	r3, r7, r4
 8001a84:	2202      	movs	r2, #2
 8001a86:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a88:	193b      	adds	r3, r7, r4
 8001a8a:	2280      	movs	r2, #128	@ 0x80
 8001a8c:	0052      	lsls	r2, r2, #1
 8001a8e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001a90:	0021      	movs	r1, r4
 8001a92:	187b      	adds	r3, r7, r1
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	2240      	movs	r2, #64	@ 0x40
 8001a9c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	2200      	movs	r2, #0
 8001aae:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	22c0      	movs	r2, #192	@ 0xc0
 8001aba:	02d2      	lsls	r2, r2, #11
 8001abc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001abe:	187b      	adds	r3, r7, r1
 8001ac0:	2280      	movs	r2, #128	@ 0x80
 8001ac2:	0492      	lsls	r2, r2, #18
 8001ac4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ac6:	187b      	adds	r3, r7, r1
 8001ac8:	2280      	movs	r2, #128	@ 0x80
 8001aca:	0592      	lsls	r2, r2, #22
 8001acc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f002 fe25 	bl	8004720 <HAL_RCC_OscConfig>
 8001ad6:	1e03      	subs	r3, r0, #0
 8001ad8:	d001      	beq.n	8001ade <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001ada:	f000 fb93 	bl	8002204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ade:	003b      	movs	r3, r7
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae4:	003b      	movs	r3, r7
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aea:	003b      	movs	r3, r7
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001af0:	003b      	movs	r3, r7
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001af6:	003b      	movs	r3, r7
 8001af8:	2102      	movs	r1, #2
 8001afa:	0018      	movs	r0, r3
 8001afc:	f003 f92a 	bl	8004d54 <HAL_RCC_ClockConfig>
 8001b00:	1e03      	subs	r3, r0, #0
 8001b02:	d001      	beq.n	8001b08 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b04:	f000 fb7e 	bl	8002204 <Error_Handler>
  }
}
 8001b08:	46c0      	nop			@ (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b013      	add	sp, #76	@ 0x4c
 8001b0e:	bd90      	pop	{r4, r7, pc}

08001b10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	0018      	movs	r0, r3
 8001b1a:	230c      	movs	r3, #12
 8001b1c:	001a      	movs	r2, r3
 8001b1e:	2100      	movs	r1, #0
 8001b20:	f004 fd8c 	bl	800663c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b24:	4b46      	ldr	r3, [pc, #280]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b26:	4a47      	ldr	r2, [pc, #284]	@ (8001c44 <MX_ADC1_Init+0x134>)
 8001b28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001b2a:	4b45      	ldr	r3, [pc, #276]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b2c:	2280      	movs	r2, #128	@ 0x80
 8001b2e:	0392      	lsls	r2, r2, #14
 8001b30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b32:	4b43      	ldr	r3, [pc, #268]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b38:	4b41      	ldr	r3, [pc, #260]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b3e:	4b40      	ldr	r3, [pc, #256]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b40:	2280      	movs	r2, #128	@ 0x80
 8001b42:	0392      	lsls	r2, r2, #14
 8001b44:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b46:	4b3e      	ldr	r3, [pc, #248]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b48:	2208      	movs	r2, #8
 8001b4a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001b52:	4b3b      	ldr	r3, [pc, #236]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b58:	4b39      	ldr	r3, [pc, #228]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8001b5e:	4b38      	ldr	r3, [pc, #224]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b60:	2204      	movs	r2, #4
 8001b62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b64:	4b36      	ldr	r3, [pc, #216]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b66:	2220      	movs	r2, #32
 8001b68:	2100      	movs	r1, #0
 8001b6a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b6c:	4b34      	ldr	r3, [pc, #208]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b72:	4b33      	ldr	r3, [pc, #204]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b78:	4b31      	ldr	r3, [pc, #196]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b7a:	222c      	movs	r2, #44	@ 0x2c
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b80:	4b2f      	ldr	r3, [pc, #188]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001b86:	4b2e      	ldr	r3, [pc, #184]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b88:	2207      	movs	r2, #7
 8001b8a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b8e:	2207      	movs	r2, #7
 8001b90:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001b92:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b94:	223c      	movs	r2, #60	@ 0x3c
 8001b96:	2100      	movs	r1, #0
 8001b98:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001b9a:	4b29      	ldr	r3, [pc, #164]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ba0:	4b27      	ldr	r3, [pc, #156]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f000 ffae 	bl	8002b04 <HAL_ADC_Init>
 8001ba8:	1e03      	subs	r3, r0, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001bac:	f000 fb2a 	bl	8002204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc2:	1d3a      	adds	r2, r7, #4
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001bc6:	0011      	movs	r1, r2
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f001 f9e1 	bl	8002f90 <HAL_ADC_ConfigChannel>
 8001bce:	1e03      	subs	r3, r0, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001bd2:	f000 fb17 	bl	8002204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c48 <MX_ADC1_Init+0x138>)
 8001bda:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2204      	movs	r2, #4
 8001be0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001be2:	1d3a      	adds	r2, r7, #4
 8001be4:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001be6:	0011      	movs	r1, r2
 8001be8:	0018      	movs	r0, r3
 8001bea:	f001 f9d1 	bl	8002f90 <HAL_ADC_ConfigChannel>
 8001bee:	1e03      	subs	r3, r0, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001bf2:	f000 fb07 	bl	8002204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4a14      	ldr	r2, [pc, #80]	@ (8001c4c <MX_ADC1_Init+0x13c>)
 8001bfa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2208      	movs	r2, #8
 8001c00:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c02:	1d3a      	adds	r2, r7, #4
 8001c04:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001c06:	0011      	movs	r1, r2
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f001 f9c1 	bl	8002f90 <HAL_ADC_ConfigChannel>
 8001c0e:	1e03      	subs	r3, r0, #0
 8001c10:	d001      	beq.n	8001c16 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8001c12:	f000 faf7 	bl	8002204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	4a0d      	ldr	r2, [pc, #52]	@ (8001c50 <MX_ADC1_Init+0x140>)
 8001c1a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	220c      	movs	r2, #12
 8001c20:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c22:	1d3a      	adds	r2, r7, #4
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <MX_ADC1_Init+0x130>)
 8001c26:	0011      	movs	r1, r2
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f001 f9b1 	bl	8002f90 <HAL_ADC_ConfigChannel>
 8001c2e:	1e03      	subs	r3, r0, #0
 8001c30:	d001      	beq.n	8001c36 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8001c32:	f000 fae7 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b004      	add	sp, #16
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			@ (mov r8, r8)
 8001c40:	20000030 	.word	0x20000030
 8001c44:	40012400 	.word	0x40012400
 8001c48:	04000002 	.word	0x04000002
 8001c4c:	08000004 	.word	0x08000004
 8001c50:	0c000008 	.word	0x0c000008

08001c54 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	@ 0x28
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	2324      	movs	r3, #36	@ 0x24
 8001c60:	001a      	movs	r2, r3
 8001c62:	2100      	movs	r1, #0
 8001c64:	f004 fcea 	bl	800663c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <MX_DAC1_Init+0x78>)
 8001c6a:	4a19      	ldr	r2, [pc, #100]	@ (8001cd0 <MX_DAC1_Init+0x7c>)
 8001c6c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001c6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <MX_DAC1_Init+0x78>)
 8001c70:	0018      	movs	r0, r3
 8001c72:	f001 ff49 	bl	8003b08 <HAL_DAC_Init>
 8001c76:	1e03      	subs	r3, r0, #0
 8001c78:	d001      	beq.n	8001c7e <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 8001c7a:	f000 fac3 	bl	8002204 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001c9c:	1d39      	adds	r1, r7, #4
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <MX_DAC1_Init+0x78>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f001 ffd0 	bl	8003c48 <HAL_DAC_ConfigChannel>
 8001ca8:	1e03      	subs	r3, r0, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8001cac:	f000 faaa 	bl	8002204 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001cb0:	1d39      	adds	r1, r7, #4
 8001cb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <MX_DAC1_Init+0x78>)
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f001 ffc6 	bl	8003c48 <HAL_DAC_ConfigChannel>
 8001cbc:	1e03      	subs	r3, r0, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 8001cc0:	f000 faa0 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001cc4:	46c0      	nop			@ (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b00a      	add	sp, #40	@ 0x28
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200000f0 	.word	0x200000f0
 8001cd0:	40007400 	.word	0x40007400

08001cd4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <MX_TIM14_Init+0x40>)
 8001cda:	4a0f      	ldr	r2, [pc, #60]	@ (8001d18 <MX_TIM14_Init+0x44>)
 8001cdc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 8001cde:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <MX_TIM14_Init+0x40>)
 8001ce0:	223f      	movs	r2, #63	@ 0x3f
 8001ce2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <MX_TIM14_Init+0x40>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10-1;
 8001cea:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <MX_TIM14_Init+0x40>)
 8001cec:	2209      	movs	r2, #9
 8001cee:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <MX_TIM14_Init+0x40>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <MX_TIM14_Init+0x40>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001cfc:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <MX_TIM14_Init+0x40>)
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f003 fb8a 	bl	8005418 <HAL_TIM_Base_Init>
 8001d04:	1e03      	subs	r3, r0, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001d08:	f000 fa7c 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001d0c:	46c0      	nop			@ (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	200001bc 	.word	0x200001bc
 8001d18:	40002000 	.word	0x40002000

08001d1c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d20:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <MX_TIM16_Init+0x44>)
 8001d22:	4a10      	ldr	r2, [pc, #64]	@ (8001d64 <MX_TIM16_Init+0x48>)
 8001d24:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 640-1;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <MX_TIM16_Init+0x44>)
 8001d28:	4a0f      	ldr	r2, [pc, #60]	@ (8001d68 <MX_TIM16_Init+0x4c>)
 8001d2a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <MX_TIM16_Init+0x44>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 250-1;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <MX_TIM16_Init+0x44>)
 8001d34:	22f9      	movs	r2, #249	@ 0xf9
 8001d36:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d38:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <MX_TIM16_Init+0x44>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <MX_TIM16_Init+0x44>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <MX_TIM16_Init+0x44>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d4a:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <MX_TIM16_Init+0x44>)
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f003 fb63 	bl	8005418 <HAL_TIM_Base_Init>
 8001d52:	1e03      	subs	r3, r0, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001d56:	f000 fa55 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000208 	.word	0x20000208
 8001d64:	40014400 	.word	0x40014400
 8001d68:	0000027f 	.word	0x0000027f

08001d6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d70:	4b23      	ldr	r3, [pc, #140]	@ (8001e00 <MX_USART1_UART_Init+0x94>)
 8001d72:	4a24      	ldr	r2, [pc, #144]	@ (8001e04 <MX_USART1_UART_Init+0x98>)
 8001d74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d76:	4b22      	ldr	r3, [pc, #136]	@ (8001e00 <MX_USART1_UART_Init+0x94>)
 8001d78:	22e1      	movs	r2, #225	@ 0xe1
 8001d7a:	0252      	lsls	r2, r2, #9
 8001d7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7e:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <MX_USART1_UART_Init+0x94>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d84:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <MX_USART1_UART_Init+0x94>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <MX_USART1_UART_Init+0x94>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d90:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <MX_USART1_UART_Init+0x94>)
 8001d92:	220c      	movs	r2, #12
 8001d94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <MX_USART1_UART_Init+0x94>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9c:	4b18      	ldr	r3, [pc, #96]	@ (8001e00 <MX_USART1_UART_Init+0x94>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001da2:	4b17      	ldr	r3, [pc, #92]	@ (8001e00 <MX_USART1_UART_Init+0x94>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001da8:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <MX_USART1_UART_Init+0x94>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dae:	4b14      	ldr	r3, [pc, #80]	@ (8001e00 <MX_USART1_UART_Init+0x94>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001db4:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <MX_USART1_UART_Init+0x94>)
 8001db6:	0018      	movs	r0, r3
 8001db8:	f003 fdde 	bl	8005978 <HAL_UART_Init>
 8001dbc:	1e03      	subs	r3, r0, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001dc0:	f000 fa20 	bl	8002204 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e00 <MX_USART1_UART_Init+0x94>)
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f004 fb57 	bl	800647c <HAL_UARTEx_SetTxFifoThreshold>
 8001dce:	1e03      	subs	r3, r0, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001dd2:	f000 fa17 	bl	8002204 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <MX_USART1_UART_Init+0x94>)
 8001dd8:	2100      	movs	r1, #0
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f004 fb8e 	bl	80064fc <HAL_UARTEx_SetRxFifoThreshold>
 8001de0:	1e03      	subs	r3, r0, #0
 8001de2:	d001      	beq.n	8001de8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001de4:	f000 fa0e 	bl	8002204 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001de8:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <MX_USART1_UART_Init+0x94>)
 8001dea:	0018      	movs	r0, r3
 8001dec:	f004 fb0c 	bl	8006408 <HAL_UARTEx_DisableFifoMode>
 8001df0:	1e03      	subs	r3, r0, #0
 8001df2:	d001      	beq.n	8001df8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001df4:	f000 fa06 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001df8:	46c0      	nop			@ (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			@ (mov r8, r8)
 8001e00:	20000254 	.word	0x20000254
 8001e04:	40013800 	.word	0x40013800

08001e08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e0e:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <MX_DMA_Init+0x48>)
 8001e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e12:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <MX_DMA_Init+0x48>)
 8001e14:	2101      	movs	r1, #1
 8001e16:	430a      	orrs	r2, r1
 8001e18:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <MX_DMA_Init+0x48>)
 8001e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2009      	movs	r0, #9
 8001e2c:	f001 fe3a 	bl	8003aa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e30:	2009      	movs	r0, #9
 8001e32:	f001 fe4c 	bl	8003ace <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	200a      	movs	r0, #10
 8001e3c:	f001 fe32 	bl	8003aa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001e40:	200a      	movs	r0, #10
 8001e42:	f001 fe44 	bl	8003ace <HAL_NVIC_EnableIRQ>

}
 8001e46:	46c0      	nop			@ (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b002      	add	sp, #8
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			@ (mov r8, r8)
 8001e50:	40021000 	.word	0x40021000

08001e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b089      	sub	sp, #36	@ 0x24
 8001e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5a:	240c      	movs	r4, #12
 8001e5c:	193b      	adds	r3, r7, r4
 8001e5e:	0018      	movs	r0, r3
 8001e60:	2314      	movs	r3, #20
 8001e62:	001a      	movs	r2, r3
 8001e64:	2100      	movs	r1, #0
 8001e66:	f004 fbe9 	bl	800663c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	4b16      	ldr	r3, [pc, #88]	@ (8001ec4 <MX_GPIO_Init+0x70>)
 8001e6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <MX_GPIO_Init+0x70>)
 8001e70:	2101      	movs	r1, #1
 8001e72:	430a      	orrs	r2, r1
 8001e74:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e76:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <MX_GPIO_Init+0x70>)
 8001e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <MX_GPIO_Init+0x70>)
 8001e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e86:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <MX_GPIO_Init+0x70>)
 8001e88:	2102      	movs	r1, #2
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec4 <MX_GPIO_Init+0x70>)
 8001e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e92:	2202      	movs	r2, #2
 8001e94:	4013      	ands	r3, r2
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e9a:	193b      	adds	r3, r7, r4
 8001e9c:	22c0      	movs	r2, #192	@ 0xc0
 8001e9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea0:	193b      	adds	r3, r7, r4
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	193b      	adds	r3, r7, r4
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eac:	193a      	adds	r2, r7, r4
 8001eae:	23a0      	movs	r3, #160	@ 0xa0
 8001eb0:	05db      	lsls	r3, r3, #23
 8001eb2:	0011      	movs	r1, r2
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f002 fa49 	bl	800434c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001eba:	46c0      	nop			@ (mov r8, r8)
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b009      	add	sp, #36	@ 0x24
 8001ec0:	bd90      	pop	{r4, r7, pc}
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	  value_adc0 = AD_RES_BUFFER[0] - 2048;
 8001ed0:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <HAL_ADC_ConvCpltCallback+0x90>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	4a21      	ldr	r2, [pc, #132]	@ (8001f5c <HAL_ADC_ConvCpltCallback+0x94>)
 8001ed6:	4694      	mov	ip, r2
 8001ed8:	4463      	add	r3, ip
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	b21a      	sxth	r2, r3
 8001ede:	4b20      	ldr	r3, [pc, #128]	@ (8001f60 <HAL_ADC_ConvCpltCallback+0x98>)
 8001ee0:	801a      	strh	r2, [r3, #0]
	  value_adc1 = AD_RES_BUFFER[1] - 2048;
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f58 <HAL_ADC_ConvCpltCallback+0x90>)
 8001ee4:	885b      	ldrh	r3, [r3, #2]
 8001ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f5c <HAL_ADC_ConvCpltCallback+0x94>)
 8001ee8:	4694      	mov	ip, r2
 8001eea:	4463      	add	r3, ip
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f64 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001ef2:	801a      	strh	r2, [r3, #0]
	  value_adc2 = AD_RES_BUFFER[2] - 2048;
 8001ef4:	4b18      	ldr	r3, [pc, #96]	@ (8001f58 <HAL_ADC_ConvCpltCallback+0x90>)
 8001ef6:	889b      	ldrh	r3, [r3, #4]
 8001ef8:	4a18      	ldr	r2, [pc, #96]	@ (8001f5c <HAL_ADC_ConvCpltCallback+0x94>)
 8001efa:	4694      	mov	ip, r2
 8001efc:	4463      	add	r3, ip
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	b21a      	sxth	r2, r3
 8001f02:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001f04:	801a      	strh	r2, [r3, #0]
	  value_adc3 = AD_RES_BUFFER[3] - 2048;
 8001f06:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <HAL_ADC_ConvCpltCallback+0x90>)
 8001f08:	88db      	ldrh	r3, [r3, #6]
 8001f0a:	4a14      	ldr	r2, [pc, #80]	@ (8001f5c <HAL_ADC_ConvCpltCallback+0x94>)
 8001f0c:	4694      	mov	ip, r2
 8001f0e:	4463      	add	r3, ip
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001f16:	801a      	strh	r2, [r3, #0]

	  diff_x += AD_RES_BUFFER[0] - AD_RES_BUFFER[3];
 8001f18:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <HAL_ADC_ConvCpltCallback+0x90>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <HAL_ADC_ConvCpltCallback+0x90>)
 8001f20:	88db      	ldrh	r3, [r3, #6]
 8001f22:	1ad2      	subs	r2, r2, r3
 8001f24:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	18d2      	adds	r2, r2, r3
 8001f2a:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001f2c:	601a      	str	r2, [r3, #0]
	  diff_y += AD_RES_BUFFER[1] - AD_RES_BUFFER[2];
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <HAL_ADC_ConvCpltCallback+0x90>)
 8001f30:	885b      	ldrh	r3, [r3, #2]
 8001f32:	001a      	movs	r2, r3
 8001f34:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <HAL_ADC_ConvCpltCallback+0x90>)
 8001f36:	889b      	ldrh	r3, [r3, #4]
 8001f38:	1ad2      	subs	r2, r2, r3
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <HAL_ADC_ConvCpltCallback+0xac>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	18d2      	adds	r2, r2, r3
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <HAL_ADC_ConvCpltCallback+0xac>)
 8001f42:	601a      	str	r2, [r3, #0]

	  counter++;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001f4c:	601a      	str	r2, [r3, #0]
}
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b002      	add	sp, #8
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	200002fc 	.word	0x200002fc
 8001f5c:	fffff800 	.word	0xfffff800
 8001f60:	200002e8 	.word	0x200002e8
 8001f64:	200002ea 	.word	0x200002ea
 8001f68:	200002ec 	.word	0x200002ec
 8001f6c:	200002ee 	.word	0x200002ee
 8001f70:	200002f0 	.word	0x200002f0
 8001f74:	200002f4 	.word	0x200002f4
 8001f78:	20000310 	.word	0x20000310

08001f7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
    if (htim == &htim14) {
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4b85      	ldr	r3, [pc, #532]	@ (800219c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d101      	bne.n	8001f90 <HAL_TIM_PeriodElapsedCallback+0x14>
        Quad_OutputStep();
 8001f8c:	f7ff fbd2 	bl	8001734 <Quad_OutputStep>
    }
    if (htim == &htim16) {
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	4b83      	ldr	r3, [pc, #524]	@ (80021a0 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d000      	beq.n	8001f9a <HAL_TIM_PeriodElapsedCallback+0x1e>
 8001f98:	e0fc      	b.n	8002194 <HAL_TIM_PeriodElapsedCallback+0x218>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f9a:	b672      	cpsid	i
}
 8001f9c:	46c0      	nop			@ (mov r8, r8)
        int32_t local_diff_x, local_diff_y;
        uint32_t local_counter;

        __disable_irq();
        local_diff_x = diff_x;
 8001f9e:	4b81      	ldr	r3, [pc, #516]	@ (80021a4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	613b      	str	r3, [r7, #16]
        local_diff_y = diff_y;
 8001fa4:	4b80      	ldr	r3, [pc, #512]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
        local_counter = counter;
 8001faa:	4b80      	ldr	r3, [pc, #512]	@ (80021ac <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	60bb      	str	r3, [r7, #8]
        diff_x = 0;
 8001fb0:	4b7c      	ldr	r3, [pc, #496]	@ (80021a4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
        diff_y = 0;
 8001fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
        counter = 0;
 8001fbc:	4b7b      	ldr	r3, [pc, #492]	@ (80021ac <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fc2:	b662      	cpsie	i
}
 8001fc4:	46c0      	nop			@ (mov r8, r8)
        __enable_irq();

        if (local_counter == 0) {
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d11a      	bne.n	8002002 <HAL_TIM_PeriodElapsedCallback+0x86>
            avg_x = value_adc0 - value_adc2;
 8001fcc:	4b78      	ldr	r3, [pc, #480]	@ (80021b0 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	5e9b      	ldrsh	r3, [r3, r2]
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	4b77      	ldr	r3, [pc, #476]	@ (80021b4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	5e5b      	ldrsh	r3, [r3, r1]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	b21a      	sxth	r2, r3
 8001fe2:	4b75      	ldr	r3, [pc, #468]	@ (80021b8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001fe4:	801a      	strh	r2, [r3, #0]
            avg_y = value_adc1 - value_adc3;
 8001fe6:	4b75      	ldr	r3, [pc, #468]	@ (80021bc <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	5e9b      	ldrsh	r3, [r3, r2]
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	4b74      	ldr	r3, [pc, #464]	@ (80021c0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	5e5b      	ldrsh	r3, [r3, r1]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	b21a      	sxth	r2, r3
 8001ffc:	4b71      	ldr	r3, [pc, #452]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001ffe:	801a      	strh	r2, [r3, #0]
 8002000:	e011      	b.n	8002026 <HAL_TIM_PeriodElapsedCallback+0xaa>
        } else {
            avg_x = local_diff_x / (int32_t)local_counter;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	0019      	movs	r1, r3
 8002006:	6938      	ldr	r0, [r7, #16]
 8002008:	f7fe f906 	bl	8000218 <__divsi3>
 800200c:	0003      	movs	r3, r0
 800200e:	b21a      	sxth	r2, r3
 8002010:	4b69      	ldr	r3, [pc, #420]	@ (80021b8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002012:	801a      	strh	r2, [r3, #0]
            avg_y = local_diff_y / (int32_t)local_counter;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	0019      	movs	r1, r3
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f7fe f8fd 	bl	8000218 <__divsi3>
 800201e:	0003      	movs	r3, r0
 8002020:	b21a      	sxth	r2, r3
 8002022:	4b68      	ldr	r3, [pc, #416]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002024:	801a      	strh	r2, [r3, #0]
        }

        angle = atan2f(avg_y, avg_x) * 57.2958f;
 8002026:	4b67      	ldr	r3, [pc, #412]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002028:	2200      	movs	r2, #0
 800202a:	5e9b      	ldrsh	r3, [r3, r2]
 800202c:	0018      	movs	r0, r3
 800202e:	f7ff faa3 	bl	8001578 <__aeabi_i2f>
 8002032:	1c04      	adds	r4, r0, #0
 8002034:	4b60      	ldr	r3, [pc, #384]	@ (80021b8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002036:	2200      	movs	r2, #0
 8002038:	5e9b      	ldrsh	r3, [r3, r2]
 800203a:	0018      	movs	r0, r3
 800203c:	f7ff fa9c 	bl	8001578 <__aeabi_i2f>
 8002040:	1c03      	adds	r3, r0, #0
 8002042:	1c19      	adds	r1, r3, #0
 8002044:	1c20      	adds	r0, r4, #0
 8002046:	f004 fb25 	bl	8006694 <atan2f>
 800204a:	1c03      	adds	r3, r0, #0
 800204c:	495e      	ldr	r1, [pc, #376]	@ (80021c8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800204e:	1c18      	adds	r0, r3, #0
 8002050:	f7fe feb4 	bl	8000dbc <__aeabi_fmul>
 8002054:	1c03      	adds	r3, r0, #0
 8002056:	1c1a      	adds	r2, r3, #0
 8002058:	4b5c      	ldr	r3, [pc, #368]	@ (80021cc <HAL_TIM_PeriodElapsedCallback+0x250>)
 800205a:	601a      	str	r2, [r3, #0]

        if (mode == 1) {
 800205c:	4b5c      	ldr	r3, [pc, #368]	@ (80021d0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d146      	bne.n	80020f2 <HAL_TIM_PeriodElapsedCallback+0x176>
                if (first_sample) {
 8002064:	4b5b      	ldr	r3, [pc, #364]	@ (80021d4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00d      	beq.n	8002088 <HAL_TIM_PeriodElapsedCallback+0x10c>
                    // Seed angle so no huge delta on startup
                    last_angle = angle;
 800206c:	4b57      	ldr	r3, [pc, #348]	@ (80021cc <HAL_TIM_PeriodElapsedCallback+0x250>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b59      	ldr	r3, [pc, #356]	@ (80021d8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002072:	601a      	str	r2, [r3, #0]
                    edge_accum = 0.0f;
 8002074:	4b59      	ldr	r3, [pc, #356]	@ (80021dc <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
                    edges_remaining = 0;
 800207a:	4b59      	ldr	r3, [pc, #356]	@ (80021e0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
                    first_sample = 0;
 8002080:	4b54      	ldr	r3, [pc, #336]	@ (80021d4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
				output_counter = 0;
				angle_scaled = 0;
            }
        }
    }
}
 8002086:	e085      	b.n	8002194 <HAL_TIM_PeriodElapsedCallback+0x218>
                    float delta = angle - last_angle;
 8002088:	4b50      	ldr	r3, [pc, #320]	@ (80021cc <HAL_TIM_PeriodElapsedCallback+0x250>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b52      	ldr	r3, [pc, #328]	@ (80021d8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	1c19      	adds	r1, r3, #0
 8002092:	1c10      	adds	r0, r2, #0
 8002094:	f7fe ffec 	bl	8001070 <__aeabi_fsub>
 8002098:	1c03      	adds	r3, r0, #0
 800209a:	617b      	str	r3, [r7, #20]
                    if (delta > 180.0f) delta -= 360.0f;
 800209c:	4951      	ldr	r1, [pc, #324]	@ (80021e4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800209e:	6978      	ldr	r0, [r7, #20]
 80020a0:	f7fe f9cc 	bl	800043c <__aeabi_fcmpgt>
 80020a4:	1e03      	subs	r3, r0, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_TIM_PeriodElapsedCallback+0x138>
 80020a8:	494f      	ldr	r1, [pc, #316]	@ (80021e8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80020aa:	6978      	ldr	r0, [r7, #20]
 80020ac:	f7fe ffe0 	bl	8001070 <__aeabi_fsub>
 80020b0:	1c03      	adds	r3, r0, #0
 80020b2:	617b      	str	r3, [r7, #20]
                    if (delta < -180.0f) delta += 360.0f;
 80020b4:	494d      	ldr	r1, [pc, #308]	@ (80021ec <HAL_TIM_PeriodElapsedCallback+0x270>)
 80020b6:	6978      	ldr	r0, [r7, #20]
 80020b8:	f7fe f9ac 	bl	8000414 <__aeabi_fcmplt>
 80020bc:	1e03      	subs	r3, r0, #0
 80020be:	d005      	beq.n	80020cc <HAL_TIM_PeriodElapsedCallback+0x150>
 80020c0:	4949      	ldr	r1, [pc, #292]	@ (80021e8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f7fe faba 	bl	800063c <__aeabi_fadd>
 80020c8:	1c03      	adds	r3, r0, #0
 80020ca:	617b      	str	r3, [r7, #20]
                    if (fabsf(delta) > 0.1f) {
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	4947      	ldr	r1, [pc, #284]	@ (80021f0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80020d4:	1c18      	adds	r0, r3, #0
 80020d6:	f7fe f9b1 	bl	800043c <__aeabi_fcmpgt>
 80020da:	1e03      	subs	r3, r0, #0
 80020dc:	d100      	bne.n	80020e0 <HAL_TIM_PeriodElapsedCallback+0x164>
}
 80020de:	e059      	b.n	8002194 <HAL_TIM_PeriodElapsedCallback+0x218>
                    	Quad_Update(delta);
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	1c18      	adds	r0, r3, #0
 80020e4:	f7ff fb8e 	bl	8001804 <Quad_Update>
                    	last_angle = angle;
 80020e8:	4b38      	ldr	r3, [pc, #224]	@ (80021cc <HAL_TIM_PeriodElapsedCallback+0x250>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b3a      	ldr	r3, [pc, #232]	@ (80021d8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80020ee:	601a      	str	r2, [r3, #0]
}
 80020f0:	e050      	b.n	8002194 <HAL_TIM_PeriodElapsedCallback+0x218>
            angle_scaled += (angle + 180.0f) * 3848.0f / 360.0f;
 80020f2:	4b36      	ldr	r3, [pc, #216]	@ (80021cc <HAL_TIM_PeriodElapsedCallback+0x250>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	493b      	ldr	r1, [pc, #236]	@ (80021e4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80020f8:	1c18      	adds	r0, r3, #0
 80020fa:	f7fe fa9f 	bl	800063c <__aeabi_fadd>
 80020fe:	1c03      	adds	r3, r0, #0
 8002100:	493c      	ldr	r1, [pc, #240]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002102:	1c18      	adds	r0, r3, #0
 8002104:	f7fe fe5a 	bl	8000dbc <__aeabi_fmul>
 8002108:	1c03      	adds	r3, r0, #0
 800210a:	4937      	ldr	r1, [pc, #220]	@ (80021e8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800210c:	1c18      	adds	r0, r3, #0
 800210e:	f7fe fc87 	bl	8000a20 <__aeabi_fdiv>
 8002112:	1c03      	adds	r3, r0, #0
 8002114:	1c1c      	adds	r4, r3, #0
 8002116:	4b38      	ldr	r3, [pc, #224]	@ (80021f8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	b21b      	sxth	r3, r3
 800211c:	0018      	movs	r0, r3
 800211e:	f7ff fa2b 	bl	8001578 <__aeabi_i2f>
 8002122:	1c03      	adds	r3, r0, #0
 8002124:	1c19      	adds	r1, r3, #0
 8002126:	1c20      	adds	r0, r4, #0
 8002128:	f7fe fa88 	bl	800063c <__aeabi_fadd>
 800212c:	1c03      	adds	r3, r0, #0
 800212e:	1c18      	adds	r0, r3, #0
 8002130:	f7ff fa02 	bl	8001538 <__aeabi_f2iz>
 8002134:	0003      	movs	r3, r0
 8002136:	b21a      	sxth	r2, r3
 8002138:	4b2f      	ldr	r3, [pc, #188]	@ (80021f8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800213a:	801a      	strh	r2, [r3, #0]
            output_counter++;
 800213c:	4b2f      	ldr	r3, [pc, #188]	@ (80021fc <HAL_TIM_PeriodElapsedCallback+0x280>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	3301      	adds	r3, #1
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b2d      	ldr	r3, [pc, #180]	@ (80021fc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002148:	701a      	strb	r2, [r3, #0]
            if (output_counter >= 4) { // 100 Hz update
 800214a:	4b2c      	ldr	r3, [pc, #176]	@ (80021fc <HAL_TIM_PeriodElapsedCallback+0x280>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b03      	cmp	r3, #3
 8002152:	d91f      	bls.n	8002194 <HAL_TIM_PeriodElapsedCallback+0x218>
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, angle_scaled/4);
 8002154:	4b28      	ldr	r3, [pc, #160]	@ (80021f8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	b21b      	sxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	da00      	bge.n	8002160 <HAL_TIM_PeriodElapsedCallback+0x1e4>
 800215e:	3303      	adds	r3, #3
 8002160:	109b      	asrs	r3, r3, #2
 8002162:	b21b      	sxth	r3, r3
 8002164:	4826      	ldr	r0, [pc, #152]	@ (8002200 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002166:	2200      	movs	r2, #0
 8002168:	2100      	movs	r1, #0
 800216a:	f001 fd46 	bl	8003bfa <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, angle_scaled/4);
 800216e:	4b22      	ldr	r3, [pc, #136]	@ (80021f8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	b21b      	sxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	da00      	bge.n	800217a <HAL_TIM_PeriodElapsedCallback+0x1fe>
 8002178:	3303      	adds	r3, #3
 800217a:	109b      	asrs	r3, r3, #2
 800217c:	b21b      	sxth	r3, r3
 800217e:	4820      	ldr	r0, [pc, #128]	@ (8002200 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002180:	2200      	movs	r2, #0
 8002182:	2110      	movs	r1, #16
 8002184:	f001 fd39 	bl	8003bfa <HAL_DAC_SetValue>
				output_counter = 0;
 8002188:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <HAL_TIM_PeriodElapsedCallback+0x280>)
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
				angle_scaled = 0;
 800218e:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002190:	2200      	movs	r2, #0
 8002192:	801a      	strh	r2, [r3, #0]
}
 8002194:	46c0      	nop			@ (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	b007      	add	sp, #28
 800219a:	bd90      	pop	{r4, r7, pc}
 800219c:	200001bc 	.word	0x200001bc
 80021a0:	20000208 	.word	0x20000208
 80021a4:	200002f0 	.word	0x200002f0
 80021a8:	200002f4 	.word	0x200002f4
 80021ac:	20000310 	.word	0x20000310
 80021b0:	200002e8 	.word	0x200002e8
 80021b4:	200002ec 	.word	0x200002ec
 80021b8:	200002f8 	.word	0x200002f8
 80021bc:	200002ea 	.word	0x200002ea
 80021c0:	200002ee 	.word	0x200002ee
 80021c4:	200002fa 	.word	0x200002fa
 80021c8:	42652ee6 	.word	0x42652ee6
 80021cc:	20000304 	.word	0x20000304
 80021d0:	20000317 	.word	0x20000317
 80021d4:	20000004 	.word	0x20000004
 80021d8:	20000308 	.word	0x20000308
 80021dc:	20000320 	.word	0x20000320
 80021e0:	2000031c 	.word	0x2000031c
 80021e4:	43340000 	.word	0x43340000
 80021e8:	43b40000 	.word	0x43b40000
 80021ec:	c3340000 	.word	0xc3340000
 80021f0:	3dcccccd 	.word	0x3dcccccd
 80021f4:	45708000 	.word	0x45708000
 80021f8:	2000030c 	.word	0x2000030c
 80021fc:	20000314 	.word	0x20000314
 8002200:	200000f0 	.word	0x200000f0

08002204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002208:	b672      	cpsid	i
}
 800220a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800220c:	46c0      	nop			@ (mov r8, r8)
 800220e:	e7fd      	b.n	800220c <Error_Handler+0x8>

08002210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <HAL_MspInit+0x44>)
 8002218:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800221a:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <HAL_MspInit+0x44>)
 800221c:	2101      	movs	r1, #1
 800221e:	430a      	orrs	r2, r1
 8002220:	641a      	str	r2, [r3, #64]	@ 0x40
 8002222:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <HAL_MspInit+0x44>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	2201      	movs	r2, #1
 8002228:	4013      	ands	r3, r2
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <HAL_MspInit+0x44>)
 8002230:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002232:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <HAL_MspInit+0x44>)
 8002234:	2180      	movs	r1, #128	@ 0x80
 8002236:	0549      	lsls	r1, r1, #21
 8002238:	430a      	orrs	r2, r1
 800223a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <HAL_MspInit+0x44>)
 800223e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002240:	2380      	movs	r3, #128	@ 0x80
 8002242:	055b      	lsls	r3, r3, #21
 8002244:	4013      	ands	r3, r2
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	46bd      	mov	sp, r7
 800224e:	b002      	add	sp, #8
 8002250:	bd80      	pop	{r7, pc}
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	40021000 	.word	0x40021000

08002258 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b097      	sub	sp, #92	@ 0x5c
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	2344      	movs	r3, #68	@ 0x44
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	0018      	movs	r0, r3
 8002266:	2314      	movs	r3, #20
 8002268:	001a      	movs	r2, r3
 800226a:	2100      	movs	r1, #0
 800226c:	f004 f9e6 	bl	800663c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002270:	2410      	movs	r4, #16
 8002272:	193b      	adds	r3, r7, r4
 8002274:	0018      	movs	r0, r3
 8002276:	2334      	movs	r3, #52	@ 0x34
 8002278:	001a      	movs	r2, r3
 800227a:	2100      	movs	r1, #0
 800227c:	f004 f9de 	bl	800663c <memset>
  if(hadc->Instance==ADC1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a35      	ldr	r2, [pc, #212]	@ (800235c <HAL_ADC_MspInit+0x104>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d164      	bne.n	8002354 <HAL_ADC_MspInit+0xfc>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800228a:	193b      	adds	r3, r7, r4
 800228c:	2280      	movs	r2, #128	@ 0x80
 800228e:	01d2      	lsls	r2, r2, #7
 8002290:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002292:	193b      	adds	r3, r7, r4
 8002294:	2200      	movs	r2, #0
 8002296:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002298:	193b      	adds	r3, r7, r4
 800229a:	0018      	movs	r0, r3
 800229c:	f002 ff04 	bl	80050a8 <HAL_RCCEx_PeriphCLKConfig>
 80022a0:	1e03      	subs	r3, r0, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80022a4:	f7ff ffae 	bl	8002204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80022a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002360 <HAL_ADC_MspInit+0x108>)
 80022aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002360 <HAL_ADC_MspInit+0x108>)
 80022ae:	2180      	movs	r1, #128	@ 0x80
 80022b0:	0349      	lsls	r1, r1, #13
 80022b2:	430a      	orrs	r2, r1
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80022b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002360 <HAL_ADC_MspInit+0x108>)
 80022b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022ba:	2380      	movs	r3, #128	@ 0x80
 80022bc:	035b      	lsls	r3, r3, #13
 80022be:	4013      	ands	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c4:	4b26      	ldr	r3, [pc, #152]	@ (8002360 <HAL_ADC_MspInit+0x108>)
 80022c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022c8:	4b25      	ldr	r3, [pc, #148]	@ (8002360 <HAL_ADC_MspInit+0x108>)
 80022ca:	2101      	movs	r1, #1
 80022cc:	430a      	orrs	r2, r1
 80022ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80022d0:	4b23      	ldr	r3, [pc, #140]	@ (8002360 <HAL_ADC_MspInit+0x108>)
 80022d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d4:	2201      	movs	r2, #1
 80022d6:	4013      	ands	r3, r2
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80022dc:	2144      	movs	r1, #68	@ 0x44
 80022de:	187b      	adds	r3, r7, r1
 80022e0:	220f      	movs	r2, #15
 80022e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022e4:	187b      	adds	r3, r7, r1
 80022e6:	2203      	movs	r2, #3
 80022e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	187b      	adds	r3, r7, r1
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f0:	187a      	adds	r2, r7, r1
 80022f2:	23a0      	movs	r3, #160	@ 0xa0
 80022f4:	05db      	lsls	r3, r3, #23
 80022f6:	0011      	movs	r1, r2
 80022f8:	0018      	movs	r0, r3
 80022fa:	f002 f827 	bl	800434c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80022fe:	4b19      	ldr	r3, [pc, #100]	@ (8002364 <HAL_ADC_MspInit+0x10c>)
 8002300:	4a19      	ldr	r2, [pc, #100]	@ (8002368 <HAL_ADC_MspInit+0x110>)
 8002302:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002304:	4b17      	ldr	r3, [pc, #92]	@ (8002364 <HAL_ADC_MspInit+0x10c>)
 8002306:	2205      	movs	r2, #5
 8002308:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800230a:	4b16      	ldr	r3, [pc, #88]	@ (8002364 <HAL_ADC_MspInit+0x10c>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002310:	4b14      	ldr	r3, [pc, #80]	@ (8002364 <HAL_ADC_MspInit+0x10c>)
 8002312:	2200      	movs	r2, #0
 8002314:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002316:	4b13      	ldr	r3, [pc, #76]	@ (8002364 <HAL_ADC_MspInit+0x10c>)
 8002318:	2280      	movs	r2, #128	@ 0x80
 800231a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800231c:	4b11      	ldr	r3, [pc, #68]	@ (8002364 <HAL_ADC_MspInit+0x10c>)
 800231e:	2280      	movs	r2, #128	@ 0x80
 8002320:	0052      	lsls	r2, r2, #1
 8002322:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002324:	4b0f      	ldr	r3, [pc, #60]	@ (8002364 <HAL_ADC_MspInit+0x10c>)
 8002326:	2280      	movs	r2, #128	@ 0x80
 8002328:	00d2      	lsls	r2, r2, #3
 800232a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800232c:	4b0d      	ldr	r3, [pc, #52]	@ (8002364 <HAL_ADC_MspInit+0x10c>)
 800232e:	2220      	movs	r2, #32
 8002330:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002332:	4b0c      	ldr	r3, [pc, #48]	@ (8002364 <HAL_ADC_MspInit+0x10c>)
 8002334:	2200      	movs	r2, #0
 8002336:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002338:	4b0a      	ldr	r3, [pc, #40]	@ (8002364 <HAL_ADC_MspInit+0x10c>)
 800233a:	0018      	movs	r0, r3
 800233c:	f001 fdb4 	bl	8003ea8 <HAL_DMA_Init>
 8002340:	1e03      	subs	r3, r0, #0
 8002342:	d001      	beq.n	8002348 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8002344:	f7ff ff5e 	bl	8002204 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a06      	ldr	r2, [pc, #24]	@ (8002364 <HAL_ADC_MspInit+0x10c>)
 800234c:	651a      	str	r2, [r3, #80]	@ 0x50
 800234e:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <HAL_ADC_MspInit+0x10c>)
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002354:	46c0      	nop			@ (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	b017      	add	sp, #92	@ 0x5c
 800235a:	bd90      	pop	{r4, r7, pc}
 800235c:	40012400 	.word	0x40012400
 8002360:	40021000 	.word	0x40021000
 8002364:	20000094 	.word	0x20000094
 8002368:	4002001c 	.word	0x4002001c

0800236c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b08b      	sub	sp, #44	@ 0x2c
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	2414      	movs	r4, #20
 8002376:	193b      	adds	r3, r7, r4
 8002378:	0018      	movs	r0, r3
 800237a:	2314      	movs	r3, #20
 800237c:	001a      	movs	r2, r3
 800237e:	2100      	movs	r1, #0
 8002380:	f004 f95c 	bl	800663c <memset>
  if(hdac->Instance==DAC1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a43      	ldr	r2, [pc, #268]	@ (8002498 <HAL_DAC_MspInit+0x12c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d000      	beq.n	8002390 <HAL_DAC_MspInit+0x24>
 800238e:	e07f      	b.n	8002490 <HAL_DAC_MspInit+0x124>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002390:	4b42      	ldr	r3, [pc, #264]	@ (800249c <HAL_DAC_MspInit+0x130>)
 8002392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002394:	4b41      	ldr	r3, [pc, #260]	@ (800249c <HAL_DAC_MspInit+0x130>)
 8002396:	2180      	movs	r1, #128	@ 0x80
 8002398:	0589      	lsls	r1, r1, #22
 800239a:	430a      	orrs	r2, r1
 800239c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800239e:	4b3f      	ldr	r3, [pc, #252]	@ (800249c <HAL_DAC_MspInit+0x130>)
 80023a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023a2:	2380      	movs	r3, #128	@ 0x80
 80023a4:	059b      	lsls	r3, r3, #22
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ac:	4b3b      	ldr	r3, [pc, #236]	@ (800249c <HAL_DAC_MspInit+0x130>)
 80023ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023b0:	4b3a      	ldr	r3, [pc, #232]	@ (800249c <HAL_DAC_MspInit+0x130>)
 80023b2:	2101      	movs	r1, #1
 80023b4:	430a      	orrs	r2, r1
 80023b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80023b8:	4b38      	ldr	r3, [pc, #224]	@ (800249c <HAL_DAC_MspInit+0x130>)
 80023ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023bc:	2201      	movs	r2, #1
 80023be:	4013      	ands	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023c4:	193b      	adds	r3, r7, r4
 80023c6:	2230      	movs	r2, #48	@ 0x30
 80023c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ca:	193b      	adds	r3, r7, r4
 80023cc:	2203      	movs	r2, #3
 80023ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	193b      	adds	r3, r7, r4
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d6:	193a      	adds	r2, r7, r4
 80023d8:	23a0      	movs	r3, #160	@ 0xa0
 80023da:	05db      	lsls	r3, r3, #23
 80023dc:	0011      	movs	r1, r2
 80023de:	0018      	movs	r0, r3
 80023e0:	f001 ffb4 	bl	800434c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80023e4:	4b2e      	ldr	r3, [pc, #184]	@ (80024a0 <HAL_DAC_MspInit+0x134>)
 80023e6:	4a2f      	ldr	r2, [pc, #188]	@ (80024a4 <HAL_DAC_MspInit+0x138>)
 80023e8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80023ea:	4b2d      	ldr	r3, [pc, #180]	@ (80024a0 <HAL_DAC_MspInit+0x134>)
 80023ec:	2208      	movs	r2, #8
 80023ee:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023f0:	4b2b      	ldr	r3, [pc, #172]	@ (80024a0 <HAL_DAC_MspInit+0x134>)
 80023f2:	2210      	movs	r2, #16
 80023f4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023f6:	4b2a      	ldr	r3, [pc, #168]	@ (80024a0 <HAL_DAC_MspInit+0x134>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80023fc:	4b28      	ldr	r3, [pc, #160]	@ (80024a0 <HAL_DAC_MspInit+0x134>)
 80023fe:	2280      	movs	r2, #128	@ 0x80
 8002400:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002402:	4b27      	ldr	r3, [pc, #156]	@ (80024a0 <HAL_DAC_MspInit+0x134>)
 8002404:	2280      	movs	r2, #128	@ 0x80
 8002406:	0052      	lsls	r2, r2, #1
 8002408:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800240a:	4b25      	ldr	r3, [pc, #148]	@ (80024a0 <HAL_DAC_MspInit+0x134>)
 800240c:	2280      	movs	r2, #128	@ 0x80
 800240e:	00d2      	lsls	r2, r2, #3
 8002410:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002412:	4b23      	ldr	r3, [pc, #140]	@ (80024a0 <HAL_DAC_MspInit+0x134>)
 8002414:	2220      	movs	r2, #32
 8002416:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002418:	4b21      	ldr	r3, [pc, #132]	@ (80024a0 <HAL_DAC_MspInit+0x134>)
 800241a:	2200      	movs	r2, #0
 800241c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800241e:	4b20      	ldr	r3, [pc, #128]	@ (80024a0 <HAL_DAC_MspInit+0x134>)
 8002420:	0018      	movs	r0, r3
 8002422:	f001 fd41 	bl	8003ea8 <HAL_DMA_Init>
 8002426:	1e03      	subs	r3, r0, #0
 8002428:	d001      	beq.n	800242e <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 800242a:	f7ff feeb 	bl	8002204 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a1b      	ldr	r2, [pc, #108]	@ (80024a0 <HAL_DAC_MspInit+0x134>)
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <HAL_DAC_MspInit+0x134>)
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	629a      	str	r2, [r3, #40]	@ 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel3;
 800243a:	4b1b      	ldr	r3, [pc, #108]	@ (80024a8 <HAL_DAC_MspInit+0x13c>)
 800243c:	4a1b      	ldr	r2, [pc, #108]	@ (80024ac <HAL_DAC_MspInit+0x140>)
 800243e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 8002440:	4b19      	ldr	r3, [pc, #100]	@ (80024a8 <HAL_DAC_MspInit+0x13c>)
 8002442:	2209      	movs	r2, #9
 8002444:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002446:	4b18      	ldr	r3, [pc, #96]	@ (80024a8 <HAL_DAC_MspInit+0x13c>)
 8002448:	2210      	movs	r2, #16
 800244a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800244c:	4b16      	ldr	r3, [pc, #88]	@ (80024a8 <HAL_DAC_MspInit+0x13c>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002452:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <HAL_DAC_MspInit+0x13c>)
 8002454:	2280      	movs	r2, #128	@ 0x80
 8002456:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002458:	4b13      	ldr	r3, [pc, #76]	@ (80024a8 <HAL_DAC_MspInit+0x13c>)
 800245a:	2280      	movs	r2, #128	@ 0x80
 800245c:	0052      	lsls	r2, r2, #1
 800245e:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002460:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HAL_DAC_MspInit+0x13c>)
 8002462:	2280      	movs	r2, #128	@ 0x80
 8002464:	00d2      	lsls	r2, r2, #3
 8002466:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8002468:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <HAL_DAC_MspInit+0x13c>)
 800246a:	2220      	movs	r2, #32
 800246c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800246e:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <HAL_DAC_MspInit+0x13c>)
 8002470:	2200      	movs	r2, #0
 8002472:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8002474:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <HAL_DAC_MspInit+0x13c>)
 8002476:	0018      	movs	r0, r3
 8002478:	f001 fd16 	bl	8003ea8 <HAL_DMA_Init>
 800247c:	1e03      	subs	r3, r0, #0
 800247e:	d001      	beq.n	8002484 <HAL_DAC_MspInit+0x118>
    {
      Error_Handler();
 8002480:	f7ff fec0 	bl	8002204 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a08      	ldr	r2, [pc, #32]	@ (80024a8 <HAL_DAC_MspInit+0x13c>)
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	4b07      	ldr	r3, [pc, #28]	@ (80024a8 <HAL_DAC_MspInit+0x13c>)
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002490:	46c0      	nop			@ (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	b00b      	add	sp, #44	@ 0x2c
 8002496:	bd90      	pop	{r4, r7, pc}
 8002498:	40007400 	.word	0x40007400
 800249c:	40021000 	.word	0x40021000
 80024a0:	20000104 	.word	0x20000104
 80024a4:	40020008 	.word	0x40020008
 80024a8:	20000160 	.word	0x20000160
 80024ac:	40020030 	.word	0x40020030

080024b0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002530 <HAL_TIM_Base_MspInit+0x80>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d116      	bne.n	80024f0 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80024c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002534 <HAL_TIM_Base_MspInit+0x84>)
 80024c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <HAL_TIM_Base_MspInit+0x84>)
 80024c8:	2180      	movs	r1, #128	@ 0x80
 80024ca:	0209      	lsls	r1, r1, #8
 80024cc:	430a      	orrs	r2, r1
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80024d0:	4b18      	ldr	r3, [pc, #96]	@ (8002534 <HAL_TIM_Base_MspInit+0x84>)
 80024d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024d4:	2380      	movs	r3, #128	@ 0x80
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	4013      	ands	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	2013      	movs	r0, #19
 80024e4:	f001 fade 	bl	8003aa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80024e8:	2013      	movs	r0, #19
 80024ea:	f001 faf0 	bl	8003ace <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 80024ee:	e01a      	b.n	8002526 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM16)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a10      	ldr	r2, [pc, #64]	@ (8002538 <HAL_TIM_Base_MspInit+0x88>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d115      	bne.n	8002526 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80024fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <HAL_TIM_Base_MspInit+0x84>)
 80024fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002534 <HAL_TIM_Base_MspInit+0x84>)
 8002500:	2180      	movs	r1, #128	@ 0x80
 8002502:	0289      	lsls	r1, r1, #10
 8002504:	430a      	orrs	r2, r1
 8002506:	641a      	str	r2, [r3, #64]	@ 0x40
 8002508:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <HAL_TIM_Base_MspInit+0x84>)
 800250a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800250c:	2380      	movs	r3, #128	@ 0x80
 800250e:	029b      	lsls	r3, r3, #10
 8002510:	4013      	ands	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	2015      	movs	r0, #21
 800251c:	f001 fac2 	bl	8003aa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002520:	2015      	movs	r0, #21
 8002522:	f001 fad4 	bl	8003ace <HAL_NVIC_EnableIRQ>
}
 8002526:	46c0      	nop			@ (mov r8, r8)
 8002528:	46bd      	mov	sp, r7
 800252a:	b004      	add	sp, #16
 800252c:	bd80      	pop	{r7, pc}
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	40002000 	.word	0x40002000
 8002534:	40021000 	.word	0x40021000
 8002538:	40014400 	.word	0x40014400

0800253c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b097      	sub	sp, #92	@ 0x5c
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	2344      	movs	r3, #68	@ 0x44
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	0018      	movs	r0, r3
 800254a:	2314      	movs	r3, #20
 800254c:	001a      	movs	r2, r3
 800254e:	2100      	movs	r1, #0
 8002550:	f004 f874 	bl	800663c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002554:	2410      	movs	r4, #16
 8002556:	193b      	adds	r3, r7, r4
 8002558:	0018      	movs	r0, r3
 800255a:	2334      	movs	r3, #52	@ 0x34
 800255c:	001a      	movs	r2, r3
 800255e:	2100      	movs	r1, #0
 8002560:	f004 f86c 	bl	800663c <memset>
  if(huart->Instance==USART1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a22      	ldr	r2, [pc, #136]	@ (80025f4 <HAL_UART_MspInit+0xb8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d13d      	bne.n	80025ea <HAL_UART_MspInit+0xae>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800256e:	193b      	adds	r3, r7, r4
 8002570:	2201      	movs	r2, #1
 8002572:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002574:	193b      	adds	r3, r7, r4
 8002576:	2200      	movs	r2, #0
 8002578:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800257a:	193b      	adds	r3, r7, r4
 800257c:	0018      	movs	r0, r3
 800257e:	f002 fd93 	bl	80050a8 <HAL_RCCEx_PeriphCLKConfig>
 8002582:	1e03      	subs	r3, r0, #0
 8002584:	d001      	beq.n	800258a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002586:	f7ff fe3d 	bl	8002204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800258a:	4b1b      	ldr	r3, [pc, #108]	@ (80025f8 <HAL_UART_MspInit+0xbc>)
 800258c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800258e:	4b1a      	ldr	r3, [pc, #104]	@ (80025f8 <HAL_UART_MspInit+0xbc>)
 8002590:	2180      	movs	r1, #128	@ 0x80
 8002592:	01c9      	lsls	r1, r1, #7
 8002594:	430a      	orrs	r2, r1
 8002596:	641a      	str	r2, [r3, #64]	@ 0x40
 8002598:	4b17      	ldr	r3, [pc, #92]	@ (80025f8 <HAL_UART_MspInit+0xbc>)
 800259a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800259c:	2380      	movs	r3, #128	@ 0x80
 800259e:	01db      	lsls	r3, r3, #7
 80025a0:	4013      	ands	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a6:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <HAL_UART_MspInit+0xbc>)
 80025a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025aa:	4b13      	ldr	r3, [pc, #76]	@ (80025f8 <HAL_UART_MspInit+0xbc>)
 80025ac:	2102      	movs	r1, #2
 80025ae:	430a      	orrs	r2, r1
 80025b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80025b2:	4b11      	ldr	r3, [pc, #68]	@ (80025f8 <HAL_UART_MspInit+0xbc>)
 80025b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b6:	2202      	movs	r2, #2
 80025b8:	4013      	ands	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025be:	2144      	movs	r1, #68	@ 0x44
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	22c0      	movs	r2, #192	@ 0xc0
 80025c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2202      	movs	r2, #2
 80025ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	187b      	adds	r3, r7, r1
 80025d4:	2200      	movs	r2, #0
 80025d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	4a06      	ldr	r2, [pc, #24]	@ (80025fc <HAL_UART_MspInit+0xc0>)
 80025e2:	0019      	movs	r1, r3
 80025e4:	0010      	movs	r0, r2
 80025e6:	f001 feb1 	bl	800434c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b017      	add	sp, #92	@ 0x5c
 80025f0:	bd90      	pop	{r4, r7, pc}
 80025f2:	46c0      	nop			@ (mov r8, r8)
 80025f4:	40013800 	.word	0x40013800
 80025f8:	40021000 	.word	0x40021000
 80025fc:	50000400 	.word	0x50000400

08002600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002604:	46c0      	nop			@ (mov r8, r8)
 8002606:	e7fd      	b.n	8002604 <NMI_Handler+0x4>

08002608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260c:	46c0      	nop			@ (mov r8, r8)
 800260e:	e7fd      	b.n	800260c <HardFault_Handler+0x4>

08002610 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002614:	46c0      	nop			@ (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800261e:	46c0      	nop			@ (mov r8, r8)
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002628:	f000 f8d4 	bl	80027d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800262c:	46c0      	nop			@ (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002638:	4b03      	ldr	r3, [pc, #12]	@ (8002648 <DMA1_Channel1_IRQHandler+0x14>)
 800263a:	0018      	movs	r0, r3
 800263c:	f001 fd44 	bl	80040c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002640:	46c0      	nop			@ (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			@ (mov r8, r8)
 8002648:	20000104 	.word	0x20000104

0800264c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002650:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002652:	0018      	movs	r0, r3
 8002654:	f001 fd38 	bl	80040c8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002658:	4b04      	ldr	r3, [pc, #16]	@ (800266c <DMA1_Channel2_3_IRQHandler+0x20>)
 800265a:	0018      	movs	r0, r3
 800265c:	f001 fd34 	bl	80040c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002660:	46c0      	nop			@ (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			@ (mov r8, r8)
 8002668:	20000094 	.word	0x20000094
 800266c:	20000160 	.word	0x20000160

08002670 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002674:	4b03      	ldr	r3, [pc, #12]	@ (8002684 <TIM14_IRQHandler+0x14>)
 8002676:	0018      	movs	r0, r3
 8002678:	f002 ffb0 	bl	80055dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800267c:	46c0      	nop			@ (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	200001bc 	.word	0x200001bc

08002688 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800268c:	4b03      	ldr	r3, [pc, #12]	@ (800269c <TIM16_IRQHandler+0x14>)
 800268e:	0018      	movs	r0, r3
 8002690:	f002 ffa4 	bl	80055dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002694:	46c0      	nop			@ (mov r8, r8)
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	20000208 	.word	0x20000208

080026a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a4:	46c0      	nop			@ (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026ac:	480d      	ldr	r0, [pc, #52]	@ (80026e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026b0:	f7ff fff6 	bl	80026a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b4:	480c      	ldr	r0, [pc, #48]	@ (80026e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80026b6:	490d      	ldr	r1, [pc, #52]	@ (80026ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <LoopForever+0xe>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026bc:	e002      	b.n	80026c4 <LoopCopyDataInit>

080026be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c2:	3304      	adds	r3, #4

080026c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c8:	d3f9      	bcc.n	80026be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ca:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026cc:	4c0a      	ldr	r4, [pc, #40]	@ (80026f8 <LoopForever+0x16>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d0:	e001      	b.n	80026d6 <LoopFillZerobss>

080026d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d4:	3204      	adds	r2, #4

080026d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d8:	d3fb      	bcc.n	80026d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026da:	f003 ffb7 	bl	800664c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80026de:	f7ff f923 	bl	8001928 <main>

080026e2 <LoopForever>:

LoopForever:
  b LoopForever
 80026e2:	e7fe      	b.n	80026e2 <LoopForever>
  ldr   r0, =_estack
 80026e4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80026e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ec:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80026f0:	08006b6c 	.word	0x08006b6c
  ldr r2, =_sbss
 80026f4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80026f8:	2000032c 	.word	0x2000032c

080026fc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026fc:	e7fe      	b.n	80026fc <ADC1_COMP_IRQHandler>
	...

08002700 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002706:	1dfb      	adds	r3, r7, #7
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800270c:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <HAL_Init+0x3c>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b0a      	ldr	r3, [pc, #40]	@ (800273c <HAL_Init+0x3c>)
 8002712:	2180      	movs	r1, #128	@ 0x80
 8002714:	0049      	lsls	r1, r1, #1
 8002716:	430a      	orrs	r2, r1
 8002718:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800271a:	2003      	movs	r0, #3
 800271c:	f000 f810 	bl	8002740 <HAL_InitTick>
 8002720:	1e03      	subs	r3, r0, #0
 8002722:	d003      	beq.n	800272c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002724:	1dfb      	adds	r3, r7, #7
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	e001      	b.n	8002730 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800272c:	f7ff fd70 	bl	8002210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002730:	1dfb      	adds	r3, r7, #7
 8002732:	781b      	ldrb	r3, [r3, #0]
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	b002      	add	sp, #8
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40022000 	.word	0x40022000

08002740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002748:	230f      	movs	r3, #15
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002750:	4b1d      	ldr	r3, [pc, #116]	@ (80027c8 <HAL_InitTick+0x88>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d02b      	beq.n	80027b0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002758:	4b1c      	ldr	r3, [pc, #112]	@ (80027cc <HAL_InitTick+0x8c>)
 800275a:	681c      	ldr	r4, [r3, #0]
 800275c:	4b1a      	ldr	r3, [pc, #104]	@ (80027c8 <HAL_InitTick+0x88>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	0019      	movs	r1, r3
 8002762:	23fa      	movs	r3, #250	@ 0xfa
 8002764:	0098      	lsls	r0, r3, #2
 8002766:	f7fd fccd 	bl	8000104 <__udivsi3>
 800276a:	0003      	movs	r3, r0
 800276c:	0019      	movs	r1, r3
 800276e:	0020      	movs	r0, r4
 8002770:	f7fd fcc8 	bl	8000104 <__udivsi3>
 8002774:	0003      	movs	r3, r0
 8002776:	0018      	movs	r0, r3
 8002778:	f001 f9b9 	bl	8003aee <HAL_SYSTICK_Config>
 800277c:	1e03      	subs	r3, r0, #0
 800277e:	d112      	bne.n	80027a6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d80a      	bhi.n	800279c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	2301      	movs	r3, #1
 800278a:	425b      	negs	r3, r3
 800278c:	2200      	movs	r2, #0
 800278e:	0018      	movs	r0, r3
 8002790:	f001 f988 	bl	8003aa4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002794:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <HAL_InitTick+0x90>)
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e00d      	b.n	80027b8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800279c:	230f      	movs	r3, #15
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e008      	b.n	80027b8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027a6:	230f      	movs	r3, #15
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	e003      	b.n	80027b8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027b0:	230f      	movs	r3, #15
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80027b8:	230f      	movs	r3, #15
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	781b      	ldrb	r3, [r3, #0]
}
 80027be:	0018      	movs	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b005      	add	sp, #20
 80027c4:	bd90      	pop	{r4, r7, pc}
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	20000010 	.word	0x20000010
 80027cc:	20000008 	.word	0x20000008
 80027d0:	2000000c 	.word	0x2000000c

080027d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027d8:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <HAL_IncTick+0x1c>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	001a      	movs	r2, r3
 80027de:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <HAL_IncTick+0x20>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	18d2      	adds	r2, r2, r3
 80027e4:	4b03      	ldr	r3, [pc, #12]	@ (80027f4 <HAL_IncTick+0x20>)
 80027e6:	601a      	str	r2, [r3, #0]
}
 80027e8:	46c0      	nop			@ (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			@ (mov r8, r8)
 80027f0:	20000010 	.word	0x20000010
 80027f4:	20000328 	.word	0x20000328

080027f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  return uwTick;
 80027fc:	4b02      	ldr	r3, [pc, #8]	@ (8002808 <HAL_GetTick+0x10>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			@ (mov r8, r8)
 8002808:	20000328 	.word	0x20000328

0800280c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002814:	f7ff fff0 	bl	80027f8 <HAL_GetTick>
 8002818:	0003      	movs	r3, r0
 800281a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3301      	adds	r3, #1
 8002824:	d005      	beq.n	8002832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002826:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <HAL_Delay+0x44>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	001a      	movs	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	189b      	adds	r3, r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002832:	46c0      	nop			@ (mov r8, r8)
 8002834:	f7ff ffe0 	bl	80027f8 <HAL_GetTick>
 8002838:	0002      	movs	r2, r0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	429a      	cmp	r2, r3
 8002842:	d8f7      	bhi.n	8002834 <HAL_Delay+0x28>
  {
  }
}
 8002844:	46c0      	nop			@ (mov r8, r8)
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	46bd      	mov	sp, r7
 800284a:	b004      	add	sp, #16
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	20000010 	.word	0x20000010

08002854 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a05      	ldr	r2, [pc, #20]	@ (8002878 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002864:	401a      	ands	r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	601a      	str	r2, [r3, #0]
}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	fe3fffff 	.word	0xfe3fffff

0800287c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	23e0      	movs	r3, #224	@ 0xe0
 800288a:	045b      	lsls	r3, r3, #17
 800288c:	4013      	ands	r3, r2
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	b002      	add	sp, #8
 8002894:	bd80      	pop	{r7, pc}

08002896 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	2104      	movs	r1, #4
 80028aa:	400a      	ands	r2, r1
 80028ac:	2107      	movs	r1, #7
 80028ae:	4091      	lsls	r1, r2
 80028b0:	000a      	movs	r2, r1
 80028b2:	43d2      	mvns	r2, r2
 80028b4:	401a      	ands	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2104      	movs	r1, #4
 80028ba:	400b      	ands	r3, r1
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4099      	lsls	r1, r3
 80028c0:	000b      	movs	r3, r1
 80028c2:	431a      	orrs	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80028c8:	46c0      	nop			@ (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b004      	add	sp, #16
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	2104      	movs	r1, #4
 80028e2:	400a      	ands	r2, r1
 80028e4:	2107      	movs	r1, #7
 80028e6:	4091      	lsls	r1, r2
 80028e8:	000a      	movs	r2, r1
 80028ea:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2104      	movs	r1, #4
 80028f0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80028f2:	40da      	lsrs	r2, r3
 80028f4:	0013      	movs	r3, r2
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b002      	add	sp, #8
 80028fc:	bd80      	pop	{r7, pc}

080028fe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	23c0      	movs	r3, #192	@ 0xc0
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	4013      	ands	r3, r2
 8002910:	d101      	bne.n	8002916 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002916:	2300      	movs	r3, #0
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b002      	add	sp, #8
 800291e:	bd80      	pop	{r7, pc}

08002920 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	211f      	movs	r1, #31
 8002934:	400a      	ands	r2, r1
 8002936:	210f      	movs	r1, #15
 8002938:	4091      	lsls	r1, r2
 800293a:	000a      	movs	r2, r1
 800293c:	43d2      	mvns	r2, r2
 800293e:	401a      	ands	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	0e9b      	lsrs	r3, r3, #26
 8002944:	210f      	movs	r1, #15
 8002946:	4019      	ands	r1, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	201f      	movs	r0, #31
 800294c:	4003      	ands	r3, r0
 800294e:	4099      	lsls	r1, r3
 8002950:	000b      	movs	r3, r1
 8002952:	431a      	orrs	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002958:	46c0      	nop			@ (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b004      	add	sp, #16
 800295e:	bd80      	pop	{r7, pc}

08002960 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	035b      	lsls	r3, r3, #13
 8002972:	0b5b      	lsrs	r3, r3, #13
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800297a:	46c0      	nop			@ (mov r8, r8)
 800297c:	46bd      	mov	sp, r7
 800297e:	b002      	add	sp, #8
 8002980:	bd80      	pop	{r7, pc}

08002982 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	0352      	lsls	r2, r2, #13
 8002994:	0b52      	lsrs	r2, r2, #13
 8002996:	43d2      	mvns	r2, r2
 8002998:	401a      	ands	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800299e:	46c0      	nop			@ (mov r8, r8)
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b002      	add	sp, #8
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	0212      	lsls	r2, r2, #8
 80029bc:	43d2      	mvns	r2, r2
 80029be:	401a      	ands	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	400b      	ands	r3, r1
 80029c8:	4904      	ldr	r1, [pc, #16]	@ (80029dc <LL_ADC_SetChannelSamplingTime+0x34>)
 80029ca:	400b      	ands	r3, r1
 80029cc:	431a      	orrs	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b004      	add	sp, #16
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	46c0      	nop			@ (mov r8, r8)
 80029dc:	07ffff00 	.word	0x07ffff00

080029e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a05      	ldr	r2, [pc, #20]	@ (8002a04 <LL_ADC_EnableInternalRegulator+0x24>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	2280      	movs	r2, #128	@ 0x80
 80029f2:	0552      	lsls	r2, r2, #21
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029fa:	46c0      	nop			@ (mov r8, r8)
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b002      	add	sp, #8
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	46c0      	nop			@ (mov r8, r8)
 8002a04:	6fffffe8 	.word	0x6fffffe8

08002a08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	2380      	movs	r3, #128	@ 0x80
 8002a16:	055b      	lsls	r3, r3, #21
 8002a18:	401a      	ands	r2, r3
 8002a1a:	2380      	movs	r3, #128	@ 0x80
 8002a1c:	055b      	lsls	r3, r3, #21
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d101      	bne.n	8002a26 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	0018      	movs	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b002      	add	sp, #8
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a04      	ldr	r2, [pc, #16]	@ (8002a50 <LL_ADC_Enable+0x20>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2201      	movs	r2, #1
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a48:	46c0      	nop			@ (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	7fffffe8 	.word	0x7fffffe8

08002a54 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4a04      	ldr	r2, [pc, #16]	@ (8002a74 <LL_ADC_Disable+0x20>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	2202      	movs	r2, #2
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a6c:	46c0      	nop			@ (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b002      	add	sp, #8
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	7fffffe8 	.word	0x7fffffe8

08002a78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2201      	movs	r2, #1
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <LL_ADC_IsEnabled+0x18>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <LL_ADC_IsEnabled+0x1a>
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	0018      	movs	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b002      	add	sp, #8
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d101      	bne.n	8002ab2 <LL_ADC_IsDisableOngoing+0x18>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <LL_ADC_IsDisableOngoing+0x1a>
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b002      	add	sp, #8
 8002aba:	bd80      	pop	{r7, pc}

08002abc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a04      	ldr	r2, [pc, #16]	@ (8002adc <LL_ADC_REG_StartConversion+0x20>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	2204      	movs	r2, #4
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ad4:	46c0      	nop			@ (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	7fffffe8 	.word	0x7fffffe8

08002ae0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2204      	movs	r2, #4
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d101      	bne.n	8002af8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	0018      	movs	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b002      	add	sp, #8
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b0c:	231f      	movs	r3, #31
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e17f      	b.n	8002e2a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10a      	bne.n	8002b48 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7ff fb8f 	bl	8002258 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2254      	movs	r2, #84	@ 0x54
 8002b44:	2100      	movs	r1, #0
 8002b46:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7ff ff5b 	bl	8002a08 <LL_ADC_IsInternalRegulatorEnabled>
 8002b52:	1e03      	subs	r3, r0, #0
 8002b54:	d115      	bne.n	8002b82 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f7ff ff40 	bl	80029e0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b60:	4bb4      	ldr	r3, [pc, #720]	@ (8002e34 <HAL_ADC_Init+0x330>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	49b4      	ldr	r1, [pc, #720]	@ (8002e38 <HAL_ADC_Init+0x334>)
 8002b66:	0018      	movs	r0, r3
 8002b68:	f7fd facc 	bl	8000104 <__udivsi3>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	3301      	adds	r3, #1
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b74:	e002      	b.n	8002b7c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f9      	bne.n	8002b76 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0018      	movs	r0, r3
 8002b88:	f7ff ff3e 	bl	8002a08 <LL_ADC_IsInternalRegulatorEnabled>
 8002b8c:	1e03      	subs	r3, r0, #0
 8002b8e:	d10f      	bne.n	8002bb0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	2210      	movs	r2, #16
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ba8:	231f      	movs	r3, #31
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7ff ff93 	bl	8002ae0 <LL_ADC_REG_IsConversionOngoing>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc2:	2210      	movs	r2, #16
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d000      	beq.n	8002bca <HAL_ADC_Init+0xc6>
 8002bc8:	e122      	b.n	8002e10 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d000      	beq.n	8002bd2 <HAL_ADC_Init+0xce>
 8002bd0:	e11e      	b.n	8002e10 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd6:	4a99      	ldr	r2, [pc, #612]	@ (8002e3c <HAL_ADC_Init+0x338>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2202      	movs	r2, #2
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	0018      	movs	r0, r3
 8002be8:	f7ff ff46 	bl	8002a78 <LL_ADC_IsEnabled>
 8002bec:	1e03      	subs	r3, r0, #0
 8002bee:	d000      	beq.n	8002bf2 <HAL_ADC_Init+0xee>
 8002bf0:	e0ad      	b.n	8002d4e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	7e1b      	ldrb	r3, [r3, #24]
 8002bfa:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002bfc:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	7e5b      	ldrb	r3, [r3, #25]
 8002c02:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002c04:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	7e9b      	ldrb	r3, [r3, #26]
 8002c0a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002c0c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_ADC_Init+0x118>
 8002c16:	2380      	movs	r3, #128	@ 0x80
 8002c18:	015b      	lsls	r3, r3, #5
 8002c1a:	e000      	b.n	8002c1e <HAL_ADC_Init+0x11a>
 8002c1c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c1e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c24:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	da04      	bge.n	8002c38 <HAL_ADC_Init+0x134>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	e001      	b.n	8002c3c <HAL_ADC_Init+0x138>
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002c3c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	212c      	movs	r1, #44	@ 0x2c
 8002c42:	5c5b      	ldrb	r3, [r3, r1]
 8002c44:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c46:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	5c9b      	ldrb	r3, [r3, r2]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d115      	bne.n	8002c84 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7e9b      	ldrb	r3, [r3, #26]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d105      	bne.n	8002c6c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2280      	movs	r2, #128	@ 0x80
 8002c64:	0252      	lsls	r2, r2, #9
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	e00b      	b.n	8002c84 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c70:	2220      	movs	r2, #32
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c90:	23e0      	movs	r3, #224	@ 0xe0
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a65      	ldr	r2, [pc, #404]	@ (8002e40 <HAL_ADC_Init+0x33c>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	0f9b      	lsrs	r3, r3, #30
 8002cbe:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	223c      	movs	r2, #60	@ 0x3c
 8002cd0:	5c9b      	ldrb	r3, [r3, r2]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d111      	bne.n	8002cfa <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	0f9b      	lsrs	r3, r3, #30
 8002cdc:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ce2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002ce8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8002cee:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	4a50      	ldr	r2, [pc, #320]	@ (8002e44 <HAL_ADC_Init+0x340>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	0019      	movs	r1, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	23c0      	movs	r3, #192	@ 0xc0
 8002d16:	061b      	lsls	r3, r3, #24
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d018      	beq.n	8002d4e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002d20:	2380      	movs	r3, #128	@ 0x80
 8002d22:	05db      	lsls	r3, r3, #23
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d012      	beq.n	8002d4e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002d2c:	2380      	movs	r3, #128	@ 0x80
 8002d2e:	061b      	lsls	r3, r3, #24
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d00c      	beq.n	8002d4e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002d34:	4b44      	ldr	r3, [pc, #272]	@ (8002e48 <HAL_ADC_Init+0x344>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a44      	ldr	r2, [pc, #272]	@ (8002e4c <HAL_ADC_Init+0x348>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	23f0      	movs	r3, #240	@ 0xf0
 8002d44:	039b      	lsls	r3, r3, #14
 8002d46:	401a      	ands	r2, r3
 8002d48:	4b3f      	ldr	r3, [pc, #252]	@ (8002e48 <HAL_ADC_Init+0x344>)
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d56:	001a      	movs	r2, r3
 8002d58:	2100      	movs	r1, #0
 8002d5a:	f7ff fd9c 	bl	8002896 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d66:	493a      	ldr	r1, [pc, #232]	@ (8002e50 <HAL_ADC_Init+0x34c>)
 8002d68:	001a      	movs	r2, r3
 8002d6a:	f7ff fd94 	bl	8002896 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2110      	movs	r1, #16
 8002d82:	4249      	negs	r1, r1
 8002d84:	430a      	orrs	r2, r1
 8002d86:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d88:	e018      	b.n	8002dbc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	2380      	movs	r3, #128	@ 0x80
 8002d90:	039b      	lsls	r3, r3, #14
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d112      	bne.n	8002dbc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	221c      	movs	r2, #28
 8002da6:	4013      	ands	r3, r2
 8002da8:	2210      	movs	r2, #16
 8002daa:	4252      	negs	r2, r2
 8002dac:	409a      	lsls	r2, r3
 8002dae:	0011      	movs	r1, r2
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f7ff fd84 	bl	80028d0 <LL_ADC_GetSamplingTimeCommonChannels>
 8002dc8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d10b      	bne.n	8002dea <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ddc:	2203      	movs	r2, #3
 8002dde:	4393      	bics	r3, r2
 8002de0:	2201      	movs	r2, #1
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002de8:	e01c      	b.n	8002e24 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	2212      	movs	r2, #18
 8002df0:	4393      	bics	r3, r2
 8002df2:	2210      	movs	r2, #16
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfe:	2201      	movs	r2, #1
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002e06:	231f      	movs	r3, #31
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002e0e:	e009      	b.n	8002e24 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e14:	2210      	movs	r2, #16
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e1c:	231f      	movs	r3, #31
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	2201      	movs	r2, #1
 8002e22:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002e24:	231f      	movs	r3, #31
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	781b      	ldrb	r3, [r3, #0]
}
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b008      	add	sp, #32
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	20000008 	.word	0x20000008
 8002e38:	00030d40 	.word	0x00030d40
 8002e3c:	fffffefd 	.word	0xfffffefd
 8002e40:	ffde0201 	.word	0xffde0201
 8002e44:	1ffffc02 	.word	0x1ffffc02
 8002e48:	40012708 	.word	0x40012708
 8002e4c:	ffc3ffff 	.word	0xffc3ffff
 8002e50:	07ffff04 	.word	0x07ffff04

08002e54 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002e54:	b5b0      	push	{r4, r5, r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	0018      	movs	r0, r3
 8002e66:	f7ff fe3b 	bl	8002ae0 <LL_ADC_REG_IsConversionOngoing>
 8002e6a:	1e03      	subs	r3, r0, #0
 8002e6c:	d16c      	bne.n	8002f48 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2254      	movs	r2, #84	@ 0x54
 8002e72:	5c9b      	ldrb	r3, [r3, r2]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_ADC_Start_DMA+0x28>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e06c      	b.n	8002f56 <HAL_ADC_Start_DMA+0x102>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2254      	movs	r2, #84	@ 0x54
 8002e80:	2101      	movs	r1, #1
 8002e82:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d113      	bne.n	8002eb8 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	0018      	movs	r0, r3
 8002e96:	f7ff fdef 	bl	8002a78 <LL_ADC_IsEnabled>
 8002e9a:	1e03      	subs	r3, r0, #0
 8002e9c:	d004      	beq.n	8002ea8 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f7ff fdd6 	bl	8002a54 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002eb8:	2517      	movs	r5, #23
 8002eba:	197c      	adds	r4, r7, r5
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f000 fa3e 	bl	8003340 <ADC_Enable>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ec8:	002c      	movs	r4, r5
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d13e      	bne.n	8002f50 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed6:	4a22      	ldr	r2, [pc, #136]	@ (8002f60 <HAL_ADC_Start_DMA+0x10c>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2280      	movs	r2, #128	@ 0x80
 8002edc:	0052      	lsls	r2, r2, #1
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eee:	4a1d      	ldr	r2, [pc, #116]	@ (8002f64 <HAL_ADC_Start_DMA+0x110>)
 8002ef0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8002f68 <HAL_ADC_Start_DMA+0x114>)
 8002ef8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002efe:	4a1b      	ldr	r2, [pc, #108]	@ (8002f6c <HAL_ADC_Start_DMA+0x118>)
 8002f00:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	221c      	movs	r2, #28
 8002f08:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2254      	movs	r2, #84	@ 0x54
 8002f0e:	2100      	movs	r1, #0
 8002f10:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2110      	movs	r1, #16
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3340      	adds	r3, #64	@ 0x40
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	193c      	adds	r4, r7, r4
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f001 f842 	bl	8003fbc <HAL_DMA_Start_IT>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7ff fdbb 	bl	8002abc <LL_ADC_REG_StartConversion>
 8002f46:	e003      	b.n	8002f50 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f48:	2317      	movs	r3, #23
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002f50:	2317      	movs	r3, #23
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	781b      	ldrb	r3, [r3, #0]
}
 8002f56:	0018      	movs	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b006      	add	sp, #24
 8002f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	fffff0fe 	.word	0xfffff0fe
 8002f64:	08003509 	.word	0x08003509
 8002f68:	080035d1 	.word	0x080035d1
 8002f6c:	080035ef 	.word	0x080035ef

08002f70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f78:	46c0      	nop			@ (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f88:	46c0      	nop			@ (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b002      	add	sp, #8
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f9a:	2317      	movs	r3, #23
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2254      	movs	r2, #84	@ 0x54
 8002faa:	5c9b      	ldrb	r3, [r3, r2]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x24>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e1c0      	b.n	8003336 <HAL_ADC_ConfigChannel+0x3a6>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2254      	movs	r2, #84	@ 0x54
 8002fb8:	2101      	movs	r1, #1
 8002fba:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f7ff fd8d 	bl	8002ae0 <LL_ADC_REG_IsConversionOngoing>
 8002fc6:	1e03      	subs	r3, r0, #0
 8002fc8:	d000      	beq.n	8002fcc <HAL_ADC_ConfigChannel+0x3c>
 8002fca:	e1a3      	b.n	8003314 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d100      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x46>
 8002fd4:	e143      	b.n	800325e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	2380      	movs	r3, #128	@ 0x80
 8002fdc:	061b      	lsls	r3, r3, #24
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d004      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002fe6:	4ac1      	ldr	r2, [pc, #772]	@ (80032ec <HAL_ADC_ConfigChannel+0x35c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d108      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	0010      	movs	r0, r2
 8002ff8:	f7ff fcb2 	bl	8002960 <LL_ADC_REG_SetSequencerChAdd>
 8002ffc:	e0c9      	b.n	8003192 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	211f      	movs	r1, #31
 8003008:	400b      	ands	r3, r1
 800300a:	210f      	movs	r1, #15
 800300c:	4099      	lsls	r1, r3
 800300e:	000b      	movs	r3, r1
 8003010:	43db      	mvns	r3, r3
 8003012:	4013      	ands	r3, r2
 8003014:	0019      	movs	r1, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	035b      	lsls	r3, r3, #13
 800301c:	0b5b      	lsrs	r3, r3, #13
 800301e:	d105      	bne.n	800302c <HAL_ADC_ConfigChannel+0x9c>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	0e9b      	lsrs	r3, r3, #26
 8003026:	221f      	movs	r2, #31
 8003028:	4013      	ands	r3, r2
 800302a:	e098      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2201      	movs	r2, #1
 8003032:	4013      	ands	r3, r2
 8003034:	d000      	beq.n	8003038 <HAL_ADC_ConfigChannel+0xa8>
 8003036:	e091      	b.n	800315c <HAL_ADC_ConfigChannel+0x1cc>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2202      	movs	r2, #2
 800303e:	4013      	ands	r3, r2
 8003040:	d000      	beq.n	8003044 <HAL_ADC_ConfigChannel+0xb4>
 8003042:	e089      	b.n	8003158 <HAL_ADC_ConfigChannel+0x1c8>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2204      	movs	r2, #4
 800304a:	4013      	ands	r3, r2
 800304c:	d000      	beq.n	8003050 <HAL_ADC_ConfigChannel+0xc0>
 800304e:	e081      	b.n	8003154 <HAL_ADC_ConfigChannel+0x1c4>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2208      	movs	r2, #8
 8003056:	4013      	ands	r3, r2
 8003058:	d000      	beq.n	800305c <HAL_ADC_ConfigChannel+0xcc>
 800305a:	e079      	b.n	8003150 <HAL_ADC_ConfigChannel+0x1c0>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2210      	movs	r2, #16
 8003062:	4013      	ands	r3, r2
 8003064:	d000      	beq.n	8003068 <HAL_ADC_ConfigChannel+0xd8>
 8003066:	e071      	b.n	800314c <HAL_ADC_ConfigChannel+0x1bc>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2220      	movs	r2, #32
 800306e:	4013      	ands	r3, r2
 8003070:	d000      	beq.n	8003074 <HAL_ADC_ConfigChannel+0xe4>
 8003072:	e069      	b.n	8003148 <HAL_ADC_ConfigChannel+0x1b8>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2240      	movs	r2, #64	@ 0x40
 800307a:	4013      	ands	r3, r2
 800307c:	d000      	beq.n	8003080 <HAL_ADC_ConfigChannel+0xf0>
 800307e:	e061      	b.n	8003144 <HAL_ADC_ConfigChannel+0x1b4>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2280      	movs	r2, #128	@ 0x80
 8003086:	4013      	ands	r3, r2
 8003088:	d000      	beq.n	800308c <HAL_ADC_ConfigChannel+0xfc>
 800308a:	e059      	b.n	8003140 <HAL_ADC_ConfigChannel+0x1b0>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	2380      	movs	r3, #128	@ 0x80
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4013      	ands	r3, r2
 8003096:	d151      	bne.n	800313c <HAL_ADC_ConfigChannel+0x1ac>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	2380      	movs	r3, #128	@ 0x80
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4013      	ands	r3, r2
 80030a2:	d149      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x1a8>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	2380      	movs	r3, #128	@ 0x80
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4013      	ands	r3, r2
 80030ae:	d141      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x1a4>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	2380      	movs	r3, #128	@ 0x80
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	4013      	ands	r3, r2
 80030ba:	d139      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x1a0>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	2380      	movs	r3, #128	@ 0x80
 80030c2:	015b      	lsls	r3, r3, #5
 80030c4:	4013      	ands	r3, r2
 80030c6:	d131      	bne.n	800312c <HAL_ADC_ConfigChannel+0x19c>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	2380      	movs	r3, #128	@ 0x80
 80030ce:	019b      	lsls	r3, r3, #6
 80030d0:	4013      	ands	r3, r2
 80030d2:	d129      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x198>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	01db      	lsls	r3, r3, #7
 80030dc:	4013      	ands	r3, r2
 80030de:	d121      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x194>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	2380      	movs	r3, #128	@ 0x80
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	4013      	ands	r3, r2
 80030ea:	d119      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x190>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	2380      	movs	r3, #128	@ 0x80
 80030f2:	025b      	lsls	r3, r3, #9
 80030f4:	4013      	ands	r3, r2
 80030f6:	d111      	bne.n	800311c <HAL_ADC_ConfigChannel+0x18c>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	2380      	movs	r3, #128	@ 0x80
 80030fe:	029b      	lsls	r3, r3, #10
 8003100:	4013      	ands	r3, r2
 8003102:	d109      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x188>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2380      	movs	r3, #128	@ 0x80
 800310a:	02db      	lsls	r3, r3, #11
 800310c:	4013      	ands	r3, r2
 800310e:	d001      	beq.n	8003114 <HAL_ADC_ConfigChannel+0x184>
 8003110:	2312      	movs	r3, #18
 8003112:	e024      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 8003114:	2300      	movs	r3, #0
 8003116:	e022      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 8003118:	2311      	movs	r3, #17
 800311a:	e020      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 800311c:	2310      	movs	r3, #16
 800311e:	e01e      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 8003120:	230f      	movs	r3, #15
 8003122:	e01c      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 8003124:	230e      	movs	r3, #14
 8003126:	e01a      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 8003128:	230d      	movs	r3, #13
 800312a:	e018      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 800312c:	230c      	movs	r3, #12
 800312e:	e016      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 8003130:	230b      	movs	r3, #11
 8003132:	e014      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 8003134:	230a      	movs	r3, #10
 8003136:	e012      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 8003138:	2309      	movs	r3, #9
 800313a:	e010      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 800313c:	2308      	movs	r3, #8
 800313e:	e00e      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 8003140:	2307      	movs	r3, #7
 8003142:	e00c      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 8003144:	2306      	movs	r3, #6
 8003146:	e00a      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 8003148:	2305      	movs	r3, #5
 800314a:	e008      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 800314c:	2304      	movs	r3, #4
 800314e:	e006      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 8003150:	2303      	movs	r3, #3
 8003152:	e004      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 8003154:	2302      	movs	r3, #2
 8003156:	e002      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ce>
 800315c:	2300      	movs	r3, #0
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	6852      	ldr	r2, [r2, #4]
 8003162:	201f      	movs	r0, #31
 8003164:	4002      	ands	r2, r0
 8003166:	4093      	lsls	r3, r2
 8003168:	000a      	movs	r2, r1
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	089b      	lsrs	r3, r3, #2
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	429a      	cmp	r2, r3
 800317e:	d808      	bhi.n	8003192 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	001a      	movs	r2, r3
 800318e:	f7ff fbc7 	bl	8002920 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6819      	ldr	r1, [r3, #0]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	001a      	movs	r2, r3
 80031a0:	f7ff fc02 	bl	80029a8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	db00      	blt.n	80031ae <HAL_ADC_ConfigChannel+0x21e>
 80031ac:	e0bc      	b.n	8003328 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031ae:	4b50      	ldr	r3, [pc, #320]	@ (80032f0 <HAL_ADC_ConfigChannel+0x360>)
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7ff fb63 	bl	800287c <LL_ADC_GetCommonPathInternalCh>
 80031b6:	0003      	movs	r3, r0
 80031b8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a4d      	ldr	r2, [pc, #308]	@ (80032f4 <HAL_ADC_ConfigChannel+0x364>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d122      	bne.n	800320a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	2380      	movs	r3, #128	@ 0x80
 80031c8:	041b      	lsls	r3, r3, #16
 80031ca:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031cc:	d11d      	bne.n	800320a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2280      	movs	r2, #128	@ 0x80
 80031d2:	0412      	lsls	r2, r2, #16
 80031d4:	4313      	orrs	r3, r2
 80031d6:	4a46      	ldr	r2, [pc, #280]	@ (80032f0 <HAL_ADC_ConfigChannel+0x360>)
 80031d8:	0019      	movs	r1, r3
 80031da:	0010      	movs	r0, r2
 80031dc:	f7ff fb3a 	bl	8002854 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031e0:	4b45      	ldr	r3, [pc, #276]	@ (80032f8 <HAL_ADC_ConfigChannel+0x368>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4945      	ldr	r1, [pc, #276]	@ (80032fc <HAL_ADC_ConfigChannel+0x36c>)
 80031e6:	0018      	movs	r0, r3
 80031e8:	f7fc ff8c 	bl	8000104 <__udivsi3>
 80031ec:	0003      	movs	r3, r0
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	0013      	movs	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	189b      	adds	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031fa:	e002      	b.n	8003202 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3b01      	subs	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f9      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003208:	e08e      	b.n	8003328 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a3c      	ldr	r2, [pc, #240]	@ (8003300 <HAL_ADC_ConfigChannel+0x370>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d10e      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	2380      	movs	r3, #128	@ 0x80
 8003218:	045b      	lsls	r3, r3, #17
 800321a:	4013      	ands	r3, r2
 800321c:	d109      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2280      	movs	r2, #128	@ 0x80
 8003222:	0452      	lsls	r2, r2, #17
 8003224:	4313      	orrs	r3, r2
 8003226:	4a32      	ldr	r2, [pc, #200]	@ (80032f0 <HAL_ADC_ConfigChannel+0x360>)
 8003228:	0019      	movs	r1, r3
 800322a:	0010      	movs	r0, r2
 800322c:	f7ff fb12 	bl	8002854 <LL_ADC_SetCommonPathInternalCh>
 8003230:	e07a      	b.n	8003328 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a33      	ldr	r2, [pc, #204]	@ (8003304 <HAL_ADC_ConfigChannel+0x374>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d000      	beq.n	800323e <HAL_ADC_ConfigChannel+0x2ae>
 800323c:	e074      	b.n	8003328 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	2380      	movs	r3, #128	@ 0x80
 8003242:	03db      	lsls	r3, r3, #15
 8003244:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003246:	d000      	beq.n	800324a <HAL_ADC_ConfigChannel+0x2ba>
 8003248:	e06e      	b.n	8003328 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2280      	movs	r2, #128	@ 0x80
 800324e:	03d2      	lsls	r2, r2, #15
 8003250:	4313      	orrs	r3, r2
 8003252:	4a27      	ldr	r2, [pc, #156]	@ (80032f0 <HAL_ADC_ConfigChannel+0x360>)
 8003254:	0019      	movs	r1, r3
 8003256:	0010      	movs	r0, r2
 8003258:	f7ff fafc 	bl	8002854 <LL_ADC_SetCommonPathInternalCh>
 800325c:	e064      	b.n	8003328 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	2380      	movs	r3, #128	@ 0x80
 8003264:	061b      	lsls	r3, r3, #24
 8003266:	429a      	cmp	r2, r3
 8003268:	d004      	beq.n	8003274 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800326e:	4a1f      	ldr	r2, [pc, #124]	@ (80032ec <HAL_ADC_ConfigChannel+0x35c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d107      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	0019      	movs	r1, r3
 800327e:	0010      	movs	r0, r2
 8003280:	f7ff fb7f 	bl	8002982 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	da4d      	bge.n	8003328 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800328c:	4b18      	ldr	r3, [pc, #96]	@ (80032f0 <HAL_ADC_ConfigChannel+0x360>)
 800328e:	0018      	movs	r0, r3
 8003290:	f7ff faf4 	bl	800287c <LL_ADC_GetCommonPathInternalCh>
 8003294:	0003      	movs	r3, r0
 8003296:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a15      	ldr	r2, [pc, #84]	@ (80032f4 <HAL_ADC_ConfigChannel+0x364>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d108      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4a18      	ldr	r2, [pc, #96]	@ (8003308 <HAL_ADC_ConfigChannel+0x378>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	4a11      	ldr	r2, [pc, #68]	@ (80032f0 <HAL_ADC_ConfigChannel+0x360>)
 80032aa:	0019      	movs	r1, r3
 80032ac:	0010      	movs	r0, r2
 80032ae:	f7ff fad1 	bl	8002854 <LL_ADC_SetCommonPathInternalCh>
 80032b2:	e039      	b.n	8003328 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a11      	ldr	r2, [pc, #68]	@ (8003300 <HAL_ADC_ConfigChannel+0x370>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d108      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4a12      	ldr	r2, [pc, #72]	@ (800330c <HAL_ADC_ConfigChannel+0x37c>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	4a0a      	ldr	r2, [pc, #40]	@ (80032f0 <HAL_ADC_ConfigChannel+0x360>)
 80032c6:	0019      	movs	r1, r3
 80032c8:	0010      	movs	r0, r2
 80032ca:	f7ff fac3 	bl	8002854 <LL_ADC_SetCommonPathInternalCh>
 80032ce:	e02b      	b.n	8003328 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003304 <HAL_ADC_ConfigChannel+0x374>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d126      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003310 <HAL_ADC_ConfigChannel+0x380>)
 80032de:	4013      	ands	r3, r2
 80032e0:	4a03      	ldr	r2, [pc, #12]	@ (80032f0 <HAL_ADC_ConfigChannel+0x360>)
 80032e2:	0019      	movs	r1, r3
 80032e4:	0010      	movs	r0, r2
 80032e6:	f7ff fab5 	bl	8002854 <LL_ADC_SetCommonPathInternalCh>
 80032ea:	e01d      	b.n	8003328 <HAL_ADC_ConfigChannel+0x398>
 80032ec:	80000004 	.word	0x80000004
 80032f0:	40012708 	.word	0x40012708
 80032f4:	b0001000 	.word	0xb0001000
 80032f8:	20000008 	.word	0x20000008
 80032fc:	00030d40 	.word	0x00030d40
 8003300:	b8004000 	.word	0xb8004000
 8003304:	b4002000 	.word	0xb4002000
 8003308:	ff7fffff 	.word	0xff7fffff
 800330c:	feffffff 	.word	0xfeffffff
 8003310:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003318:	2220      	movs	r2, #32
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003320:	2317      	movs	r3, #23
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2254      	movs	r2, #84	@ 0x54
 800332c:	2100      	movs	r1, #0
 800332e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003330:	2317      	movs	r3, #23
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	781b      	ldrb	r3, [r3, #0]
}
 8003336:	0018      	movs	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	b006      	add	sp, #24
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			@ (mov r8, r8)

08003340 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003348:	2300      	movs	r3, #0
 800334a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0018      	movs	r0, r3
 8003352:	f7ff fb91 	bl	8002a78 <LL_ADC_IsEnabled>
 8003356:	1e03      	subs	r3, r0, #0
 8003358:	d000      	beq.n	800335c <ADC_Enable+0x1c>
 800335a:	e069      	b.n	8003430 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	4a36      	ldr	r2, [pc, #216]	@ (800343c <ADC_Enable+0xfc>)
 8003364:	4013      	ands	r3, r2
 8003366:	d00d      	beq.n	8003384 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336c:	2210      	movs	r2, #16
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003378:	2201      	movs	r2, #1
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e056      	b.n	8003432 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	0018      	movs	r0, r3
 800338a:	f7ff fb51 	bl	8002a30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800338e:	4b2c      	ldr	r3, [pc, #176]	@ (8003440 <ADC_Enable+0x100>)
 8003390:	0018      	movs	r0, r3
 8003392:	f7ff fa73 	bl	800287c <LL_ADC_GetCommonPathInternalCh>
 8003396:	0002      	movs	r2, r0
 8003398:	2380      	movs	r3, #128	@ 0x80
 800339a:	041b      	lsls	r3, r3, #16
 800339c:	4013      	ands	r3, r2
 800339e:	d00f      	beq.n	80033c0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033a0:	4b28      	ldr	r3, [pc, #160]	@ (8003444 <ADC_Enable+0x104>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4928      	ldr	r1, [pc, #160]	@ (8003448 <ADC_Enable+0x108>)
 80033a6:	0018      	movs	r0, r3
 80033a8:	f7fc feac 	bl	8000104 <__udivsi3>
 80033ac:	0003      	movs	r3, r0
 80033ae:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80033b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033b2:	e002      	b.n	80033ba <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f9      	bne.n	80033b4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	7e5b      	ldrb	r3, [r3, #25]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d033      	beq.n	8003430 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80033c8:	f7ff fa16 	bl	80027f8 <HAL_GetTick>
 80033cc:	0003      	movs	r3, r0
 80033ce:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033d0:	e027      	b.n	8003422 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7ff fb4e 	bl	8002a78 <LL_ADC_IsEnabled>
 80033dc:	1e03      	subs	r3, r0, #0
 80033de:	d104      	bne.n	80033ea <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7ff fb23 	bl	8002a30 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033ea:	f7ff fa05 	bl	80027f8 <HAL_GetTick>
 80033ee:	0002      	movs	r2, r0
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d914      	bls.n	8003422 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2201      	movs	r2, #1
 8003400:	4013      	ands	r3, r2
 8003402:	2b01      	cmp	r3, #1
 8003404:	d00d      	beq.n	8003422 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340a:	2210      	movs	r2, #16
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003416:	2201      	movs	r2, #1
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e007      	b.n	8003432 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2201      	movs	r2, #1
 800342a:	4013      	ands	r3, r2
 800342c:	2b01      	cmp	r3, #1
 800342e:	d1d0      	bne.n	80033d2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	0018      	movs	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	b004      	add	sp, #16
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			@ (mov r8, r8)
 800343c:	80000017 	.word	0x80000017
 8003440:	40012708 	.word	0x40012708
 8003444:	20000008 	.word	0x20000008
 8003448:	00030d40 	.word	0x00030d40

0800344c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	0018      	movs	r0, r3
 800345a:	f7ff fb1e 	bl	8002a9a <LL_ADC_IsDisableOngoing>
 800345e:	0003      	movs	r3, r0
 8003460:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	0018      	movs	r0, r3
 8003468:	f7ff fb06 	bl	8002a78 <LL_ADC_IsEnabled>
 800346c:	1e03      	subs	r3, r0, #0
 800346e:	d046      	beq.n	80034fe <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d143      	bne.n	80034fe <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2205      	movs	r2, #5
 800347e:	4013      	ands	r3, r2
 8003480:	2b01      	cmp	r3, #1
 8003482:	d10d      	bne.n	80034a0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	0018      	movs	r0, r3
 800348a:	f7ff fae3 	bl	8002a54 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2203      	movs	r2, #3
 8003494:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003496:	f7ff f9af 	bl	80027f8 <HAL_GetTick>
 800349a:	0003      	movs	r3, r0
 800349c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800349e:	e028      	b.n	80034f2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a4:	2210      	movs	r2, #16
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b0:	2201      	movs	r2, #1
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e021      	b.n	8003500 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034bc:	f7ff f99c 	bl	80027f8 <HAL_GetTick>
 80034c0:	0002      	movs	r2, r0
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d913      	bls.n	80034f2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2201      	movs	r2, #1
 80034d2:	4013      	ands	r3, r2
 80034d4:	d00d      	beq.n	80034f2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034da:	2210      	movs	r2, #16
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e6:	2201      	movs	r2, #1
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e006      	b.n	8003500 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2201      	movs	r2, #1
 80034fa:	4013      	ands	r3, r2
 80034fc:	d1de      	bne.n	80034bc <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	0018      	movs	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	b004      	add	sp, #16
 8003506:	bd80      	pop	{r7, pc}

08003508 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003514:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351a:	2250      	movs	r2, #80	@ 0x50
 800351c:	4013      	ands	r3, r2
 800351e:	d141      	bne.n	80035a4 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003524:	2280      	movs	r2, #128	@ 0x80
 8003526:	0092      	lsls	r2, r2, #2
 8003528:	431a      	orrs	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	0018      	movs	r0, r3
 8003534:	f7ff f9e3 	bl	80028fe <LL_ADC_REG_IsTriggerSourceSWStart>
 8003538:	1e03      	subs	r3, r0, #0
 800353a:	d02e      	beq.n	800359a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	7e9b      	ldrb	r3, [r3, #26]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d12a      	bne.n	800359a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2208      	movs	r2, #8
 800354c:	4013      	ands	r3, r2
 800354e:	2b08      	cmp	r3, #8
 8003550:	d123      	bne.n	800359a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	0018      	movs	r0, r3
 8003558:	f7ff fac2 	bl	8002ae0 <LL_ADC_REG_IsConversionOngoing>
 800355c:	1e03      	subs	r3, r0, #0
 800355e:	d110      	bne.n	8003582 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	210c      	movs	r1, #12
 800356c:	438a      	bics	r2, r1
 800356e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003574:	4a15      	ldr	r2, [pc, #84]	@ (80035cc <ADC_DMAConvCplt+0xc4>)
 8003576:	4013      	ands	r3, r2
 8003578:	2201      	movs	r2, #1
 800357a:	431a      	orrs	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003580:	e00b      	b.n	800359a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003586:	2220      	movs	r2, #32
 8003588:	431a      	orrs	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003592:	2201      	movs	r2, #1
 8003594:	431a      	orrs	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	0018      	movs	r0, r3
 800359e:	f7fe fc93 	bl	8001ec8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035a2:	e00f      	b.n	80035c4 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a8:	2210      	movs	r2, #16
 80035aa:	4013      	ands	r3, r2
 80035ac:	d004      	beq.n	80035b8 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7ff fce5 	bl	8002f80 <HAL_ADC_ErrorCallback>
}
 80035b6:	e005      	b.n	80035c4 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	0010      	movs	r0, r2
 80035c2:	4798      	blx	r3
}
 80035c4:	46c0      	nop			@ (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b004      	add	sp, #16
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	fffffefe 	.word	0xfffffefe

080035d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7ff fcc5 	bl	8002f70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035e6:	46c0      	nop			@ (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b004      	add	sp, #16
 80035ec:	bd80      	pop	{r7, pc}

080035ee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003600:	2240      	movs	r2, #64	@ 0x40
 8003602:	431a      	orrs	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360c:	2204      	movs	r2, #4
 800360e:	431a      	orrs	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	0018      	movs	r0, r3
 8003618:	f7ff fcb2 	bl	8002f80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800361c:	46c0      	nop			@ (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	b004      	add	sp, #16
 8003622:	bd80      	pop	{r7, pc}

08003624 <LL_ADC_GetCommonClock>:
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	23f0      	movs	r3, #240	@ 0xf0
 8003632:	039b      	lsls	r3, r3, #14
 8003634:	4013      	ands	r3, r2
}
 8003636:	0018      	movs	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	b002      	add	sp, #8
 800363c:	bd80      	pop	{r7, pc}

0800363e <LL_ADC_GetClock>:
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	0f9b      	lsrs	r3, r3, #30
 800364c:	079b      	lsls	r3, r3, #30
}
 800364e:	0018      	movs	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	b002      	add	sp, #8
 8003654:	bd80      	pop	{r7, pc}

08003656 <LL_ADC_SetCalibrationFactor>:
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	22b4      	movs	r2, #180	@ 0xb4
 8003664:	589b      	ldr	r3, [r3, r2]
 8003666:	227f      	movs	r2, #127	@ 0x7f
 8003668:	4393      	bics	r3, r2
 800366a:	001a      	movs	r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	21b4      	movs	r1, #180	@ 0xb4
 8003674:	505a      	str	r2, [r3, r1]
}
 8003676:	46c0      	nop			@ (mov r8, r8)
 8003678:	46bd      	mov	sp, r7
 800367a:	b002      	add	sp, #8
 800367c:	bd80      	pop	{r7, pc}

0800367e <LL_ADC_GetCalibrationFactor>:
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	22b4      	movs	r2, #180	@ 0xb4
 800368a:	589b      	ldr	r3, [r3, r2]
 800368c:	227f      	movs	r2, #127	@ 0x7f
 800368e:	4013      	ands	r3, r2
}
 8003690:	0018      	movs	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	b002      	add	sp, #8
 8003696:	bd80      	pop	{r7, pc}

08003698 <LL_ADC_Enable>:
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a04      	ldr	r2, [pc, #16]	@ (80036b8 <LL_ADC_Enable+0x20>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	2201      	movs	r2, #1
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	609a      	str	r2, [r3, #8]
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	b002      	add	sp, #8
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	7fffffe8 	.word	0x7fffffe8

080036bc <LL_ADC_Disable>:
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4a04      	ldr	r2, [pc, #16]	@ (80036dc <LL_ADC_Disable+0x20>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	2202      	movs	r2, #2
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	609a      	str	r2, [r3, #8]
}
 80036d4:	46c0      	nop			@ (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b002      	add	sp, #8
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	7fffffe8 	.word	0x7fffffe8

080036e0 <LL_ADC_IsEnabled>:
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2201      	movs	r2, #1
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <LL_ADC_IsEnabled+0x18>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <LL_ADC_IsEnabled+0x1a>
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	0018      	movs	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b002      	add	sp, #8
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <LL_ADC_StartCalibration>:
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a05      	ldr	r2, [pc, #20]	@ (8003728 <LL_ADC_StartCalibration+0x24>)
 8003712:	4013      	ands	r3, r2
 8003714:	2280      	movs	r2, #128	@ 0x80
 8003716:	0612      	lsls	r2, r2, #24
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	609a      	str	r2, [r3, #8]
}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b002      	add	sp, #8
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	7fffffe8 	.word	0x7fffffe8

0800372c <LL_ADC_IsCalibrationOnGoing>:
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	0fdb      	lsrs	r3, r3, #31
 800373a:	07da      	lsls	r2, r3, #31
 800373c:	2380      	movs	r3, #128	@ 0x80
 800373e:	061b      	lsls	r3, r3, #24
 8003740:	429a      	cmp	r2, r3
 8003742:	d101      	bne.n	8003748 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003748:	2300      	movs	r3, #0
}
 800374a:	0018      	movs	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	b002      	add	sp, #8
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003754:	b590      	push	{r4, r7, lr}
 8003756:	b08b      	sub	sp, #44	@ 0x2c
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2254      	movs	r2, #84	@ 0x54
 8003768:	5c9b      	ldrb	r3, [r3, r2]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_ADCEx_Calibration_Start+0x1e>
 800376e:	2302      	movs	r3, #2
 8003770:	e0dd      	b.n	800392e <HAL_ADCEx_Calibration_Start+0x1da>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2254      	movs	r2, #84	@ 0x54
 8003776:	2101      	movs	r1, #1
 8003778:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800377a:	231f      	movs	r3, #31
 800377c:	18fc      	adds	r4, r7, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	0018      	movs	r0, r3
 8003782:	f7ff fe63 	bl	800344c <ADC_Disable>
 8003786:	0003      	movs	r3, r0
 8003788:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	0018      	movs	r0, r3
 8003790:	f7ff ffa6 	bl	80036e0 <LL_ADC_IsEnabled>
 8003794:	1e03      	subs	r3, r0, #0
 8003796:	d000      	beq.n	800379a <HAL_ADCEx_Calibration_Start+0x46>
 8003798:	e0bc      	b.n	8003914 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379e:	4a66      	ldr	r2, [pc, #408]	@ (8003938 <HAL_ADCEx_Calibration_Start+0x1e4>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	2202      	movs	r2, #2
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4a62      	ldr	r2, [pc, #392]	@ (800393c <HAL_ADCEx_Calibration_Start+0x1e8>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	495f      	ldr	r1, [pc, #380]	@ (8003940 <HAL_ADCEx_Calibration_Start+0x1ec>)
 80037c2:	400a      	ands	r2, r1
 80037c4:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ca:	e02d      	b.n	8003828 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	0018      	movs	r0, r3
 80037d2:	f7ff ff97 	bl	8003704 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80037d6:	e014      	b.n	8003802 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3301      	adds	r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4a58      	ldr	r2, [pc, #352]	@ (8003944 <HAL_ADCEx_Calibration_Start+0x1f0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d90d      	bls.n	8003802 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ea:	2212      	movs	r2, #18
 80037ec:	4393      	bics	r3, r2
 80037ee:	2210      	movs	r2, #16
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2254      	movs	r2, #84	@ 0x54
 80037fa:	2100      	movs	r1, #0
 80037fc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e095      	b.n	800392e <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	0018      	movs	r0, r3
 8003808:	f7ff ff90 	bl	800372c <LL_ADC_IsCalibrationOnGoing>
 800380c:	1e03      	subs	r3, r0, #0
 800380e:	d1e3      	bne.n	80037d8 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	0018      	movs	r0, r3
 8003816:	f7ff ff32 	bl	800367e <LL_ADC_GetCalibrationFactor>
 800381a:	0002      	movs	r2, r0
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	189b      	adds	r3, r3, r2
 8003820:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	3301      	adds	r3, #1
 8003826:	627b      	str	r3, [r7, #36]	@ 0x24
 8003828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382a:	2b07      	cmp	r3, #7
 800382c:	d9ce      	bls.n	80037cc <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800382e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003830:	6a38      	ldr	r0, [r7, #32]
 8003832:	f7fc fc67 	bl	8000104 <__udivsi3>
 8003836:	0003      	movs	r3, r0
 8003838:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	0018      	movs	r0, r3
 8003840:	f7ff ff2a 	bl	8003698 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	0018      	movs	r0, r3
 800384a:	f7ff fef8 	bl	800363e <LL_ADC_GetClock>
 800384e:	1e03      	subs	r3, r0, #0
 8003850:	d11b      	bne.n	800388a <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003852:	4b3d      	ldr	r3, [pc, #244]	@ (8003948 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8003854:	0018      	movs	r0, r3
 8003856:	f7ff fee5 	bl	8003624 <LL_ADC_GetCommonClock>
 800385a:	0003      	movs	r3, r0
 800385c:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	23e0      	movs	r3, #224	@ 0xe0
 8003862:	035b      	lsls	r3, r3, #13
 8003864:	429a      	cmp	r2, r3
 8003866:	d310      	bcc.n	800388a <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	0c9b      	lsrs	r3, r3, #18
 800386c:	3b03      	subs	r3, #3
 800386e:	2201      	movs	r2, #1
 8003870:	409a      	lsls	r2, r3
 8003872:	0013      	movs	r3, r2
 8003874:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	085b      	lsrs	r3, r3, #1
 800387a:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 800387c:	e002      	b.n	8003884 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3b01      	subs	r3, #1
 8003882:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f9      	bne.n	800387e <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6a3a      	ldr	r2, [r7, #32]
 8003890:	0011      	movs	r1, r2
 8003892:	0018      	movs	r0, r3
 8003894:	f7ff fedf 	bl	8003656 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	0018      	movs	r0, r3
 800389e:	f7ff ff0d 	bl	80036bc <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038a2:	f7fe ffa9 	bl	80027f8 <HAL_GetTick>
 80038a6:	0003      	movs	r3, r0
 80038a8:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038aa:	e01b      	b.n	80038e4 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038ac:	f7fe ffa4 	bl	80027f8 <HAL_GetTick>
 80038b0:	0002      	movs	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d914      	bls.n	80038e4 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	0018      	movs	r0, r3
 80038c0:	f7ff ff0e 	bl	80036e0 <LL_ADC_IsEnabled>
 80038c4:	1e03      	subs	r3, r0, #0
 80038c6:	d00d      	beq.n	80038e4 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038cc:	2210      	movs	r2, #16
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d8:	2201      	movs	r2, #1
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e024      	b.n	800392e <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f7ff fef9 	bl	80036e0 <LL_ADC_IsEnabled>
 80038ee:	1e03      	subs	r3, r0, #0
 80038f0:	d1dc      	bne.n	80038ac <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68d9      	ldr	r1, [r3, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	430a      	orrs	r2, r1
 8003900:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003906:	2203      	movs	r2, #3
 8003908:	4393      	bics	r3, r2
 800390a:	2201      	movs	r2, #1
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	659a      	str	r2, [r3, #88]	@ 0x58
 8003912:	e005      	b.n	8003920 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003918:	2210      	movs	r2, #16
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2254      	movs	r2, #84	@ 0x54
 8003924:	2100      	movs	r1, #0
 8003926:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003928:	231f      	movs	r3, #31
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	781b      	ldrb	r3, [r3, #0]
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b00b      	add	sp, #44	@ 0x2c
 8003934:	bd90      	pop	{r4, r7, pc}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	fffffefd 	.word	0xfffffefd
 800393c:	00008003 	.word	0x00008003
 8003940:	ffff7ffc 	.word	0xffff7ffc
 8003944:	0002f1ff 	.word	0x0002f1ff
 8003948:	40012708 	.word	0x40012708

0800394c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	0002      	movs	r2, r0
 8003954:	1dfb      	adds	r3, r7, #7
 8003956:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003958:	1dfb      	adds	r3, r7, #7
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b7f      	cmp	r3, #127	@ 0x7f
 800395e:	d809      	bhi.n	8003974 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003960:	1dfb      	adds	r3, r7, #7
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	001a      	movs	r2, r3
 8003966:	231f      	movs	r3, #31
 8003968:	401a      	ands	r2, r3
 800396a:	4b04      	ldr	r3, [pc, #16]	@ (800397c <__NVIC_EnableIRQ+0x30>)
 800396c:	2101      	movs	r1, #1
 800396e:	4091      	lsls	r1, r2
 8003970:	000a      	movs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003974:	46c0      	nop			@ (mov r8, r8)
 8003976:	46bd      	mov	sp, r7
 8003978:	b002      	add	sp, #8
 800397a:	bd80      	pop	{r7, pc}
 800397c:	e000e100 	.word	0xe000e100

08003980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	0002      	movs	r2, r0
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	1dfb      	adds	r3, r7, #7
 800398c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800398e:	1dfb      	adds	r3, r7, #7
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b7f      	cmp	r3, #127	@ 0x7f
 8003994:	d828      	bhi.n	80039e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003996:	4a2f      	ldr	r2, [pc, #188]	@ (8003a54 <__NVIC_SetPriority+0xd4>)
 8003998:	1dfb      	adds	r3, r7, #7
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	b25b      	sxtb	r3, r3
 800399e:	089b      	lsrs	r3, r3, #2
 80039a0:	33c0      	adds	r3, #192	@ 0xc0
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	589b      	ldr	r3, [r3, r2]
 80039a6:	1dfa      	adds	r2, r7, #7
 80039a8:	7812      	ldrb	r2, [r2, #0]
 80039aa:	0011      	movs	r1, r2
 80039ac:	2203      	movs	r2, #3
 80039ae:	400a      	ands	r2, r1
 80039b0:	00d2      	lsls	r2, r2, #3
 80039b2:	21ff      	movs	r1, #255	@ 0xff
 80039b4:	4091      	lsls	r1, r2
 80039b6:	000a      	movs	r2, r1
 80039b8:	43d2      	mvns	r2, r2
 80039ba:	401a      	ands	r2, r3
 80039bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	019b      	lsls	r3, r3, #6
 80039c2:	22ff      	movs	r2, #255	@ 0xff
 80039c4:	401a      	ands	r2, r3
 80039c6:	1dfb      	adds	r3, r7, #7
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	0018      	movs	r0, r3
 80039cc:	2303      	movs	r3, #3
 80039ce:	4003      	ands	r3, r0
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039d4:	481f      	ldr	r0, [pc, #124]	@ (8003a54 <__NVIC_SetPriority+0xd4>)
 80039d6:	1dfb      	adds	r3, r7, #7
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	b25b      	sxtb	r3, r3
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	430a      	orrs	r2, r1
 80039e0:	33c0      	adds	r3, #192	@ 0xc0
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80039e6:	e031      	b.n	8003a4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a58 <__NVIC_SetPriority+0xd8>)
 80039ea:	1dfb      	adds	r3, r7, #7
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	0019      	movs	r1, r3
 80039f0:	230f      	movs	r3, #15
 80039f2:	400b      	ands	r3, r1
 80039f4:	3b08      	subs	r3, #8
 80039f6:	089b      	lsrs	r3, r3, #2
 80039f8:	3306      	adds	r3, #6
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	18d3      	adds	r3, r2, r3
 80039fe:	3304      	adds	r3, #4
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	1dfa      	adds	r2, r7, #7
 8003a04:	7812      	ldrb	r2, [r2, #0]
 8003a06:	0011      	movs	r1, r2
 8003a08:	2203      	movs	r2, #3
 8003a0a:	400a      	ands	r2, r1
 8003a0c:	00d2      	lsls	r2, r2, #3
 8003a0e:	21ff      	movs	r1, #255	@ 0xff
 8003a10:	4091      	lsls	r1, r2
 8003a12:	000a      	movs	r2, r1
 8003a14:	43d2      	mvns	r2, r2
 8003a16:	401a      	ands	r2, r3
 8003a18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	019b      	lsls	r3, r3, #6
 8003a1e:	22ff      	movs	r2, #255	@ 0xff
 8003a20:	401a      	ands	r2, r3
 8003a22:	1dfb      	adds	r3, r7, #7
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	0018      	movs	r0, r3
 8003a28:	2303      	movs	r3, #3
 8003a2a:	4003      	ands	r3, r0
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a30:	4809      	ldr	r0, [pc, #36]	@ (8003a58 <__NVIC_SetPriority+0xd8>)
 8003a32:	1dfb      	adds	r3, r7, #7
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	001c      	movs	r4, r3
 8003a38:	230f      	movs	r3, #15
 8003a3a:	4023      	ands	r3, r4
 8003a3c:	3b08      	subs	r3, #8
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	430a      	orrs	r2, r1
 8003a42:	3306      	adds	r3, #6
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	18c3      	adds	r3, r0, r3
 8003a48:	3304      	adds	r3, #4
 8003a4a:	601a      	str	r2, [r3, #0]
}
 8003a4c:	46c0      	nop			@ (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b003      	add	sp, #12
 8003a52:	bd90      	pop	{r4, r7, pc}
 8003a54:	e000e100 	.word	0xe000e100
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	1e5a      	subs	r2, r3, #1
 8003a68:	2380      	movs	r3, #128	@ 0x80
 8003a6a:	045b      	lsls	r3, r3, #17
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d301      	bcc.n	8003a74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a70:	2301      	movs	r3, #1
 8003a72:	e010      	b.n	8003a96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a74:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa0 <SysTick_Config+0x44>)
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	3a01      	subs	r2, #1
 8003a7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	425b      	negs	r3, r3
 8003a80:	2103      	movs	r1, #3
 8003a82:	0018      	movs	r0, r3
 8003a84:	f7ff ff7c 	bl	8003980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a88:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <SysTick_Config+0x44>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a8e:	4b04      	ldr	r3, [pc, #16]	@ (8003aa0 <SysTick_Config+0x44>)
 8003a90:	2207      	movs	r2, #7
 8003a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	0018      	movs	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b002      	add	sp, #8
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	e000e010 	.word	0xe000e010

08003aa4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
 8003aae:	210f      	movs	r1, #15
 8003ab0:	187b      	adds	r3, r7, r1
 8003ab2:	1c02      	adds	r2, r0, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	187b      	adds	r3, r7, r1
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	b25b      	sxtb	r3, r3
 8003abe:	0011      	movs	r1, r2
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f7ff ff5d 	bl	8003980 <__NVIC_SetPriority>
}
 8003ac6:	46c0      	nop			@ (mov r8, r8)
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b004      	add	sp, #16
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	0002      	movs	r2, r0
 8003ad6:	1dfb      	adds	r3, r7, #7
 8003ad8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ada:	1dfb      	adds	r3, r7, #7
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	b25b      	sxtb	r3, r3
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7ff ff33 	bl	800394c <__NVIC_EnableIRQ>
}
 8003ae6:	46c0      	nop			@ (mov r8, r8)
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b002      	add	sp, #8
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7ff ffaf 	bl	8003a5c <SysTick_Config>
 8003afe:	0003      	movs	r3, r0
}
 8003b00:	0018      	movs	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b002      	add	sp, #8
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e015      	b.n	8003b46 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	791b      	ldrb	r3, [r3, #4]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f7fe fc1d 	bl	800236c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2202      	movs	r2, #2
 8003b36:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	0018      	movs	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b002      	add	sp, #8
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e047      	b.n	8003bf2 <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	795b      	ldrb	r3, [r3, #5]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_DAC_Start+0x20>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e041      	b.n	8003bf2 <HAL_DAC_Start+0xa4>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6819      	ldr	r1, [r3, #0]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2210      	movs	r2, #16
 8003b84:	4013      	ands	r3, r2
 8003b86:	2201      	movs	r2, #1
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10f      	bne.n	8003bb8 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	223e      	movs	r2, #62	@ 0x3e
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d11e      	bne.n	8003be4 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	e015      	b.n	8003be4 <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	23f8      	movs	r3, #248	@ 0xf8
 8003bc0:	039b      	lsls	r3, r3, #14
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2110      	movs	r1, #16
 8003bc8:	400b      	ands	r3, r1
 8003bca:	2102      	movs	r1, #2
 8003bcc:	4099      	lsls	r1, r3
 8003bce:	000b      	movs	r3, r1
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d107      	bne.n	8003be4 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2102      	movs	r1, #2
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b002      	add	sp, #8
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e014      	b.n	8003c40 <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d105      	bne.n	8003c2e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	18d3      	adds	r3, r2, r3
 8003c28:	3308      	adds	r3, #8
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	e004      	b.n	8003c38 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	18d3      	adds	r3, r2, r3
 8003c34:	3314      	adds	r3, #20
 8003c36:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b006      	add	sp, #24
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c54:	231f      	movs	r3, #31
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_DAC_ConfigChannel+0x20>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e115      	b.n	8003e98 <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	795b      	ldrb	r3, [r3, #5]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_DAC_ConfigChannel+0x30>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e10f      	b.n	8003e98 <HAL_DAC_ConfigChannel+0x250>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2202      	movs	r2, #2
 8003c82:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d000      	beq.n	8003c8e <HAL_DAC_ConfigChannel+0x46>
 8003c8c:	e07a      	b.n	8003d84 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003c8e:	f7fe fdb3 	bl	80027f8 <HAL_GetTick>
 8003c92:	0003      	movs	r3, r0
 8003c94:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d13d      	bne.n	8003d18 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c9c:	e018      	b.n	8003cd0 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c9e:	f7fe fdab 	bl	80027f8 <HAL_GetTick>
 8003ca2:	0002      	movs	r2, r0
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d911      	bls.n	8003cd0 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cb2:	2380      	movs	r3, #128	@ 0x80
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2208      	movs	r2, #8
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2203      	movs	r2, #3
 8003cca:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e0e3      	b.n	8003e98 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cd6:	2380      	movs	r3, #128	@ 0x80
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d1df      	bne.n	8003c9e <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	6992      	ldr	r2, [r2, #24]
 8003ce6:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ce8:	e020      	b.n	8003d2c <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003cea:	f7fe fd85 	bl	80027f8 <HAL_GetTick>
 8003cee:	0002      	movs	r2, r0
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d90f      	bls.n	8003d18 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	da0a      	bge.n	8003d18 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	2208      	movs	r2, #8
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2203      	movs	r2, #3
 8003d12:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e0bf      	b.n	8003e98 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	dbe3      	blt.n	8003cea <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	6992      	ldr	r2, [r2, #24]
 8003d2a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	2110      	movs	r1, #16
 8003d36:	400a      	ands	r2, r1
 8003d38:	4959      	ldr	r1, [pc, #356]	@ (8003ea0 <HAL_DAC_ConfigChannel+0x258>)
 8003d3a:	4091      	lsls	r1, r2
 8003d3c:	000a      	movs	r2, r1
 8003d3e:	43d2      	mvns	r2, r2
 8003d40:	401a      	ands	r2, r3
 8003d42:	0011      	movs	r1, r2
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2010      	movs	r0, #16
 8003d4c:	4003      	ands	r3, r0
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	2110      	movs	r1, #16
 8003d62:	400a      	ands	r2, r1
 8003d64:	21ff      	movs	r1, #255	@ 0xff
 8003d66:	4091      	lsls	r1, r2
 8003d68:	000a      	movs	r2, r1
 8003d6a:	43d2      	mvns	r2, r2
 8003d6c:	401a      	ands	r2, r3
 8003d6e:	0011      	movs	r1, r2
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	6a1a      	ldr	r2, [r3, #32]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2010      	movs	r0, #16
 8003d78:	4003      	ands	r3, r0
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d11d      	bne.n	8003dc8 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d92:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2210      	movs	r2, #16
 8003d98:	4013      	ands	r3, r2
 8003d9a:	221f      	movs	r2, #31
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	0013      	movs	r3, r2
 8003da0:	43da      	mvns	r2, r3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	4013      	ands	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2210      	movs	r2, #16
 8003db2:	4013      	ands	r3, r2
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	409a      	lsls	r2, r3
 8003db8:	0013      	movs	r3, r2
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dce:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2210      	movs	r2, #16
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2207      	movs	r2, #7
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	0013      	movs	r3, r2
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	4013      	ands	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2210      	movs	r2, #16
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	0013      	movs	r3, r2
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2110      	movs	r1, #16
 8003e1a:	400b      	ands	r3, r1
 8003e1c:	2180      	movs	r1, #128	@ 0x80
 8003e1e:	01c9      	lsls	r1, r1, #7
 8003e20:	4099      	lsls	r1, r3
 8003e22:	000b      	movs	r3, r1
 8003e24:	43d9      	mvns	r1, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	400a      	ands	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2210      	movs	r2, #16
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	4a19      	ldr	r2, [pc, #100]	@ (8003ea4 <HAL_DAC_ConfigChannel+0x25c>)
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	0013      	movs	r3, r2
 8003e42:	43da      	mvns	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	4013      	ands	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2210      	movs	r2, #16
 8003e54:	4013      	ands	r3, r2
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	0013      	movs	r3, r2
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2110      	movs	r1, #16
 8003e74:	400b      	ands	r3, r1
 8003e76:	21c0      	movs	r1, #192	@ 0xc0
 8003e78:	4099      	lsls	r1, r3
 8003e7a:	000b      	movs	r3, r1
 8003e7c:	43d9      	mvns	r1, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	400a      	ands	r2, r1
 8003e84:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003e92:	231f      	movs	r3, #31
 8003e94:	18fb      	adds	r3, r7, r3
 8003e96:	781b      	ldrb	r3, [r3, #0]
}
 8003e98:	0018      	movs	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b008      	add	sp, #32
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	000003ff 	.word	0x000003ff
 8003ea4:	00000ffe 	.word	0x00000ffe

08003ea8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e077      	b.n	8003faa <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a3d      	ldr	r2, [pc, #244]	@ (8003fb4 <HAL_DMA_Init+0x10c>)
 8003ec0:	4694      	mov	ip, r2
 8003ec2:	4463      	add	r3, ip
 8003ec4:	2114      	movs	r1, #20
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f7fc f91c 	bl	8000104 <__udivsi3>
 8003ecc:	0003      	movs	r3, r0
 8003ece:	009a      	lsls	r2, r3, #2
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2225      	movs	r2, #37	@ 0x25
 8003ed8:	2102      	movs	r1, #2
 8003eda:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4934      	ldr	r1, [pc, #208]	@ (8003fb8 <HAL_DMA_Init+0x110>)
 8003ee8:	400a      	ands	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6819      	ldr	r1, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f000 f9c1 	bl	80042ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	2380      	movs	r3, #128	@ 0x80
 8003f30:	01db      	lsls	r3, r3, #7
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d102      	bne.n	8003f3c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f44:	213f      	movs	r1, #63	@ 0x3f
 8003f46:	400a      	ands	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f52:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d011      	beq.n	8003f80 <HAL_DMA_Init+0xd8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d80d      	bhi.n	8003f80 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	0018      	movs	r0, r3
 8003f68:	f000 f9cc 	bl	8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	e008      	b.n	8003f92 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2225      	movs	r2, #37	@ 0x25
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2224      	movs	r2, #36	@ 0x24
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	0018      	movs	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b002      	add	sp, #8
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	bffdfff8 	.word	0xbffdfff8
 8003fb8:	ffff800f 	.word	0xffff800f

08003fbc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fca:	2317      	movs	r3, #23
 8003fcc:	18fb      	adds	r3, r7, r3
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2224      	movs	r2, #36	@ 0x24
 8003fd6:	5c9b      	ldrb	r3, [r3, r2]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_DMA_Start_IT+0x24>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e06f      	b.n	80040c0 <HAL_DMA_Start_IT+0x104>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2224      	movs	r2, #36	@ 0x24
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2225      	movs	r2, #37	@ 0x25
 8003fec:	5c9b      	ldrb	r3, [r3, r2]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d157      	bne.n	80040a4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2225      	movs	r2, #37	@ 0x25
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2101      	movs	r1, #1
 800400e:	438a      	bics	r2, r1
 8004010:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	68b9      	ldr	r1, [r7, #8]
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f907 	bl	800422c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	210e      	movs	r1, #14
 8004032:	430a      	orrs	r2, r1
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e00f      	b.n	8004058 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2104      	movs	r1, #4
 8004044:	438a      	bics	r2, r1
 8004046:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	210a      	movs	r1, #10
 8004054:	430a      	orrs	r2, r1
 8004056:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	2380      	movs	r3, #128	@ 0x80
 8004060:	025b      	lsls	r3, r3, #9
 8004062:	4013      	ands	r3, r2
 8004064:	d008      	beq.n	8004078 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004070:	2180      	movs	r1, #128	@ 0x80
 8004072:	0049      	lsls	r1, r1, #1
 8004074:	430a      	orrs	r2, r1
 8004076:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800408a:	2180      	movs	r1, #128	@ 0x80
 800408c:	0049      	lsls	r1, r1, #1
 800408e:	430a      	orrs	r2, r1
 8004090:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2101      	movs	r1, #1
 800409e:	430a      	orrs	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e00a      	b.n	80040ba <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2280      	movs	r2, #128	@ 0x80
 80040a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2224      	movs	r2, #36	@ 0x24
 80040ae:	2100      	movs	r1, #0
 80040b0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80040b2:	2317      	movs	r3, #23
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80040ba:	2317      	movs	r3, #23
 80040bc:	18fb      	adds	r3, r7, r3
 80040be:	781b      	ldrb	r3, [r3, #0]
}
 80040c0:	0018      	movs	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b006      	add	sp, #24
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80040d0:	4b55      	ldr	r3, [pc, #340]	@ (8004228 <HAL_DMA_IRQHandler+0x160>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	221c      	movs	r2, #28
 80040e4:	4013      	ands	r3, r2
 80040e6:	2204      	movs	r2, #4
 80040e8:	409a      	lsls	r2, r3
 80040ea:	0013      	movs	r3, r2
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4013      	ands	r3, r2
 80040f0:	d027      	beq.n	8004142 <HAL_DMA_IRQHandler+0x7a>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2204      	movs	r2, #4
 80040f6:	4013      	ands	r3, r2
 80040f8:	d023      	beq.n	8004142 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2220      	movs	r2, #32
 8004102:	4013      	ands	r3, r2
 8004104:	d107      	bne.n	8004116 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2104      	movs	r1, #4
 8004112:	438a      	bics	r2, r1
 8004114:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004116:	4b44      	ldr	r3, [pc, #272]	@ (8004228 <HAL_DMA_IRQHandler+0x160>)
 8004118:	6859      	ldr	r1, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411e:	221c      	movs	r2, #28
 8004120:	4013      	ands	r3, r2
 8004122:	2204      	movs	r2, #4
 8004124:	409a      	lsls	r2, r3
 8004126:	4b40      	ldr	r3, [pc, #256]	@ (8004228 <HAL_DMA_IRQHandler+0x160>)
 8004128:	430a      	orrs	r2, r1
 800412a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004130:	2b00      	cmp	r3, #0
 8004132:	d100      	bne.n	8004136 <HAL_DMA_IRQHandler+0x6e>
 8004134:	e073      	b.n	800421e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	0010      	movs	r0, r2
 800413e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004140:	e06d      	b.n	800421e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	221c      	movs	r2, #28
 8004148:	4013      	ands	r3, r2
 800414a:	2202      	movs	r2, #2
 800414c:	409a      	lsls	r2, r3
 800414e:	0013      	movs	r3, r2
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4013      	ands	r3, r2
 8004154:	d02e      	beq.n	80041b4 <HAL_DMA_IRQHandler+0xec>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2202      	movs	r2, #2
 800415a:	4013      	ands	r3, r2
 800415c:	d02a      	beq.n	80041b4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2220      	movs	r2, #32
 8004166:	4013      	ands	r3, r2
 8004168:	d10b      	bne.n	8004182 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	210a      	movs	r1, #10
 8004176:	438a      	bics	r2, r1
 8004178:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2225      	movs	r2, #37	@ 0x25
 800417e:	2101      	movs	r1, #1
 8004180:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004182:	4b29      	ldr	r3, [pc, #164]	@ (8004228 <HAL_DMA_IRQHandler+0x160>)
 8004184:	6859      	ldr	r1, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	221c      	movs	r2, #28
 800418c:	4013      	ands	r3, r2
 800418e:	2202      	movs	r2, #2
 8004190:	409a      	lsls	r2, r3
 8004192:	4b25      	ldr	r3, [pc, #148]	@ (8004228 <HAL_DMA_IRQHandler+0x160>)
 8004194:	430a      	orrs	r2, r1
 8004196:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2224      	movs	r2, #36	@ 0x24
 800419c:	2100      	movs	r1, #0
 800419e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d03a      	beq.n	800421e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	0010      	movs	r0, r2
 80041b0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80041b2:	e034      	b.n	800421e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	221c      	movs	r2, #28
 80041ba:	4013      	ands	r3, r2
 80041bc:	2208      	movs	r2, #8
 80041be:	409a      	lsls	r2, r3
 80041c0:	0013      	movs	r3, r2
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4013      	ands	r3, r2
 80041c6:	d02b      	beq.n	8004220 <HAL_DMA_IRQHandler+0x158>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2208      	movs	r2, #8
 80041cc:	4013      	ands	r3, r2
 80041ce:	d027      	beq.n	8004220 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	210e      	movs	r1, #14
 80041dc:	438a      	bics	r2, r1
 80041de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80041e0:	4b11      	ldr	r3, [pc, #68]	@ (8004228 <HAL_DMA_IRQHandler+0x160>)
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e8:	221c      	movs	r2, #28
 80041ea:	4013      	ands	r3, r2
 80041ec:	2201      	movs	r2, #1
 80041ee:	409a      	lsls	r2, r3
 80041f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <HAL_DMA_IRQHandler+0x160>)
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2225      	movs	r2, #37	@ 0x25
 8004200:	2101      	movs	r1, #1
 8004202:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2224      	movs	r2, #36	@ 0x24
 8004208:	2100      	movs	r1, #0
 800420a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	0010      	movs	r0, r2
 800421c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	46c0      	nop			@ (mov r8, r8)
}
 8004222:	46bd      	mov	sp, r7
 8004224:	b004      	add	sp, #16
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40020000 	.word	0x40020000

0800422c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004242:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004248:	2b00      	cmp	r3, #0
 800424a:	d004      	beq.n	8004256 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004254:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004256:	4b14      	ldr	r3, [pc, #80]	@ (80042a8 <DMA_SetConfig+0x7c>)
 8004258:	6859      	ldr	r1, [r3, #4]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	221c      	movs	r2, #28
 8004260:	4013      	ands	r3, r2
 8004262:	2201      	movs	r2, #1
 8004264:	409a      	lsls	r2, r3
 8004266:	4b10      	ldr	r3, [pc, #64]	@ (80042a8 <DMA_SetConfig+0x7c>)
 8004268:	430a      	orrs	r2, r1
 800426a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b10      	cmp	r3, #16
 800427a:	d108      	bne.n	800428e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800428c:	e007      	b.n	800429e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	60da      	str	r2, [r3, #12]
}
 800429e:	46c0      	nop			@ (mov r8, r8)
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b004      	add	sp, #16
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	40020000 	.word	0x40020000

080042ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b8:	089b      	lsrs	r3, r3, #2
 80042ba:	4a10      	ldr	r2, [pc, #64]	@ (80042fc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80042bc:	4694      	mov	ip, r2
 80042be:	4463      	add	r3, ip
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	001a      	movs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	001a      	movs	r2, r3
 80042ce:	23ff      	movs	r3, #255	@ 0xff
 80042d0:	4013      	ands	r3, r2
 80042d2:	3b08      	subs	r3, #8
 80042d4:	2114      	movs	r1, #20
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7fb ff14 	bl	8000104 <__udivsi3>
 80042dc:	0003      	movs	r3, r0
 80042de:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a07      	ldr	r2, [pc, #28]	@ (8004300 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80042e4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	221f      	movs	r2, #31
 80042ea:	4013      	ands	r3, r2
 80042ec:	2201      	movs	r2, #1
 80042ee:	409a      	lsls	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80042f4:	46c0      	nop			@ (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b004      	add	sp, #16
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	10008200 	.word	0x10008200
 8004300:	40020880 	.word	0x40020880

08004304 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	223f      	movs	r2, #63	@ 0x3f
 8004312:	4013      	ands	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4a0a      	ldr	r2, [pc, #40]	@ (8004344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800431a:	4694      	mov	ip, r2
 800431c:	4463      	add	r3, ip
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	001a      	movs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a07      	ldr	r2, [pc, #28]	@ (8004348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800432a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3b01      	subs	r3, #1
 8004330:	2203      	movs	r2, #3
 8004332:	4013      	ands	r3, r2
 8004334:	2201      	movs	r2, #1
 8004336:	409a      	lsls	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800433c:	46c0      	nop			@ (mov r8, r8)
 800433e:	46bd      	mov	sp, r7
 8004340:	b004      	add	sp, #16
 8004342:	bd80      	pop	{r7, pc}
 8004344:	1000823f 	.word	0x1000823f
 8004348:	40020940 	.word	0x40020940

0800434c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800435a:	e147      	b.n	80045ec <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2101      	movs	r1, #1
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4091      	lsls	r1, r2
 8004366:	000a      	movs	r2, r1
 8004368:	4013      	ands	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d100      	bne.n	8004374 <HAL_GPIO_Init+0x28>
 8004372:	e138      	b.n	80045e6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2203      	movs	r2, #3
 800437a:	4013      	ands	r3, r2
 800437c:	2b01      	cmp	r3, #1
 800437e:	d005      	beq.n	800438c <HAL_GPIO_Init+0x40>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2203      	movs	r2, #3
 8004386:	4013      	ands	r3, r2
 8004388:	2b02      	cmp	r3, #2
 800438a:	d130      	bne.n	80043ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	2203      	movs	r2, #3
 8004398:	409a      	lsls	r2, r3
 800439a:	0013      	movs	r3, r2
 800439c:	43da      	mvns	r2, r3
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	4013      	ands	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	409a      	lsls	r2, r3
 80043ae:	0013      	movs	r3, r2
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043c2:	2201      	movs	r2, #1
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	409a      	lsls	r2, r3
 80043c8:	0013      	movs	r3, r2
 80043ca:	43da      	mvns	r2, r3
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4013      	ands	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	2201      	movs	r2, #1
 80043da:	401a      	ands	r2, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	409a      	lsls	r2, r3
 80043e0:	0013      	movs	r3, r2
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2203      	movs	r2, #3
 80043f4:	4013      	ands	r3, r2
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d017      	beq.n	800442a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	2203      	movs	r2, #3
 8004406:	409a      	lsls	r2, r3
 8004408:	0013      	movs	r3, r2
 800440a:	43da      	mvns	r2, r3
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4013      	ands	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	409a      	lsls	r2, r3
 800441c:	0013      	movs	r3, r2
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2203      	movs	r2, #3
 8004430:	4013      	ands	r3, r2
 8004432:	2b02      	cmp	r3, #2
 8004434:	d123      	bne.n	800447e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	08da      	lsrs	r2, r3, #3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3208      	adds	r2, #8
 800443e:	0092      	lsls	r2, r2, #2
 8004440:	58d3      	ldr	r3, [r2, r3]
 8004442:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2207      	movs	r2, #7
 8004448:	4013      	ands	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	220f      	movs	r2, #15
 800444e:	409a      	lsls	r2, r3
 8004450:	0013      	movs	r3, r2
 8004452:	43da      	mvns	r2, r3
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4013      	ands	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2107      	movs	r1, #7
 8004462:	400b      	ands	r3, r1
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	409a      	lsls	r2, r3
 8004468:	0013      	movs	r3, r2
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	08da      	lsrs	r2, r3, #3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3208      	adds	r2, #8
 8004478:	0092      	lsls	r2, r2, #2
 800447a:	6939      	ldr	r1, [r7, #16]
 800447c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	2203      	movs	r2, #3
 800448a:	409a      	lsls	r2, r3
 800448c:	0013      	movs	r3, r2
 800448e:	43da      	mvns	r2, r3
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	4013      	ands	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2203      	movs	r2, #3
 800449c:	401a      	ands	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	409a      	lsls	r2, r3
 80044a4:	0013      	movs	r3, r2
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	23c0      	movs	r3, #192	@ 0xc0
 80044b8:	029b      	lsls	r3, r3, #10
 80044ba:	4013      	ands	r3, r2
 80044bc:	d100      	bne.n	80044c0 <HAL_GPIO_Init+0x174>
 80044be:	e092      	b.n	80045e6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80044c0:	4a50      	ldr	r2, [pc, #320]	@ (8004604 <HAL_GPIO_Init+0x2b8>)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	089b      	lsrs	r3, r3, #2
 80044c6:	3318      	adds	r3, #24
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	589b      	ldr	r3, [r3, r2]
 80044cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2203      	movs	r2, #3
 80044d2:	4013      	ands	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	220f      	movs	r2, #15
 80044d8:	409a      	lsls	r2, r3
 80044da:	0013      	movs	r3, r2
 80044dc:	43da      	mvns	r2, r3
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4013      	ands	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	23a0      	movs	r3, #160	@ 0xa0
 80044e8:	05db      	lsls	r3, r3, #23
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d013      	beq.n	8004516 <HAL_GPIO_Init+0x1ca>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a45      	ldr	r2, [pc, #276]	@ (8004608 <HAL_GPIO_Init+0x2bc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00d      	beq.n	8004512 <HAL_GPIO_Init+0x1c6>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a44      	ldr	r2, [pc, #272]	@ (800460c <HAL_GPIO_Init+0x2c0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d007      	beq.n	800450e <HAL_GPIO_Init+0x1c2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a43      	ldr	r2, [pc, #268]	@ (8004610 <HAL_GPIO_Init+0x2c4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d101      	bne.n	800450a <HAL_GPIO_Init+0x1be>
 8004506:	2303      	movs	r3, #3
 8004508:	e006      	b.n	8004518 <HAL_GPIO_Init+0x1cc>
 800450a:	2305      	movs	r3, #5
 800450c:	e004      	b.n	8004518 <HAL_GPIO_Init+0x1cc>
 800450e:	2302      	movs	r3, #2
 8004510:	e002      	b.n	8004518 <HAL_GPIO_Init+0x1cc>
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <HAL_GPIO_Init+0x1cc>
 8004516:	2300      	movs	r3, #0
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	2103      	movs	r1, #3
 800451c:	400a      	ands	r2, r1
 800451e:	00d2      	lsls	r2, r2, #3
 8004520:	4093      	lsls	r3, r2
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004528:	4936      	ldr	r1, [pc, #216]	@ (8004604 <HAL_GPIO_Init+0x2b8>)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	089b      	lsrs	r3, r3, #2
 800452e:	3318      	adds	r3, #24
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004536:	4b33      	ldr	r3, [pc, #204]	@ (8004604 <HAL_GPIO_Init+0x2b8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	43da      	mvns	r2, r3
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	4013      	ands	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	2380      	movs	r3, #128	@ 0x80
 800454c:	035b      	lsls	r3, r3, #13
 800454e:	4013      	ands	r3, r2
 8004550:	d003      	beq.n	800455a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800455a:	4b2a      	ldr	r3, [pc, #168]	@ (8004604 <HAL_GPIO_Init+0x2b8>)
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004560:	4b28      	ldr	r3, [pc, #160]	@ (8004604 <HAL_GPIO_Init+0x2b8>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	43da      	mvns	r2, r3
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	4013      	ands	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	2380      	movs	r3, #128	@ 0x80
 8004576:	039b      	lsls	r3, r3, #14
 8004578:	4013      	ands	r3, r2
 800457a:	d003      	beq.n	8004584 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004584:	4b1f      	ldr	r3, [pc, #124]	@ (8004604 <HAL_GPIO_Init+0x2b8>)
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800458a:	4a1e      	ldr	r2, [pc, #120]	@ (8004604 <HAL_GPIO_Init+0x2b8>)
 800458c:	2384      	movs	r3, #132	@ 0x84
 800458e:	58d3      	ldr	r3, [r2, r3]
 8004590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	43da      	mvns	r2, r3
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4013      	ands	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	2380      	movs	r3, #128	@ 0x80
 80045a2:	029b      	lsls	r3, r3, #10
 80045a4:	4013      	ands	r3, r2
 80045a6:	d003      	beq.n	80045b0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045b0:	4914      	ldr	r1, [pc, #80]	@ (8004604 <HAL_GPIO_Init+0x2b8>)
 80045b2:	2284      	movs	r2, #132	@ 0x84
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80045b8:	4a12      	ldr	r2, [pc, #72]	@ (8004604 <HAL_GPIO_Init+0x2b8>)
 80045ba:	2380      	movs	r3, #128	@ 0x80
 80045bc:	58d3      	ldr	r3, [r2, r3]
 80045be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	43da      	mvns	r2, r3
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	4013      	ands	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	2380      	movs	r3, #128	@ 0x80
 80045d0:	025b      	lsls	r3, r3, #9
 80045d2:	4013      	ands	r3, r2
 80045d4:	d003      	beq.n	80045de <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045de:	4909      	ldr	r1, [pc, #36]	@ (8004604 <HAL_GPIO_Init+0x2b8>)
 80045e0:	2280      	movs	r2, #128	@ 0x80
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	3301      	adds	r3, #1
 80045ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	40da      	lsrs	r2, r3
 80045f4:	1e13      	subs	r3, r2, #0
 80045f6:	d000      	beq.n	80045fa <HAL_GPIO_Init+0x2ae>
 80045f8:	e6b0      	b.n	800435c <HAL_GPIO_Init+0x10>
  }
}
 80045fa:	46c0      	nop			@ (mov r8, r8)
 80045fc:	46c0      	nop			@ (mov r8, r8)
 80045fe:	46bd      	mov	sp, r7
 8004600:	b006      	add	sp, #24
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40021800 	.word	0x40021800
 8004608:	50000400 	.word	0x50000400
 800460c:	50000800 	.word	0x50000800
 8004610:	50000c00 	.word	0x50000c00

08004614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	000a      	movs	r2, r1
 800461e:	1cbb      	adds	r3, r7, #2
 8004620:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	1cba      	adds	r2, r7, #2
 8004628:	8812      	ldrh	r2, [r2, #0]
 800462a:	4013      	ands	r3, r2
 800462c:	d004      	beq.n	8004638 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800462e:	230f      	movs	r3, #15
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	2201      	movs	r2, #1
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	e003      	b.n	8004640 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004638:	230f      	movs	r3, #15
 800463a:	18fb      	adds	r3, r7, r3
 800463c:	2200      	movs	r2, #0
 800463e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004640:	230f      	movs	r3, #15
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	781b      	ldrb	r3, [r3, #0]
}
 8004646:	0018      	movs	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	b004      	add	sp, #16
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	0008      	movs	r0, r1
 8004658:	0011      	movs	r1, r2
 800465a:	1cbb      	adds	r3, r7, #2
 800465c:	1c02      	adds	r2, r0, #0
 800465e:	801a      	strh	r2, [r3, #0]
 8004660:	1c7b      	adds	r3, r7, #1
 8004662:	1c0a      	adds	r2, r1, #0
 8004664:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004666:	1c7b      	adds	r3, r7, #1
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d004      	beq.n	8004678 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800466e:	1cbb      	adds	r3, r7, #2
 8004670:	881a      	ldrh	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004676:	e003      	b.n	8004680 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004678:	1cbb      	adds	r3, r7, #2
 800467a:	881a      	ldrh	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004680:	46c0      	nop			@ (mov r8, r8)
 8004682:	46bd      	mov	sp, r7
 8004684:	b002      	add	sp, #8
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004690:	4b19      	ldr	r3, [pc, #100]	@ (80046f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a19      	ldr	r2, [pc, #100]	@ (80046fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004696:	4013      	ands	r3, r2
 8004698:	0019      	movs	r1, r3
 800469a:	4b17      	ldr	r3, [pc, #92]	@ (80046f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	430a      	orrs	r2, r1
 80046a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	2380      	movs	r3, #128	@ 0x80
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d11f      	bne.n	80046ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80046ac:	4b14      	ldr	r3, [pc, #80]	@ (8004700 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	0013      	movs	r3, r2
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	189b      	adds	r3, r3, r2
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	4912      	ldr	r1, [pc, #72]	@ (8004704 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80046ba:	0018      	movs	r0, r3
 80046bc:	f7fb fd22 	bl	8000104 <__udivsi3>
 80046c0:	0003      	movs	r3, r0
 80046c2:	3301      	adds	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046c6:	e008      	b.n	80046da <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	e001      	b.n	80046da <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e009      	b.n	80046ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046da:	4b07      	ldr	r3, [pc, #28]	@ (80046f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80046dc:	695a      	ldr	r2, [r3, #20]
 80046de:	2380      	movs	r3, #128	@ 0x80
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	401a      	ands	r2, r3
 80046e4:	2380      	movs	r3, #128	@ 0x80
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d0ed      	beq.n	80046c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	0018      	movs	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b004      	add	sp, #16
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	46c0      	nop			@ (mov r8, r8)
 80046f8:	40007000 	.word	0x40007000
 80046fc:	fffff9ff 	.word	0xfffff9ff
 8004700:	20000008 	.word	0x20000008
 8004704:	000f4240 	.word	0x000f4240

08004708 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800470c:	4b03      	ldr	r3, [pc, #12]	@ (800471c <LL_RCC_GetAPB1Prescaler+0x14>)
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	23e0      	movs	r3, #224	@ 0xe0
 8004712:	01db      	lsls	r3, r3, #7
 8004714:	4013      	ands	r3, r2
}
 8004716:	0018      	movs	r0, r3
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40021000 	.word	0x40021000

08004720 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e2fe      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2201      	movs	r2, #1
 8004738:	4013      	ands	r3, r2
 800473a:	d100      	bne.n	800473e <HAL_RCC_OscConfig+0x1e>
 800473c:	e07c      	b.n	8004838 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800473e:	4bc3      	ldr	r3, [pc, #780]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2238      	movs	r2, #56	@ 0x38
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004748:	4bc0      	ldr	r3, [pc, #768]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	2203      	movs	r2, #3
 800474e:	4013      	ands	r3, r2
 8004750:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	2b10      	cmp	r3, #16
 8004756:	d102      	bne.n	800475e <HAL_RCC_OscConfig+0x3e>
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b03      	cmp	r3, #3
 800475c:	d002      	beq.n	8004764 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d10b      	bne.n	800477c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004764:	4bb9      	ldr	r3, [pc, #740]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	2380      	movs	r3, #128	@ 0x80
 800476a:	029b      	lsls	r3, r3, #10
 800476c:	4013      	ands	r3, r2
 800476e:	d062      	beq.n	8004836 <HAL_RCC_OscConfig+0x116>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d15e      	bne.n	8004836 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e2d9      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	2380      	movs	r3, #128	@ 0x80
 8004782:	025b      	lsls	r3, r3, #9
 8004784:	429a      	cmp	r2, r3
 8004786:	d107      	bne.n	8004798 <HAL_RCC_OscConfig+0x78>
 8004788:	4bb0      	ldr	r3, [pc, #704]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4baf      	ldr	r3, [pc, #700]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 800478e:	2180      	movs	r1, #128	@ 0x80
 8004790:	0249      	lsls	r1, r1, #9
 8004792:	430a      	orrs	r2, r1
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	e020      	b.n	80047da <HAL_RCC_OscConfig+0xba>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	23a0      	movs	r3, #160	@ 0xa0
 800479e:	02db      	lsls	r3, r3, #11
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d10e      	bne.n	80047c2 <HAL_RCC_OscConfig+0xa2>
 80047a4:	4ba9      	ldr	r3, [pc, #676]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	4ba8      	ldr	r3, [pc, #672]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80047aa:	2180      	movs	r1, #128	@ 0x80
 80047ac:	02c9      	lsls	r1, r1, #11
 80047ae:	430a      	orrs	r2, r1
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	4ba6      	ldr	r3, [pc, #664]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	4ba5      	ldr	r3, [pc, #660]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80047b8:	2180      	movs	r1, #128	@ 0x80
 80047ba:	0249      	lsls	r1, r1, #9
 80047bc:	430a      	orrs	r2, r1
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e00b      	b.n	80047da <HAL_RCC_OscConfig+0xba>
 80047c2:	4ba2      	ldr	r3, [pc, #648]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	4ba1      	ldr	r3, [pc, #644]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80047c8:	49a1      	ldr	r1, [pc, #644]	@ (8004a50 <HAL_RCC_OscConfig+0x330>)
 80047ca:	400a      	ands	r2, r1
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	4b9f      	ldr	r3, [pc, #636]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	4b9e      	ldr	r3, [pc, #632]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80047d4:	499f      	ldr	r1, [pc, #636]	@ (8004a54 <HAL_RCC_OscConfig+0x334>)
 80047d6:	400a      	ands	r2, r1
 80047d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d014      	beq.n	800480c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fe f809 	bl	80027f8 <HAL_GetTick>
 80047e6:	0003      	movs	r3, r0
 80047e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ec:	f7fe f804 	bl	80027f8 <HAL_GetTick>
 80047f0:	0002      	movs	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b64      	cmp	r3, #100	@ 0x64
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e298      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047fe:	4b93      	ldr	r3, [pc, #588]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	2380      	movs	r3, #128	@ 0x80
 8004804:	029b      	lsls	r3, r3, #10
 8004806:	4013      	ands	r3, r2
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0xcc>
 800480a:	e015      	b.n	8004838 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7fd fff4 	bl	80027f8 <HAL_GetTick>
 8004810:	0003      	movs	r3, r0
 8004812:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004816:	f7fd ffef 	bl	80027f8 <HAL_GetTick>
 800481a:	0002      	movs	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b64      	cmp	r3, #100	@ 0x64
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e283      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004828:	4b88      	ldr	r3, [pc, #544]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	2380      	movs	r3, #128	@ 0x80
 800482e:	029b      	lsls	r3, r3, #10
 8004830:	4013      	ands	r3, r2
 8004832:	d1f0      	bne.n	8004816 <HAL_RCC_OscConfig+0xf6>
 8004834:	e000      	b.n	8004838 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004836:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2202      	movs	r2, #2
 800483e:	4013      	ands	r3, r2
 8004840:	d100      	bne.n	8004844 <HAL_RCC_OscConfig+0x124>
 8004842:	e099      	b.n	8004978 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004844:	4b81      	ldr	r3, [pc, #516]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2238      	movs	r2, #56	@ 0x38
 800484a:	4013      	ands	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800484e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2203      	movs	r2, #3
 8004854:	4013      	ands	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b10      	cmp	r3, #16
 800485c:	d102      	bne.n	8004864 <HAL_RCC_OscConfig+0x144>
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d002      	beq.n	800486a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d135      	bne.n	80048d6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800486a:	4b78      	ldr	r3, [pc, #480]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	2380      	movs	r3, #128	@ 0x80
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	4013      	ands	r3, r2
 8004874:	d005      	beq.n	8004882 <HAL_RCC_OscConfig+0x162>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e256      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004882:	4b72      	ldr	r3, [pc, #456]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	4a74      	ldr	r2, [pc, #464]	@ (8004a58 <HAL_RCC_OscConfig+0x338>)
 8004888:	4013      	ands	r3, r2
 800488a:	0019      	movs	r1, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	021a      	lsls	r2, r3, #8
 8004892:	4b6e      	ldr	r3, [pc, #440]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 8004894:	430a      	orrs	r2, r1
 8004896:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d112      	bne.n	80048c4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800489e:	4b6b      	ldr	r3, [pc, #428]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a6e      	ldr	r2, [pc, #440]	@ (8004a5c <HAL_RCC_OscConfig+0x33c>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	0019      	movs	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	4b67      	ldr	r3, [pc, #412]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80048ae:	430a      	orrs	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80048b2:	4b66      	ldr	r3, [pc, #408]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	0adb      	lsrs	r3, r3, #11
 80048b8:	2207      	movs	r2, #7
 80048ba:	4013      	ands	r3, r2
 80048bc:	4a68      	ldr	r2, [pc, #416]	@ (8004a60 <HAL_RCC_OscConfig+0x340>)
 80048be:	40da      	lsrs	r2, r3
 80048c0:	4b68      	ldr	r3, [pc, #416]	@ (8004a64 <HAL_RCC_OscConfig+0x344>)
 80048c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80048c4:	4b68      	ldr	r3, [pc, #416]	@ (8004a68 <HAL_RCC_OscConfig+0x348>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	0018      	movs	r0, r3
 80048ca:	f7fd ff39 	bl	8002740 <HAL_InitTick>
 80048ce:	1e03      	subs	r3, r0, #0
 80048d0:	d051      	beq.n	8004976 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e22c      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d030      	beq.n	8004940 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80048de:	4b5b      	ldr	r3, [pc, #364]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a5e      	ldr	r2, [pc, #376]	@ (8004a5c <HAL_RCC_OscConfig+0x33c>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	0019      	movs	r1, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	4b57      	ldr	r3, [pc, #348]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80048ee:	430a      	orrs	r2, r1
 80048f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80048f2:	4b56      	ldr	r3, [pc, #344]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b55      	ldr	r3, [pc, #340]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80048f8:	2180      	movs	r1, #128	@ 0x80
 80048fa:	0049      	lsls	r1, r1, #1
 80048fc:	430a      	orrs	r2, r1
 80048fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004900:	f7fd ff7a 	bl	80027f8 <HAL_GetTick>
 8004904:	0003      	movs	r3, r0
 8004906:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800490a:	f7fd ff75 	bl	80027f8 <HAL_GetTick>
 800490e:	0002      	movs	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e209      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800491c:	4b4b      	ldr	r3, [pc, #300]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	2380      	movs	r3, #128	@ 0x80
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4013      	ands	r3, r2
 8004926:	d0f0      	beq.n	800490a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004928:	4b48      	ldr	r3, [pc, #288]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4a4a      	ldr	r2, [pc, #296]	@ (8004a58 <HAL_RCC_OscConfig+0x338>)
 800492e:	4013      	ands	r3, r2
 8004930:	0019      	movs	r1, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	021a      	lsls	r2, r3, #8
 8004938:	4b44      	ldr	r3, [pc, #272]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	e01b      	b.n	8004978 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004940:	4b42      	ldr	r3, [pc, #264]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b41      	ldr	r3, [pc, #260]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 8004946:	4949      	ldr	r1, [pc, #292]	@ (8004a6c <HAL_RCC_OscConfig+0x34c>)
 8004948:	400a      	ands	r2, r1
 800494a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fd ff54 	bl	80027f8 <HAL_GetTick>
 8004950:	0003      	movs	r3, r0
 8004952:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004956:	f7fd ff4f 	bl	80027f8 <HAL_GetTick>
 800495a:	0002      	movs	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e1e3      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004968:	4b38      	ldr	r3, [pc, #224]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	2380      	movs	r3, #128	@ 0x80
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	4013      	ands	r3, r2
 8004972:	d1f0      	bne.n	8004956 <HAL_RCC_OscConfig+0x236>
 8004974:	e000      	b.n	8004978 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004976:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2208      	movs	r2, #8
 800497e:	4013      	ands	r3, r2
 8004980:	d047      	beq.n	8004a12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004982:	4b32      	ldr	r3, [pc, #200]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2238      	movs	r2, #56	@ 0x38
 8004988:	4013      	ands	r3, r2
 800498a:	2b18      	cmp	r3, #24
 800498c:	d10a      	bne.n	80049a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800498e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 8004990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004992:	2202      	movs	r2, #2
 8004994:	4013      	ands	r3, r2
 8004996:	d03c      	beq.n	8004a12 <HAL_RCC_OscConfig+0x2f2>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d138      	bne.n	8004a12 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e1c5      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d019      	beq.n	80049e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80049ac:	4b27      	ldr	r3, [pc, #156]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80049ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049b0:	4b26      	ldr	r3, [pc, #152]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80049b2:	2101      	movs	r1, #1
 80049b4:	430a      	orrs	r2, r1
 80049b6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fd ff1e 	bl	80027f8 <HAL_GetTick>
 80049bc:	0003      	movs	r3, r0
 80049be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c2:	f7fd ff19 	bl	80027f8 <HAL_GetTick>
 80049c6:	0002      	movs	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e1ad      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049d4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80049d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d8:	2202      	movs	r2, #2
 80049da:	4013      	ands	r3, r2
 80049dc:	d0f1      	beq.n	80049c2 <HAL_RCC_OscConfig+0x2a2>
 80049de:	e018      	b.n	8004a12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80049e0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80049e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049e4:	4b19      	ldr	r3, [pc, #100]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 80049e6:	2101      	movs	r1, #1
 80049e8:	438a      	bics	r2, r1
 80049ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fd ff04 	bl	80027f8 <HAL_GetTick>
 80049f0:	0003      	movs	r3, r0
 80049f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f6:	f7fd feff 	bl	80027f8 <HAL_GetTick>
 80049fa:	0002      	movs	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e193      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a08:	4b10      	ldr	r3, [pc, #64]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 8004a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d1f1      	bne.n	80049f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2204      	movs	r2, #4
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d100      	bne.n	8004a1e <HAL_RCC_OscConfig+0x2fe>
 8004a1c:	e0c6      	b.n	8004bac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a1e:	231f      	movs	r3, #31
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004a26:	4b09      	ldr	r3, [pc, #36]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2238      	movs	r2, #56	@ 0x38
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d11e      	bne.n	8004a70 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004a32:	4b06      	ldr	r3, [pc, #24]	@ (8004a4c <HAL_RCC_OscConfig+0x32c>)
 8004a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a36:	2202      	movs	r2, #2
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d100      	bne.n	8004a3e <HAL_RCC_OscConfig+0x31e>
 8004a3c:	e0b6      	b.n	8004bac <HAL_RCC_OscConfig+0x48c>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d000      	beq.n	8004a48 <HAL_RCC_OscConfig+0x328>
 8004a46:	e0b1      	b.n	8004bac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e171      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	fffeffff 	.word	0xfffeffff
 8004a54:	fffbffff 	.word	0xfffbffff
 8004a58:	ffff80ff 	.word	0xffff80ff
 8004a5c:	ffffc7ff 	.word	0xffffc7ff
 8004a60:	00f42400 	.word	0x00f42400
 8004a64:	20000008 	.word	0x20000008
 8004a68:	2000000c 	.word	0x2000000c
 8004a6c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a70:	4bb1      	ldr	r3, [pc, #708]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004a72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a74:	2380      	movs	r3, #128	@ 0x80
 8004a76:	055b      	lsls	r3, r3, #21
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d101      	bne.n	8004a80 <HAL_RCC_OscConfig+0x360>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e000      	b.n	8004a82 <HAL_RCC_OscConfig+0x362>
 8004a80:	2300      	movs	r3, #0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d011      	beq.n	8004aaa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004a86:	4bac      	ldr	r3, [pc, #688]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004a88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a8a:	4bab      	ldr	r3, [pc, #684]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004a8c:	2180      	movs	r1, #128	@ 0x80
 8004a8e:	0549      	lsls	r1, r1, #21
 8004a90:	430a      	orrs	r2, r1
 8004a92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a94:	4ba8      	ldr	r3, [pc, #672]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004a96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a98:	2380      	movs	r3, #128	@ 0x80
 8004a9a:	055b      	lsls	r3, r3, #21
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004aa2:	231f      	movs	r3, #31
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aaa:	4ba4      	ldr	r3, [pc, #656]	@ (8004d3c <HAL_RCC_OscConfig+0x61c>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	2380      	movs	r3, #128	@ 0x80
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d11a      	bne.n	8004aec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ab6:	4ba1      	ldr	r3, [pc, #644]	@ (8004d3c <HAL_RCC_OscConfig+0x61c>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4ba0      	ldr	r3, [pc, #640]	@ (8004d3c <HAL_RCC_OscConfig+0x61c>)
 8004abc:	2180      	movs	r1, #128	@ 0x80
 8004abe:	0049      	lsls	r1, r1, #1
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004ac4:	f7fd fe98 	bl	80027f8 <HAL_GetTick>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ace:	f7fd fe93 	bl	80027f8 <HAL_GetTick>
 8004ad2:	0002      	movs	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e127      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ae0:	4b96      	ldr	r3, [pc, #600]	@ (8004d3c <HAL_RCC_OscConfig+0x61c>)
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	2380      	movs	r3, #128	@ 0x80
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d106      	bne.n	8004b02 <HAL_RCC_OscConfig+0x3e2>
 8004af4:	4b90      	ldr	r3, [pc, #576]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004af6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004af8:	4b8f      	ldr	r3, [pc, #572]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004afa:	2101      	movs	r1, #1
 8004afc:	430a      	orrs	r2, r1
 8004afe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b00:	e01c      	b.n	8004b3c <HAL_RCC_OscConfig+0x41c>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b05      	cmp	r3, #5
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCC_OscConfig+0x404>
 8004b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004b0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b0e:	4b8a      	ldr	r3, [pc, #552]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004b10:	2104      	movs	r1, #4
 8004b12:	430a      	orrs	r2, r1
 8004b14:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b16:	4b88      	ldr	r3, [pc, #544]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004b18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b1a:	4b87      	ldr	r3, [pc, #540]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b22:	e00b      	b.n	8004b3c <HAL_RCC_OscConfig+0x41c>
 8004b24:	4b84      	ldr	r3, [pc, #528]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004b26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b28:	4b83      	ldr	r3, [pc, #524]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	438a      	bics	r2, r1
 8004b2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b30:	4b81      	ldr	r3, [pc, #516]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004b32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b34:	4b80      	ldr	r3, [pc, #512]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004b36:	2104      	movs	r1, #4
 8004b38:	438a      	bics	r2, r1
 8004b3a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d014      	beq.n	8004b6e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fd fe58 	bl	80027f8 <HAL_GetTick>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b4c:	e009      	b.n	8004b62 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4e:	f7fd fe53 	bl	80027f8 <HAL_GetTick>
 8004b52:	0002      	movs	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	4a79      	ldr	r2, [pc, #484]	@ (8004d40 <HAL_RCC_OscConfig+0x620>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e0e6      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b62:	4b75      	ldr	r3, [pc, #468]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b66:	2202      	movs	r2, #2
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x42e>
 8004b6c:	e013      	b.n	8004b96 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6e:	f7fd fe43 	bl	80027f8 <HAL_GetTick>
 8004b72:	0003      	movs	r3, r0
 8004b74:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b76:	e009      	b.n	8004b8c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b78:	f7fd fe3e 	bl	80027f8 <HAL_GetTick>
 8004b7c:	0002      	movs	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	4a6f      	ldr	r2, [pc, #444]	@ (8004d40 <HAL_RCC_OscConfig+0x620>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e0d1      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b90:	2202      	movs	r2, #2
 8004b92:	4013      	ands	r3, r2
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004b96:	231f      	movs	r3, #31
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d105      	bne.n	8004bac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004ba0:	4b65      	ldr	r3, [pc, #404]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004ba2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ba4:	4b64      	ldr	r3, [pc, #400]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004ba6:	4967      	ldr	r1, [pc, #412]	@ (8004d44 <HAL_RCC_OscConfig+0x624>)
 8004ba8:	400a      	ands	r2, r1
 8004baa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d100      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x496>
 8004bb4:	e0bb      	b.n	8004d2e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bb6:	4b60      	ldr	r3, [pc, #384]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2238      	movs	r2, #56	@ 0x38
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b10      	cmp	r3, #16
 8004bc0:	d100      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x4a4>
 8004bc2:	e07b      	b.n	8004cbc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d156      	bne.n	8004c7a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bcc:	4b5a      	ldr	r3, [pc, #360]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	4b59      	ldr	r3, [pc, #356]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004bd2:	495d      	ldr	r1, [pc, #372]	@ (8004d48 <HAL_RCC_OscConfig+0x628>)
 8004bd4:	400a      	ands	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7fd fe0e 	bl	80027f8 <HAL_GetTick>
 8004bdc:	0003      	movs	r3, r0
 8004bde:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be2:	f7fd fe09 	bl	80027f8 <HAL_GetTick>
 8004be6:	0002      	movs	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e09d      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf4:	4b50      	ldr	r3, [pc, #320]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	2380      	movs	r3, #128	@ 0x80
 8004bfa:	049b      	lsls	r3, r3, #18
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d1f0      	bne.n	8004be2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c00:	4b4d      	ldr	r3, [pc, #308]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a51      	ldr	r2, [pc, #324]	@ (8004d4c <HAL_RCC_OscConfig+0x62c>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	0019      	movs	r1, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1a      	ldr	r2, [r3, #32]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c18:	021b      	lsls	r3, r3, #8
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	4b42      	ldr	r3, [pc, #264]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004c30:	430a      	orrs	r2, r1
 8004c32:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c34:	4b40      	ldr	r3, [pc, #256]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4b3f      	ldr	r3, [pc, #252]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004c3a:	2180      	movs	r1, #128	@ 0x80
 8004c3c:	0449      	lsls	r1, r1, #17
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004c42:	4b3d      	ldr	r3, [pc, #244]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	4b3c      	ldr	r3, [pc, #240]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004c48:	2180      	movs	r1, #128	@ 0x80
 8004c4a:	0549      	lsls	r1, r1, #21
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c50:	f7fd fdd2 	bl	80027f8 <HAL_GetTick>
 8004c54:	0003      	movs	r3, r0
 8004c56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5a:	f7fd fdcd 	bl	80027f8 <HAL_GetTick>
 8004c5e:	0002      	movs	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e061      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c6c:	4b32      	ldr	r3, [pc, #200]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	2380      	movs	r3, #128	@ 0x80
 8004c72:	049b      	lsls	r3, r3, #18
 8004c74:	4013      	ands	r3, r2
 8004c76:	d0f0      	beq.n	8004c5a <HAL_RCC_OscConfig+0x53a>
 8004c78:	e059      	b.n	8004d2e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b2e      	ldr	r3, [pc, #184]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004c80:	4931      	ldr	r1, [pc, #196]	@ (8004d48 <HAL_RCC_OscConfig+0x628>)
 8004c82:	400a      	ands	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c86:	f7fd fdb7 	bl	80027f8 <HAL_GetTick>
 8004c8a:	0003      	movs	r3, r0
 8004c8c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c90:	f7fd fdb2 	bl	80027f8 <HAL_GetTick>
 8004c94:	0002      	movs	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e046      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ca2:	4b25      	ldr	r3, [pc, #148]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	2380      	movs	r3, #128	@ 0x80
 8004ca8:	049b      	lsls	r3, r3, #18
 8004caa:	4013      	ands	r3, r2
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004cae:	4b22      	ldr	r3, [pc, #136]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	4b21      	ldr	r3, [pc, #132]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004cb4:	4926      	ldr	r1, [pc, #152]	@ (8004d50 <HAL_RCC_OscConfig+0x630>)
 8004cb6:	400a      	ands	r2, r1
 8004cb8:	60da      	str	r2, [r3, #12]
 8004cba:	e038      	b.n	8004d2e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e033      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d38 <HAL_RCC_OscConfig+0x618>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	401a      	ands	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d126      	bne.n	8004d2a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	2270      	movs	r2, #112	@ 0x70
 8004ce0:	401a      	ands	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d11f      	bne.n	8004d2a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	23fe      	movs	r3, #254	@ 0xfe
 8004cee:	01db      	lsls	r3, r3, #7
 8004cf0:	401a      	ands	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d116      	bne.n	8004d2a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	23f8      	movs	r3, #248	@ 0xf8
 8004d00:	039b      	lsls	r3, r3, #14
 8004d02:	401a      	ands	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d10e      	bne.n	8004d2a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	23e0      	movs	r3, #224	@ 0xe0
 8004d10:	051b      	lsls	r3, r3, #20
 8004d12:	401a      	ands	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d106      	bne.n	8004d2a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	0f5b      	lsrs	r3, r3, #29
 8004d20:	075a      	lsls	r2, r3, #29
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d001      	beq.n	8004d2e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	0018      	movs	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b008      	add	sp, #32
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	40007000 	.word	0x40007000
 8004d40:	00001388 	.word	0x00001388
 8004d44:	efffffff 	.word	0xefffffff
 8004d48:	feffffff 	.word	0xfeffffff
 8004d4c:	11c1808c 	.word	0x11c1808c
 8004d50:	eefefffc 	.word	0xeefefffc

08004d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0e9      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d68:	4b76      	ldr	r3, [pc, #472]	@ (8004f44 <HAL_RCC_ClockConfig+0x1f0>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2207      	movs	r2, #7
 8004d6e:	4013      	ands	r3, r2
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d91e      	bls.n	8004db4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d76:	4b73      	ldr	r3, [pc, #460]	@ (8004f44 <HAL_RCC_ClockConfig+0x1f0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2207      	movs	r2, #7
 8004d7c:	4393      	bics	r3, r2
 8004d7e:	0019      	movs	r1, r3
 8004d80:	4b70      	ldr	r3, [pc, #448]	@ (8004f44 <HAL_RCC_ClockConfig+0x1f0>)
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d88:	f7fd fd36 	bl	80027f8 <HAL_GetTick>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004d90:	e009      	b.n	8004da6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d92:	f7fd fd31 	bl	80027f8 <HAL_GetTick>
 8004d96:	0002      	movs	r2, r0
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	4a6a      	ldr	r2, [pc, #424]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e0ca      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004da6:	4b67      	ldr	r3, [pc, #412]	@ (8004f44 <HAL_RCC_ClockConfig+0x1f0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2207      	movs	r2, #7
 8004dac:	4013      	ands	r3, r2
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d1ee      	bne.n	8004d92 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2202      	movs	r2, #2
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d015      	beq.n	8004dea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2204      	movs	r2, #4
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d006      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004dc8:	4b60      	ldr	r3, [pc, #384]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	4b5f      	ldr	r3, [pc, #380]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004dce:	21e0      	movs	r1, #224	@ 0xe0
 8004dd0:	01c9      	lsls	r1, r1, #7
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	4a5d      	ldr	r2, [pc, #372]	@ (8004f50 <HAL_RCC_ClockConfig+0x1fc>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	0019      	movs	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	4b59      	ldr	r3, [pc, #356]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004de6:	430a      	orrs	r2, r1
 8004de8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2201      	movs	r2, #1
 8004df0:	4013      	ands	r3, r2
 8004df2:	d057      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d107      	bne.n	8004e0c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dfc:	4b53      	ldr	r3, [pc, #332]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	2380      	movs	r3, #128	@ 0x80
 8004e02:	029b      	lsls	r3, r3, #10
 8004e04:	4013      	ands	r3, r2
 8004e06:	d12b      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e097      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d107      	bne.n	8004e24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e14:	4b4d      	ldr	r3, [pc, #308]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	2380      	movs	r3, #128	@ 0x80
 8004e1a:	049b      	lsls	r3, r3, #18
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d11f      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e08b      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d107      	bne.n	8004e3c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e2c:	4b47      	ldr	r3, [pc, #284]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	2380      	movs	r3, #128	@ 0x80
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	4013      	ands	r3, r2
 8004e36:	d113      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e07f      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d106      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e44:	4b41      	ldr	r3, [pc, #260]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e48:	2202      	movs	r2, #2
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d108      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e074      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e52:	4b3e      	ldr	r3, [pc, #248]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e56:	2202      	movs	r2, #2
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d101      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e06d      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e60:	4b3a      	ldr	r3, [pc, #232]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2207      	movs	r2, #7
 8004e66:	4393      	bics	r3, r2
 8004e68:	0019      	movs	r1, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	4b37      	ldr	r3, [pc, #220]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004e70:	430a      	orrs	r2, r1
 8004e72:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e74:	f7fd fcc0 	bl	80027f8 <HAL_GetTick>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7c:	e009      	b.n	8004e92 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e7e:	f7fd fcbb 	bl	80027f8 <HAL_GetTick>
 8004e82:	0002      	movs	r2, r0
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	4a2f      	ldr	r2, [pc, #188]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e054      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e92:	4b2e      	ldr	r3, [pc, #184]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	2238      	movs	r2, #56	@ 0x38
 8004e98:	401a      	ands	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d1ec      	bne.n	8004e7e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ea4:	4b27      	ldr	r3, [pc, #156]	@ (8004f44 <HAL_RCC_ClockConfig+0x1f0>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2207      	movs	r2, #7
 8004eaa:	4013      	ands	r3, r2
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d21e      	bcs.n	8004ef0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb2:	4b24      	ldr	r3, [pc, #144]	@ (8004f44 <HAL_RCC_ClockConfig+0x1f0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2207      	movs	r2, #7
 8004eb8:	4393      	bics	r3, r2
 8004eba:	0019      	movs	r1, r3
 8004ebc:	4b21      	ldr	r3, [pc, #132]	@ (8004f44 <HAL_RCC_ClockConfig+0x1f0>)
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ec4:	f7fd fc98 	bl	80027f8 <HAL_GetTick>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ecc:	e009      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ece:	f7fd fc93 	bl	80027f8 <HAL_GetTick>
 8004ed2:	0002      	movs	r2, r0
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e02c      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ee2:	4b18      	ldr	r3, [pc, #96]	@ (8004f44 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2207      	movs	r2, #7
 8004ee8:	4013      	ands	r3, r2
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d1ee      	bne.n	8004ece <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d009      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004efa:	4b14      	ldr	r3, [pc, #80]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	4a15      	ldr	r2, [pc, #84]	@ (8004f54 <HAL_RCC_ClockConfig+0x200>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	0019      	movs	r1, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	4b10      	ldr	r3, [pc, #64]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004f0e:	f000 f829 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 8004f12:	0001      	movs	r1, r0
 8004f14:	4b0d      	ldr	r3, [pc, #52]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	0a1b      	lsrs	r3, r3, #8
 8004f1a:	220f      	movs	r2, #15
 8004f1c:	401a      	ands	r2, r3
 8004f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f58 <HAL_RCC_ClockConfig+0x204>)
 8004f20:	0092      	lsls	r2, r2, #2
 8004f22:	58d3      	ldr	r3, [r2, r3]
 8004f24:	221f      	movs	r2, #31
 8004f26:	4013      	ands	r3, r2
 8004f28:	000a      	movs	r2, r1
 8004f2a:	40da      	lsrs	r2, r3
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f5c <HAL_RCC_ClockConfig+0x208>)
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f30:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <HAL_RCC_ClockConfig+0x20c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	0018      	movs	r0, r3
 8004f36:	f7fd fc03 	bl	8002740 <HAL_InitTick>
 8004f3a:	0003      	movs	r3, r0
}
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b004      	add	sp, #16
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40022000 	.word	0x40022000
 8004f48:	00001388 	.word	0x00001388
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	fffff0ff 	.word	0xfffff0ff
 8004f54:	ffff8fff 	.word	0xffff8fff
 8004f58:	08006a9c 	.word	0x08006a9c
 8004f5c:	20000008 	.word	0x20000008
 8004f60:	2000000c 	.word	0x2000000c

08004f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800505c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2238      	movs	r2, #56	@ 0x38
 8004f70:	4013      	ands	r3, r2
 8004f72:	d10f      	bne.n	8004f94 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004f74:	4b39      	ldr	r3, [pc, #228]	@ (800505c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	0adb      	lsrs	r3, r3, #11
 8004f7a:	2207      	movs	r2, #7
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2201      	movs	r2, #1
 8004f80:	409a      	lsls	r2, r3
 8004f82:	0013      	movs	r3, r2
 8004f84:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	4835      	ldr	r0, [pc, #212]	@ (8005060 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004f8a:	f7fb f8bb 	bl	8000104 <__udivsi3>
 8004f8e:	0003      	movs	r3, r0
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	e05d      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f94:	4b31      	ldr	r3, [pc, #196]	@ (800505c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2238      	movs	r2, #56	@ 0x38
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d102      	bne.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fa0:	4b30      	ldr	r3, [pc, #192]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x100>)
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	e054      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800505c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2238      	movs	r2, #56	@ 0x38
 8004fac:	4013      	ands	r3, r2
 8004fae:	2b10      	cmp	r3, #16
 8004fb0:	d138      	bne.n	8005024 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800505c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	2203      	movs	r2, #3
 8004fb8:	4013      	ands	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fbc:	4b27      	ldr	r3, [pc, #156]	@ (800505c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	2207      	movs	r2, #7
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d10d      	bne.n	8004fec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	4824      	ldr	r0, [pc, #144]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x100>)
 8004fd4:	f7fb f896 	bl	8000104 <__udivsi3>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	0019      	movs	r1, r3
 8004fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800505c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	0a1b      	lsrs	r3, r3, #8
 8004fe2:	227f      	movs	r2, #127	@ 0x7f
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	434b      	muls	r3, r1
 8004fe8:	617b      	str	r3, [r7, #20]
        break;
 8004fea:	e00d      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	481c      	ldr	r0, [pc, #112]	@ (8005060 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ff0:	f7fb f888 	bl	8000104 <__udivsi3>
 8004ff4:	0003      	movs	r3, r0
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	4b18      	ldr	r3, [pc, #96]	@ (800505c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	0a1b      	lsrs	r3, r3, #8
 8004ffe:	227f      	movs	r2, #127	@ 0x7f
 8005000:	4013      	ands	r3, r2
 8005002:	434b      	muls	r3, r1
 8005004:	617b      	str	r3, [r7, #20]
        break;
 8005006:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005008:	4b14      	ldr	r3, [pc, #80]	@ (800505c <HAL_RCC_GetSysClockFreq+0xf8>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	0f5b      	lsrs	r3, r3, #29
 800500e:	2207      	movs	r2, #7
 8005010:	4013      	ands	r3, r2
 8005012:	3301      	adds	r3, #1
 8005014:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	6978      	ldr	r0, [r7, #20]
 800501a:	f7fb f873 	bl	8000104 <__udivsi3>
 800501e:	0003      	movs	r3, r0
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	e015      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005024:	4b0d      	ldr	r3, [pc, #52]	@ (800505c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2238      	movs	r2, #56	@ 0x38
 800502a:	4013      	ands	r3, r2
 800502c:	2b20      	cmp	r3, #32
 800502e:	d103      	bne.n	8005038 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005030:	2380      	movs	r3, #128	@ 0x80
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	e00b      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005038:	4b08      	ldr	r3, [pc, #32]	@ (800505c <HAL_RCC_GetSysClockFreq+0xf8>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2238      	movs	r2, #56	@ 0x38
 800503e:	4013      	ands	r3, r2
 8005040:	2b18      	cmp	r3, #24
 8005042:	d103      	bne.n	800504c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005044:	23fa      	movs	r3, #250	@ 0xfa
 8005046:	01db      	lsls	r3, r3, #7
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	e001      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005050:	693b      	ldr	r3, [r7, #16]
}
 8005052:	0018      	movs	r0, r3
 8005054:	46bd      	mov	sp, r7
 8005056:	b006      	add	sp, #24
 8005058:	bd80      	pop	{r7, pc}
 800505a:	46c0      	nop			@ (mov r8, r8)
 800505c:	40021000 	.word	0x40021000
 8005060:	00f42400 	.word	0x00f42400
 8005064:	007a1200 	.word	0x007a1200

08005068 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800506c:	4b02      	ldr	r3, [pc, #8]	@ (8005078 <HAL_RCC_GetHCLKFreq+0x10>)
 800506e:	681b      	ldr	r3, [r3, #0]
}
 8005070:	0018      	movs	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	46c0      	nop			@ (mov r8, r8)
 8005078:	20000008 	.word	0x20000008

0800507c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800507c:	b5b0      	push	{r4, r5, r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005080:	f7ff fff2 	bl	8005068 <HAL_RCC_GetHCLKFreq>
 8005084:	0004      	movs	r4, r0
 8005086:	f7ff fb3f 	bl	8004708 <LL_RCC_GetAPB1Prescaler>
 800508a:	0003      	movs	r3, r0
 800508c:	0b1a      	lsrs	r2, r3, #12
 800508e:	4b05      	ldr	r3, [pc, #20]	@ (80050a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005090:	0092      	lsls	r2, r2, #2
 8005092:	58d3      	ldr	r3, [r2, r3]
 8005094:	221f      	movs	r2, #31
 8005096:	4013      	ands	r3, r2
 8005098:	40dc      	lsrs	r4, r3
 800509a:	0023      	movs	r3, r4
}
 800509c:	0018      	movs	r0, r3
 800509e:	46bd      	mov	sp, r7
 80050a0:	bdb0      	pop	{r4, r5, r7, pc}
 80050a2:	46c0      	nop			@ (mov r8, r8)
 80050a4:	08006adc 	.word	0x08006adc

080050a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80050b0:	2313      	movs	r3, #19
 80050b2:	18fb      	adds	r3, r7, r3
 80050b4:	2200      	movs	r2, #0
 80050b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050b8:	2312      	movs	r3, #18
 80050ba:	18fb      	adds	r3, r7, r3
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	2380      	movs	r3, #128	@ 0x80
 80050c6:	029b      	lsls	r3, r3, #10
 80050c8:	4013      	ands	r3, r2
 80050ca:	d100      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 80050cc:	e0a3      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ce:	2011      	movs	r0, #17
 80050d0:	183b      	adds	r3, r7, r0
 80050d2:	2200      	movs	r2, #0
 80050d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050d6:	4bc3      	ldr	r3, [pc, #780]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050da:	2380      	movs	r3, #128	@ 0x80
 80050dc:	055b      	lsls	r3, r3, #21
 80050de:	4013      	ands	r3, r2
 80050e0:	d110      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050e2:	4bc0      	ldr	r3, [pc, #768]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050e6:	4bbf      	ldr	r3, [pc, #764]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050e8:	2180      	movs	r1, #128	@ 0x80
 80050ea:	0549      	lsls	r1, r1, #21
 80050ec:	430a      	orrs	r2, r1
 80050ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80050f0:	4bbc      	ldr	r3, [pc, #752]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050f4:	2380      	movs	r3, #128	@ 0x80
 80050f6:	055b      	lsls	r3, r3, #21
 80050f8:	4013      	ands	r3, r2
 80050fa:	60bb      	str	r3, [r7, #8]
 80050fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050fe:	183b      	adds	r3, r7, r0
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005104:	4bb8      	ldr	r3, [pc, #736]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	4bb7      	ldr	r3, [pc, #732]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800510a:	2180      	movs	r1, #128	@ 0x80
 800510c:	0049      	lsls	r1, r1, #1
 800510e:	430a      	orrs	r2, r1
 8005110:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005112:	f7fd fb71 	bl	80027f8 <HAL_GetTick>
 8005116:	0003      	movs	r3, r0
 8005118:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800511a:	e00b      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800511c:	f7fd fb6c 	bl	80027f8 <HAL_GetTick>
 8005120:	0002      	movs	r2, r0
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d904      	bls.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800512a:	2313      	movs	r3, #19
 800512c:	18fb      	adds	r3, r7, r3
 800512e:	2203      	movs	r2, #3
 8005130:	701a      	strb	r2, [r3, #0]
        break;
 8005132:	e005      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005134:	4bac      	ldr	r3, [pc, #688]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	2380      	movs	r3, #128	@ 0x80
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	4013      	ands	r3, r2
 800513e:	d0ed      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005140:	2313      	movs	r3, #19
 8005142:	18fb      	adds	r3, r7, r3
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d154      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800514a:	4ba6      	ldr	r3, [pc, #664]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800514c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800514e:	23c0      	movs	r3, #192	@ 0xc0
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4013      	ands	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d019      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	429a      	cmp	r2, r3
 8005164:	d014      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005166:	4b9f      	ldr	r3, [pc, #636]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800516a:	4aa0      	ldr	r2, [pc, #640]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800516c:	4013      	ands	r3, r2
 800516e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005170:	4b9c      	ldr	r3, [pc, #624]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005172:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005174:	4b9b      	ldr	r3, [pc, #620]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005176:	2180      	movs	r1, #128	@ 0x80
 8005178:	0249      	lsls	r1, r1, #9
 800517a:	430a      	orrs	r2, r1
 800517c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800517e:	4b99      	ldr	r3, [pc, #612]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005180:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005182:	4b98      	ldr	r3, [pc, #608]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005184:	499a      	ldr	r1, [pc, #616]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005186:	400a      	ands	r2, r1
 8005188:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800518a:	4b96      	ldr	r3, [pc, #600]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2201      	movs	r2, #1
 8005194:	4013      	ands	r3, r2
 8005196:	d016      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fd fb2e 	bl	80027f8 <HAL_GetTick>
 800519c:	0003      	movs	r3, r0
 800519e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051a0:	e00c      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a2:	f7fd fb29 	bl	80027f8 <HAL_GetTick>
 80051a6:	0002      	movs	r2, r0
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	4a91      	ldr	r2, [pc, #580]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d904      	bls.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80051b2:	2313      	movs	r3, #19
 80051b4:	18fb      	adds	r3, r7, r3
 80051b6:	2203      	movs	r2, #3
 80051b8:	701a      	strb	r2, [r3, #0]
            break;
 80051ba:	e004      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051bc:	4b89      	ldr	r3, [pc, #548]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c0:	2202      	movs	r2, #2
 80051c2:	4013      	ands	r3, r2
 80051c4:	d0ed      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80051c6:	2313      	movs	r3, #19
 80051c8:	18fb      	adds	r3, r7, r3
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051d0:	4b84      	ldr	r3, [pc, #528]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d4:	4a85      	ldr	r2, [pc, #532]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	0019      	movs	r1, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051de:	4b81      	ldr	r3, [pc, #516]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051e0:	430a      	orrs	r2, r1
 80051e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80051e4:	e00c      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051e6:	2312      	movs	r3, #18
 80051e8:	18fb      	adds	r3, r7, r3
 80051ea:	2213      	movs	r2, #19
 80051ec:	18ba      	adds	r2, r7, r2
 80051ee:	7812      	ldrb	r2, [r2, #0]
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	e005      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f4:	2312      	movs	r3, #18
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	2213      	movs	r2, #19
 80051fa:	18ba      	adds	r2, r7, r2
 80051fc:	7812      	ldrb	r2, [r2, #0]
 80051fe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005200:	2311      	movs	r3, #17
 8005202:	18fb      	adds	r3, r7, r3
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d105      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520a:	4b76      	ldr	r3, [pc, #472]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800520c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800520e:	4b75      	ldr	r3, [pc, #468]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005210:	4979      	ldr	r1, [pc, #484]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005212:	400a      	ands	r2, r1
 8005214:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2201      	movs	r2, #1
 800521c:	4013      	ands	r3, r2
 800521e:	d009      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005220:	4b70      	ldr	r3, [pc, #448]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005224:	2203      	movs	r2, #3
 8005226:	4393      	bics	r3, r2
 8005228:	0019      	movs	r1, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	4b6d      	ldr	r3, [pc, #436]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005230:	430a      	orrs	r2, r1
 8005232:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2202      	movs	r2, #2
 800523a:	4013      	ands	r3, r2
 800523c:	d009      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800523e:	4b69      	ldr	r3, [pc, #420]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005242:	220c      	movs	r2, #12
 8005244:	4393      	bics	r3, r2
 8005246:	0019      	movs	r1, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	4b65      	ldr	r3, [pc, #404]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800524e:	430a      	orrs	r2, r1
 8005250:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2210      	movs	r2, #16
 8005258:	4013      	ands	r3, r2
 800525a:	d009      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800525c:	4b61      	ldr	r3, [pc, #388]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800525e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005260:	4a66      	ldr	r2, [pc, #408]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005262:	4013      	ands	r3, r2
 8005264:	0019      	movs	r1, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	4b5e      	ldr	r3, [pc, #376]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800526c:	430a      	orrs	r2, r1
 800526e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	2380      	movs	r3, #128	@ 0x80
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4013      	ands	r3, r2
 800527a:	d009      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800527c:	4b59      	ldr	r3, [pc, #356]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800527e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005280:	4a5f      	ldr	r2, [pc, #380]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005282:	4013      	ands	r3, r2
 8005284:	0019      	movs	r1, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	4b56      	ldr	r3, [pc, #344]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800528c:	430a      	orrs	r2, r1
 800528e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	2380      	movs	r3, #128	@ 0x80
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4013      	ands	r3, r2
 800529a:	d009      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800529c:	4b51      	ldr	r3, [pc, #324]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800529e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a0:	4a58      	ldr	r2, [pc, #352]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	0019      	movs	r1, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69da      	ldr	r2, [r3, #28]
 80052aa:	4b4e      	ldr	r3, [pc, #312]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052ac:	430a      	orrs	r2, r1
 80052ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2220      	movs	r2, #32
 80052b6:	4013      	ands	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ba:	4b4a      	ldr	r3, [pc, #296]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052be:	4a52      	ldr	r2, [pc, #328]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	0019      	movs	r1, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	4b46      	ldr	r3, [pc, #280]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052ca:	430a      	orrs	r2, r1
 80052cc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	2380      	movs	r3, #128	@ 0x80
 80052d4:	01db      	lsls	r3, r3, #7
 80052d6:	4013      	ands	r3, r2
 80052d8:	d015      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052da:	4b42      	ldr	r3, [pc, #264]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	0899      	lsrs	r1, r3, #2
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1a      	ldr	r2, [r3, #32]
 80052e6:	4b3f      	ldr	r3, [pc, #252]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052e8:	430a      	orrs	r2, r1
 80052ea:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1a      	ldr	r2, [r3, #32]
 80052f0:	2380      	movs	r3, #128	@ 0x80
 80052f2:	05db      	lsls	r3, r3, #23
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d106      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80052f8:	4b3a      	ldr	r3, [pc, #232]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	4b39      	ldr	r3, [pc, #228]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052fe:	2180      	movs	r1, #128	@ 0x80
 8005300:	0249      	lsls	r1, r1, #9
 8005302:	430a      	orrs	r2, r1
 8005304:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	2380      	movs	r3, #128	@ 0x80
 800530c:	031b      	lsls	r3, r3, #12
 800530e:	4013      	ands	r3, r2
 8005310:	d009      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005312:	4b34      	ldr	r3, [pc, #208]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005316:	2240      	movs	r2, #64	@ 0x40
 8005318:	4393      	bics	r3, r2
 800531a:	0019      	movs	r1, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005320:	4b30      	ldr	r3, [pc, #192]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005322:	430a      	orrs	r2, r1
 8005324:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	2380      	movs	r3, #128	@ 0x80
 800532c:	039b      	lsls	r3, r3, #14
 800532e:	4013      	ands	r3, r2
 8005330:	d016      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005332:	4b2c      	ldr	r3, [pc, #176]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005336:	4a35      	ldr	r2, [pc, #212]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005338:	4013      	ands	r3, r2
 800533a:	0019      	movs	r1, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005340:	4b28      	ldr	r3, [pc, #160]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005342:	430a      	orrs	r2, r1
 8005344:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800534a:	2380      	movs	r3, #128	@ 0x80
 800534c:	03db      	lsls	r3, r3, #15
 800534e:	429a      	cmp	r2, r3
 8005350:	d106      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005352:	4b24      	ldr	r3, [pc, #144]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	4b23      	ldr	r3, [pc, #140]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005358:	2180      	movs	r1, #128	@ 0x80
 800535a:	0449      	lsls	r1, r1, #17
 800535c:	430a      	orrs	r2, r1
 800535e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	2380      	movs	r3, #128	@ 0x80
 8005366:	03db      	lsls	r3, r3, #15
 8005368:	4013      	ands	r3, r2
 800536a:	d016      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800536c:	4b1d      	ldr	r3, [pc, #116]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800536e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005370:	4a27      	ldr	r2, [pc, #156]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005372:	4013      	ands	r3, r2
 8005374:	0019      	movs	r1, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537a:	4b1a      	ldr	r3, [pc, #104]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800537c:	430a      	orrs	r2, r1
 800537e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005384:	2380      	movs	r3, #128	@ 0x80
 8005386:	045b      	lsls	r3, r3, #17
 8005388:	429a      	cmp	r2, r3
 800538a:	d106      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800538c:	4b15      	ldr	r3, [pc, #84]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	4b14      	ldr	r3, [pc, #80]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005392:	2180      	movs	r1, #128	@ 0x80
 8005394:	0449      	lsls	r1, r1, #17
 8005396:	430a      	orrs	r2, r1
 8005398:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	2380      	movs	r3, #128	@ 0x80
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	4013      	ands	r3, r2
 80053a4:	d016      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80053a6:	4b0f      	ldr	r3, [pc, #60]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	0019      	movs	r1, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	695a      	ldr	r2, [r3, #20]
 80053b4:	4b0b      	ldr	r3, [pc, #44]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053b6:	430a      	orrs	r2, r1
 80053b8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695a      	ldr	r2, [r3, #20]
 80053be:	2380      	movs	r3, #128	@ 0x80
 80053c0:	01db      	lsls	r3, r3, #7
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d106      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80053c6:	4b07      	ldr	r3, [pc, #28]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	4b06      	ldr	r3, [pc, #24]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053cc:	2180      	movs	r1, #128	@ 0x80
 80053ce:	0249      	lsls	r1, r1, #9
 80053d0:	430a      	orrs	r2, r1
 80053d2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80053d4:	2312      	movs	r3, #18
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	781b      	ldrb	r3, [r3, #0]
}
 80053da:	0018      	movs	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	b006      	add	sp, #24
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	46c0      	nop			@ (mov r8, r8)
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40007000 	.word	0x40007000
 80053ec:	fffffcff 	.word	0xfffffcff
 80053f0:	fffeffff 	.word	0xfffeffff
 80053f4:	00001388 	.word	0x00001388
 80053f8:	efffffff 	.word	0xefffffff
 80053fc:	fffff3ff 	.word	0xfffff3ff
 8005400:	fff3ffff 	.word	0xfff3ffff
 8005404:	ffcfffff 	.word	0xffcfffff
 8005408:	ffffcfff 	.word	0xffffcfff
 800540c:	ffbfffff 	.word	0xffbfffff
 8005410:	feffffff 	.word	0xfeffffff
 8005414:	ffff3fff 	.word	0xffff3fff

08005418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e04a      	b.n	80054c0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	223d      	movs	r2, #61	@ 0x3d
 800542e:	5c9b      	ldrb	r3, [r3, r2]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d107      	bne.n	8005446 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	223c      	movs	r2, #60	@ 0x3c
 800543a:	2100      	movs	r1, #0
 800543c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	0018      	movs	r0, r3
 8005442:	f7fd f835 	bl	80024b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	223d      	movs	r2, #61	@ 0x3d
 800544a:	2102      	movs	r1, #2
 800544c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3304      	adds	r3, #4
 8005456:	0019      	movs	r1, r3
 8005458:	0010      	movs	r0, r2
 800545a:	f000 f9e7 	bl	800582c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2248      	movs	r2, #72	@ 0x48
 8005462:	2101      	movs	r1, #1
 8005464:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	223e      	movs	r2, #62	@ 0x3e
 800546a:	2101      	movs	r1, #1
 800546c:	5499      	strb	r1, [r3, r2]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	223f      	movs	r2, #63	@ 0x3f
 8005472:	2101      	movs	r1, #1
 8005474:	5499      	strb	r1, [r3, r2]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2240      	movs	r2, #64	@ 0x40
 800547a:	2101      	movs	r1, #1
 800547c:	5499      	strb	r1, [r3, r2]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2241      	movs	r2, #65	@ 0x41
 8005482:	2101      	movs	r1, #1
 8005484:	5499      	strb	r1, [r3, r2]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2242      	movs	r2, #66	@ 0x42
 800548a:	2101      	movs	r1, #1
 800548c:	5499      	strb	r1, [r3, r2]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2243      	movs	r2, #67	@ 0x43
 8005492:	2101      	movs	r1, #1
 8005494:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2244      	movs	r2, #68	@ 0x44
 800549a:	2101      	movs	r1, #1
 800549c:	5499      	strb	r1, [r3, r2]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2245      	movs	r2, #69	@ 0x45
 80054a2:	2101      	movs	r1, #1
 80054a4:	5499      	strb	r1, [r3, r2]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2246      	movs	r2, #70	@ 0x46
 80054aa:	2101      	movs	r1, #1
 80054ac:	5499      	strb	r1, [r3, r2]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2247      	movs	r2, #71	@ 0x47
 80054b2:	2101      	movs	r1, #1
 80054b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	223d      	movs	r2, #61	@ 0x3d
 80054ba:	2101      	movs	r1, #1
 80054bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	0018      	movs	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b002      	add	sp, #8
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	223d      	movs	r2, #61	@ 0x3d
 80054d4:	5c9b      	ldrb	r3, [r3, r2]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d001      	beq.n	80054e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e042      	b.n	8005566 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	223d      	movs	r2, #61	@ 0x3d
 80054e4:	2102      	movs	r1, #2
 80054e6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2101      	movs	r1, #1
 80054f4:	430a      	orrs	r2, r1
 80054f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005570 <HAL_TIM_Base_Start_IT+0xa8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00f      	beq.n	8005522 <HAL_TIM_Base_Start_IT+0x5a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	2380      	movs	r3, #128	@ 0x80
 8005508:	05db      	lsls	r3, r3, #23
 800550a:	429a      	cmp	r2, r3
 800550c:	d009      	beq.n	8005522 <HAL_TIM_Base_Start_IT+0x5a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a18      	ldr	r2, [pc, #96]	@ (8005574 <HAL_TIM_Base_Start_IT+0xac>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <HAL_TIM_Base_Start_IT+0x5a>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a16      	ldr	r2, [pc, #88]	@ (8005578 <HAL_TIM_Base_Start_IT+0xb0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d116      	bne.n	8005550 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	4a14      	ldr	r2, [pc, #80]	@ (800557c <HAL_TIM_Base_Start_IT+0xb4>)
 800552a:	4013      	ands	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b06      	cmp	r3, #6
 8005532:	d016      	beq.n	8005562 <HAL_TIM_Base_Start_IT+0x9a>
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	2380      	movs	r3, #128	@ 0x80
 8005538:	025b      	lsls	r3, r3, #9
 800553a:	429a      	cmp	r2, r3
 800553c:	d011      	beq.n	8005562 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2101      	movs	r1, #1
 800554a:	430a      	orrs	r2, r1
 800554c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554e:	e008      	b.n	8005562 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2101      	movs	r1, #1
 800555c:	430a      	orrs	r2, r1
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	e000      	b.n	8005564 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005562:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	0018      	movs	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	b004      	add	sp, #16
 800556c:	bd80      	pop	{r7, pc}
 800556e:	46c0      	nop			@ (mov r8, r8)
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40000400 	.word	0x40000400
 8005578:	40014000 	.word	0x40014000
 800557c:	00010007 	.word	0x00010007

08005580 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2101      	movs	r1, #1
 8005594:	438a      	bics	r2, r1
 8005596:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	4a0d      	ldr	r2, [pc, #52]	@ (80055d4 <HAL_TIM_Base_Stop_IT+0x54>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	d10d      	bne.n	80055c0 <HAL_TIM_Base_Stop_IT+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	4a0b      	ldr	r2, [pc, #44]	@ (80055d8 <HAL_TIM_Base_Stop_IT+0x58>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	d107      	bne.n	80055c0 <HAL_TIM_Base_Stop_IT+0x40>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2101      	movs	r1, #1
 80055bc:	438a      	bics	r2, r1
 80055be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	223d      	movs	r2, #61	@ 0x3d
 80055c4:	2101      	movs	r1, #1
 80055c6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	0018      	movs	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b002      	add	sp, #8
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			@ (mov r8, r8)
 80055d4:	00001111 	.word	0x00001111
 80055d8:	00000444 	.word	0x00000444

080055dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2202      	movs	r2, #2
 80055f8:	4013      	ands	r3, r2
 80055fa:	d021      	beq.n	8005640 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2202      	movs	r2, #2
 8005600:	4013      	ands	r3, r2
 8005602:	d01d      	beq.n	8005640 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2203      	movs	r2, #3
 800560a:	4252      	negs	r2, r2
 800560c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	2203      	movs	r2, #3
 800561c:	4013      	ands	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	0018      	movs	r0, r3
 8005624:	f000 f8ea 	bl	80057fc <HAL_TIM_IC_CaptureCallback>
 8005628:	e007      	b.n	800563a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	0018      	movs	r0, r3
 800562e:	f000 f8dd 	bl	80057ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	0018      	movs	r0, r3
 8005636:	f000 f8e9 	bl	800580c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2204      	movs	r2, #4
 8005644:	4013      	ands	r3, r2
 8005646:	d022      	beq.n	800568e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2204      	movs	r2, #4
 800564c:	4013      	ands	r3, r2
 800564e:	d01e      	beq.n	800568e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2205      	movs	r2, #5
 8005656:	4252      	negs	r2, r2
 8005658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2202      	movs	r2, #2
 800565e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	23c0      	movs	r3, #192	@ 0xc0
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4013      	ands	r3, r2
 800566c:	d004      	beq.n	8005678 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	0018      	movs	r0, r3
 8005672:	f000 f8c3 	bl	80057fc <HAL_TIM_IC_CaptureCallback>
 8005676:	e007      	b.n	8005688 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	0018      	movs	r0, r3
 800567c:	f000 f8b6 	bl	80057ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	0018      	movs	r0, r3
 8005684:	f000 f8c2 	bl	800580c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2208      	movs	r2, #8
 8005692:	4013      	ands	r3, r2
 8005694:	d021      	beq.n	80056da <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2208      	movs	r2, #8
 800569a:	4013      	ands	r3, r2
 800569c:	d01d      	beq.n	80056da <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2209      	movs	r2, #9
 80056a4:	4252      	negs	r2, r2
 80056a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2204      	movs	r2, #4
 80056ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	2203      	movs	r2, #3
 80056b6:	4013      	ands	r3, r2
 80056b8:	d004      	beq.n	80056c4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	0018      	movs	r0, r3
 80056be:	f000 f89d 	bl	80057fc <HAL_TIM_IC_CaptureCallback>
 80056c2:	e007      	b.n	80056d4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	0018      	movs	r0, r3
 80056c8:	f000 f890 	bl	80057ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	0018      	movs	r0, r3
 80056d0:	f000 f89c 	bl	800580c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2210      	movs	r2, #16
 80056de:	4013      	ands	r3, r2
 80056e0:	d022      	beq.n	8005728 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2210      	movs	r2, #16
 80056e6:	4013      	ands	r3, r2
 80056e8:	d01e      	beq.n	8005728 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2211      	movs	r2, #17
 80056f0:	4252      	negs	r2, r2
 80056f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2208      	movs	r2, #8
 80056f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	23c0      	movs	r3, #192	@ 0xc0
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4013      	ands	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	0018      	movs	r0, r3
 800570c:	f000 f876 	bl	80057fc <HAL_TIM_IC_CaptureCallback>
 8005710:	e007      	b.n	8005722 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	0018      	movs	r0, r3
 8005716:	f000 f869 	bl	80057ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	0018      	movs	r0, r3
 800571e:	f000 f875 	bl	800580c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2201      	movs	r2, #1
 800572c:	4013      	ands	r3, r2
 800572e:	d00c      	beq.n	800574a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2201      	movs	r2, #1
 8005734:	4013      	ands	r3, r2
 8005736:	d008      	beq.n	800574a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2202      	movs	r2, #2
 800573e:	4252      	negs	r2, r2
 8005740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	0018      	movs	r0, r3
 8005746:	f7fc fc19 	bl	8001f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2280      	movs	r2, #128	@ 0x80
 800574e:	4013      	ands	r3, r2
 8005750:	d104      	bne.n	800575c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	2380      	movs	r3, #128	@ 0x80
 8005756:	019b      	lsls	r3, r3, #6
 8005758:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800575a:	d00b      	beq.n	8005774 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2280      	movs	r2, #128	@ 0x80
 8005760:	4013      	ands	r3, r2
 8005762:	d007      	beq.n	8005774 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1e      	ldr	r2, [pc, #120]	@ (80057e4 <HAL_TIM_IRQHandler+0x208>)
 800576a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	0018      	movs	r0, r3
 8005770:	f000 f8f2 	bl	8005958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	2380      	movs	r3, #128	@ 0x80
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	4013      	ands	r3, r2
 800577c:	d00b      	beq.n	8005796 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2280      	movs	r2, #128	@ 0x80
 8005782:	4013      	ands	r3, r2
 8005784:	d007      	beq.n	8005796 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a17      	ldr	r2, [pc, #92]	@ (80057e8 <HAL_TIM_IRQHandler+0x20c>)
 800578c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	0018      	movs	r0, r3
 8005792:	f000 f8e9 	bl	8005968 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2240      	movs	r2, #64	@ 0x40
 800579a:	4013      	ands	r3, r2
 800579c:	d00c      	beq.n	80057b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2240      	movs	r2, #64	@ 0x40
 80057a2:	4013      	ands	r3, r2
 80057a4:	d008      	beq.n	80057b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2241      	movs	r2, #65	@ 0x41
 80057ac:	4252      	negs	r2, r2
 80057ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	0018      	movs	r0, r3
 80057b4:	f000 f832 	bl	800581c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2220      	movs	r2, #32
 80057bc:	4013      	ands	r3, r2
 80057be:	d00c      	beq.n	80057da <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2220      	movs	r2, #32
 80057c4:	4013      	ands	r3, r2
 80057c6:	d008      	beq.n	80057da <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2221      	movs	r2, #33	@ 0x21
 80057ce:	4252      	negs	r2, r2
 80057d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	0018      	movs	r0, r3
 80057d6:	f000 f8b7 	bl	8005948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057da:	46c0      	nop			@ (mov r8, r8)
 80057dc:	46bd      	mov	sp, r7
 80057de:	b004      	add	sp, #16
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	46c0      	nop			@ (mov r8, r8)
 80057e4:	ffffdf7f 	.word	0xffffdf7f
 80057e8:	fffffeff 	.word	0xfffffeff

080057ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057f4:	46c0      	nop			@ (mov r8, r8)
 80057f6:	46bd      	mov	sp, r7
 80057f8:	b002      	add	sp, #8
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005804:	46c0      	nop			@ (mov r8, r8)
 8005806:	46bd      	mov	sp, r7
 8005808:	b002      	add	sp, #8
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005814:	46c0      	nop			@ (mov r8, r8)
 8005816:	46bd      	mov	sp, r7
 8005818:	b002      	add	sp, #8
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005824:	46c0      	nop			@ (mov r8, r8)
 8005826:	46bd      	mov	sp, r7
 8005828:	b002      	add	sp, #8
 800582a:	bd80      	pop	{r7, pc}

0800582c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a3b      	ldr	r2, [pc, #236]	@ (800592c <TIM_Base_SetConfig+0x100>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d008      	beq.n	8005856 <TIM_Base_SetConfig+0x2a>
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	2380      	movs	r3, #128	@ 0x80
 8005848:	05db      	lsls	r3, r3, #23
 800584a:	429a      	cmp	r2, r3
 800584c:	d003      	beq.n	8005856 <TIM_Base_SetConfig+0x2a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a37      	ldr	r2, [pc, #220]	@ (8005930 <TIM_Base_SetConfig+0x104>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d108      	bne.n	8005868 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2270      	movs	r2, #112	@ 0x70
 800585a:	4393      	bics	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a30      	ldr	r2, [pc, #192]	@ (800592c <TIM_Base_SetConfig+0x100>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d018      	beq.n	80058a2 <TIM_Base_SetConfig+0x76>
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	2380      	movs	r3, #128	@ 0x80
 8005874:	05db      	lsls	r3, r3, #23
 8005876:	429a      	cmp	r2, r3
 8005878:	d013      	beq.n	80058a2 <TIM_Base_SetConfig+0x76>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2c      	ldr	r2, [pc, #176]	@ (8005930 <TIM_Base_SetConfig+0x104>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00f      	beq.n	80058a2 <TIM_Base_SetConfig+0x76>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2b      	ldr	r2, [pc, #172]	@ (8005934 <TIM_Base_SetConfig+0x108>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00b      	beq.n	80058a2 <TIM_Base_SetConfig+0x76>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2a      	ldr	r2, [pc, #168]	@ (8005938 <TIM_Base_SetConfig+0x10c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d007      	beq.n	80058a2 <TIM_Base_SetConfig+0x76>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a29      	ldr	r2, [pc, #164]	@ (800593c <TIM_Base_SetConfig+0x110>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d003      	beq.n	80058a2 <TIM_Base_SetConfig+0x76>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a28      	ldr	r2, [pc, #160]	@ (8005940 <TIM_Base_SetConfig+0x114>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d108      	bne.n	80058b4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4a27      	ldr	r2, [pc, #156]	@ (8005944 <TIM_Base_SetConfig+0x118>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2280      	movs	r2, #128	@ 0x80
 80058b8:	4393      	bics	r3, r2
 80058ba:	001a      	movs	r2, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a13      	ldr	r2, [pc, #76]	@ (800592c <TIM_Base_SetConfig+0x100>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00b      	beq.n	80058fa <TIM_Base_SetConfig+0xce>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a14      	ldr	r2, [pc, #80]	@ (8005938 <TIM_Base_SetConfig+0x10c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d007      	beq.n	80058fa <TIM_Base_SetConfig+0xce>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a13      	ldr	r2, [pc, #76]	@ (800593c <TIM_Base_SetConfig+0x110>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d003      	beq.n	80058fa <TIM_Base_SetConfig+0xce>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a12      	ldr	r2, [pc, #72]	@ (8005940 <TIM_Base_SetConfig+0x114>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d103      	bne.n	8005902 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	2201      	movs	r2, #1
 800590e:	4013      	ands	r3, r2
 8005910:	2b01      	cmp	r3, #1
 8005912:	d106      	bne.n	8005922 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	2201      	movs	r2, #1
 800591a:	4393      	bics	r3, r2
 800591c:	001a      	movs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	611a      	str	r2, [r3, #16]
  }
}
 8005922:	46c0      	nop			@ (mov r8, r8)
 8005924:	46bd      	mov	sp, r7
 8005926:	b004      	add	sp, #16
 8005928:	bd80      	pop	{r7, pc}
 800592a:	46c0      	nop			@ (mov r8, r8)
 800592c:	40012c00 	.word	0x40012c00
 8005930:	40000400 	.word	0x40000400
 8005934:	40002000 	.word	0x40002000
 8005938:	40014000 	.word	0x40014000
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800
 8005944:	fffffcff 	.word	0xfffffcff

08005948 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005950:	46c0      	nop			@ (mov r8, r8)
 8005952:	46bd      	mov	sp, r7
 8005954:	b002      	add	sp, #8
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005960:	46c0      	nop			@ (mov r8, r8)
 8005962:	46bd      	mov	sp, r7
 8005964:	b002      	add	sp, #8
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005970:	46c0      	nop			@ (mov r8, r8)
 8005972:	46bd      	mov	sp, r7
 8005974:	b002      	add	sp, #8
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e046      	b.n	8005a18 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2288      	movs	r2, #136	@ 0x88
 800598e:	589b      	ldr	r3, [r3, r2]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d107      	bne.n	80059a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2284      	movs	r2, #132	@ 0x84
 8005998:	2100      	movs	r1, #0
 800599a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	0018      	movs	r0, r3
 80059a0:	f7fc fdcc 	bl	800253c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2288      	movs	r2, #136	@ 0x88
 80059a8:	2124      	movs	r1, #36	@ 0x24
 80059aa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2101      	movs	r1, #1
 80059b8:	438a      	bics	r2, r1
 80059ba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	0018      	movs	r0, r3
 80059c8:	f000 faea 	bl	8005fa0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	0018      	movs	r0, r3
 80059d0:	f000 f828 	bl	8005a24 <UART_SetConfig>
 80059d4:	0003      	movs	r3, r0
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e01c      	b.n	8005a18 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	490d      	ldr	r1, [pc, #52]	@ (8005a20 <HAL_UART_Init+0xa8>)
 80059ea:	400a      	ands	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	212a      	movs	r1, #42	@ 0x2a
 80059fa:	438a      	bics	r2, r1
 80059fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2101      	movs	r1, #1
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	0018      	movs	r0, r3
 8005a12:	f000 fb79 	bl	8006108 <UART_CheckIdleState>
 8005a16:	0003      	movs	r3, r0
}
 8005a18:	0018      	movs	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b002      	add	sp, #8
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	ffffb7ff 	.word	0xffffb7ff

08005a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a24:	b5b0      	push	{r4, r5, r7, lr}
 8005a26:	b090      	sub	sp, #64	@ 0x40
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a2c:	231a      	movs	r3, #26
 8005a2e:	2220      	movs	r2, #32
 8005a30:	189b      	adds	r3, r3, r2
 8005a32:	19db      	adds	r3, r3, r7
 8005a34:	2200      	movs	r2, #0
 8005a36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	431a      	orrs	r2, r3
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4aaf      	ldr	r2, [pc, #700]	@ (8005d14 <UART_SetConfig+0x2f0>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	0019      	movs	r1, r3
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a62:	430b      	orrs	r3, r1
 8005a64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	4aaa      	ldr	r2, [pc, #680]	@ (8005d18 <UART_SetConfig+0x2f4>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	0018      	movs	r0, r3
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	68d9      	ldr	r1, [r3, #12]
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4aa4      	ldr	r2, [pc, #656]	@ (8005d1c <UART_SetConfig+0x2f8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d004      	beq.n	8005a9a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a96:	4313      	orrs	r3, r2
 8005a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	4a9f      	ldr	r2, [pc, #636]	@ (8005d20 <UART_SetConfig+0x2fc>)
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	0019      	movs	r1, r3
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aac:	430b      	orrs	r3, r1
 8005aae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab6:	220f      	movs	r2, #15
 8005ab8:	4393      	bics	r3, r2
 8005aba:	0018      	movs	r0, r3
 8005abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	0003      	movs	r3, r0
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a95      	ldr	r2, [pc, #596]	@ (8005d24 <UART_SetConfig+0x300>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d131      	bne.n	8005b38 <UART_SetConfig+0x114>
 8005ad4:	4b94      	ldr	r3, [pc, #592]	@ (8005d28 <UART_SetConfig+0x304>)
 8005ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad8:	2203      	movs	r2, #3
 8005ada:	4013      	ands	r3, r2
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d01d      	beq.n	8005b1c <UART_SetConfig+0xf8>
 8005ae0:	d823      	bhi.n	8005b2a <UART_SetConfig+0x106>
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d00c      	beq.n	8005b00 <UART_SetConfig+0xdc>
 8005ae6:	d820      	bhi.n	8005b2a <UART_SetConfig+0x106>
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <UART_SetConfig+0xce>
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d00e      	beq.n	8005b0e <UART_SetConfig+0xea>
 8005af0:	e01b      	b.n	8005b2a <UART_SetConfig+0x106>
 8005af2:	231b      	movs	r3, #27
 8005af4:	2220      	movs	r2, #32
 8005af6:	189b      	adds	r3, r3, r2
 8005af8:	19db      	adds	r3, r3, r7
 8005afa:	2200      	movs	r2, #0
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	e0b4      	b.n	8005c6a <UART_SetConfig+0x246>
 8005b00:	231b      	movs	r3, #27
 8005b02:	2220      	movs	r2, #32
 8005b04:	189b      	adds	r3, r3, r2
 8005b06:	19db      	adds	r3, r3, r7
 8005b08:	2202      	movs	r2, #2
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	e0ad      	b.n	8005c6a <UART_SetConfig+0x246>
 8005b0e:	231b      	movs	r3, #27
 8005b10:	2220      	movs	r2, #32
 8005b12:	189b      	adds	r3, r3, r2
 8005b14:	19db      	adds	r3, r3, r7
 8005b16:	2204      	movs	r2, #4
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	e0a6      	b.n	8005c6a <UART_SetConfig+0x246>
 8005b1c:	231b      	movs	r3, #27
 8005b1e:	2220      	movs	r2, #32
 8005b20:	189b      	adds	r3, r3, r2
 8005b22:	19db      	adds	r3, r3, r7
 8005b24:	2208      	movs	r2, #8
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	e09f      	b.n	8005c6a <UART_SetConfig+0x246>
 8005b2a:	231b      	movs	r3, #27
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	189b      	adds	r3, r3, r2
 8005b30:	19db      	adds	r3, r3, r7
 8005b32:	2210      	movs	r2, #16
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	e098      	b.n	8005c6a <UART_SetConfig+0x246>
 8005b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a7b      	ldr	r2, [pc, #492]	@ (8005d2c <UART_SetConfig+0x308>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d131      	bne.n	8005ba6 <UART_SetConfig+0x182>
 8005b42:	4b79      	ldr	r3, [pc, #484]	@ (8005d28 <UART_SetConfig+0x304>)
 8005b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b46:	220c      	movs	r2, #12
 8005b48:	4013      	ands	r3, r2
 8005b4a:	2b0c      	cmp	r3, #12
 8005b4c:	d01d      	beq.n	8005b8a <UART_SetConfig+0x166>
 8005b4e:	d823      	bhi.n	8005b98 <UART_SetConfig+0x174>
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d00c      	beq.n	8005b6e <UART_SetConfig+0x14a>
 8005b54:	d820      	bhi.n	8005b98 <UART_SetConfig+0x174>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <UART_SetConfig+0x13c>
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d00e      	beq.n	8005b7c <UART_SetConfig+0x158>
 8005b5e:	e01b      	b.n	8005b98 <UART_SetConfig+0x174>
 8005b60:	231b      	movs	r3, #27
 8005b62:	2220      	movs	r2, #32
 8005b64:	189b      	adds	r3, r3, r2
 8005b66:	19db      	adds	r3, r3, r7
 8005b68:	2200      	movs	r2, #0
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	e07d      	b.n	8005c6a <UART_SetConfig+0x246>
 8005b6e:	231b      	movs	r3, #27
 8005b70:	2220      	movs	r2, #32
 8005b72:	189b      	adds	r3, r3, r2
 8005b74:	19db      	adds	r3, r3, r7
 8005b76:	2202      	movs	r2, #2
 8005b78:	701a      	strb	r2, [r3, #0]
 8005b7a:	e076      	b.n	8005c6a <UART_SetConfig+0x246>
 8005b7c:	231b      	movs	r3, #27
 8005b7e:	2220      	movs	r2, #32
 8005b80:	189b      	adds	r3, r3, r2
 8005b82:	19db      	adds	r3, r3, r7
 8005b84:	2204      	movs	r2, #4
 8005b86:	701a      	strb	r2, [r3, #0]
 8005b88:	e06f      	b.n	8005c6a <UART_SetConfig+0x246>
 8005b8a:	231b      	movs	r3, #27
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	189b      	adds	r3, r3, r2
 8005b90:	19db      	adds	r3, r3, r7
 8005b92:	2208      	movs	r2, #8
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e068      	b.n	8005c6a <UART_SetConfig+0x246>
 8005b98:	231b      	movs	r3, #27
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	189b      	adds	r3, r3, r2
 8005b9e:	19db      	adds	r3, r3, r7
 8005ba0:	2210      	movs	r2, #16
 8005ba2:	701a      	strb	r2, [r3, #0]
 8005ba4:	e061      	b.n	8005c6a <UART_SetConfig+0x246>
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a61      	ldr	r2, [pc, #388]	@ (8005d30 <UART_SetConfig+0x30c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d106      	bne.n	8005bbe <UART_SetConfig+0x19a>
 8005bb0:	231b      	movs	r3, #27
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	189b      	adds	r3, r3, r2
 8005bb6:	19db      	adds	r3, r3, r7
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	e055      	b.n	8005c6a <UART_SetConfig+0x246>
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a5c      	ldr	r2, [pc, #368]	@ (8005d34 <UART_SetConfig+0x310>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d106      	bne.n	8005bd6 <UART_SetConfig+0x1b2>
 8005bc8:	231b      	movs	r3, #27
 8005bca:	2220      	movs	r2, #32
 8005bcc:	189b      	adds	r3, r3, r2
 8005bce:	19db      	adds	r3, r3, r7
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	e049      	b.n	8005c6a <UART_SetConfig+0x246>
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a50      	ldr	r2, [pc, #320]	@ (8005d1c <UART_SetConfig+0x2f8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d13e      	bne.n	8005c5e <UART_SetConfig+0x23a>
 8005be0:	4b51      	ldr	r3, [pc, #324]	@ (8005d28 <UART_SetConfig+0x304>)
 8005be2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005be4:	23c0      	movs	r3, #192	@ 0xc0
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	4013      	ands	r3, r2
 8005bea:	22c0      	movs	r2, #192	@ 0xc0
 8005bec:	0112      	lsls	r2, r2, #4
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d027      	beq.n	8005c42 <UART_SetConfig+0x21e>
 8005bf2:	22c0      	movs	r2, #192	@ 0xc0
 8005bf4:	0112      	lsls	r2, r2, #4
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d82a      	bhi.n	8005c50 <UART_SetConfig+0x22c>
 8005bfa:	2280      	movs	r2, #128	@ 0x80
 8005bfc:	0112      	lsls	r2, r2, #4
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d011      	beq.n	8005c26 <UART_SetConfig+0x202>
 8005c02:	2280      	movs	r2, #128	@ 0x80
 8005c04:	0112      	lsls	r2, r2, #4
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d822      	bhi.n	8005c50 <UART_SetConfig+0x22c>
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d004      	beq.n	8005c18 <UART_SetConfig+0x1f4>
 8005c0e:	2280      	movs	r2, #128	@ 0x80
 8005c10:	00d2      	lsls	r2, r2, #3
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00e      	beq.n	8005c34 <UART_SetConfig+0x210>
 8005c16:	e01b      	b.n	8005c50 <UART_SetConfig+0x22c>
 8005c18:	231b      	movs	r3, #27
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	189b      	adds	r3, r3, r2
 8005c1e:	19db      	adds	r3, r3, r7
 8005c20:	2200      	movs	r2, #0
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	e021      	b.n	8005c6a <UART_SetConfig+0x246>
 8005c26:	231b      	movs	r3, #27
 8005c28:	2220      	movs	r2, #32
 8005c2a:	189b      	adds	r3, r3, r2
 8005c2c:	19db      	adds	r3, r3, r7
 8005c2e:	2202      	movs	r2, #2
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	e01a      	b.n	8005c6a <UART_SetConfig+0x246>
 8005c34:	231b      	movs	r3, #27
 8005c36:	2220      	movs	r2, #32
 8005c38:	189b      	adds	r3, r3, r2
 8005c3a:	19db      	adds	r3, r3, r7
 8005c3c:	2204      	movs	r2, #4
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	e013      	b.n	8005c6a <UART_SetConfig+0x246>
 8005c42:	231b      	movs	r3, #27
 8005c44:	2220      	movs	r2, #32
 8005c46:	189b      	adds	r3, r3, r2
 8005c48:	19db      	adds	r3, r3, r7
 8005c4a:	2208      	movs	r2, #8
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	e00c      	b.n	8005c6a <UART_SetConfig+0x246>
 8005c50:	231b      	movs	r3, #27
 8005c52:	2220      	movs	r2, #32
 8005c54:	189b      	adds	r3, r3, r2
 8005c56:	19db      	adds	r3, r3, r7
 8005c58:	2210      	movs	r2, #16
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	e005      	b.n	8005c6a <UART_SetConfig+0x246>
 8005c5e:	231b      	movs	r3, #27
 8005c60:	2220      	movs	r2, #32
 8005c62:	189b      	adds	r3, r3, r2
 8005c64:	19db      	adds	r3, r3, r7
 8005c66:	2210      	movs	r2, #16
 8005c68:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8005d1c <UART_SetConfig+0x2f8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d000      	beq.n	8005c76 <UART_SetConfig+0x252>
 8005c74:	e0a9      	b.n	8005dca <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c76:	231b      	movs	r3, #27
 8005c78:	2220      	movs	r2, #32
 8005c7a:	189b      	adds	r3, r3, r2
 8005c7c:	19db      	adds	r3, r3, r7
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d015      	beq.n	8005cb0 <UART_SetConfig+0x28c>
 8005c84:	dc18      	bgt.n	8005cb8 <UART_SetConfig+0x294>
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d00d      	beq.n	8005ca6 <UART_SetConfig+0x282>
 8005c8a:	dc15      	bgt.n	8005cb8 <UART_SetConfig+0x294>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <UART_SetConfig+0x272>
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d005      	beq.n	8005ca0 <UART_SetConfig+0x27c>
 8005c94:	e010      	b.n	8005cb8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c96:	f7ff f9f1 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 8005c9a:	0003      	movs	r3, r0
 8005c9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c9e:	e014      	b.n	8005cca <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ca0:	4b25      	ldr	r3, [pc, #148]	@ (8005d38 <UART_SetConfig+0x314>)
 8005ca2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ca4:	e011      	b.n	8005cca <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ca6:	f7ff f95d 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 8005caa:	0003      	movs	r3, r0
 8005cac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005cae:	e00c      	b.n	8005cca <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cb0:	2380      	movs	r3, #128	@ 0x80
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005cb6:	e008      	b.n	8005cca <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005cbc:	231a      	movs	r3, #26
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	189b      	adds	r3, r3, r2
 8005cc2:	19db      	adds	r3, r3, r7
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	701a      	strb	r2, [r3, #0]
        break;
 8005cc8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d100      	bne.n	8005cd2 <UART_SetConfig+0x2ae>
 8005cd0:	e14b      	b.n	8005f6a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cd6:	4b19      	ldr	r3, [pc, #100]	@ (8005d3c <UART_SetConfig+0x318>)
 8005cd8:	0052      	lsls	r2, r2, #1
 8005cda:	5ad3      	ldrh	r3, [r2, r3]
 8005cdc:	0019      	movs	r1, r3
 8005cde:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005ce0:	f7fa fa10 	bl	8000104 <__udivsi3>
 8005ce4:	0003      	movs	r3, r0
 8005ce6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	0013      	movs	r3, r2
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	189b      	adds	r3, r3, r2
 8005cf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d305      	bcc.n	8005d04 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d91d      	bls.n	8005d40 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005d04:	231a      	movs	r3, #26
 8005d06:	2220      	movs	r2, #32
 8005d08:	189b      	adds	r3, r3, r2
 8005d0a:	19db      	adds	r3, r3, r7
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	e12b      	b.n	8005f6a <UART_SetConfig+0x546>
 8005d12:	46c0      	nop			@ (mov r8, r8)
 8005d14:	cfff69f3 	.word	0xcfff69f3
 8005d18:	ffffcfff 	.word	0xffffcfff
 8005d1c:	40008000 	.word	0x40008000
 8005d20:	11fff4ff 	.word	0x11fff4ff
 8005d24:	40013800 	.word	0x40013800
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	40004400 	.word	0x40004400
 8005d30:	40004800 	.word	0x40004800
 8005d34:	40004c00 	.word	0x40004c00
 8005d38:	00f42400 	.word	0x00f42400
 8005d3c:	08006afc 	.word	0x08006afc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d42:	61bb      	str	r3, [r7, #24]
 8005d44:	2300      	movs	r3, #0
 8005d46:	61fb      	str	r3, [r7, #28]
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d4c:	4b92      	ldr	r3, [pc, #584]	@ (8005f98 <UART_SetConfig+0x574>)
 8005d4e:	0052      	lsls	r2, r2, #1
 8005d50:	5ad3      	ldrh	r3, [r2, r3]
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	69b8      	ldr	r0, [r7, #24]
 8005d5e:	69f9      	ldr	r1, [r7, #28]
 8005d60:	f7fa fb80 	bl	8000464 <__aeabi_uldivmod>
 8005d64:	0002      	movs	r2, r0
 8005d66:	000b      	movs	r3, r1
 8005d68:	0e11      	lsrs	r1, r2, #24
 8005d6a:	021d      	lsls	r5, r3, #8
 8005d6c:	430d      	orrs	r5, r1
 8005d6e:	0214      	lsls	r4, r2, #8
 8005d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	085b      	lsrs	r3, r3, #1
 8005d76:	60bb      	str	r3, [r7, #8]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	68b8      	ldr	r0, [r7, #8]
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	1900      	adds	r0, r0, r4
 8005d82:	4169      	adcs	r1, r5
 8005d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	603b      	str	r3, [r7, #0]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	607b      	str	r3, [r7, #4]
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f7fa fb67 	bl	8000464 <__aeabi_uldivmod>
 8005d96:	0002      	movs	r2, r0
 8005d98:	000b      	movs	r3, r1
 8005d9a:	0013      	movs	r3, r2
 8005d9c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005da0:	23c0      	movs	r3, #192	@ 0xc0
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d309      	bcc.n	8005dbc <UART_SetConfig+0x398>
 8005da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005daa:	2380      	movs	r3, #128	@ 0x80
 8005dac:	035b      	lsls	r3, r3, #13
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d204      	bcs.n	8005dbc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005db8:	60da      	str	r2, [r3, #12]
 8005dba:	e0d6      	b.n	8005f6a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005dbc:	231a      	movs	r3, #26
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	189b      	adds	r3, r3, r2
 8005dc2:	19db      	adds	r3, r3, r7
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	701a      	strb	r2, [r3, #0]
 8005dc8:	e0cf      	b.n	8005f6a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	69da      	ldr	r2, [r3, #28]
 8005dce:	2380      	movs	r3, #128	@ 0x80
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d000      	beq.n	8005dd8 <UART_SetConfig+0x3b4>
 8005dd6:	e070      	b.n	8005eba <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005dd8:	231b      	movs	r3, #27
 8005dda:	2220      	movs	r2, #32
 8005ddc:	189b      	adds	r3, r3, r2
 8005dde:	19db      	adds	r3, r3, r7
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b08      	cmp	r3, #8
 8005de4:	d015      	beq.n	8005e12 <UART_SetConfig+0x3ee>
 8005de6:	dc18      	bgt.n	8005e1a <UART_SetConfig+0x3f6>
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d00d      	beq.n	8005e08 <UART_SetConfig+0x3e4>
 8005dec:	dc15      	bgt.n	8005e1a <UART_SetConfig+0x3f6>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <UART_SetConfig+0x3d4>
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d005      	beq.n	8005e02 <UART_SetConfig+0x3de>
 8005df6:	e010      	b.n	8005e1a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df8:	f7ff f940 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 8005dfc:	0003      	movs	r3, r0
 8005dfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e00:	e014      	b.n	8005e2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e02:	4b66      	ldr	r3, [pc, #408]	@ (8005f9c <UART_SetConfig+0x578>)
 8005e04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e06:	e011      	b.n	8005e2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e08:	f7ff f8ac 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 8005e0c:	0003      	movs	r3, r0
 8005e0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e10:	e00c      	b.n	8005e2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e12:	2380      	movs	r3, #128	@ 0x80
 8005e14:	021b      	lsls	r3, r3, #8
 8005e16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e18:	e008      	b.n	8005e2c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005e1e:	231a      	movs	r3, #26
 8005e20:	2220      	movs	r2, #32
 8005e22:	189b      	adds	r3, r3, r2
 8005e24:	19db      	adds	r3, r3, r7
 8005e26:	2201      	movs	r2, #1
 8005e28:	701a      	strb	r2, [r3, #0]
        break;
 8005e2a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d100      	bne.n	8005e34 <UART_SetConfig+0x410>
 8005e32:	e09a      	b.n	8005f6a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e38:	4b57      	ldr	r3, [pc, #348]	@ (8005f98 <UART_SetConfig+0x574>)
 8005e3a:	0052      	lsls	r2, r2, #1
 8005e3c:	5ad3      	ldrh	r3, [r2, r3]
 8005e3e:	0019      	movs	r1, r3
 8005e40:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005e42:	f7fa f95f 	bl	8000104 <__udivsi3>
 8005e46:	0003      	movs	r3, r0
 8005e48:	005a      	lsls	r2, r3, #1
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	18d2      	adds	r2, r2, r3
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	0019      	movs	r1, r3
 8005e58:	0010      	movs	r0, r2
 8005e5a:	f7fa f953 	bl	8000104 <__udivsi3>
 8005e5e:	0003      	movs	r3, r0
 8005e60:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e64:	2b0f      	cmp	r3, #15
 8005e66:	d921      	bls.n	8005eac <UART_SetConfig+0x488>
 8005e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e6a:	2380      	movs	r3, #128	@ 0x80
 8005e6c:	025b      	lsls	r3, r3, #9
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d21c      	bcs.n	8005eac <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	200e      	movs	r0, #14
 8005e78:	2420      	movs	r4, #32
 8005e7a:	1903      	adds	r3, r0, r4
 8005e7c:	19db      	adds	r3, r3, r7
 8005e7e:	210f      	movs	r1, #15
 8005e80:	438a      	bics	r2, r1
 8005e82:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e86:	085b      	lsrs	r3, r3, #1
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2207      	movs	r2, #7
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	b299      	uxth	r1, r3
 8005e90:	1903      	adds	r3, r0, r4
 8005e92:	19db      	adds	r3, r3, r7
 8005e94:	1902      	adds	r2, r0, r4
 8005e96:	19d2      	adds	r2, r2, r7
 8005e98:	8812      	ldrh	r2, [r2, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	1902      	adds	r2, r0, r4
 8005ea4:	19d2      	adds	r2, r2, r7
 8005ea6:	8812      	ldrh	r2, [r2, #0]
 8005ea8:	60da      	str	r2, [r3, #12]
 8005eaa:	e05e      	b.n	8005f6a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005eac:	231a      	movs	r3, #26
 8005eae:	2220      	movs	r2, #32
 8005eb0:	189b      	adds	r3, r3, r2
 8005eb2:	19db      	adds	r3, r3, r7
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	e057      	b.n	8005f6a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eba:	231b      	movs	r3, #27
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	189b      	adds	r3, r3, r2
 8005ec0:	19db      	adds	r3, r3, r7
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d015      	beq.n	8005ef4 <UART_SetConfig+0x4d0>
 8005ec8:	dc18      	bgt.n	8005efc <UART_SetConfig+0x4d8>
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d00d      	beq.n	8005eea <UART_SetConfig+0x4c6>
 8005ece:	dc15      	bgt.n	8005efc <UART_SetConfig+0x4d8>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <UART_SetConfig+0x4b6>
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d005      	beq.n	8005ee4 <UART_SetConfig+0x4c0>
 8005ed8:	e010      	b.n	8005efc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eda:	f7ff f8cf 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 8005ede:	0003      	movs	r3, r0
 8005ee0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ee2:	e014      	b.n	8005f0e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8005f9c <UART_SetConfig+0x578>)
 8005ee6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ee8:	e011      	b.n	8005f0e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eea:	f7ff f83b 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 8005eee:	0003      	movs	r3, r0
 8005ef0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ef2:	e00c      	b.n	8005f0e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef4:	2380      	movs	r3, #128	@ 0x80
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005efa:	e008      	b.n	8005f0e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005f00:	231a      	movs	r3, #26
 8005f02:	2220      	movs	r2, #32
 8005f04:	189b      	adds	r3, r3, r2
 8005f06:	19db      	adds	r3, r3, r7
 8005f08:	2201      	movs	r2, #1
 8005f0a:	701a      	strb	r2, [r3, #0]
        break;
 8005f0c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d02a      	beq.n	8005f6a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f18:	4b1f      	ldr	r3, [pc, #124]	@ (8005f98 <UART_SetConfig+0x574>)
 8005f1a:	0052      	lsls	r2, r2, #1
 8005f1c:	5ad3      	ldrh	r3, [r2, r3]
 8005f1e:	0019      	movs	r1, r3
 8005f20:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005f22:	f7fa f8ef 	bl	8000104 <__udivsi3>
 8005f26:	0003      	movs	r3, r0
 8005f28:	001a      	movs	r2, r3
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	085b      	lsrs	r3, r3, #1
 8005f30:	18d2      	adds	r2, r2, r3
 8005f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	0019      	movs	r1, r3
 8005f38:	0010      	movs	r0, r2
 8005f3a:	f7fa f8e3 	bl	8000104 <__udivsi3>
 8005f3e:	0003      	movs	r3, r0
 8005f40:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f44:	2b0f      	cmp	r3, #15
 8005f46:	d90a      	bls.n	8005f5e <UART_SetConfig+0x53a>
 8005f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f4a:	2380      	movs	r3, #128	@ 0x80
 8005f4c:	025b      	lsls	r3, r3, #9
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d205      	bcs.n	8005f5e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60da      	str	r2, [r3, #12]
 8005f5c:	e005      	b.n	8005f6a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005f5e:	231a      	movs	r3, #26
 8005f60:	2220      	movs	r2, #32
 8005f62:	189b      	adds	r3, r3, r2
 8005f64:	19db      	adds	r3, r3, r7
 8005f66:	2201      	movs	r2, #1
 8005f68:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	226a      	movs	r2, #106	@ 0x6a
 8005f6e:	2101      	movs	r1, #1
 8005f70:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	2268      	movs	r2, #104	@ 0x68
 8005f76:	2101      	movs	r1, #1
 8005f78:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f82:	2200      	movs	r2, #0
 8005f84:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005f86:	231a      	movs	r3, #26
 8005f88:	2220      	movs	r2, #32
 8005f8a:	189b      	adds	r3, r3, r2
 8005f8c:	19db      	adds	r3, r3, r7
 8005f8e:	781b      	ldrb	r3, [r3, #0]
}
 8005f90:	0018      	movs	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b010      	add	sp, #64	@ 0x40
 8005f96:	bdb0      	pop	{r4, r5, r7, pc}
 8005f98:	08006afc 	.word	0x08006afc
 8005f9c:	00f42400 	.word	0x00f42400

08005fa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fac:	2208      	movs	r2, #8
 8005fae:	4013      	ands	r3, r2
 8005fb0:	d00b      	beq.n	8005fca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	4a4a      	ldr	r2, [pc, #296]	@ (80060e4 <UART_AdvFeatureConfig+0x144>)
 8005fba:	4013      	ands	r3, r2
 8005fbc:	0019      	movs	r1, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fce:	2201      	movs	r2, #1
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	d00b      	beq.n	8005fec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	4a43      	ldr	r2, [pc, #268]	@ (80060e8 <UART_AdvFeatureConfig+0x148>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	0019      	movs	r1, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	d00b      	beq.n	800600e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	4a3b      	ldr	r2, [pc, #236]	@ (80060ec <UART_AdvFeatureConfig+0x14c>)
 8005ffe:	4013      	ands	r3, r2
 8006000:	0019      	movs	r1, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006012:	2204      	movs	r2, #4
 8006014:	4013      	ands	r3, r2
 8006016:	d00b      	beq.n	8006030 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	4a34      	ldr	r2, [pc, #208]	@ (80060f0 <UART_AdvFeatureConfig+0x150>)
 8006020:	4013      	ands	r3, r2
 8006022:	0019      	movs	r1, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006034:	2210      	movs	r2, #16
 8006036:	4013      	ands	r3, r2
 8006038:	d00b      	beq.n	8006052 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	4a2c      	ldr	r2, [pc, #176]	@ (80060f4 <UART_AdvFeatureConfig+0x154>)
 8006042:	4013      	ands	r3, r2
 8006044:	0019      	movs	r1, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006056:	2220      	movs	r2, #32
 8006058:	4013      	ands	r3, r2
 800605a:	d00b      	beq.n	8006074 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	4a25      	ldr	r2, [pc, #148]	@ (80060f8 <UART_AdvFeatureConfig+0x158>)
 8006064:	4013      	ands	r3, r2
 8006066:	0019      	movs	r1, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006078:	2240      	movs	r2, #64	@ 0x40
 800607a:	4013      	ands	r3, r2
 800607c:	d01d      	beq.n	80060ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	4a1d      	ldr	r2, [pc, #116]	@ (80060fc <UART_AdvFeatureConfig+0x15c>)
 8006086:	4013      	ands	r3, r2
 8006088:	0019      	movs	r1, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800609a:	2380      	movs	r3, #128	@ 0x80
 800609c:	035b      	lsls	r3, r3, #13
 800609e:	429a      	cmp	r2, r3
 80060a0:	d10b      	bne.n	80060ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	4a15      	ldr	r2, [pc, #84]	@ (8006100 <UART_AdvFeatureConfig+0x160>)
 80060aa:	4013      	ands	r3, r2
 80060ac:	0019      	movs	r1, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060be:	2280      	movs	r2, #128	@ 0x80
 80060c0:	4013      	ands	r3, r2
 80060c2:	d00b      	beq.n	80060dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	4a0e      	ldr	r2, [pc, #56]	@ (8006104 <UART_AdvFeatureConfig+0x164>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	0019      	movs	r1, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	605a      	str	r2, [r3, #4]
  }
}
 80060dc:	46c0      	nop			@ (mov r8, r8)
 80060de:	46bd      	mov	sp, r7
 80060e0:	b002      	add	sp, #8
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	ffff7fff 	.word	0xffff7fff
 80060e8:	fffdffff 	.word	0xfffdffff
 80060ec:	fffeffff 	.word	0xfffeffff
 80060f0:	fffbffff 	.word	0xfffbffff
 80060f4:	ffffefff 	.word	0xffffefff
 80060f8:	ffffdfff 	.word	0xffffdfff
 80060fc:	ffefffff 	.word	0xffefffff
 8006100:	ff9fffff 	.word	0xff9fffff
 8006104:	fff7ffff 	.word	0xfff7ffff

08006108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b092      	sub	sp, #72	@ 0x48
 800610c:	af02      	add	r7, sp, #8
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2290      	movs	r2, #144	@ 0x90
 8006114:	2100      	movs	r1, #0
 8006116:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006118:	f7fc fb6e 	bl	80027f8 <HAL_GetTick>
 800611c:	0003      	movs	r3, r0
 800611e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2208      	movs	r2, #8
 8006128:	4013      	ands	r3, r2
 800612a:	2b08      	cmp	r3, #8
 800612c:	d12d      	bne.n	800618a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800612e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006130:	2280      	movs	r2, #128	@ 0x80
 8006132:	0391      	lsls	r1, r2, #14
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	4a47      	ldr	r2, [pc, #284]	@ (8006254 <UART_CheckIdleState+0x14c>)
 8006138:	9200      	str	r2, [sp, #0]
 800613a:	2200      	movs	r2, #0
 800613c:	f000 f88e 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 8006140:	1e03      	subs	r3, r0, #0
 8006142:	d022      	beq.n	800618a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006144:	f3ef 8310 	mrs	r3, PRIMASK
 8006148:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800614c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800614e:	2301      	movs	r3, #1
 8006150:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006154:	f383 8810 	msr	PRIMASK, r3
}
 8006158:	46c0      	nop			@ (mov r8, r8)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2180      	movs	r1, #128	@ 0x80
 8006166:	438a      	bics	r2, r1
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006170:	f383 8810 	msr	PRIMASK, r3
}
 8006174:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2288      	movs	r2, #136	@ 0x88
 800617a:	2120      	movs	r1, #32
 800617c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2284      	movs	r2, #132	@ 0x84
 8006182:	2100      	movs	r1, #0
 8006184:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e060      	b.n	800624c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2204      	movs	r2, #4
 8006192:	4013      	ands	r3, r2
 8006194:	2b04      	cmp	r3, #4
 8006196:	d146      	bne.n	8006226 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800619a:	2280      	movs	r2, #128	@ 0x80
 800619c:	03d1      	lsls	r1, r2, #15
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	4a2c      	ldr	r2, [pc, #176]	@ (8006254 <UART_CheckIdleState+0x14c>)
 80061a2:	9200      	str	r2, [sp, #0]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f000 f859 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 80061aa:	1e03      	subs	r3, r0, #0
 80061ac:	d03b      	beq.n	8006226 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ae:	f3ef 8310 	mrs	r3, PRIMASK
 80061b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80061b4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80061b8:	2301      	movs	r3, #1
 80061ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f383 8810 	msr	PRIMASK, r3
}
 80061c2:	46c0      	nop			@ (mov r8, r8)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4922      	ldr	r1, [pc, #136]	@ (8006258 <UART_CheckIdleState+0x150>)
 80061d0:	400a      	ands	r2, r1
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f383 8810 	msr	PRIMASK, r3
}
 80061de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061e0:	f3ef 8310 	mrs	r3, PRIMASK
 80061e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80061e6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80061ea:	2301      	movs	r3, #1
 80061ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	f383 8810 	msr	PRIMASK, r3
}
 80061f4:	46c0      	nop			@ (mov r8, r8)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2101      	movs	r1, #1
 8006202:	438a      	bics	r2, r1
 8006204:	609a      	str	r2, [r3, #8]
 8006206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006208:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	f383 8810 	msr	PRIMASK, r3
}
 8006210:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	228c      	movs	r2, #140	@ 0x8c
 8006216:	2120      	movs	r1, #32
 8006218:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2284      	movs	r2, #132	@ 0x84
 800621e:	2100      	movs	r1, #0
 8006220:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e012      	b.n	800624c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2288      	movs	r2, #136	@ 0x88
 800622a:	2120      	movs	r1, #32
 800622c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	228c      	movs	r2, #140	@ 0x8c
 8006232:	2120      	movs	r1, #32
 8006234:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2284      	movs	r2, #132	@ 0x84
 8006246:	2100      	movs	r1, #0
 8006248:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	0018      	movs	r0, r3
 800624e:	46bd      	mov	sp, r7
 8006250:	b010      	add	sp, #64	@ 0x40
 8006252:	bd80      	pop	{r7, pc}
 8006254:	01ffffff 	.word	0x01ffffff
 8006258:	fffffedf 	.word	0xfffffedf

0800625c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	1dfb      	adds	r3, r7, #7
 800626a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800626c:	e051      	b.n	8006312 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	3301      	adds	r3, #1
 8006272:	d04e      	beq.n	8006312 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006274:	f7fc fac0 	bl	80027f8 <HAL_GetTick>
 8006278:	0002      	movs	r2, r0
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	429a      	cmp	r2, r3
 8006282:	d302      	bcc.n	800628a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e051      	b.n	8006332 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2204      	movs	r2, #4
 8006296:	4013      	ands	r3, r2
 8006298:	d03b      	beq.n	8006312 <UART_WaitOnFlagUntilTimeout+0xb6>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b80      	cmp	r3, #128	@ 0x80
 800629e:	d038      	beq.n	8006312 <UART_WaitOnFlagUntilTimeout+0xb6>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b40      	cmp	r3, #64	@ 0x40
 80062a4:	d035      	beq.n	8006312 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	2208      	movs	r2, #8
 80062ae:	4013      	ands	r3, r2
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d111      	bne.n	80062d8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2208      	movs	r2, #8
 80062ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	0018      	movs	r0, r3
 80062c0:	f000 f83c 	bl	800633c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2290      	movs	r2, #144	@ 0x90
 80062c8:	2108      	movs	r1, #8
 80062ca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2284      	movs	r2, #132	@ 0x84
 80062d0:	2100      	movs	r1, #0
 80062d2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e02c      	b.n	8006332 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69da      	ldr	r2, [r3, #28]
 80062de:	2380      	movs	r3, #128	@ 0x80
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	401a      	ands	r2, r3
 80062e4:	2380      	movs	r3, #128	@ 0x80
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d112      	bne.n	8006312 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2280      	movs	r2, #128	@ 0x80
 80062f2:	0112      	lsls	r2, r2, #4
 80062f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	0018      	movs	r0, r3
 80062fa:	f000 f81f 	bl	800633c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2290      	movs	r2, #144	@ 0x90
 8006302:	2120      	movs	r1, #32
 8006304:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2284      	movs	r2, #132	@ 0x84
 800630a:	2100      	movs	r1, #0
 800630c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e00f      	b.n	8006332 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	4013      	ands	r3, r2
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	425a      	negs	r2, r3
 8006322:	4153      	adcs	r3, r2
 8006324:	b2db      	uxtb	r3, r3
 8006326:	001a      	movs	r2, r3
 8006328:	1dfb      	adds	r3, r7, #7
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d09e      	beq.n	800626e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	0018      	movs	r0, r3
 8006334:	46bd      	mov	sp, r7
 8006336:	b004      	add	sp, #16
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08e      	sub	sp, #56	@ 0x38
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006344:	f3ef 8310 	mrs	r3, PRIMASK
 8006348:	617b      	str	r3, [r7, #20]
  return(result);
 800634a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800634c:	637b      	str	r3, [r7, #52]	@ 0x34
 800634e:	2301      	movs	r3, #1
 8006350:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	f383 8810 	msr	PRIMASK, r3
}
 8006358:	46c0      	nop			@ (mov r8, r8)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4926      	ldr	r1, [pc, #152]	@ (8006400 <UART_EndRxTransfer+0xc4>)
 8006366:	400a      	ands	r2, r1
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800636c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	f383 8810 	msr	PRIMASK, r3
}
 8006374:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006376:	f3ef 8310 	mrs	r3, PRIMASK
 800637a:	623b      	str	r3, [r7, #32]
  return(result);
 800637c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800637e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006380:	2301      	movs	r3, #1
 8006382:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	f383 8810 	msr	PRIMASK, r3
}
 800638a:	46c0      	nop			@ (mov r8, r8)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	491b      	ldr	r1, [pc, #108]	@ (8006404 <UART_EndRxTransfer+0xc8>)
 8006398:	400a      	ands	r2, r1
 800639a:	609a      	str	r2, [r3, #8]
 800639c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a2:	f383 8810 	msr	PRIMASK, r3
}
 80063a6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d118      	bne.n	80063e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063b0:	f3ef 8310 	mrs	r3, PRIMASK
 80063b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80063b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063ba:	2301      	movs	r3, #1
 80063bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f383 8810 	msr	PRIMASK, r3
}
 80063c4:	46c0      	nop			@ (mov r8, r8)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2110      	movs	r1, #16
 80063d2:	438a      	bics	r2, r1
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f383 8810 	msr	PRIMASK, r3
}
 80063e0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	228c      	movs	r2, #140	@ 0x8c
 80063e6:	2120      	movs	r1, #32
 80063e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80063f6:	46c0      	nop			@ (mov r8, r8)
 80063f8:	46bd      	mov	sp, r7
 80063fa:	b00e      	add	sp, #56	@ 0x38
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	46c0      	nop			@ (mov r8, r8)
 8006400:	fffffedf 	.word	0xfffffedf
 8006404:	effffffe 	.word	0xeffffffe

08006408 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2284      	movs	r2, #132	@ 0x84
 8006414:	5c9b      	ldrb	r3, [r3, r2]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_UARTEx_DisableFifoMode+0x16>
 800641a:	2302      	movs	r3, #2
 800641c:	e027      	b.n	800646e <HAL_UARTEx_DisableFifoMode+0x66>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2284      	movs	r2, #132	@ 0x84
 8006422:	2101      	movs	r1, #1
 8006424:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2288      	movs	r2, #136	@ 0x88
 800642a:	2124      	movs	r1, #36	@ 0x24
 800642c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2101      	movs	r1, #1
 8006442:	438a      	bics	r2, r1
 8006444:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4a0b      	ldr	r2, [pc, #44]	@ (8006478 <HAL_UARTEx_DisableFifoMode+0x70>)
 800644a:	4013      	ands	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2288      	movs	r2, #136	@ 0x88
 8006460:	2120      	movs	r1, #32
 8006462:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2284      	movs	r2, #132	@ 0x84
 8006468:	2100      	movs	r1, #0
 800646a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	0018      	movs	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	b004      	add	sp, #16
 8006474:	bd80      	pop	{r7, pc}
 8006476:	46c0      	nop			@ (mov r8, r8)
 8006478:	dfffffff 	.word	0xdfffffff

0800647c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2284      	movs	r2, #132	@ 0x84
 800648a:	5c9b      	ldrb	r3, [r3, r2]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006490:	2302      	movs	r3, #2
 8006492:	e02e      	b.n	80064f2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2284      	movs	r2, #132	@ 0x84
 8006498:	2101      	movs	r1, #1
 800649a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2288      	movs	r2, #136	@ 0x88
 80064a0:	2124      	movs	r1, #36	@ 0x24
 80064a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2101      	movs	r1, #1
 80064b8:	438a      	bics	r2, r1
 80064ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	08d9      	lsrs	r1, r3, #3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	0018      	movs	r0, r3
 80064d4:	f000 f854 	bl	8006580 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2288      	movs	r2, #136	@ 0x88
 80064e4:	2120      	movs	r1, #32
 80064e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2284      	movs	r2, #132	@ 0x84
 80064ec:	2100      	movs	r1, #0
 80064ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	0018      	movs	r0, r3
 80064f4:	46bd      	mov	sp, r7
 80064f6:	b004      	add	sp, #16
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2284      	movs	r2, #132	@ 0x84
 800650a:	5c9b      	ldrb	r3, [r3, r2]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006510:	2302      	movs	r3, #2
 8006512:	e02f      	b.n	8006574 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2284      	movs	r2, #132	@ 0x84
 8006518:	2101      	movs	r1, #1
 800651a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2288      	movs	r2, #136	@ 0x88
 8006520:	2124      	movs	r1, #36	@ 0x24
 8006522:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2101      	movs	r1, #1
 8006538:	438a      	bics	r2, r1
 800653a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	4a0e      	ldr	r2, [pc, #56]	@ (800657c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006544:	4013      	ands	r3, r2
 8006546:	0019      	movs	r1, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	0018      	movs	r0, r3
 8006556:	f000 f813 	bl	8006580 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2288      	movs	r2, #136	@ 0x88
 8006566:	2120      	movs	r1, #32
 8006568:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2284      	movs	r2, #132	@ 0x84
 800656e:	2100      	movs	r1, #0
 8006570:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	0018      	movs	r0, r3
 8006576:	46bd      	mov	sp, r7
 8006578:	b004      	add	sp, #16
 800657a:	bd80      	pop	{r7, pc}
 800657c:	f1ffffff 	.word	0xf1ffffff

08006580 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800658c:	2b00      	cmp	r3, #0
 800658e:	d108      	bne.n	80065a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	226a      	movs	r2, #106	@ 0x6a
 8006594:	2101      	movs	r1, #1
 8006596:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2268      	movs	r2, #104	@ 0x68
 800659c:	2101      	movs	r1, #1
 800659e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065a0:	e043      	b.n	800662a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065a2:	260f      	movs	r6, #15
 80065a4:	19bb      	adds	r3, r7, r6
 80065a6:	2208      	movs	r2, #8
 80065a8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065aa:	200e      	movs	r0, #14
 80065ac:	183b      	adds	r3, r7, r0
 80065ae:	2208      	movs	r2, #8
 80065b0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	0e5b      	lsrs	r3, r3, #25
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	240d      	movs	r4, #13
 80065be:	193b      	adds	r3, r7, r4
 80065c0:	2107      	movs	r1, #7
 80065c2:	400a      	ands	r2, r1
 80065c4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	0f5b      	lsrs	r3, r3, #29
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	250c      	movs	r5, #12
 80065d2:	197b      	adds	r3, r7, r5
 80065d4:	2107      	movs	r1, #7
 80065d6:	400a      	ands	r2, r1
 80065d8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065da:	183b      	adds	r3, r7, r0
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	197a      	adds	r2, r7, r5
 80065e0:	7812      	ldrb	r2, [r2, #0]
 80065e2:	4914      	ldr	r1, [pc, #80]	@ (8006634 <UARTEx_SetNbDataToProcess+0xb4>)
 80065e4:	5c8a      	ldrb	r2, [r1, r2]
 80065e6:	435a      	muls	r2, r3
 80065e8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80065ea:	197b      	adds	r3, r7, r5
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	4a12      	ldr	r2, [pc, #72]	@ (8006638 <UARTEx_SetNbDataToProcess+0xb8>)
 80065f0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065f2:	0019      	movs	r1, r3
 80065f4:	f7f9 fe10 	bl	8000218 <__divsi3>
 80065f8:	0003      	movs	r3, r0
 80065fa:	b299      	uxth	r1, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	226a      	movs	r2, #106	@ 0x6a
 8006600:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006602:	19bb      	adds	r3, r7, r6
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	193a      	adds	r2, r7, r4
 8006608:	7812      	ldrb	r2, [r2, #0]
 800660a:	490a      	ldr	r1, [pc, #40]	@ (8006634 <UARTEx_SetNbDataToProcess+0xb4>)
 800660c:	5c8a      	ldrb	r2, [r1, r2]
 800660e:	435a      	muls	r2, r3
 8006610:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006612:	193b      	adds	r3, r7, r4
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	4a08      	ldr	r2, [pc, #32]	@ (8006638 <UARTEx_SetNbDataToProcess+0xb8>)
 8006618:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800661a:	0019      	movs	r1, r3
 800661c:	f7f9 fdfc 	bl	8000218 <__divsi3>
 8006620:	0003      	movs	r3, r0
 8006622:	b299      	uxth	r1, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2268      	movs	r2, #104	@ 0x68
 8006628:	5299      	strh	r1, [r3, r2]
}
 800662a:	46c0      	nop			@ (mov r8, r8)
 800662c:	46bd      	mov	sp, r7
 800662e:	b005      	add	sp, #20
 8006630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006632:	46c0      	nop			@ (mov r8, r8)
 8006634:	08006b14 	.word	0x08006b14
 8006638:	08006b1c 	.word	0x08006b1c

0800663c <memset>:
 800663c:	0003      	movs	r3, r0
 800663e:	1882      	adds	r2, r0, r2
 8006640:	4293      	cmp	r3, r2
 8006642:	d100      	bne.n	8006646 <memset+0xa>
 8006644:	4770      	bx	lr
 8006646:	7019      	strb	r1, [r3, #0]
 8006648:	3301      	adds	r3, #1
 800664a:	e7f9      	b.n	8006640 <memset+0x4>

0800664c <__libc_init_array>:
 800664c:	b570      	push	{r4, r5, r6, lr}
 800664e:	2600      	movs	r6, #0
 8006650:	4c0c      	ldr	r4, [pc, #48]	@ (8006684 <__libc_init_array+0x38>)
 8006652:	4d0d      	ldr	r5, [pc, #52]	@ (8006688 <__libc_init_array+0x3c>)
 8006654:	1b64      	subs	r4, r4, r5
 8006656:	10a4      	asrs	r4, r4, #2
 8006658:	42a6      	cmp	r6, r4
 800665a:	d109      	bne.n	8006670 <__libc_init_array+0x24>
 800665c:	2600      	movs	r6, #0
 800665e:	f000 f9cf 	bl	8006a00 <_init>
 8006662:	4c0a      	ldr	r4, [pc, #40]	@ (800668c <__libc_init_array+0x40>)
 8006664:	4d0a      	ldr	r5, [pc, #40]	@ (8006690 <__libc_init_array+0x44>)
 8006666:	1b64      	subs	r4, r4, r5
 8006668:	10a4      	asrs	r4, r4, #2
 800666a:	42a6      	cmp	r6, r4
 800666c:	d105      	bne.n	800667a <__libc_init_array+0x2e>
 800666e:	bd70      	pop	{r4, r5, r6, pc}
 8006670:	00b3      	lsls	r3, r6, #2
 8006672:	58eb      	ldr	r3, [r5, r3]
 8006674:	4798      	blx	r3
 8006676:	3601      	adds	r6, #1
 8006678:	e7ee      	b.n	8006658 <__libc_init_array+0xc>
 800667a:	00b3      	lsls	r3, r6, #2
 800667c:	58eb      	ldr	r3, [r5, r3]
 800667e:	4798      	blx	r3
 8006680:	3601      	adds	r6, #1
 8006682:	e7f2      	b.n	800666a <__libc_init_array+0x1e>
 8006684:	08006b64 	.word	0x08006b64
 8006688:	08006b64 	.word	0x08006b64
 800668c:	08006b68 	.word	0x08006b68
 8006690:	08006b64 	.word	0x08006b64

08006694 <atan2f>:
 8006694:	b510      	push	{r4, lr}
 8006696:	f000 f825 	bl	80066e4 <__ieee754_atan2f>
 800669a:	bd10      	pop	{r4, pc}

0800669c <roundf>:
 800669c:	0dc3      	lsrs	r3, r0, #23
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	3b7f      	subs	r3, #127	@ 0x7f
 80066a2:	0002      	movs	r2, r0
 80066a4:	b510      	push	{r4, lr}
 80066a6:	2b16      	cmp	r3, #22
 80066a8:	dc13      	bgt.n	80066d2 <roundf+0x36>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	da07      	bge.n	80066be <roundf+0x22>
 80066ae:	0fc2      	lsrs	r2, r0, #31
 80066b0:	07d0      	lsls	r0, r2, #31
 80066b2:	3301      	adds	r3, #1
 80066b4:	d102      	bne.n	80066bc <roundf+0x20>
 80066b6:	23fe      	movs	r3, #254	@ 0xfe
 80066b8:	059b      	lsls	r3, r3, #22
 80066ba:	4318      	orrs	r0, r3
 80066bc:	bd10      	pop	{r4, pc}
 80066be:	4908      	ldr	r1, [pc, #32]	@ (80066e0 <roundf+0x44>)
 80066c0:	4119      	asrs	r1, r3
 80066c2:	4208      	tst	r0, r1
 80066c4:	d0fa      	beq.n	80066bc <roundf+0x20>
 80066c6:	2080      	movs	r0, #128	@ 0x80
 80066c8:	03c0      	lsls	r0, r0, #15
 80066ca:	4118      	asrs	r0, r3
 80066cc:	1880      	adds	r0, r0, r2
 80066ce:	4388      	bics	r0, r1
 80066d0:	e7f4      	b.n	80066bc <roundf+0x20>
 80066d2:	2b80      	cmp	r3, #128	@ 0x80
 80066d4:	d1f2      	bne.n	80066bc <roundf+0x20>
 80066d6:	1c01      	adds	r1, r0, #0
 80066d8:	f7f9 ffb0 	bl	800063c <__aeabi_fadd>
 80066dc:	e7ee      	b.n	80066bc <roundf+0x20>
 80066de:	46c0      	nop			@ (mov r8, r8)
 80066e0:	007fffff 	.word	0x007fffff

080066e4 <__ieee754_atan2f>:
 80066e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066e6:	25ff      	movs	r5, #255	@ 0xff
 80066e8:	004a      	lsls	r2, r1, #1
 80066ea:	9101      	str	r1, [sp, #4]
 80066ec:	0852      	lsrs	r2, r2, #1
 80066ee:	05ed      	lsls	r5, r5, #23
 80066f0:	42aa      	cmp	r2, r5
 80066f2:	d804      	bhi.n	80066fe <__ieee754_atan2f+0x1a>
 80066f4:	0043      	lsls	r3, r0, #1
 80066f6:	0007      	movs	r7, r0
 80066f8:	085b      	lsrs	r3, r3, #1
 80066fa:	42ab      	cmp	r3, r5
 80066fc:	d902      	bls.n	8006704 <__ieee754_atan2f+0x20>
 80066fe:	f7f9 ff9d 	bl	800063c <__aeabi_fadd>
 8006702:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006704:	24fe      	movs	r4, #254	@ 0xfe
 8006706:	05a4      	lsls	r4, r4, #22
 8006708:	42a1      	cmp	r1, r4
 800670a:	d102      	bne.n	8006712 <__ieee754_atan2f+0x2e>
 800670c:	f000 f864 	bl	80067d8 <atanf>
 8006710:	e7f7      	b.n	8006702 <__ieee754_atan2f+0x1e>
 8006712:	2602      	movs	r6, #2
 8006714:	178c      	asrs	r4, r1, #30
 8006716:	4034      	ands	r4, r6
 8006718:	0fc6      	lsrs	r6, r0, #31
 800671a:	4334      	orrs	r4, r6
 800671c:	2b00      	cmp	r3, #0
 800671e:	d105      	bne.n	800672c <__ieee754_atan2f+0x48>
 8006720:	2c02      	cmp	r4, #2
 8006722:	d045      	beq.n	80067b0 <__ieee754_atan2f+0xcc>
 8006724:	2c03      	cmp	r4, #3
 8006726:	d1ec      	bne.n	8006702 <__ieee754_atan2f+0x1e>
 8006728:	4823      	ldr	r0, [pc, #140]	@ (80067b8 <__ieee754_atan2f+0xd4>)
 800672a:	e7ea      	b.n	8006702 <__ieee754_atan2f+0x1e>
 800672c:	2a00      	cmp	r2, #0
 800672e:	d103      	bne.n	8006738 <__ieee754_atan2f+0x54>
 8006730:	2f00      	cmp	r7, #0
 8006732:	db3f      	blt.n	80067b4 <__ieee754_atan2f+0xd0>
 8006734:	4821      	ldr	r0, [pc, #132]	@ (80067bc <__ieee754_atan2f+0xd8>)
 8006736:	e7e4      	b.n	8006702 <__ieee754_atan2f+0x1e>
 8006738:	42aa      	cmp	r2, r5
 800673a:	d10e      	bne.n	800675a <__ieee754_atan2f+0x76>
 800673c:	3c01      	subs	r4, #1
 800673e:	4293      	cmp	r3, r2
 8006740:	d104      	bne.n	800674c <__ieee754_atan2f+0x68>
 8006742:	4b1f      	ldr	r3, [pc, #124]	@ (80067c0 <__ieee754_atan2f+0xdc>)
 8006744:	2c02      	cmp	r4, #2
 8006746:	d905      	bls.n	8006754 <__ieee754_atan2f+0x70>
 8006748:	481e      	ldr	r0, [pc, #120]	@ (80067c4 <__ieee754_atan2f+0xe0>)
 800674a:	e7da      	b.n	8006702 <__ieee754_atan2f+0x1e>
 800674c:	2000      	movs	r0, #0
 800674e:	2c02      	cmp	r4, #2
 8006750:	d8d7      	bhi.n	8006702 <__ieee754_atan2f+0x1e>
 8006752:	4b1d      	ldr	r3, [pc, #116]	@ (80067c8 <__ieee754_atan2f+0xe4>)
 8006754:	00a4      	lsls	r4, r4, #2
 8006756:	58e0      	ldr	r0, [r4, r3]
 8006758:	e7d3      	b.n	8006702 <__ieee754_atan2f+0x1e>
 800675a:	42ab      	cmp	r3, r5
 800675c:	d0e8      	beq.n	8006730 <__ieee754_atan2f+0x4c>
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	15db      	asrs	r3, r3, #23
 8006762:	2b3c      	cmp	r3, #60	@ 0x3c
 8006764:	dc14      	bgt.n	8006790 <__ieee754_atan2f+0xac>
 8006766:	2900      	cmp	r1, #0
 8006768:	da01      	bge.n	800676e <__ieee754_atan2f+0x8a>
 800676a:	333c      	adds	r3, #60	@ 0x3c
 800676c:	db12      	blt.n	8006794 <__ieee754_atan2f+0xb0>
 800676e:	f7fa f957 	bl	8000a20 <__aeabi_fdiv>
 8006772:	f000 f941 	bl	80069f8 <fabsf>
 8006776:	f000 f82f 	bl	80067d8 <atanf>
 800677a:	2c01      	cmp	r4, #1
 800677c:	d00c      	beq.n	8006798 <__ieee754_atan2f+0xb4>
 800677e:	2c02      	cmp	r4, #2
 8006780:	d00e      	beq.n	80067a0 <__ieee754_atan2f+0xbc>
 8006782:	2c00      	cmp	r4, #0
 8006784:	d0bd      	beq.n	8006702 <__ieee754_atan2f+0x1e>
 8006786:	4911      	ldr	r1, [pc, #68]	@ (80067cc <__ieee754_atan2f+0xe8>)
 8006788:	f7f9 ff58 	bl	800063c <__aeabi_fadd>
 800678c:	4910      	ldr	r1, [pc, #64]	@ (80067d0 <__ieee754_atan2f+0xec>)
 800678e:	e00c      	b.n	80067aa <__ieee754_atan2f+0xc6>
 8006790:	480a      	ldr	r0, [pc, #40]	@ (80067bc <__ieee754_atan2f+0xd8>)
 8006792:	e7f2      	b.n	800677a <__ieee754_atan2f+0x96>
 8006794:	2000      	movs	r0, #0
 8006796:	e7f0      	b.n	800677a <__ieee754_atan2f+0x96>
 8006798:	2380      	movs	r3, #128	@ 0x80
 800679a:	061b      	lsls	r3, r3, #24
 800679c:	18c0      	adds	r0, r0, r3
 800679e:	e7b0      	b.n	8006702 <__ieee754_atan2f+0x1e>
 80067a0:	490a      	ldr	r1, [pc, #40]	@ (80067cc <__ieee754_atan2f+0xe8>)
 80067a2:	f7f9 ff4b 	bl	800063c <__aeabi_fadd>
 80067a6:	1c01      	adds	r1, r0, #0
 80067a8:	4809      	ldr	r0, [pc, #36]	@ (80067d0 <__ieee754_atan2f+0xec>)
 80067aa:	f7fa fc61 	bl	8001070 <__aeabi_fsub>
 80067ae:	e7a8      	b.n	8006702 <__ieee754_atan2f+0x1e>
 80067b0:	4807      	ldr	r0, [pc, #28]	@ (80067d0 <__ieee754_atan2f+0xec>)
 80067b2:	e7a6      	b.n	8006702 <__ieee754_atan2f+0x1e>
 80067b4:	4807      	ldr	r0, [pc, #28]	@ (80067d4 <__ieee754_atan2f+0xf0>)
 80067b6:	e7a4      	b.n	8006702 <__ieee754_atan2f+0x1e>
 80067b8:	c0490fdb 	.word	0xc0490fdb
 80067bc:	3fc90fdb 	.word	0x3fc90fdb
 80067c0:	08006b30 	.word	0x08006b30
 80067c4:	3f490fdb 	.word	0x3f490fdb
 80067c8:	08006b24 	.word	0x08006b24
 80067cc:	33bbbd2e 	.word	0x33bbbd2e
 80067d0:	40490fdb 	.word	0x40490fdb
 80067d4:	bfc90fdb 	.word	0xbfc90fdb

080067d8 <atanf>:
 80067d8:	23a1      	movs	r3, #161	@ 0xa1
 80067da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067dc:	0045      	lsls	r5, r0, #1
 80067de:	1c04      	adds	r4, r0, #0
 80067e0:	9001      	str	r0, [sp, #4]
 80067e2:	086d      	lsrs	r5, r5, #1
 80067e4:	05db      	lsls	r3, r3, #23
 80067e6:	429d      	cmp	r5, r3
 80067e8:	d30f      	bcc.n	800680a <atanf+0x32>
 80067ea:	23ff      	movs	r3, #255	@ 0xff
 80067ec:	05db      	lsls	r3, r3, #23
 80067ee:	429d      	cmp	r5, r3
 80067f0:	d904      	bls.n	80067fc <atanf+0x24>
 80067f2:	1c01      	adds	r1, r0, #0
 80067f4:	f7f9 ff22 	bl	800063c <__aeabi_fadd>
 80067f8:	1c04      	adds	r4, r0, #0
 80067fa:	e004      	b.n	8006806 <atanf+0x2e>
 80067fc:	9b01      	ldr	r3, [sp, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	dc00      	bgt.n	8006804 <atanf+0x2c>
 8006802:	e0cc      	b.n	800699e <atanf+0x1c6>
 8006804:	4c67      	ldr	r4, [pc, #412]	@ (80069a4 <atanf+0x1cc>)
 8006806:	1c20      	adds	r0, r4, #0
 8006808:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800680a:	4b67      	ldr	r3, [pc, #412]	@ (80069a8 <atanf+0x1d0>)
 800680c:	429d      	cmp	r5, r3
 800680e:	d80f      	bhi.n	8006830 <atanf+0x58>
 8006810:	23c4      	movs	r3, #196	@ 0xc4
 8006812:	059b      	lsls	r3, r3, #22
 8006814:	429d      	cmp	r5, r3
 8006816:	d208      	bcs.n	800682a <atanf+0x52>
 8006818:	4964      	ldr	r1, [pc, #400]	@ (80069ac <atanf+0x1d4>)
 800681a:	f7f9 ff0f 	bl	800063c <__aeabi_fadd>
 800681e:	21fe      	movs	r1, #254	@ 0xfe
 8006820:	0589      	lsls	r1, r1, #22
 8006822:	f7f9 fe0b 	bl	800043c <__aeabi_fcmpgt>
 8006826:	2800      	cmp	r0, #0
 8006828:	d1ed      	bne.n	8006806 <atanf+0x2e>
 800682a:	2601      	movs	r6, #1
 800682c:	4276      	negs	r6, r6
 800682e:	e01b      	b.n	8006868 <atanf+0x90>
 8006830:	f000 f8e2 	bl	80069f8 <fabsf>
 8006834:	4b5e      	ldr	r3, [pc, #376]	@ (80069b0 <atanf+0x1d8>)
 8006836:	1c04      	adds	r4, r0, #0
 8006838:	429d      	cmp	r5, r3
 800683a:	d87b      	bhi.n	8006934 <atanf+0x15c>
 800683c:	4b5d      	ldr	r3, [pc, #372]	@ (80069b4 <atanf+0x1dc>)
 800683e:	429d      	cmp	r5, r3
 8006840:	d867      	bhi.n	8006912 <atanf+0x13a>
 8006842:	1c01      	adds	r1, r0, #0
 8006844:	f7f9 fefa 	bl	800063c <__aeabi_fadd>
 8006848:	21fe      	movs	r1, #254	@ 0xfe
 800684a:	0589      	lsls	r1, r1, #22
 800684c:	f7fa fc10 	bl	8001070 <__aeabi_fsub>
 8006850:	2180      	movs	r1, #128	@ 0x80
 8006852:	1c05      	adds	r5, r0, #0
 8006854:	05c9      	lsls	r1, r1, #23
 8006856:	1c20      	adds	r0, r4, #0
 8006858:	f7f9 fef0 	bl	800063c <__aeabi_fadd>
 800685c:	1c01      	adds	r1, r0, #0
 800685e:	1c28      	adds	r0, r5, #0
 8006860:	f7fa f8de 	bl	8000a20 <__aeabi_fdiv>
 8006864:	2600      	movs	r6, #0
 8006866:	1c04      	adds	r4, r0, #0
 8006868:	1c21      	adds	r1, r4, #0
 800686a:	1c20      	adds	r0, r4, #0
 800686c:	f7fa faa6 	bl	8000dbc <__aeabi_fmul>
 8006870:	1c01      	adds	r1, r0, #0
 8006872:	1c07      	adds	r7, r0, #0
 8006874:	f7fa faa2 	bl	8000dbc <__aeabi_fmul>
 8006878:	494f      	ldr	r1, [pc, #316]	@ (80069b8 <atanf+0x1e0>)
 800687a:	1c05      	adds	r5, r0, #0
 800687c:	f7fa fa9e 	bl	8000dbc <__aeabi_fmul>
 8006880:	494e      	ldr	r1, [pc, #312]	@ (80069bc <atanf+0x1e4>)
 8006882:	f7f9 fedb 	bl	800063c <__aeabi_fadd>
 8006886:	1c29      	adds	r1, r5, #0
 8006888:	f7fa fa98 	bl	8000dbc <__aeabi_fmul>
 800688c:	494c      	ldr	r1, [pc, #304]	@ (80069c0 <atanf+0x1e8>)
 800688e:	f7f9 fed5 	bl	800063c <__aeabi_fadd>
 8006892:	1c29      	adds	r1, r5, #0
 8006894:	f7fa fa92 	bl	8000dbc <__aeabi_fmul>
 8006898:	494a      	ldr	r1, [pc, #296]	@ (80069c4 <atanf+0x1ec>)
 800689a:	f7f9 fecf 	bl	800063c <__aeabi_fadd>
 800689e:	1c29      	adds	r1, r5, #0
 80068a0:	f7fa fa8c 	bl	8000dbc <__aeabi_fmul>
 80068a4:	4948      	ldr	r1, [pc, #288]	@ (80069c8 <atanf+0x1f0>)
 80068a6:	f7f9 fec9 	bl	800063c <__aeabi_fadd>
 80068aa:	1c29      	adds	r1, r5, #0
 80068ac:	f7fa fa86 	bl	8000dbc <__aeabi_fmul>
 80068b0:	4946      	ldr	r1, [pc, #280]	@ (80069cc <atanf+0x1f4>)
 80068b2:	f7f9 fec3 	bl	800063c <__aeabi_fadd>
 80068b6:	1c39      	adds	r1, r7, #0
 80068b8:	f7fa fa80 	bl	8000dbc <__aeabi_fmul>
 80068bc:	4944      	ldr	r1, [pc, #272]	@ (80069d0 <atanf+0x1f8>)
 80068be:	1c07      	adds	r7, r0, #0
 80068c0:	1c28      	adds	r0, r5, #0
 80068c2:	f7fa fa7b 	bl	8000dbc <__aeabi_fmul>
 80068c6:	4943      	ldr	r1, [pc, #268]	@ (80069d4 <atanf+0x1fc>)
 80068c8:	f7fa fbd2 	bl	8001070 <__aeabi_fsub>
 80068cc:	1c29      	adds	r1, r5, #0
 80068ce:	f7fa fa75 	bl	8000dbc <__aeabi_fmul>
 80068d2:	4941      	ldr	r1, [pc, #260]	@ (80069d8 <atanf+0x200>)
 80068d4:	f7fa fbcc 	bl	8001070 <__aeabi_fsub>
 80068d8:	1c29      	adds	r1, r5, #0
 80068da:	f7fa fa6f 	bl	8000dbc <__aeabi_fmul>
 80068de:	493f      	ldr	r1, [pc, #252]	@ (80069dc <atanf+0x204>)
 80068e0:	f7fa fbc6 	bl	8001070 <__aeabi_fsub>
 80068e4:	1c29      	adds	r1, r5, #0
 80068e6:	f7fa fa69 	bl	8000dbc <__aeabi_fmul>
 80068ea:	493d      	ldr	r1, [pc, #244]	@ (80069e0 <atanf+0x208>)
 80068ec:	f7fa fbc0 	bl	8001070 <__aeabi_fsub>
 80068f0:	1c29      	adds	r1, r5, #0
 80068f2:	f7fa fa63 	bl	8000dbc <__aeabi_fmul>
 80068f6:	1c01      	adds	r1, r0, #0
 80068f8:	1c38      	adds	r0, r7, #0
 80068fa:	f7f9 fe9f 	bl	800063c <__aeabi_fadd>
 80068fe:	1c21      	adds	r1, r4, #0
 8006900:	f7fa fa5c 	bl	8000dbc <__aeabi_fmul>
 8006904:	1c73      	adds	r3, r6, #1
 8006906:	d134      	bne.n	8006972 <atanf+0x19a>
 8006908:	1c01      	adds	r1, r0, #0
 800690a:	1c20      	adds	r0, r4, #0
 800690c:	f7fa fbb0 	bl	8001070 <__aeabi_fsub>
 8006910:	e772      	b.n	80067f8 <atanf+0x20>
 8006912:	21fe      	movs	r1, #254	@ 0xfe
 8006914:	0589      	lsls	r1, r1, #22
 8006916:	f7fa fbab 	bl	8001070 <__aeabi_fsub>
 800691a:	21fe      	movs	r1, #254	@ 0xfe
 800691c:	1c05      	adds	r5, r0, #0
 800691e:	0589      	lsls	r1, r1, #22
 8006920:	1c20      	adds	r0, r4, #0
 8006922:	f7f9 fe8b 	bl	800063c <__aeabi_fadd>
 8006926:	1c01      	adds	r1, r0, #0
 8006928:	1c28      	adds	r0, r5, #0
 800692a:	f7fa f879 	bl	8000a20 <__aeabi_fdiv>
 800692e:	2601      	movs	r6, #1
 8006930:	1c04      	adds	r4, r0, #0
 8006932:	e799      	b.n	8006868 <atanf+0x90>
 8006934:	4b2b      	ldr	r3, [pc, #172]	@ (80069e4 <atanf+0x20c>)
 8006936:	429d      	cmp	r5, r3
 8006938:	d814      	bhi.n	8006964 <atanf+0x18c>
 800693a:	21ff      	movs	r1, #255	@ 0xff
 800693c:	0589      	lsls	r1, r1, #22
 800693e:	f7fa fb97 	bl	8001070 <__aeabi_fsub>
 8006942:	21ff      	movs	r1, #255	@ 0xff
 8006944:	1c05      	adds	r5, r0, #0
 8006946:	0589      	lsls	r1, r1, #22
 8006948:	1c20      	adds	r0, r4, #0
 800694a:	f7fa fa37 	bl	8000dbc <__aeabi_fmul>
 800694e:	21fe      	movs	r1, #254	@ 0xfe
 8006950:	0589      	lsls	r1, r1, #22
 8006952:	f7f9 fe73 	bl	800063c <__aeabi_fadd>
 8006956:	1c01      	adds	r1, r0, #0
 8006958:	1c28      	adds	r0, r5, #0
 800695a:	f7fa f861 	bl	8000a20 <__aeabi_fdiv>
 800695e:	2602      	movs	r6, #2
 8006960:	1c04      	adds	r4, r0, #0
 8006962:	e781      	b.n	8006868 <atanf+0x90>
 8006964:	1c01      	adds	r1, r0, #0
 8006966:	4820      	ldr	r0, [pc, #128]	@ (80069e8 <atanf+0x210>)
 8006968:	f7fa f85a 	bl	8000a20 <__aeabi_fdiv>
 800696c:	2603      	movs	r6, #3
 800696e:	1c04      	adds	r4, r0, #0
 8006970:	e77a      	b.n	8006868 <atanf+0x90>
 8006972:	4b1e      	ldr	r3, [pc, #120]	@ (80069ec <atanf+0x214>)
 8006974:	00b6      	lsls	r6, r6, #2
 8006976:	58f1      	ldr	r1, [r6, r3]
 8006978:	f7fa fb7a 	bl	8001070 <__aeabi_fsub>
 800697c:	1c21      	adds	r1, r4, #0
 800697e:	f7fa fb77 	bl	8001070 <__aeabi_fsub>
 8006982:	4d1b      	ldr	r5, [pc, #108]	@ (80069f0 <atanf+0x218>)
 8006984:	1c01      	adds	r1, r0, #0
 8006986:	5970      	ldr	r0, [r6, r5]
 8006988:	f7fa fb72 	bl	8001070 <__aeabi_fsub>
 800698c:	9b01      	ldr	r3, [sp, #4]
 800698e:	1c04      	adds	r4, r0, #0
 8006990:	2b00      	cmp	r3, #0
 8006992:	db00      	blt.n	8006996 <atanf+0x1be>
 8006994:	e737      	b.n	8006806 <atanf+0x2e>
 8006996:	2380      	movs	r3, #128	@ 0x80
 8006998:	061b      	lsls	r3, r3, #24
 800699a:	18c4      	adds	r4, r0, r3
 800699c:	e733      	b.n	8006806 <atanf+0x2e>
 800699e:	4c15      	ldr	r4, [pc, #84]	@ (80069f4 <atanf+0x21c>)
 80069a0:	e731      	b.n	8006806 <atanf+0x2e>
 80069a2:	46c0      	nop			@ (mov r8, r8)
 80069a4:	3fc90fdb 	.word	0x3fc90fdb
 80069a8:	3edfffff 	.word	0x3edfffff
 80069ac:	7149f2ca 	.word	0x7149f2ca
 80069b0:	3f97ffff 	.word	0x3f97ffff
 80069b4:	3f2fffff 	.word	0x3f2fffff
 80069b8:	3c8569d7 	.word	0x3c8569d7
 80069bc:	3d4bda59 	.word	0x3d4bda59
 80069c0:	3d886b35 	.word	0x3d886b35
 80069c4:	3dba2e6e 	.word	0x3dba2e6e
 80069c8:	3e124925 	.word	0x3e124925
 80069cc:	3eaaaaab 	.word	0x3eaaaaab
 80069d0:	bd15a221 	.word	0xbd15a221
 80069d4:	3d6ef16b 	.word	0x3d6ef16b
 80069d8:	3d9d8795 	.word	0x3d9d8795
 80069dc:	3de38e38 	.word	0x3de38e38
 80069e0:	3e4ccccd 	.word	0x3e4ccccd
 80069e4:	401bffff 	.word	0x401bffff
 80069e8:	bf800000 	.word	0xbf800000
 80069ec:	08006b3c 	.word	0x08006b3c
 80069f0:	08006b4c 	.word	0x08006b4c
 80069f4:	bfc90fdb 	.word	0xbfc90fdb

080069f8 <fabsf>:
 80069f8:	0040      	lsls	r0, r0, #1
 80069fa:	0840      	lsrs	r0, r0, #1
 80069fc:	4770      	bx	lr
	...

08006a00 <_init>:
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	46c0      	nop			@ (mov r8, r8)
 8006a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a06:	bc08      	pop	{r3}
 8006a08:	469e      	mov	lr, r3
 8006a0a:	4770      	bx	lr

08006a0c <_fini>:
 8006a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0e:	46c0      	nop			@ (mov r8, r8)
 8006a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a12:	bc08      	pop	{r3}
 8006a14:	469e      	mov	lr, r3
 8006a16:	4770      	bx	lr
