
sensorange encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006214  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080062d0  080062d0  000072d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800640c  0800640c  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800640c  0800640c  0000740c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006414  08006414  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006414  08006414  00007414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006418  08006418  00007418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800641c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000000c  08006428  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08006428  00008264  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014256  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae7  00000000  00000000  0001c28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  0001ed78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e20  00000000  00000000  0001ff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003117  00000000  00000000  00020da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001556a  00000000  00000000  00023eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad11b  00000000  00000000  00039421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e653c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004458  00000000  00000000  000e6580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000ea9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080062b8 	.word	0x080062b8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080062b8 	.word	0x080062b8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0008      	movs	r0, r1
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 fc97 	bl	8000d2c <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 fc1f 	bl	8000c4c <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fc89 	bl	8000d2c <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fc7f 	bl	8000d2c <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fc2d 	bl	8000c9c <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fc23 	bl	8000c9c <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_uldivmod>:
 8000464:	2b00      	cmp	r3, #0
 8000466:	d111      	bne.n	800048c <__aeabi_uldivmod+0x28>
 8000468:	2a00      	cmp	r2, #0
 800046a:	d10f      	bne.n	800048c <__aeabi_uldivmod+0x28>
 800046c:	2900      	cmp	r1, #0
 800046e:	d100      	bne.n	8000472 <__aeabi_uldivmod+0xe>
 8000470:	2800      	cmp	r0, #0
 8000472:	d002      	beq.n	800047a <__aeabi_uldivmod+0x16>
 8000474:	2100      	movs	r1, #0
 8000476:	43c9      	mvns	r1, r1
 8000478:	0008      	movs	r0, r1
 800047a:	b407      	push	{r0, r1, r2}
 800047c:	4802      	ldr	r0, [pc, #8]	@ (8000488 <__aeabi_uldivmod+0x24>)
 800047e:	a102      	add	r1, pc, #8	@ (adr r1, 8000488 <__aeabi_uldivmod+0x24>)
 8000480:	1840      	adds	r0, r0, r1
 8000482:	9002      	str	r0, [sp, #8]
 8000484:	bd03      	pop	{r0, r1, pc}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	ffffff65 	.word	0xffffff65
 800048c:	b403      	push	{r0, r1}
 800048e:	4668      	mov	r0, sp
 8000490:	b501      	push	{r0, lr}
 8000492:	9802      	ldr	r0, [sp, #8]
 8000494:	f000 f806 	bl	80004a4 <__udivmoddi4>
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	469e      	mov	lr, r3
 800049c:	b002      	add	sp, #8
 800049e:	bc0c      	pop	{r2, r3}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f001 f8c6 	bl	8001654 <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f001 f8c1 	bl	8001654 <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	d434      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004da:	469b      	mov	fp, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	465a      	mov	r2, fp
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83b      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e079      	b.n	80005ea <__udivmoddi4+0x146>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e076      	b.n	80005f0 <__udivmoddi4+0x14c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e029      	b.n	8000570 <__udivmoddi4+0xcc>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	469b      	mov	fp, r3
 8000548:	2320      	movs	r3, #32
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	4652      	mov	r2, sl
 800054e:	40da      	lsrs	r2, r3
 8000550:	4641      	mov	r1, r8
 8000552:	0013      	movs	r3, r2
 8000554:	464a      	mov	r2, r9
 8000556:	408a      	lsls	r2, r1
 8000558:	0017      	movs	r7, r2
 800055a:	4642      	mov	r2, r8
 800055c:	431f      	orrs	r7, r3
 800055e:	4653      	mov	r3, sl
 8000560:	4093      	lsls	r3, r2
 8000562:	001e      	movs	r6, r3
 8000564:	42af      	cmp	r7, r5
 8000566:	d9c3      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000568:	2200      	movs	r2, #0
 800056a:	2300      	movs	r3, #0
 800056c:	9200      	str	r2, [sp, #0]
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	4643      	mov	r3, r8
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0d8      	beq.n	8000528 <__udivmoddi4+0x84>
 8000576:	07fb      	lsls	r3, r7, #31
 8000578:	0872      	lsrs	r2, r6, #1
 800057a:	431a      	orrs	r2, r3
 800057c:	4646      	mov	r6, r8
 800057e:	087b      	lsrs	r3, r7, #1
 8000580:	e00e      	b.n	80005a0 <__udivmoddi4+0xfc>
 8000582:	42ab      	cmp	r3, r5
 8000584:	d101      	bne.n	800058a <__udivmoddi4+0xe6>
 8000586:	42a2      	cmp	r2, r4
 8000588:	d80c      	bhi.n	80005a4 <__udivmoddi4+0x100>
 800058a:	1aa4      	subs	r4, r4, r2
 800058c:	419d      	sbcs	r5, r3
 800058e:	2001      	movs	r0, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2100      	movs	r1, #0
 8000596:	3e01      	subs	r6, #1
 8000598:	1824      	adds	r4, r4, r0
 800059a:	414d      	adcs	r5, r1
 800059c:	2e00      	cmp	r6, #0
 800059e:	d006      	beq.n	80005ae <__udivmoddi4+0x10a>
 80005a0:	42ab      	cmp	r3, r5
 80005a2:	d9ee      	bls.n	8000582 <__udivmoddi4+0xde>
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1924      	adds	r4, r4, r4
 80005a8:	416d      	adcs	r5, r5
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d1f8      	bne.n	80005a0 <__udivmoddi4+0xfc>
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	465b      	mov	r3, fp
 80005b4:	1900      	adds	r0, r0, r4
 80005b6:	4169      	adcs	r1, r5
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db24      	blt.n	8000606 <__udivmoddi4+0x162>
 80005bc:	002b      	movs	r3, r5
 80005be:	465a      	mov	r2, fp
 80005c0:	4644      	mov	r4, r8
 80005c2:	40d3      	lsrs	r3, r2
 80005c4:	002a      	movs	r2, r5
 80005c6:	40e2      	lsrs	r2, r4
 80005c8:	001c      	movs	r4, r3
 80005ca:	465b      	mov	r3, fp
 80005cc:	0015      	movs	r5, r2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db2a      	blt.n	8000628 <__udivmoddi4+0x184>
 80005d2:	0026      	movs	r6, r4
 80005d4:	409e      	lsls	r6, r3
 80005d6:	0033      	movs	r3, r6
 80005d8:	0026      	movs	r6, r4
 80005da:	4647      	mov	r7, r8
 80005dc:	40be      	lsls	r6, r7
 80005de:	0032      	movs	r2, r6
 80005e0:	1a80      	subs	r0, r0, r2
 80005e2:	4199      	sbcs	r1, r3
 80005e4:	9000      	str	r0, [sp, #0]
 80005e6:	9101      	str	r1, [sp, #4]
 80005e8:	e79e      	b.n	8000528 <__udivmoddi4+0x84>
 80005ea:	42a3      	cmp	r3, r4
 80005ec:	d8bc      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80005ee:	e782      	b.n	80004f6 <__udivmoddi4+0x52>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	9100      	str	r1, [sp, #0]
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	2201      	movs	r2, #1
 8000600:	40da      	lsrs	r2, r3
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	e785      	b.n	8000512 <__udivmoddi4+0x6e>
 8000606:	4642      	mov	r2, r8
 8000608:	2320      	movs	r3, #32
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4646      	mov	r6, r8
 8000610:	409a      	lsls	r2, r3
 8000612:	0023      	movs	r3, r4
 8000614:	40f3      	lsrs	r3, r6
 8000616:	4644      	mov	r4, r8
 8000618:	4313      	orrs	r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	40e2      	lsrs	r2, r4
 800061e:	001c      	movs	r4, r3
 8000620:	465b      	mov	r3, fp
 8000622:	0015      	movs	r5, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	dad4      	bge.n	80005d2 <__udivmoddi4+0x12e>
 8000628:	4642      	mov	r2, r8
 800062a:	002f      	movs	r7, r5
 800062c:	2320      	movs	r3, #32
 800062e:	0026      	movs	r6, r4
 8000630:	4097      	lsls	r7, r2
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	40de      	lsrs	r6, r3
 8000636:	003b      	movs	r3, r7
 8000638:	4333      	orrs	r3, r6
 800063a:	e7cd      	b.n	80005d8 <__udivmoddi4+0x134>

0800063c <__aeabi_fadd>:
 800063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063e:	024b      	lsls	r3, r1, #9
 8000640:	0a5a      	lsrs	r2, r3, #9
 8000642:	4694      	mov	ip, r2
 8000644:	004a      	lsls	r2, r1, #1
 8000646:	0fc9      	lsrs	r1, r1, #31
 8000648:	46ce      	mov	lr, r9
 800064a:	4647      	mov	r7, r8
 800064c:	4689      	mov	r9, r1
 800064e:	0045      	lsls	r5, r0, #1
 8000650:	0246      	lsls	r6, r0, #9
 8000652:	0e2d      	lsrs	r5, r5, #24
 8000654:	0e12      	lsrs	r2, r2, #24
 8000656:	b580      	push	{r7, lr}
 8000658:	0999      	lsrs	r1, r3, #6
 800065a:	0a77      	lsrs	r7, r6, #9
 800065c:	0fc4      	lsrs	r4, r0, #31
 800065e:	09b6      	lsrs	r6, r6, #6
 8000660:	1aab      	subs	r3, r5, r2
 8000662:	454c      	cmp	r4, r9
 8000664:	d020      	beq.n	80006a8 <__aeabi_fadd+0x6c>
 8000666:	2b00      	cmp	r3, #0
 8000668:	dd0c      	ble.n	8000684 <__aeabi_fadd+0x48>
 800066a:	2a00      	cmp	r2, #0
 800066c:	d134      	bne.n	80006d8 <__aeabi_fadd+0x9c>
 800066e:	2900      	cmp	r1, #0
 8000670:	d02a      	beq.n	80006c8 <__aeabi_fadd+0x8c>
 8000672:	1e5a      	subs	r2, r3, #1
 8000674:	2b01      	cmp	r3, #1
 8000676:	d100      	bne.n	800067a <__aeabi_fadd+0x3e>
 8000678:	e08f      	b.n	800079a <__aeabi_fadd+0x15e>
 800067a:	2bff      	cmp	r3, #255	@ 0xff
 800067c:	d100      	bne.n	8000680 <__aeabi_fadd+0x44>
 800067e:	e0cd      	b.n	800081c <__aeabi_fadd+0x1e0>
 8000680:	0013      	movs	r3, r2
 8000682:	e02f      	b.n	80006e4 <__aeabi_fadd+0xa8>
 8000684:	2b00      	cmp	r3, #0
 8000686:	d060      	beq.n	800074a <__aeabi_fadd+0x10e>
 8000688:	1b53      	subs	r3, r2, r5
 800068a:	2d00      	cmp	r5, #0
 800068c:	d000      	beq.n	8000690 <__aeabi_fadd+0x54>
 800068e:	e0ee      	b.n	800086e <__aeabi_fadd+0x232>
 8000690:	2e00      	cmp	r6, #0
 8000692:	d100      	bne.n	8000696 <__aeabi_fadd+0x5a>
 8000694:	e13e      	b.n	8000914 <__aeabi_fadd+0x2d8>
 8000696:	1e5c      	subs	r4, r3, #1
 8000698:	2b01      	cmp	r3, #1
 800069a:	d100      	bne.n	800069e <__aeabi_fadd+0x62>
 800069c:	e16b      	b.n	8000976 <__aeabi_fadd+0x33a>
 800069e:	2bff      	cmp	r3, #255	@ 0xff
 80006a0:	d100      	bne.n	80006a4 <__aeabi_fadd+0x68>
 80006a2:	e0b9      	b.n	8000818 <__aeabi_fadd+0x1dc>
 80006a4:	0023      	movs	r3, r4
 80006a6:	e0e7      	b.n	8000878 <__aeabi_fadd+0x23c>
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	dc00      	bgt.n	80006ae <__aeabi_fadd+0x72>
 80006ac:	e0a4      	b.n	80007f8 <__aeabi_fadd+0x1bc>
 80006ae:	2a00      	cmp	r2, #0
 80006b0:	d069      	beq.n	8000786 <__aeabi_fadd+0x14a>
 80006b2:	2dff      	cmp	r5, #255	@ 0xff
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0x7c>
 80006b6:	e0b1      	b.n	800081c <__aeabi_fadd+0x1e0>
 80006b8:	2280      	movs	r2, #128	@ 0x80
 80006ba:	04d2      	lsls	r2, r2, #19
 80006bc:	4311      	orrs	r1, r2
 80006be:	2b1b      	cmp	r3, #27
 80006c0:	dc00      	bgt.n	80006c4 <__aeabi_fadd+0x88>
 80006c2:	e0e9      	b.n	8000898 <__aeabi_fadd+0x25c>
 80006c4:	002b      	movs	r3, r5
 80006c6:	3605      	adds	r6, #5
 80006c8:	08f7      	lsrs	r7, r6, #3
 80006ca:	2bff      	cmp	r3, #255	@ 0xff
 80006cc:	d100      	bne.n	80006d0 <__aeabi_fadd+0x94>
 80006ce:	e0a5      	b.n	800081c <__aeabi_fadd+0x1e0>
 80006d0:	027a      	lsls	r2, r7, #9
 80006d2:	0a52      	lsrs	r2, r2, #9
 80006d4:	b2d8      	uxtb	r0, r3
 80006d6:	e030      	b.n	800073a <__aeabi_fadd+0xfe>
 80006d8:	2dff      	cmp	r5, #255	@ 0xff
 80006da:	d100      	bne.n	80006de <__aeabi_fadd+0xa2>
 80006dc:	e09e      	b.n	800081c <__aeabi_fadd+0x1e0>
 80006de:	2280      	movs	r2, #128	@ 0x80
 80006e0:	04d2      	lsls	r2, r2, #19
 80006e2:	4311      	orrs	r1, r2
 80006e4:	2001      	movs	r0, #1
 80006e6:	2b1b      	cmp	r3, #27
 80006e8:	dc08      	bgt.n	80006fc <__aeabi_fadd+0xc0>
 80006ea:	0008      	movs	r0, r1
 80006ec:	2220      	movs	r2, #32
 80006ee:	40d8      	lsrs	r0, r3
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	4099      	lsls	r1, r3
 80006f4:	000b      	movs	r3, r1
 80006f6:	1e5a      	subs	r2, r3, #1
 80006f8:	4193      	sbcs	r3, r2
 80006fa:	4318      	orrs	r0, r3
 80006fc:	1a36      	subs	r6, r6, r0
 80006fe:	0173      	lsls	r3, r6, #5
 8000700:	d400      	bmi.n	8000704 <__aeabi_fadd+0xc8>
 8000702:	e071      	b.n	80007e8 <__aeabi_fadd+0x1ac>
 8000704:	01b6      	lsls	r6, r6, #6
 8000706:	09b7      	lsrs	r7, r6, #6
 8000708:	0038      	movs	r0, r7
 800070a:	f000 ff85 	bl	8001618 <__clzsi2>
 800070e:	003b      	movs	r3, r7
 8000710:	3805      	subs	r0, #5
 8000712:	4083      	lsls	r3, r0
 8000714:	4285      	cmp	r5, r0
 8000716:	dd4d      	ble.n	80007b4 <__aeabi_fadd+0x178>
 8000718:	4eb4      	ldr	r6, [pc, #720]	@ (80009ec <__aeabi_fadd+0x3b0>)
 800071a:	1a2d      	subs	r5, r5, r0
 800071c:	401e      	ands	r6, r3
 800071e:	075a      	lsls	r2, r3, #29
 8000720:	d068      	beq.n	80007f4 <__aeabi_fadd+0x1b8>
 8000722:	220f      	movs	r2, #15
 8000724:	4013      	ands	r3, r2
 8000726:	2b04      	cmp	r3, #4
 8000728:	d064      	beq.n	80007f4 <__aeabi_fadd+0x1b8>
 800072a:	3604      	adds	r6, #4
 800072c:	0173      	lsls	r3, r6, #5
 800072e:	d561      	bpl.n	80007f4 <__aeabi_fadd+0x1b8>
 8000730:	1c68      	adds	r0, r5, #1
 8000732:	2dfe      	cmp	r5, #254	@ 0xfe
 8000734:	d154      	bne.n	80007e0 <__aeabi_fadd+0x1a4>
 8000736:	20ff      	movs	r0, #255	@ 0xff
 8000738:	2200      	movs	r2, #0
 800073a:	05c0      	lsls	r0, r0, #23
 800073c:	4310      	orrs	r0, r2
 800073e:	07e4      	lsls	r4, r4, #31
 8000740:	4320      	orrs	r0, r4
 8000742:	bcc0      	pop	{r6, r7}
 8000744:	46b9      	mov	r9, r7
 8000746:	46b0      	mov	r8, r6
 8000748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800074a:	22fe      	movs	r2, #254	@ 0xfe
 800074c:	4690      	mov	r8, r2
 800074e:	1c68      	adds	r0, r5, #1
 8000750:	0002      	movs	r2, r0
 8000752:	4640      	mov	r0, r8
 8000754:	4210      	tst	r0, r2
 8000756:	d16b      	bne.n	8000830 <__aeabi_fadd+0x1f4>
 8000758:	2d00      	cmp	r5, #0
 800075a:	d000      	beq.n	800075e <__aeabi_fadd+0x122>
 800075c:	e0dd      	b.n	800091a <__aeabi_fadd+0x2de>
 800075e:	2e00      	cmp	r6, #0
 8000760:	d100      	bne.n	8000764 <__aeabi_fadd+0x128>
 8000762:	e102      	b.n	800096a <__aeabi_fadd+0x32e>
 8000764:	2900      	cmp	r1, #0
 8000766:	d0b3      	beq.n	80006d0 <__aeabi_fadd+0x94>
 8000768:	2280      	movs	r2, #128	@ 0x80
 800076a:	1a77      	subs	r7, r6, r1
 800076c:	04d2      	lsls	r2, r2, #19
 800076e:	4217      	tst	r7, r2
 8000770:	d100      	bne.n	8000774 <__aeabi_fadd+0x138>
 8000772:	e136      	b.n	80009e2 <__aeabi_fadd+0x3a6>
 8000774:	464c      	mov	r4, r9
 8000776:	1b8e      	subs	r6, r1, r6
 8000778:	d061      	beq.n	800083e <__aeabi_fadd+0x202>
 800077a:	2001      	movs	r0, #1
 800077c:	4216      	tst	r6, r2
 800077e:	d130      	bne.n	80007e2 <__aeabi_fadd+0x1a6>
 8000780:	2300      	movs	r3, #0
 8000782:	08f7      	lsrs	r7, r6, #3
 8000784:	e7a4      	b.n	80006d0 <__aeabi_fadd+0x94>
 8000786:	2900      	cmp	r1, #0
 8000788:	d09e      	beq.n	80006c8 <__aeabi_fadd+0x8c>
 800078a:	1e5a      	subs	r2, r3, #1
 800078c:	2b01      	cmp	r3, #1
 800078e:	d100      	bne.n	8000792 <__aeabi_fadd+0x156>
 8000790:	e0ca      	b.n	8000928 <__aeabi_fadd+0x2ec>
 8000792:	2bff      	cmp	r3, #255	@ 0xff
 8000794:	d042      	beq.n	800081c <__aeabi_fadd+0x1e0>
 8000796:	0013      	movs	r3, r2
 8000798:	e791      	b.n	80006be <__aeabi_fadd+0x82>
 800079a:	1a71      	subs	r1, r6, r1
 800079c:	014b      	lsls	r3, r1, #5
 800079e:	d400      	bmi.n	80007a2 <__aeabi_fadd+0x166>
 80007a0:	e0d1      	b.n	8000946 <__aeabi_fadd+0x30a>
 80007a2:	018f      	lsls	r7, r1, #6
 80007a4:	09bf      	lsrs	r7, r7, #6
 80007a6:	0038      	movs	r0, r7
 80007a8:	f000 ff36 	bl	8001618 <__clzsi2>
 80007ac:	003b      	movs	r3, r7
 80007ae:	3805      	subs	r0, #5
 80007b0:	4083      	lsls	r3, r0
 80007b2:	2501      	movs	r5, #1
 80007b4:	2220      	movs	r2, #32
 80007b6:	1b40      	subs	r0, r0, r5
 80007b8:	3001      	adds	r0, #1
 80007ba:	1a12      	subs	r2, r2, r0
 80007bc:	001e      	movs	r6, r3
 80007be:	4093      	lsls	r3, r2
 80007c0:	40c6      	lsrs	r6, r0
 80007c2:	1e5a      	subs	r2, r3, #1
 80007c4:	4193      	sbcs	r3, r2
 80007c6:	431e      	orrs	r6, r3
 80007c8:	d039      	beq.n	800083e <__aeabi_fadd+0x202>
 80007ca:	0773      	lsls	r3, r6, #29
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x194>
 80007ce:	e11b      	b.n	8000a08 <__aeabi_fadd+0x3cc>
 80007d0:	230f      	movs	r3, #15
 80007d2:	2500      	movs	r5, #0
 80007d4:	4033      	ands	r3, r6
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d1a7      	bne.n	800072a <__aeabi_fadd+0xee>
 80007da:	2001      	movs	r0, #1
 80007dc:	0172      	lsls	r2, r6, #5
 80007de:	d57c      	bpl.n	80008da <__aeabi_fadd+0x29e>
 80007e0:	b2c0      	uxtb	r0, r0
 80007e2:	01b2      	lsls	r2, r6, #6
 80007e4:	0a52      	lsrs	r2, r2, #9
 80007e6:	e7a8      	b.n	800073a <__aeabi_fadd+0xfe>
 80007e8:	0773      	lsls	r3, r6, #29
 80007ea:	d003      	beq.n	80007f4 <__aeabi_fadd+0x1b8>
 80007ec:	230f      	movs	r3, #15
 80007ee:	4033      	ands	r3, r6
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d19a      	bne.n	800072a <__aeabi_fadd+0xee>
 80007f4:	002b      	movs	r3, r5
 80007f6:	e767      	b.n	80006c8 <__aeabi_fadd+0x8c>
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d023      	beq.n	8000844 <__aeabi_fadd+0x208>
 80007fc:	1b53      	subs	r3, r2, r5
 80007fe:	2d00      	cmp	r5, #0
 8000800:	d17b      	bne.n	80008fa <__aeabi_fadd+0x2be>
 8000802:	2e00      	cmp	r6, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x1cc>
 8000806:	e086      	b.n	8000916 <__aeabi_fadd+0x2da>
 8000808:	1e5d      	subs	r5, r3, #1
 800080a:	2b01      	cmp	r3, #1
 800080c:	d100      	bne.n	8000810 <__aeabi_fadd+0x1d4>
 800080e:	e08b      	b.n	8000928 <__aeabi_fadd+0x2ec>
 8000810:	2bff      	cmp	r3, #255	@ 0xff
 8000812:	d002      	beq.n	800081a <__aeabi_fadd+0x1de>
 8000814:	002b      	movs	r3, r5
 8000816:	e075      	b.n	8000904 <__aeabi_fadd+0x2c8>
 8000818:	464c      	mov	r4, r9
 800081a:	4667      	mov	r7, ip
 800081c:	2f00      	cmp	r7, #0
 800081e:	d100      	bne.n	8000822 <__aeabi_fadd+0x1e6>
 8000820:	e789      	b.n	8000736 <__aeabi_fadd+0xfa>
 8000822:	2280      	movs	r2, #128	@ 0x80
 8000824:	03d2      	lsls	r2, r2, #15
 8000826:	433a      	orrs	r2, r7
 8000828:	0252      	lsls	r2, r2, #9
 800082a:	20ff      	movs	r0, #255	@ 0xff
 800082c:	0a52      	lsrs	r2, r2, #9
 800082e:	e784      	b.n	800073a <__aeabi_fadd+0xfe>
 8000830:	1a77      	subs	r7, r6, r1
 8000832:	017b      	lsls	r3, r7, #5
 8000834:	d46b      	bmi.n	800090e <__aeabi_fadd+0x2d2>
 8000836:	2f00      	cmp	r7, #0
 8000838:	d000      	beq.n	800083c <__aeabi_fadd+0x200>
 800083a:	e765      	b.n	8000708 <__aeabi_fadd+0xcc>
 800083c:	2400      	movs	r4, #0
 800083e:	2000      	movs	r0, #0
 8000840:	2200      	movs	r2, #0
 8000842:	e77a      	b.n	800073a <__aeabi_fadd+0xfe>
 8000844:	22fe      	movs	r2, #254	@ 0xfe
 8000846:	1c6b      	adds	r3, r5, #1
 8000848:	421a      	tst	r2, r3
 800084a:	d149      	bne.n	80008e0 <__aeabi_fadd+0x2a4>
 800084c:	2d00      	cmp	r5, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_fadd+0x216>
 8000850:	e09f      	b.n	8000992 <__aeabi_fadd+0x356>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_fadd+0x21c>
 8000856:	e0ba      	b.n	80009ce <__aeabi_fadd+0x392>
 8000858:	2900      	cmp	r1, #0
 800085a:	d100      	bne.n	800085e <__aeabi_fadd+0x222>
 800085c:	e0cf      	b.n	80009fe <__aeabi_fadd+0x3c2>
 800085e:	1872      	adds	r2, r6, r1
 8000860:	0153      	lsls	r3, r2, #5
 8000862:	d400      	bmi.n	8000866 <__aeabi_fadd+0x22a>
 8000864:	e0cd      	b.n	8000a02 <__aeabi_fadd+0x3c6>
 8000866:	0192      	lsls	r2, r2, #6
 8000868:	2001      	movs	r0, #1
 800086a:	0a52      	lsrs	r2, r2, #9
 800086c:	e765      	b.n	800073a <__aeabi_fadd+0xfe>
 800086e:	2aff      	cmp	r2, #255	@ 0xff
 8000870:	d0d2      	beq.n	8000818 <__aeabi_fadd+0x1dc>
 8000872:	2080      	movs	r0, #128	@ 0x80
 8000874:	04c0      	lsls	r0, r0, #19
 8000876:	4306      	orrs	r6, r0
 8000878:	2001      	movs	r0, #1
 800087a:	2b1b      	cmp	r3, #27
 800087c:	dc08      	bgt.n	8000890 <__aeabi_fadd+0x254>
 800087e:	0030      	movs	r0, r6
 8000880:	2420      	movs	r4, #32
 8000882:	40d8      	lsrs	r0, r3
 8000884:	1ae3      	subs	r3, r4, r3
 8000886:	409e      	lsls	r6, r3
 8000888:	0033      	movs	r3, r6
 800088a:	1e5c      	subs	r4, r3, #1
 800088c:	41a3      	sbcs	r3, r4
 800088e:	4318      	orrs	r0, r3
 8000890:	464c      	mov	r4, r9
 8000892:	0015      	movs	r5, r2
 8000894:	1a0e      	subs	r6, r1, r0
 8000896:	e732      	b.n	80006fe <__aeabi_fadd+0xc2>
 8000898:	0008      	movs	r0, r1
 800089a:	2220      	movs	r2, #32
 800089c:	40d8      	lsrs	r0, r3
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	4099      	lsls	r1, r3
 80008a2:	000b      	movs	r3, r1
 80008a4:	1e5a      	subs	r2, r3, #1
 80008a6:	4193      	sbcs	r3, r2
 80008a8:	4303      	orrs	r3, r0
 80008aa:	18f6      	adds	r6, r6, r3
 80008ac:	0173      	lsls	r3, r6, #5
 80008ae:	d59b      	bpl.n	80007e8 <__aeabi_fadd+0x1ac>
 80008b0:	3501      	adds	r5, #1
 80008b2:	2dff      	cmp	r5, #255	@ 0xff
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fadd+0x27c>
 80008b6:	e73e      	b.n	8000736 <__aeabi_fadd+0xfa>
 80008b8:	2301      	movs	r3, #1
 80008ba:	494d      	ldr	r1, [pc, #308]	@ (80009f0 <__aeabi_fadd+0x3b4>)
 80008bc:	0872      	lsrs	r2, r6, #1
 80008be:	4033      	ands	r3, r6
 80008c0:	400a      	ands	r2, r1
 80008c2:	431a      	orrs	r2, r3
 80008c4:	0016      	movs	r6, r2
 80008c6:	0753      	lsls	r3, r2, #29
 80008c8:	d004      	beq.n	80008d4 <__aeabi_fadd+0x298>
 80008ca:	230f      	movs	r3, #15
 80008cc:	4013      	ands	r3, r2
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	d000      	beq.n	80008d4 <__aeabi_fadd+0x298>
 80008d2:	e72a      	b.n	800072a <__aeabi_fadd+0xee>
 80008d4:	0173      	lsls	r3, r6, #5
 80008d6:	d500      	bpl.n	80008da <__aeabi_fadd+0x29e>
 80008d8:	e72a      	b.n	8000730 <__aeabi_fadd+0xf4>
 80008da:	002b      	movs	r3, r5
 80008dc:	08f7      	lsrs	r7, r6, #3
 80008de:	e6f7      	b.n	80006d0 <__aeabi_fadd+0x94>
 80008e0:	2bff      	cmp	r3, #255	@ 0xff
 80008e2:	d100      	bne.n	80008e6 <__aeabi_fadd+0x2aa>
 80008e4:	e727      	b.n	8000736 <__aeabi_fadd+0xfa>
 80008e6:	1871      	adds	r1, r6, r1
 80008e8:	0849      	lsrs	r1, r1, #1
 80008ea:	074a      	lsls	r2, r1, #29
 80008ec:	d02f      	beq.n	800094e <__aeabi_fadd+0x312>
 80008ee:	220f      	movs	r2, #15
 80008f0:	400a      	ands	r2, r1
 80008f2:	2a04      	cmp	r2, #4
 80008f4:	d02b      	beq.n	800094e <__aeabi_fadd+0x312>
 80008f6:	1d0e      	adds	r6, r1, #4
 80008f8:	e6e6      	b.n	80006c8 <__aeabi_fadd+0x8c>
 80008fa:	2aff      	cmp	r2, #255	@ 0xff
 80008fc:	d08d      	beq.n	800081a <__aeabi_fadd+0x1de>
 80008fe:	2080      	movs	r0, #128	@ 0x80
 8000900:	04c0      	lsls	r0, r0, #19
 8000902:	4306      	orrs	r6, r0
 8000904:	2b1b      	cmp	r3, #27
 8000906:	dd24      	ble.n	8000952 <__aeabi_fadd+0x316>
 8000908:	0013      	movs	r3, r2
 800090a:	1d4e      	adds	r6, r1, #5
 800090c:	e6dc      	b.n	80006c8 <__aeabi_fadd+0x8c>
 800090e:	464c      	mov	r4, r9
 8000910:	1b8f      	subs	r7, r1, r6
 8000912:	e6f9      	b.n	8000708 <__aeabi_fadd+0xcc>
 8000914:	464c      	mov	r4, r9
 8000916:	000e      	movs	r6, r1
 8000918:	e6d6      	b.n	80006c8 <__aeabi_fadd+0x8c>
 800091a:	2e00      	cmp	r6, #0
 800091c:	d149      	bne.n	80009b2 <__aeabi_fadd+0x376>
 800091e:	2900      	cmp	r1, #0
 8000920:	d068      	beq.n	80009f4 <__aeabi_fadd+0x3b8>
 8000922:	4667      	mov	r7, ip
 8000924:	464c      	mov	r4, r9
 8000926:	e77c      	b.n	8000822 <__aeabi_fadd+0x1e6>
 8000928:	1870      	adds	r0, r6, r1
 800092a:	0143      	lsls	r3, r0, #5
 800092c:	d574      	bpl.n	8000a18 <__aeabi_fadd+0x3dc>
 800092e:	4930      	ldr	r1, [pc, #192]	@ (80009f0 <__aeabi_fadd+0x3b4>)
 8000930:	0840      	lsrs	r0, r0, #1
 8000932:	4001      	ands	r1, r0
 8000934:	0743      	lsls	r3, r0, #29
 8000936:	d009      	beq.n	800094c <__aeabi_fadd+0x310>
 8000938:	230f      	movs	r3, #15
 800093a:	4003      	ands	r3, r0
 800093c:	2b04      	cmp	r3, #4
 800093e:	d005      	beq.n	800094c <__aeabi_fadd+0x310>
 8000940:	2302      	movs	r3, #2
 8000942:	1d0e      	adds	r6, r1, #4
 8000944:	e6c0      	b.n	80006c8 <__aeabi_fadd+0x8c>
 8000946:	2301      	movs	r3, #1
 8000948:	08cf      	lsrs	r7, r1, #3
 800094a:	e6c1      	b.n	80006d0 <__aeabi_fadd+0x94>
 800094c:	2302      	movs	r3, #2
 800094e:	08cf      	lsrs	r7, r1, #3
 8000950:	e6be      	b.n	80006d0 <__aeabi_fadd+0x94>
 8000952:	2520      	movs	r5, #32
 8000954:	0030      	movs	r0, r6
 8000956:	40d8      	lsrs	r0, r3
 8000958:	1aeb      	subs	r3, r5, r3
 800095a:	409e      	lsls	r6, r3
 800095c:	0033      	movs	r3, r6
 800095e:	1e5d      	subs	r5, r3, #1
 8000960:	41ab      	sbcs	r3, r5
 8000962:	4303      	orrs	r3, r0
 8000964:	0015      	movs	r5, r2
 8000966:	185e      	adds	r6, r3, r1
 8000968:	e7a0      	b.n	80008ac <__aeabi_fadd+0x270>
 800096a:	2900      	cmp	r1, #0
 800096c:	d100      	bne.n	8000970 <__aeabi_fadd+0x334>
 800096e:	e765      	b.n	800083c <__aeabi_fadd+0x200>
 8000970:	464c      	mov	r4, r9
 8000972:	4667      	mov	r7, ip
 8000974:	e6ac      	b.n	80006d0 <__aeabi_fadd+0x94>
 8000976:	1b8f      	subs	r7, r1, r6
 8000978:	017b      	lsls	r3, r7, #5
 800097a:	d52e      	bpl.n	80009da <__aeabi_fadd+0x39e>
 800097c:	01bf      	lsls	r7, r7, #6
 800097e:	09bf      	lsrs	r7, r7, #6
 8000980:	0038      	movs	r0, r7
 8000982:	f000 fe49 	bl	8001618 <__clzsi2>
 8000986:	003b      	movs	r3, r7
 8000988:	3805      	subs	r0, #5
 800098a:	4083      	lsls	r3, r0
 800098c:	464c      	mov	r4, r9
 800098e:	3501      	adds	r5, #1
 8000990:	e710      	b.n	80007b4 <__aeabi_fadd+0x178>
 8000992:	2e00      	cmp	r6, #0
 8000994:	d100      	bne.n	8000998 <__aeabi_fadd+0x35c>
 8000996:	e740      	b.n	800081a <__aeabi_fadd+0x1de>
 8000998:	2900      	cmp	r1, #0
 800099a:	d100      	bne.n	800099e <__aeabi_fadd+0x362>
 800099c:	e741      	b.n	8000822 <__aeabi_fadd+0x1e6>
 800099e:	2380      	movs	r3, #128	@ 0x80
 80009a0:	03db      	lsls	r3, r3, #15
 80009a2:	429f      	cmp	r7, r3
 80009a4:	d200      	bcs.n	80009a8 <__aeabi_fadd+0x36c>
 80009a6:	e73c      	b.n	8000822 <__aeabi_fadd+0x1e6>
 80009a8:	459c      	cmp	ip, r3
 80009aa:	d300      	bcc.n	80009ae <__aeabi_fadd+0x372>
 80009ac:	e739      	b.n	8000822 <__aeabi_fadd+0x1e6>
 80009ae:	4667      	mov	r7, ip
 80009b0:	e737      	b.n	8000822 <__aeabi_fadd+0x1e6>
 80009b2:	2900      	cmp	r1, #0
 80009b4:	d100      	bne.n	80009b8 <__aeabi_fadd+0x37c>
 80009b6:	e734      	b.n	8000822 <__aeabi_fadd+0x1e6>
 80009b8:	2380      	movs	r3, #128	@ 0x80
 80009ba:	03db      	lsls	r3, r3, #15
 80009bc:	429f      	cmp	r7, r3
 80009be:	d200      	bcs.n	80009c2 <__aeabi_fadd+0x386>
 80009c0:	e72f      	b.n	8000822 <__aeabi_fadd+0x1e6>
 80009c2:	459c      	cmp	ip, r3
 80009c4:	d300      	bcc.n	80009c8 <__aeabi_fadd+0x38c>
 80009c6:	e72c      	b.n	8000822 <__aeabi_fadd+0x1e6>
 80009c8:	464c      	mov	r4, r9
 80009ca:	4667      	mov	r7, ip
 80009cc:	e729      	b.n	8000822 <__aeabi_fadd+0x1e6>
 80009ce:	2900      	cmp	r1, #0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_fadd+0x398>
 80009d2:	e734      	b.n	800083e <__aeabi_fadd+0x202>
 80009d4:	2300      	movs	r3, #0
 80009d6:	08cf      	lsrs	r7, r1, #3
 80009d8:	e67a      	b.n	80006d0 <__aeabi_fadd+0x94>
 80009da:	464c      	mov	r4, r9
 80009dc:	2301      	movs	r3, #1
 80009de:	08ff      	lsrs	r7, r7, #3
 80009e0:	e676      	b.n	80006d0 <__aeabi_fadd+0x94>
 80009e2:	2f00      	cmp	r7, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x3ac>
 80009e6:	e729      	b.n	800083c <__aeabi_fadd+0x200>
 80009e8:	08ff      	lsrs	r7, r7, #3
 80009ea:	e671      	b.n	80006d0 <__aeabi_fadd+0x94>
 80009ec:	fbffffff 	.word	0xfbffffff
 80009f0:	7dffffff 	.word	0x7dffffff
 80009f4:	2280      	movs	r2, #128	@ 0x80
 80009f6:	2400      	movs	r4, #0
 80009f8:	20ff      	movs	r0, #255	@ 0xff
 80009fa:	03d2      	lsls	r2, r2, #15
 80009fc:	e69d      	b.n	800073a <__aeabi_fadd+0xfe>
 80009fe:	2300      	movs	r3, #0
 8000a00:	e666      	b.n	80006d0 <__aeabi_fadd+0x94>
 8000a02:	2300      	movs	r3, #0
 8000a04:	08d7      	lsrs	r7, r2, #3
 8000a06:	e663      	b.n	80006d0 <__aeabi_fadd+0x94>
 8000a08:	2001      	movs	r0, #1
 8000a0a:	0172      	lsls	r2, r6, #5
 8000a0c:	d500      	bpl.n	8000a10 <__aeabi_fadd+0x3d4>
 8000a0e:	e6e7      	b.n	80007e0 <__aeabi_fadd+0x1a4>
 8000a10:	0031      	movs	r1, r6
 8000a12:	2300      	movs	r3, #0
 8000a14:	08cf      	lsrs	r7, r1, #3
 8000a16:	e65b      	b.n	80006d0 <__aeabi_fadd+0x94>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	08c7      	lsrs	r7, r0, #3
 8000a1c:	e658      	b.n	80006d0 <__aeabi_fadd+0x94>
 8000a1e:	46c0      	nop			@ (mov r8, r8)

08000a20 <__aeabi_fdiv>:
 8000a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a22:	4646      	mov	r6, r8
 8000a24:	464f      	mov	r7, r9
 8000a26:	46d6      	mov	lr, sl
 8000a28:	0245      	lsls	r5, r0, #9
 8000a2a:	b5c0      	push	{r6, r7, lr}
 8000a2c:	0fc3      	lsrs	r3, r0, #31
 8000a2e:	0047      	lsls	r7, r0, #1
 8000a30:	4698      	mov	r8, r3
 8000a32:	1c0e      	adds	r6, r1, #0
 8000a34:	0a6d      	lsrs	r5, r5, #9
 8000a36:	0e3f      	lsrs	r7, r7, #24
 8000a38:	d05b      	beq.n	8000af2 <__aeabi_fdiv+0xd2>
 8000a3a:	2fff      	cmp	r7, #255	@ 0xff
 8000a3c:	d021      	beq.n	8000a82 <__aeabi_fdiv+0x62>
 8000a3e:	2380      	movs	r3, #128	@ 0x80
 8000a40:	00ed      	lsls	r5, r5, #3
 8000a42:	04db      	lsls	r3, r3, #19
 8000a44:	431d      	orrs	r5, r3
 8000a46:	2300      	movs	r3, #0
 8000a48:	4699      	mov	r9, r3
 8000a4a:	469a      	mov	sl, r3
 8000a4c:	3f7f      	subs	r7, #127	@ 0x7f
 8000a4e:	0274      	lsls	r4, r6, #9
 8000a50:	0073      	lsls	r3, r6, #1
 8000a52:	0a64      	lsrs	r4, r4, #9
 8000a54:	0e1b      	lsrs	r3, r3, #24
 8000a56:	0ff6      	lsrs	r6, r6, #31
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d020      	beq.n	8000a9e <__aeabi_fdiv+0x7e>
 8000a5c:	2bff      	cmp	r3, #255	@ 0xff
 8000a5e:	d043      	beq.n	8000ae8 <__aeabi_fdiv+0xc8>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	2000      	movs	r0, #0
 8000a64:	00e4      	lsls	r4, r4, #3
 8000a66:	04d2      	lsls	r2, r2, #19
 8000a68:	4314      	orrs	r4, r2
 8000a6a:	3b7f      	subs	r3, #127	@ 0x7f
 8000a6c:	4642      	mov	r2, r8
 8000a6e:	1aff      	subs	r7, r7, r3
 8000a70:	464b      	mov	r3, r9
 8000a72:	4072      	eors	r2, r6
 8000a74:	2b0f      	cmp	r3, #15
 8000a76:	d900      	bls.n	8000a7a <__aeabi_fdiv+0x5a>
 8000a78:	e09d      	b.n	8000bb6 <__aeabi_fdiv+0x196>
 8000a7a:	4971      	ldr	r1, [pc, #452]	@ (8000c40 <__aeabi_fdiv+0x220>)
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	58cb      	ldr	r3, [r1, r3]
 8000a80:	469f      	mov	pc, r3
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d15a      	bne.n	8000b3c <__aeabi_fdiv+0x11c>
 8000a86:	2308      	movs	r3, #8
 8000a88:	4699      	mov	r9, r3
 8000a8a:	3b06      	subs	r3, #6
 8000a8c:	0274      	lsls	r4, r6, #9
 8000a8e:	469a      	mov	sl, r3
 8000a90:	0073      	lsls	r3, r6, #1
 8000a92:	27ff      	movs	r7, #255	@ 0xff
 8000a94:	0a64      	lsrs	r4, r4, #9
 8000a96:	0e1b      	lsrs	r3, r3, #24
 8000a98:	0ff6      	lsrs	r6, r6, #31
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1de      	bne.n	8000a5c <__aeabi_fdiv+0x3c>
 8000a9e:	2c00      	cmp	r4, #0
 8000aa0:	d13b      	bne.n	8000b1a <__aeabi_fdiv+0xfa>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	4649      	mov	r1, r9
 8000aa8:	4072      	eors	r2, r6
 8000aaa:	4319      	orrs	r1, r3
 8000aac:	290e      	cmp	r1, #14
 8000aae:	d818      	bhi.n	8000ae2 <__aeabi_fdiv+0xc2>
 8000ab0:	4864      	ldr	r0, [pc, #400]	@ (8000c44 <__aeabi_fdiv+0x224>)
 8000ab2:	0089      	lsls	r1, r1, #2
 8000ab4:	5841      	ldr	r1, [r0, r1]
 8000ab6:	468f      	mov	pc, r1
 8000ab8:	4653      	mov	r3, sl
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_fdiv+0xa0>
 8000abe:	e0b8      	b.n	8000c32 <__aeabi_fdiv+0x212>
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d06e      	beq.n	8000ba2 <__aeabi_fdiv+0x182>
 8000ac4:	4642      	mov	r2, r8
 8000ac6:	002c      	movs	r4, r5
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d140      	bne.n	8000b4e <__aeabi_fdiv+0x12e>
 8000acc:	2000      	movs	r0, #0
 8000ace:	2400      	movs	r4, #0
 8000ad0:	05c0      	lsls	r0, r0, #23
 8000ad2:	4320      	orrs	r0, r4
 8000ad4:	07d2      	lsls	r2, r2, #31
 8000ad6:	4310      	orrs	r0, r2
 8000ad8:	bce0      	pop	{r5, r6, r7}
 8000ada:	46ba      	mov	sl, r7
 8000adc:	46b1      	mov	r9, r6
 8000ade:	46a8      	mov	r8, r5
 8000ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae2:	20ff      	movs	r0, #255	@ 0xff
 8000ae4:	2400      	movs	r4, #0
 8000ae6:	e7f3      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000ae8:	2c00      	cmp	r4, #0
 8000aea:	d120      	bne.n	8000b2e <__aeabi_fdiv+0x10e>
 8000aec:	2302      	movs	r3, #2
 8000aee:	3fff      	subs	r7, #255	@ 0xff
 8000af0:	e7d8      	b.n	8000aa4 <__aeabi_fdiv+0x84>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	d105      	bne.n	8000b02 <__aeabi_fdiv+0xe2>
 8000af6:	2304      	movs	r3, #4
 8000af8:	4699      	mov	r9, r3
 8000afa:	3b03      	subs	r3, #3
 8000afc:	2700      	movs	r7, #0
 8000afe:	469a      	mov	sl, r3
 8000b00:	e7a5      	b.n	8000a4e <__aeabi_fdiv+0x2e>
 8000b02:	0028      	movs	r0, r5
 8000b04:	f000 fd88 	bl	8001618 <__clzsi2>
 8000b08:	2776      	movs	r7, #118	@ 0x76
 8000b0a:	1f43      	subs	r3, r0, #5
 8000b0c:	409d      	lsls	r5, r3
 8000b0e:	2300      	movs	r3, #0
 8000b10:	427f      	negs	r7, r7
 8000b12:	4699      	mov	r9, r3
 8000b14:	469a      	mov	sl, r3
 8000b16:	1a3f      	subs	r7, r7, r0
 8000b18:	e799      	b.n	8000a4e <__aeabi_fdiv+0x2e>
 8000b1a:	0020      	movs	r0, r4
 8000b1c:	f000 fd7c 	bl	8001618 <__clzsi2>
 8000b20:	1f43      	subs	r3, r0, #5
 8000b22:	409c      	lsls	r4, r3
 8000b24:	2376      	movs	r3, #118	@ 0x76
 8000b26:	425b      	negs	r3, r3
 8000b28:	1a1b      	subs	r3, r3, r0
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	e79e      	b.n	8000a6c <__aeabi_fdiv+0x4c>
 8000b2e:	2303      	movs	r3, #3
 8000b30:	464a      	mov	r2, r9
 8000b32:	431a      	orrs	r2, r3
 8000b34:	4691      	mov	r9, r2
 8000b36:	2003      	movs	r0, #3
 8000b38:	33fc      	adds	r3, #252	@ 0xfc
 8000b3a:	e797      	b.n	8000a6c <__aeabi_fdiv+0x4c>
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	4699      	mov	r9, r3
 8000b40:	3b09      	subs	r3, #9
 8000b42:	27ff      	movs	r7, #255	@ 0xff
 8000b44:	469a      	mov	sl, r3
 8000b46:	e782      	b.n	8000a4e <__aeabi_fdiv+0x2e>
 8000b48:	2803      	cmp	r0, #3
 8000b4a:	d02c      	beq.n	8000ba6 <__aeabi_fdiv+0x186>
 8000b4c:	0032      	movs	r2, r6
 8000b4e:	0038      	movs	r0, r7
 8000b50:	307f      	adds	r0, #127	@ 0x7f
 8000b52:	2800      	cmp	r0, #0
 8000b54:	dd47      	ble.n	8000be6 <__aeabi_fdiv+0x1c6>
 8000b56:	0763      	lsls	r3, r4, #29
 8000b58:	d004      	beq.n	8000b64 <__aeabi_fdiv+0x144>
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	4023      	ands	r3, r4
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d000      	beq.n	8000b64 <__aeabi_fdiv+0x144>
 8000b62:	3404      	adds	r4, #4
 8000b64:	0123      	lsls	r3, r4, #4
 8000b66:	d503      	bpl.n	8000b70 <__aeabi_fdiv+0x150>
 8000b68:	0038      	movs	r0, r7
 8000b6a:	4b37      	ldr	r3, [pc, #220]	@ (8000c48 <__aeabi_fdiv+0x228>)
 8000b6c:	3080      	adds	r0, #128	@ 0x80
 8000b6e:	401c      	ands	r4, r3
 8000b70:	28fe      	cmp	r0, #254	@ 0xfe
 8000b72:	dcb6      	bgt.n	8000ae2 <__aeabi_fdiv+0xc2>
 8000b74:	01a4      	lsls	r4, r4, #6
 8000b76:	0a64      	lsrs	r4, r4, #9
 8000b78:	b2c0      	uxtb	r0, r0
 8000b7a:	e7a9      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000b7c:	2480      	movs	r4, #128	@ 0x80
 8000b7e:	2200      	movs	r2, #0
 8000b80:	20ff      	movs	r0, #255	@ 0xff
 8000b82:	03e4      	lsls	r4, r4, #15
 8000b84:	e7a4      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000b86:	2380      	movs	r3, #128	@ 0x80
 8000b88:	03db      	lsls	r3, r3, #15
 8000b8a:	421d      	tst	r5, r3
 8000b8c:	d001      	beq.n	8000b92 <__aeabi_fdiv+0x172>
 8000b8e:	421c      	tst	r4, r3
 8000b90:	d00b      	beq.n	8000baa <__aeabi_fdiv+0x18a>
 8000b92:	2480      	movs	r4, #128	@ 0x80
 8000b94:	03e4      	lsls	r4, r4, #15
 8000b96:	432c      	orrs	r4, r5
 8000b98:	0264      	lsls	r4, r4, #9
 8000b9a:	4642      	mov	r2, r8
 8000b9c:	20ff      	movs	r0, #255	@ 0xff
 8000b9e:	0a64      	lsrs	r4, r4, #9
 8000ba0:	e796      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000ba2:	4646      	mov	r6, r8
 8000ba4:	002c      	movs	r4, r5
 8000ba6:	2380      	movs	r3, #128	@ 0x80
 8000ba8:	03db      	lsls	r3, r3, #15
 8000baa:	431c      	orrs	r4, r3
 8000bac:	0264      	lsls	r4, r4, #9
 8000bae:	0032      	movs	r2, r6
 8000bb0:	20ff      	movs	r0, #255	@ 0xff
 8000bb2:	0a64      	lsrs	r4, r4, #9
 8000bb4:	e78c      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000bb6:	016d      	lsls	r5, r5, #5
 8000bb8:	0160      	lsls	r0, r4, #5
 8000bba:	4285      	cmp	r5, r0
 8000bbc:	d22d      	bcs.n	8000c1a <__aeabi_fdiv+0x1fa>
 8000bbe:	231b      	movs	r3, #27
 8000bc0:	2400      	movs	r4, #0
 8000bc2:	3f01      	subs	r7, #1
 8000bc4:	2601      	movs	r6, #1
 8000bc6:	0029      	movs	r1, r5
 8000bc8:	0064      	lsls	r4, r4, #1
 8000bca:	006d      	lsls	r5, r5, #1
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	db01      	blt.n	8000bd4 <__aeabi_fdiv+0x1b4>
 8000bd0:	4285      	cmp	r5, r0
 8000bd2:	d301      	bcc.n	8000bd8 <__aeabi_fdiv+0x1b8>
 8000bd4:	1a2d      	subs	r5, r5, r0
 8000bd6:	4334      	orrs	r4, r6
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1f3      	bne.n	8000bc6 <__aeabi_fdiv+0x1a6>
 8000bde:	1e6b      	subs	r3, r5, #1
 8000be0:	419d      	sbcs	r5, r3
 8000be2:	432c      	orrs	r4, r5
 8000be4:	e7b3      	b.n	8000b4e <__aeabi_fdiv+0x12e>
 8000be6:	2301      	movs	r3, #1
 8000be8:	1a1b      	subs	r3, r3, r0
 8000bea:	2b1b      	cmp	r3, #27
 8000bec:	dd00      	ble.n	8000bf0 <__aeabi_fdiv+0x1d0>
 8000bee:	e76d      	b.n	8000acc <__aeabi_fdiv+0xac>
 8000bf0:	0021      	movs	r1, r4
 8000bf2:	379e      	adds	r7, #158	@ 0x9e
 8000bf4:	40d9      	lsrs	r1, r3
 8000bf6:	40bc      	lsls	r4, r7
 8000bf8:	000b      	movs	r3, r1
 8000bfa:	1e61      	subs	r1, r4, #1
 8000bfc:	418c      	sbcs	r4, r1
 8000bfe:	4323      	orrs	r3, r4
 8000c00:	0759      	lsls	r1, r3, #29
 8000c02:	d004      	beq.n	8000c0e <__aeabi_fdiv+0x1ee>
 8000c04:	210f      	movs	r1, #15
 8000c06:	4019      	ands	r1, r3
 8000c08:	2904      	cmp	r1, #4
 8000c0a:	d000      	beq.n	8000c0e <__aeabi_fdiv+0x1ee>
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	0159      	lsls	r1, r3, #5
 8000c10:	d413      	bmi.n	8000c3a <__aeabi_fdiv+0x21a>
 8000c12:	019b      	lsls	r3, r3, #6
 8000c14:	2000      	movs	r0, #0
 8000c16:	0a5c      	lsrs	r4, r3, #9
 8000c18:	e75a      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000c1a:	231a      	movs	r3, #26
 8000c1c:	2401      	movs	r4, #1
 8000c1e:	1a2d      	subs	r5, r5, r0
 8000c20:	e7d0      	b.n	8000bc4 <__aeabi_fdiv+0x1a4>
 8000c22:	1e98      	subs	r0, r3, #2
 8000c24:	4243      	negs	r3, r0
 8000c26:	4158      	adcs	r0, r3
 8000c28:	4240      	negs	r0, r0
 8000c2a:	0032      	movs	r2, r6
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	b2c0      	uxtb	r0, r0
 8000c30:	e74e      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000c32:	4642      	mov	r2, r8
 8000c34:	20ff      	movs	r0, #255	@ 0xff
 8000c36:	2400      	movs	r4, #0
 8000c38:	e74a      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	e747      	b.n	8000ad0 <__aeabi_fdiv+0xb0>
 8000c40:	080062d0 	.word	0x080062d0
 8000c44:	08006310 	.word	0x08006310
 8000c48:	f7ffffff 	.word	0xf7ffffff

08000c4c <__eqsf2>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	0042      	lsls	r2, r0, #1
 8000c50:	024e      	lsls	r6, r1, #9
 8000c52:	004c      	lsls	r4, r1, #1
 8000c54:	0245      	lsls	r5, r0, #9
 8000c56:	0a6d      	lsrs	r5, r5, #9
 8000c58:	0e12      	lsrs	r2, r2, #24
 8000c5a:	0fc3      	lsrs	r3, r0, #31
 8000c5c:	0a76      	lsrs	r6, r6, #9
 8000c5e:	0e24      	lsrs	r4, r4, #24
 8000c60:	0fc9      	lsrs	r1, r1, #31
 8000c62:	2aff      	cmp	r2, #255	@ 0xff
 8000c64:	d010      	beq.n	8000c88 <__eqsf2+0x3c>
 8000c66:	2cff      	cmp	r4, #255	@ 0xff
 8000c68:	d00c      	beq.n	8000c84 <__eqsf2+0x38>
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	42a2      	cmp	r2, r4
 8000c6e:	d10a      	bne.n	8000c86 <__eqsf2+0x3a>
 8000c70:	42b5      	cmp	r5, r6
 8000c72:	d108      	bne.n	8000c86 <__eqsf2+0x3a>
 8000c74:	428b      	cmp	r3, r1
 8000c76:	d00f      	beq.n	8000c98 <__eqsf2+0x4c>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d104      	bne.n	8000c86 <__eqsf2+0x3a>
 8000c7c:	0028      	movs	r0, r5
 8000c7e:	1e43      	subs	r3, r0, #1
 8000c80:	4198      	sbcs	r0, r3
 8000c82:	e000      	b.n	8000c86 <__eqsf2+0x3a>
 8000c84:	2001      	movs	r0, #1
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	2001      	movs	r0, #1
 8000c8a:	2cff      	cmp	r4, #255	@ 0xff
 8000c8c:	d1fb      	bne.n	8000c86 <__eqsf2+0x3a>
 8000c8e:	4335      	orrs	r5, r6
 8000c90:	d1f9      	bne.n	8000c86 <__eqsf2+0x3a>
 8000c92:	404b      	eors	r3, r1
 8000c94:	0018      	movs	r0, r3
 8000c96:	e7f6      	b.n	8000c86 <__eqsf2+0x3a>
 8000c98:	2000      	movs	r0, #0
 8000c9a:	e7f4      	b.n	8000c86 <__eqsf2+0x3a>

08000c9c <__gesf2>:
 8000c9c:	b530      	push	{r4, r5, lr}
 8000c9e:	0042      	lsls	r2, r0, #1
 8000ca0:	0244      	lsls	r4, r0, #9
 8000ca2:	024d      	lsls	r5, r1, #9
 8000ca4:	0fc3      	lsrs	r3, r0, #31
 8000ca6:	0048      	lsls	r0, r1, #1
 8000ca8:	0a64      	lsrs	r4, r4, #9
 8000caa:	0e12      	lsrs	r2, r2, #24
 8000cac:	0a6d      	lsrs	r5, r5, #9
 8000cae:	0e00      	lsrs	r0, r0, #24
 8000cb0:	0fc9      	lsrs	r1, r1, #31
 8000cb2:	2aff      	cmp	r2, #255	@ 0xff
 8000cb4:	d018      	beq.n	8000ce8 <__gesf2+0x4c>
 8000cb6:	28ff      	cmp	r0, #255	@ 0xff
 8000cb8:	d00a      	beq.n	8000cd0 <__gesf2+0x34>
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	d11e      	bne.n	8000cfc <__gesf2+0x60>
 8000cbe:	2800      	cmp	r0, #0
 8000cc0:	d10a      	bne.n	8000cd8 <__gesf2+0x3c>
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d029      	beq.n	8000d1a <__gesf2+0x7e>
 8000cc6:	2c00      	cmp	r4, #0
 8000cc8:	d12d      	bne.n	8000d26 <__gesf2+0x8a>
 8000cca:	0048      	lsls	r0, r1, #1
 8000ccc:	3801      	subs	r0, #1
 8000cce:	bd30      	pop	{r4, r5, pc}
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	d125      	bne.n	8000d20 <__gesf2+0x84>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	d101      	bne.n	8000cdc <__gesf2+0x40>
 8000cd8:	2c00      	cmp	r4, #0
 8000cda:	d0f6      	beq.n	8000cca <__gesf2+0x2e>
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d019      	beq.n	8000d14 <__gesf2+0x78>
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	4318      	orrs	r0, r3
 8000ce6:	e7f2      	b.n	8000cce <__gesf2+0x32>
 8000ce8:	2c00      	cmp	r4, #0
 8000cea:	d119      	bne.n	8000d20 <__gesf2+0x84>
 8000cec:	28ff      	cmp	r0, #255	@ 0xff
 8000cee:	d1f7      	bne.n	8000ce0 <__gesf2+0x44>
 8000cf0:	2d00      	cmp	r5, #0
 8000cf2:	d115      	bne.n	8000d20 <__gesf2+0x84>
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d1f2      	bne.n	8000ce0 <__gesf2+0x44>
 8000cfa:	e7e8      	b.n	8000cce <__gesf2+0x32>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d0ef      	beq.n	8000ce0 <__gesf2+0x44>
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d1ed      	bne.n	8000ce0 <__gesf2+0x44>
 8000d04:	4282      	cmp	r2, r0
 8000d06:	dceb      	bgt.n	8000ce0 <__gesf2+0x44>
 8000d08:	db04      	blt.n	8000d14 <__gesf2+0x78>
 8000d0a:	42ac      	cmp	r4, r5
 8000d0c:	d8e8      	bhi.n	8000ce0 <__gesf2+0x44>
 8000d0e:	2000      	movs	r0, #0
 8000d10:	42ac      	cmp	r4, r5
 8000d12:	d2dc      	bcs.n	8000cce <__gesf2+0x32>
 8000d14:	0058      	lsls	r0, r3, #1
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7d9      	b.n	8000cce <__gesf2+0x32>
 8000d1a:	2c00      	cmp	r4, #0
 8000d1c:	d0d7      	beq.n	8000cce <__gesf2+0x32>
 8000d1e:	e7df      	b.n	8000ce0 <__gesf2+0x44>
 8000d20:	2002      	movs	r0, #2
 8000d22:	4240      	negs	r0, r0
 8000d24:	e7d3      	b.n	8000cce <__gesf2+0x32>
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d1da      	bne.n	8000ce0 <__gesf2+0x44>
 8000d2a:	e7ee      	b.n	8000d0a <__gesf2+0x6e>

08000d2c <__lesf2>:
 8000d2c:	b530      	push	{r4, r5, lr}
 8000d2e:	0042      	lsls	r2, r0, #1
 8000d30:	0244      	lsls	r4, r0, #9
 8000d32:	024d      	lsls	r5, r1, #9
 8000d34:	0fc3      	lsrs	r3, r0, #31
 8000d36:	0048      	lsls	r0, r1, #1
 8000d38:	0a64      	lsrs	r4, r4, #9
 8000d3a:	0e12      	lsrs	r2, r2, #24
 8000d3c:	0a6d      	lsrs	r5, r5, #9
 8000d3e:	0e00      	lsrs	r0, r0, #24
 8000d40:	0fc9      	lsrs	r1, r1, #31
 8000d42:	2aff      	cmp	r2, #255	@ 0xff
 8000d44:	d017      	beq.n	8000d76 <__lesf2+0x4a>
 8000d46:	28ff      	cmp	r0, #255	@ 0xff
 8000d48:	d00a      	beq.n	8000d60 <__lesf2+0x34>
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d11b      	bne.n	8000d86 <__lesf2+0x5a>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	d10a      	bne.n	8000d68 <__lesf2+0x3c>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d01d      	beq.n	8000d92 <__lesf2+0x66>
 8000d56:	2c00      	cmp	r4, #0
 8000d58:	d12d      	bne.n	8000db6 <__lesf2+0x8a>
 8000d5a:	0048      	lsls	r0, r1, #1
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	e011      	b.n	8000d84 <__lesf2+0x58>
 8000d60:	2d00      	cmp	r5, #0
 8000d62:	d10e      	bne.n	8000d82 <__lesf2+0x56>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	d101      	bne.n	8000d6c <__lesf2+0x40>
 8000d68:	2c00      	cmp	r4, #0
 8000d6a:	d0f6      	beq.n	8000d5a <__lesf2+0x2e>
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d10c      	bne.n	8000d8a <__lesf2+0x5e>
 8000d70:	0058      	lsls	r0, r3, #1
 8000d72:	3801      	subs	r0, #1
 8000d74:	e006      	b.n	8000d84 <__lesf2+0x58>
 8000d76:	2c00      	cmp	r4, #0
 8000d78:	d103      	bne.n	8000d82 <__lesf2+0x56>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d105      	bne.n	8000d8a <__lesf2+0x5e>
 8000d7e:	2d00      	cmp	r5, #0
 8000d80:	d015      	beq.n	8000dae <__lesf2+0x82>
 8000d82:	2002      	movs	r0, #2
 8000d84:	bd30      	pop	{r4, r5, pc}
 8000d86:	2800      	cmp	r0, #0
 8000d88:	d106      	bne.n	8000d98 <__lesf2+0x6c>
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	425b      	negs	r3, r3
 8000d8e:	4318      	orrs	r0, r3
 8000d90:	e7f8      	b.n	8000d84 <__lesf2+0x58>
 8000d92:	2c00      	cmp	r4, #0
 8000d94:	d0f6      	beq.n	8000d84 <__lesf2+0x58>
 8000d96:	e7f8      	b.n	8000d8a <__lesf2+0x5e>
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d1f6      	bne.n	8000d8a <__lesf2+0x5e>
 8000d9c:	4282      	cmp	r2, r0
 8000d9e:	dcf4      	bgt.n	8000d8a <__lesf2+0x5e>
 8000da0:	dbe6      	blt.n	8000d70 <__lesf2+0x44>
 8000da2:	42ac      	cmp	r4, r5
 8000da4:	d8f1      	bhi.n	8000d8a <__lesf2+0x5e>
 8000da6:	2000      	movs	r0, #0
 8000da8:	42ac      	cmp	r4, r5
 8000daa:	d2eb      	bcs.n	8000d84 <__lesf2+0x58>
 8000dac:	e7e0      	b.n	8000d70 <__lesf2+0x44>
 8000dae:	2000      	movs	r0, #0
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d1ea      	bne.n	8000d8a <__lesf2+0x5e>
 8000db4:	e7e6      	b.n	8000d84 <__lesf2+0x58>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d1e7      	bne.n	8000d8a <__lesf2+0x5e>
 8000dba:	e7f2      	b.n	8000da2 <__lesf2+0x76>

08000dbc <__aeabi_fmul>:
 8000dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dbe:	464f      	mov	r7, r9
 8000dc0:	4646      	mov	r6, r8
 8000dc2:	46d6      	mov	lr, sl
 8000dc4:	0044      	lsls	r4, r0, #1
 8000dc6:	b5c0      	push	{r6, r7, lr}
 8000dc8:	0246      	lsls	r6, r0, #9
 8000dca:	1c0f      	adds	r7, r1, #0
 8000dcc:	0a76      	lsrs	r6, r6, #9
 8000dce:	0e24      	lsrs	r4, r4, #24
 8000dd0:	0fc5      	lsrs	r5, r0, #31
 8000dd2:	2c00      	cmp	r4, #0
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_fmul+0x1c>
 8000dd6:	e0da      	b.n	8000f8e <__aeabi_fmul+0x1d2>
 8000dd8:	2cff      	cmp	r4, #255	@ 0xff
 8000dda:	d074      	beq.n	8000ec6 <__aeabi_fmul+0x10a>
 8000ddc:	2380      	movs	r3, #128	@ 0x80
 8000dde:	00f6      	lsls	r6, r6, #3
 8000de0:	04db      	lsls	r3, r3, #19
 8000de2:	431e      	orrs	r6, r3
 8000de4:	2300      	movs	r3, #0
 8000de6:	4699      	mov	r9, r3
 8000de8:	469a      	mov	sl, r3
 8000dea:	3c7f      	subs	r4, #127	@ 0x7f
 8000dec:	027b      	lsls	r3, r7, #9
 8000dee:	0a5b      	lsrs	r3, r3, #9
 8000df0:	4698      	mov	r8, r3
 8000df2:	007b      	lsls	r3, r7, #1
 8000df4:	0e1b      	lsrs	r3, r3, #24
 8000df6:	0fff      	lsrs	r7, r7, #31
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d074      	beq.n	8000ee6 <__aeabi_fmul+0x12a>
 8000dfc:	2bff      	cmp	r3, #255	@ 0xff
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_fmul+0x46>
 8000e00:	e08e      	b.n	8000f20 <__aeabi_fmul+0x164>
 8000e02:	4642      	mov	r2, r8
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	00d2      	lsls	r2, r2, #3
 8000e08:	04c9      	lsls	r1, r1, #19
 8000e0a:	4311      	orrs	r1, r2
 8000e0c:	3b7f      	subs	r3, #127	@ 0x7f
 8000e0e:	002a      	movs	r2, r5
 8000e10:	18e4      	adds	r4, r4, r3
 8000e12:	464b      	mov	r3, r9
 8000e14:	407a      	eors	r2, r7
 8000e16:	4688      	mov	r8, r1
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	2b0a      	cmp	r3, #10
 8000e1c:	dc75      	bgt.n	8000f0a <__aeabi_fmul+0x14e>
 8000e1e:	464b      	mov	r3, r9
 8000e20:	2000      	movs	r0, #0
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	dd0f      	ble.n	8000e46 <__aeabi_fmul+0x8a>
 8000e26:	4649      	mov	r1, r9
 8000e28:	2301      	movs	r3, #1
 8000e2a:	408b      	lsls	r3, r1
 8000e2c:	21a6      	movs	r1, #166	@ 0xa6
 8000e2e:	00c9      	lsls	r1, r1, #3
 8000e30:	420b      	tst	r3, r1
 8000e32:	d169      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000e34:	2190      	movs	r1, #144	@ 0x90
 8000e36:	0089      	lsls	r1, r1, #2
 8000e38:	420b      	tst	r3, r1
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_fmul+0x82>
 8000e3c:	e100      	b.n	8001040 <__aeabi_fmul+0x284>
 8000e3e:	2188      	movs	r1, #136	@ 0x88
 8000e40:	4219      	tst	r1, r3
 8000e42:	d000      	beq.n	8000e46 <__aeabi_fmul+0x8a>
 8000e44:	e0f5      	b.n	8001032 <__aeabi_fmul+0x276>
 8000e46:	4641      	mov	r1, r8
 8000e48:	0409      	lsls	r1, r1, #16
 8000e4a:	0c09      	lsrs	r1, r1, #16
 8000e4c:	4643      	mov	r3, r8
 8000e4e:	0008      	movs	r0, r1
 8000e50:	0c35      	lsrs	r5, r6, #16
 8000e52:	0436      	lsls	r6, r6, #16
 8000e54:	0c1b      	lsrs	r3, r3, #16
 8000e56:	0c36      	lsrs	r6, r6, #16
 8000e58:	4370      	muls	r0, r6
 8000e5a:	4369      	muls	r1, r5
 8000e5c:	435e      	muls	r6, r3
 8000e5e:	435d      	muls	r5, r3
 8000e60:	1876      	adds	r6, r6, r1
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	199b      	adds	r3, r3, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d903      	bls.n	8000e72 <__aeabi_fmul+0xb6>
 8000e6a:	2180      	movs	r1, #128	@ 0x80
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	468c      	mov	ip, r1
 8000e70:	4465      	add	r5, ip
 8000e72:	0400      	lsls	r0, r0, #16
 8000e74:	0419      	lsls	r1, r3, #16
 8000e76:	0c00      	lsrs	r0, r0, #16
 8000e78:	1809      	adds	r1, r1, r0
 8000e7a:	018e      	lsls	r6, r1, #6
 8000e7c:	1e70      	subs	r0, r6, #1
 8000e7e:	4186      	sbcs	r6, r0
 8000e80:	0c1b      	lsrs	r3, r3, #16
 8000e82:	0e89      	lsrs	r1, r1, #26
 8000e84:	195b      	adds	r3, r3, r5
 8000e86:	430e      	orrs	r6, r1
 8000e88:	019b      	lsls	r3, r3, #6
 8000e8a:	431e      	orrs	r6, r3
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	d46c      	bmi.n	8000f6a <__aeabi_fmul+0x1ae>
 8000e90:	0023      	movs	r3, r4
 8000e92:	337f      	adds	r3, #127	@ 0x7f
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	dc00      	bgt.n	8000e9a <__aeabi_fmul+0xde>
 8000e98:	e0b1      	b.n	8000ffe <__aeabi_fmul+0x242>
 8000e9a:	0015      	movs	r5, r2
 8000e9c:	0771      	lsls	r1, r6, #29
 8000e9e:	d00b      	beq.n	8000eb8 <__aeabi_fmul+0xfc>
 8000ea0:	200f      	movs	r0, #15
 8000ea2:	0021      	movs	r1, r4
 8000ea4:	4030      	ands	r0, r6
 8000ea6:	2804      	cmp	r0, #4
 8000ea8:	d006      	beq.n	8000eb8 <__aeabi_fmul+0xfc>
 8000eaa:	3604      	adds	r6, #4
 8000eac:	0132      	lsls	r2, r6, #4
 8000eae:	d503      	bpl.n	8000eb8 <__aeabi_fmul+0xfc>
 8000eb0:	4b6e      	ldr	r3, [pc, #440]	@ (800106c <__aeabi_fmul+0x2b0>)
 8000eb2:	401e      	ands	r6, r3
 8000eb4:	000b      	movs	r3, r1
 8000eb6:	3380      	adds	r3, #128	@ 0x80
 8000eb8:	2bfe      	cmp	r3, #254	@ 0xfe
 8000eba:	dd00      	ble.n	8000ebe <__aeabi_fmul+0x102>
 8000ebc:	e0bd      	b.n	800103a <__aeabi_fmul+0x27e>
 8000ebe:	01b2      	lsls	r2, r6, #6
 8000ec0:	0a52      	lsrs	r2, r2, #9
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	e048      	b.n	8000f58 <__aeabi_fmul+0x19c>
 8000ec6:	2e00      	cmp	r6, #0
 8000ec8:	d000      	beq.n	8000ecc <__aeabi_fmul+0x110>
 8000eca:	e092      	b.n	8000ff2 <__aeabi_fmul+0x236>
 8000ecc:	2308      	movs	r3, #8
 8000ece:	4699      	mov	r9, r3
 8000ed0:	3b06      	subs	r3, #6
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	027b      	lsls	r3, r7, #9
 8000ed6:	0a5b      	lsrs	r3, r3, #9
 8000ed8:	4698      	mov	r8, r3
 8000eda:	007b      	lsls	r3, r7, #1
 8000edc:	24ff      	movs	r4, #255	@ 0xff
 8000ede:	0e1b      	lsrs	r3, r3, #24
 8000ee0:	0fff      	lsrs	r7, r7, #31
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d18a      	bne.n	8000dfc <__aeabi_fmul+0x40>
 8000ee6:	4642      	mov	r2, r8
 8000ee8:	2a00      	cmp	r2, #0
 8000eea:	d164      	bne.n	8000fb6 <__aeabi_fmul+0x1fa>
 8000eec:	4649      	mov	r1, r9
 8000eee:	3201      	adds	r2, #1
 8000ef0:	4311      	orrs	r1, r2
 8000ef2:	4689      	mov	r9, r1
 8000ef4:	290a      	cmp	r1, #10
 8000ef6:	dc08      	bgt.n	8000f0a <__aeabi_fmul+0x14e>
 8000ef8:	407d      	eors	r5, r7
 8000efa:	2001      	movs	r0, #1
 8000efc:	b2ea      	uxtb	r2, r5
 8000efe:	2902      	cmp	r1, #2
 8000f00:	dc91      	bgt.n	8000e26 <__aeabi_fmul+0x6a>
 8000f02:	0015      	movs	r5, r2
 8000f04:	2200      	movs	r2, #0
 8000f06:	e027      	b.n	8000f58 <__aeabi_fmul+0x19c>
 8000f08:	0015      	movs	r5, r2
 8000f0a:	4653      	mov	r3, sl
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fmul+0x156>
 8000f10:	e093      	b.n	800103a <__aeabi_fmul+0x27e>
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d01a      	beq.n	8000f4c <__aeabi_fmul+0x190>
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d12c      	bne.n	8000f74 <__aeabi_fmul+0x1b8>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	e01b      	b.n	8000f58 <__aeabi_fmul+0x19c>
 8000f20:	4643      	mov	r3, r8
 8000f22:	34ff      	adds	r4, #255	@ 0xff
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d055      	beq.n	8000fd4 <__aeabi_fmul+0x218>
 8000f28:	2103      	movs	r1, #3
 8000f2a:	464b      	mov	r3, r9
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	0019      	movs	r1, r3
 8000f30:	2b0a      	cmp	r3, #10
 8000f32:	dc00      	bgt.n	8000f36 <__aeabi_fmul+0x17a>
 8000f34:	e092      	b.n	800105c <__aeabi_fmul+0x2a0>
 8000f36:	2b0f      	cmp	r3, #15
 8000f38:	d000      	beq.n	8000f3c <__aeabi_fmul+0x180>
 8000f3a:	e08c      	b.n	8001056 <__aeabi_fmul+0x29a>
 8000f3c:	2280      	movs	r2, #128	@ 0x80
 8000f3e:	03d2      	lsls	r2, r2, #15
 8000f40:	4216      	tst	r6, r2
 8000f42:	d003      	beq.n	8000f4c <__aeabi_fmul+0x190>
 8000f44:	4643      	mov	r3, r8
 8000f46:	4213      	tst	r3, r2
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fmul+0x190>
 8000f4a:	e07d      	b.n	8001048 <__aeabi_fmul+0x28c>
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	03d2      	lsls	r2, r2, #15
 8000f50:	4332      	orrs	r2, r6
 8000f52:	0252      	lsls	r2, r2, #9
 8000f54:	0a52      	lsrs	r2, r2, #9
 8000f56:	23ff      	movs	r3, #255	@ 0xff
 8000f58:	05d8      	lsls	r0, r3, #23
 8000f5a:	07ed      	lsls	r5, r5, #31
 8000f5c:	4310      	orrs	r0, r2
 8000f5e:	4328      	orrs	r0, r5
 8000f60:	bce0      	pop	{r5, r6, r7}
 8000f62:	46ba      	mov	sl, r7
 8000f64:	46b1      	mov	r9, r6
 8000f66:	46a8      	mov	r8, r5
 8000f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	0015      	movs	r5, r2
 8000f6e:	0871      	lsrs	r1, r6, #1
 8000f70:	401e      	ands	r6, r3
 8000f72:	430e      	orrs	r6, r1
 8000f74:	0023      	movs	r3, r4
 8000f76:	3380      	adds	r3, #128	@ 0x80
 8000f78:	1c61      	adds	r1, r4, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	dd41      	ble.n	8001002 <__aeabi_fmul+0x246>
 8000f7e:	0772      	lsls	r2, r6, #29
 8000f80:	d094      	beq.n	8000eac <__aeabi_fmul+0xf0>
 8000f82:	220f      	movs	r2, #15
 8000f84:	4032      	ands	r2, r6
 8000f86:	2a04      	cmp	r2, #4
 8000f88:	d000      	beq.n	8000f8c <__aeabi_fmul+0x1d0>
 8000f8a:	e78e      	b.n	8000eaa <__aeabi_fmul+0xee>
 8000f8c:	e78e      	b.n	8000eac <__aeabi_fmul+0xf0>
 8000f8e:	2e00      	cmp	r6, #0
 8000f90:	d105      	bne.n	8000f9e <__aeabi_fmul+0x1e2>
 8000f92:	2304      	movs	r3, #4
 8000f94:	4699      	mov	r9, r3
 8000f96:	3b03      	subs	r3, #3
 8000f98:	2400      	movs	r4, #0
 8000f9a:	469a      	mov	sl, r3
 8000f9c:	e726      	b.n	8000dec <__aeabi_fmul+0x30>
 8000f9e:	0030      	movs	r0, r6
 8000fa0:	f000 fb3a 	bl	8001618 <__clzsi2>
 8000fa4:	2476      	movs	r4, #118	@ 0x76
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409e      	lsls	r6, r3
 8000faa:	2300      	movs	r3, #0
 8000fac:	4264      	negs	r4, r4
 8000fae:	4699      	mov	r9, r3
 8000fb0:	469a      	mov	sl, r3
 8000fb2:	1a24      	subs	r4, r4, r0
 8000fb4:	e71a      	b.n	8000dec <__aeabi_fmul+0x30>
 8000fb6:	4640      	mov	r0, r8
 8000fb8:	f000 fb2e 	bl	8001618 <__clzsi2>
 8000fbc:	464b      	mov	r3, r9
 8000fbe:	1a24      	subs	r4, r4, r0
 8000fc0:	3c76      	subs	r4, #118	@ 0x76
 8000fc2:	2b0a      	cmp	r3, #10
 8000fc4:	dca1      	bgt.n	8000f0a <__aeabi_fmul+0x14e>
 8000fc6:	4643      	mov	r3, r8
 8000fc8:	3805      	subs	r0, #5
 8000fca:	4083      	lsls	r3, r0
 8000fcc:	407d      	eors	r5, r7
 8000fce:	4698      	mov	r8, r3
 8000fd0:	b2ea      	uxtb	r2, r5
 8000fd2:	e724      	b.n	8000e1e <__aeabi_fmul+0x62>
 8000fd4:	464a      	mov	r2, r9
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	002a      	movs	r2, r5
 8000fdc:	407a      	eors	r2, r7
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	2b0a      	cmp	r3, #10
 8000fe2:	dc92      	bgt.n	8000f0a <__aeabi_fmul+0x14e>
 8000fe4:	4649      	mov	r1, r9
 8000fe6:	0015      	movs	r5, r2
 8000fe8:	2900      	cmp	r1, #0
 8000fea:	d026      	beq.n	800103a <__aeabi_fmul+0x27e>
 8000fec:	4699      	mov	r9, r3
 8000fee:	2002      	movs	r0, #2
 8000ff0:	e719      	b.n	8000e26 <__aeabi_fmul+0x6a>
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	4699      	mov	r9, r3
 8000ff6:	3b09      	subs	r3, #9
 8000ff8:	24ff      	movs	r4, #255	@ 0xff
 8000ffa:	469a      	mov	sl, r3
 8000ffc:	e6f6      	b.n	8000dec <__aeabi_fmul+0x30>
 8000ffe:	0015      	movs	r5, r2
 8001000:	0021      	movs	r1, r4
 8001002:	2201      	movs	r2, #1
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b1b      	cmp	r3, #27
 8001008:	dd00      	ble.n	800100c <__aeabi_fmul+0x250>
 800100a:	e786      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800100c:	319e      	adds	r1, #158	@ 0x9e
 800100e:	0032      	movs	r2, r6
 8001010:	408e      	lsls	r6, r1
 8001012:	40da      	lsrs	r2, r3
 8001014:	1e73      	subs	r3, r6, #1
 8001016:	419e      	sbcs	r6, r3
 8001018:	4332      	orrs	r2, r6
 800101a:	0753      	lsls	r3, r2, #29
 800101c:	d004      	beq.n	8001028 <__aeabi_fmul+0x26c>
 800101e:	230f      	movs	r3, #15
 8001020:	4013      	ands	r3, r2
 8001022:	2b04      	cmp	r3, #4
 8001024:	d000      	beq.n	8001028 <__aeabi_fmul+0x26c>
 8001026:	3204      	adds	r2, #4
 8001028:	0153      	lsls	r3, r2, #5
 800102a:	d510      	bpl.n	800104e <__aeabi_fmul+0x292>
 800102c:	2301      	movs	r3, #1
 800102e:	2200      	movs	r2, #0
 8001030:	e792      	b.n	8000f58 <__aeabi_fmul+0x19c>
 8001032:	003d      	movs	r5, r7
 8001034:	4646      	mov	r6, r8
 8001036:	4682      	mov	sl, r0
 8001038:	e767      	b.n	8000f0a <__aeabi_fmul+0x14e>
 800103a:	23ff      	movs	r3, #255	@ 0xff
 800103c:	2200      	movs	r2, #0
 800103e:	e78b      	b.n	8000f58 <__aeabi_fmul+0x19c>
 8001040:	2280      	movs	r2, #128	@ 0x80
 8001042:	2500      	movs	r5, #0
 8001044:	03d2      	lsls	r2, r2, #15
 8001046:	e786      	b.n	8000f56 <__aeabi_fmul+0x19a>
 8001048:	003d      	movs	r5, r7
 800104a:	431a      	orrs	r2, r3
 800104c:	e783      	b.n	8000f56 <__aeabi_fmul+0x19a>
 800104e:	0192      	lsls	r2, r2, #6
 8001050:	2300      	movs	r3, #0
 8001052:	0a52      	lsrs	r2, r2, #9
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0x19c>
 8001056:	003d      	movs	r5, r7
 8001058:	4646      	mov	r6, r8
 800105a:	e777      	b.n	8000f4c <__aeabi_fmul+0x190>
 800105c:	002a      	movs	r2, r5
 800105e:	2301      	movs	r3, #1
 8001060:	407a      	eors	r2, r7
 8001062:	408b      	lsls	r3, r1
 8001064:	2003      	movs	r0, #3
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	e6e9      	b.n	8000e3e <__aeabi_fmul+0x82>
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	f7ffffff 	.word	0xf7ffffff

08001070 <__aeabi_fsub>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	4647      	mov	r7, r8
 8001074:	46ce      	mov	lr, r9
 8001076:	0243      	lsls	r3, r0, #9
 8001078:	b580      	push	{r7, lr}
 800107a:	0a5f      	lsrs	r7, r3, #9
 800107c:	099b      	lsrs	r3, r3, #6
 800107e:	0045      	lsls	r5, r0, #1
 8001080:	004a      	lsls	r2, r1, #1
 8001082:	469c      	mov	ip, r3
 8001084:	024b      	lsls	r3, r1, #9
 8001086:	0fc4      	lsrs	r4, r0, #31
 8001088:	0fce      	lsrs	r6, r1, #31
 800108a:	0e2d      	lsrs	r5, r5, #24
 800108c:	0a58      	lsrs	r0, r3, #9
 800108e:	0e12      	lsrs	r2, r2, #24
 8001090:	0999      	lsrs	r1, r3, #6
 8001092:	2aff      	cmp	r2, #255	@ 0xff
 8001094:	d06b      	beq.n	800116e <__aeabi_fsub+0xfe>
 8001096:	2301      	movs	r3, #1
 8001098:	405e      	eors	r6, r3
 800109a:	1aab      	subs	r3, r5, r2
 800109c:	42b4      	cmp	r4, r6
 800109e:	d04b      	beq.n	8001138 <__aeabi_fsub+0xc8>
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	dc00      	bgt.n	80010a6 <__aeabi_fsub+0x36>
 80010a4:	e0ff      	b.n	80012a6 <__aeabi_fsub+0x236>
 80010a6:	2a00      	cmp	r2, #0
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x3c>
 80010aa:	e088      	b.n	80011be <__aeabi_fsub+0x14e>
 80010ac:	2dff      	cmp	r5, #255	@ 0xff
 80010ae:	d100      	bne.n	80010b2 <__aeabi_fsub+0x42>
 80010b0:	e0ef      	b.n	8001292 <__aeabi_fsub+0x222>
 80010b2:	2280      	movs	r2, #128	@ 0x80
 80010b4:	04d2      	lsls	r2, r2, #19
 80010b6:	4311      	orrs	r1, r2
 80010b8:	2001      	movs	r0, #1
 80010ba:	2b1b      	cmp	r3, #27
 80010bc:	dc08      	bgt.n	80010d0 <__aeabi_fsub+0x60>
 80010be:	0008      	movs	r0, r1
 80010c0:	2220      	movs	r2, #32
 80010c2:	40d8      	lsrs	r0, r3
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	4099      	lsls	r1, r3
 80010c8:	000b      	movs	r3, r1
 80010ca:	1e5a      	subs	r2, r3, #1
 80010cc:	4193      	sbcs	r3, r2
 80010ce:	4318      	orrs	r0, r3
 80010d0:	4663      	mov	r3, ip
 80010d2:	1a1b      	subs	r3, r3, r0
 80010d4:	469c      	mov	ip, r3
 80010d6:	4663      	mov	r3, ip
 80010d8:	015b      	lsls	r3, r3, #5
 80010da:	d400      	bmi.n	80010de <__aeabi_fsub+0x6e>
 80010dc:	e0cd      	b.n	800127a <__aeabi_fsub+0x20a>
 80010de:	4663      	mov	r3, ip
 80010e0:	019f      	lsls	r7, r3, #6
 80010e2:	09bf      	lsrs	r7, r7, #6
 80010e4:	0038      	movs	r0, r7
 80010e6:	f000 fa97 	bl	8001618 <__clzsi2>
 80010ea:	003b      	movs	r3, r7
 80010ec:	3805      	subs	r0, #5
 80010ee:	4083      	lsls	r3, r0
 80010f0:	4285      	cmp	r5, r0
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_fsub+0x86>
 80010f4:	e0a2      	b.n	800123c <__aeabi_fsub+0x1cc>
 80010f6:	4ab7      	ldr	r2, [pc, #732]	@ (80013d4 <__aeabi_fsub+0x364>)
 80010f8:	1a2d      	subs	r5, r5, r0
 80010fa:	401a      	ands	r2, r3
 80010fc:	4694      	mov	ip, r2
 80010fe:	075a      	lsls	r2, r3, #29
 8001100:	d100      	bne.n	8001104 <__aeabi_fsub+0x94>
 8001102:	e0c3      	b.n	800128c <__aeabi_fsub+0x21c>
 8001104:	220f      	movs	r2, #15
 8001106:	4013      	ands	r3, r2
 8001108:	2b04      	cmp	r3, #4
 800110a:	d100      	bne.n	800110e <__aeabi_fsub+0x9e>
 800110c:	e0be      	b.n	800128c <__aeabi_fsub+0x21c>
 800110e:	2304      	movs	r3, #4
 8001110:	4698      	mov	r8, r3
 8001112:	44c4      	add	ip, r8
 8001114:	4663      	mov	r3, ip
 8001116:	015b      	lsls	r3, r3, #5
 8001118:	d400      	bmi.n	800111c <__aeabi_fsub+0xac>
 800111a:	e0b7      	b.n	800128c <__aeabi_fsub+0x21c>
 800111c:	1c68      	adds	r0, r5, #1
 800111e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001120:	d000      	beq.n	8001124 <__aeabi_fsub+0xb4>
 8001122:	e0a5      	b.n	8001270 <__aeabi_fsub+0x200>
 8001124:	20ff      	movs	r0, #255	@ 0xff
 8001126:	2200      	movs	r2, #0
 8001128:	05c0      	lsls	r0, r0, #23
 800112a:	4310      	orrs	r0, r2
 800112c:	07e4      	lsls	r4, r4, #31
 800112e:	4320      	orrs	r0, r4
 8001130:	bcc0      	pop	{r6, r7}
 8001132:	46b9      	mov	r9, r7
 8001134:	46b0      	mov	r8, r6
 8001136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001138:	2b00      	cmp	r3, #0
 800113a:	dc00      	bgt.n	800113e <__aeabi_fsub+0xce>
 800113c:	e1eb      	b.n	8001516 <__aeabi_fsub+0x4a6>
 800113e:	2a00      	cmp	r2, #0
 8001140:	d046      	beq.n	80011d0 <__aeabi_fsub+0x160>
 8001142:	2dff      	cmp	r5, #255	@ 0xff
 8001144:	d100      	bne.n	8001148 <__aeabi_fsub+0xd8>
 8001146:	e0a4      	b.n	8001292 <__aeabi_fsub+0x222>
 8001148:	2280      	movs	r2, #128	@ 0x80
 800114a:	04d2      	lsls	r2, r2, #19
 800114c:	4311      	orrs	r1, r2
 800114e:	2b1b      	cmp	r3, #27
 8001150:	dc00      	bgt.n	8001154 <__aeabi_fsub+0xe4>
 8001152:	e0fb      	b.n	800134c <__aeabi_fsub+0x2dc>
 8001154:	2305      	movs	r3, #5
 8001156:	4698      	mov	r8, r3
 8001158:	002b      	movs	r3, r5
 800115a:	44c4      	add	ip, r8
 800115c:	4662      	mov	r2, ip
 800115e:	08d7      	lsrs	r7, r2, #3
 8001160:	2bff      	cmp	r3, #255	@ 0xff
 8001162:	d100      	bne.n	8001166 <__aeabi_fsub+0xf6>
 8001164:	e095      	b.n	8001292 <__aeabi_fsub+0x222>
 8001166:	027a      	lsls	r2, r7, #9
 8001168:	0a52      	lsrs	r2, r2, #9
 800116a:	b2d8      	uxtb	r0, r3
 800116c:	e7dc      	b.n	8001128 <__aeabi_fsub+0xb8>
 800116e:	002b      	movs	r3, r5
 8001170:	3bff      	subs	r3, #255	@ 0xff
 8001172:	4699      	mov	r9, r3
 8001174:	2900      	cmp	r1, #0
 8001176:	d118      	bne.n	80011aa <__aeabi_fsub+0x13a>
 8001178:	2301      	movs	r3, #1
 800117a:	405e      	eors	r6, r3
 800117c:	42b4      	cmp	r4, r6
 800117e:	d100      	bne.n	8001182 <__aeabi_fsub+0x112>
 8001180:	e0ca      	b.n	8001318 <__aeabi_fsub+0x2a8>
 8001182:	464b      	mov	r3, r9
 8001184:	2b00      	cmp	r3, #0
 8001186:	d02d      	beq.n	80011e4 <__aeabi_fsub+0x174>
 8001188:	2d00      	cmp	r5, #0
 800118a:	d000      	beq.n	800118e <__aeabi_fsub+0x11e>
 800118c:	e13c      	b.n	8001408 <__aeabi_fsub+0x398>
 800118e:	23ff      	movs	r3, #255	@ 0xff
 8001190:	4664      	mov	r4, ip
 8001192:	2c00      	cmp	r4, #0
 8001194:	d100      	bne.n	8001198 <__aeabi_fsub+0x128>
 8001196:	e15f      	b.n	8001458 <__aeabi_fsub+0x3e8>
 8001198:	1e5d      	subs	r5, r3, #1
 800119a:	2b01      	cmp	r3, #1
 800119c:	d100      	bne.n	80011a0 <__aeabi_fsub+0x130>
 800119e:	e174      	b.n	800148a <__aeabi_fsub+0x41a>
 80011a0:	0034      	movs	r4, r6
 80011a2:	2bff      	cmp	r3, #255	@ 0xff
 80011a4:	d074      	beq.n	8001290 <__aeabi_fsub+0x220>
 80011a6:	002b      	movs	r3, r5
 80011a8:	e103      	b.n	80013b2 <__aeabi_fsub+0x342>
 80011aa:	42b4      	cmp	r4, r6
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x140>
 80011ae:	e09c      	b.n	80012ea <__aeabi_fsub+0x27a>
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d017      	beq.n	80011e4 <__aeabi_fsub+0x174>
 80011b4:	2d00      	cmp	r5, #0
 80011b6:	d0ea      	beq.n	800118e <__aeabi_fsub+0x11e>
 80011b8:	0007      	movs	r7, r0
 80011ba:	0034      	movs	r4, r6
 80011bc:	e06c      	b.n	8001298 <__aeabi_fsub+0x228>
 80011be:	2900      	cmp	r1, #0
 80011c0:	d0cc      	beq.n	800115c <__aeabi_fsub+0xec>
 80011c2:	1e5a      	subs	r2, r3, #1
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d02b      	beq.n	8001220 <__aeabi_fsub+0x1b0>
 80011c8:	2bff      	cmp	r3, #255	@ 0xff
 80011ca:	d062      	beq.n	8001292 <__aeabi_fsub+0x222>
 80011cc:	0013      	movs	r3, r2
 80011ce:	e773      	b.n	80010b8 <__aeabi_fsub+0x48>
 80011d0:	2900      	cmp	r1, #0
 80011d2:	d0c3      	beq.n	800115c <__aeabi_fsub+0xec>
 80011d4:	1e5a      	subs	r2, r3, #1
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d100      	bne.n	80011dc <__aeabi_fsub+0x16c>
 80011da:	e11e      	b.n	800141a <__aeabi_fsub+0x3aa>
 80011dc:	2bff      	cmp	r3, #255	@ 0xff
 80011de:	d058      	beq.n	8001292 <__aeabi_fsub+0x222>
 80011e0:	0013      	movs	r3, r2
 80011e2:	e7b4      	b.n	800114e <__aeabi_fsub+0xde>
 80011e4:	22fe      	movs	r2, #254	@ 0xfe
 80011e6:	1c6b      	adds	r3, r5, #1
 80011e8:	421a      	tst	r2, r3
 80011ea:	d10d      	bne.n	8001208 <__aeabi_fsub+0x198>
 80011ec:	2d00      	cmp	r5, #0
 80011ee:	d060      	beq.n	80012b2 <__aeabi_fsub+0x242>
 80011f0:	4663      	mov	r3, ip
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0x188>
 80011f6:	e120      	b.n	800143a <__aeabi_fsub+0x3ca>
 80011f8:	2900      	cmp	r1, #0
 80011fa:	d000      	beq.n	80011fe <__aeabi_fsub+0x18e>
 80011fc:	e128      	b.n	8001450 <__aeabi_fsub+0x3e0>
 80011fe:	2280      	movs	r2, #128	@ 0x80
 8001200:	2400      	movs	r4, #0
 8001202:	20ff      	movs	r0, #255	@ 0xff
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	e78f      	b.n	8001128 <__aeabi_fsub+0xb8>
 8001208:	4663      	mov	r3, ip
 800120a:	1a5f      	subs	r7, r3, r1
 800120c:	017b      	lsls	r3, r7, #5
 800120e:	d500      	bpl.n	8001212 <__aeabi_fsub+0x1a2>
 8001210:	e0fe      	b.n	8001410 <__aeabi_fsub+0x3a0>
 8001212:	2f00      	cmp	r7, #0
 8001214:	d000      	beq.n	8001218 <__aeabi_fsub+0x1a8>
 8001216:	e765      	b.n	80010e4 <__aeabi_fsub+0x74>
 8001218:	2400      	movs	r4, #0
 800121a:	2000      	movs	r0, #0
 800121c:	2200      	movs	r2, #0
 800121e:	e783      	b.n	8001128 <__aeabi_fsub+0xb8>
 8001220:	4663      	mov	r3, ip
 8001222:	1a59      	subs	r1, r3, r1
 8001224:	014b      	lsls	r3, r1, #5
 8001226:	d400      	bmi.n	800122a <__aeabi_fsub+0x1ba>
 8001228:	e119      	b.n	800145e <__aeabi_fsub+0x3ee>
 800122a:	018f      	lsls	r7, r1, #6
 800122c:	09bf      	lsrs	r7, r7, #6
 800122e:	0038      	movs	r0, r7
 8001230:	f000 f9f2 	bl	8001618 <__clzsi2>
 8001234:	003b      	movs	r3, r7
 8001236:	3805      	subs	r0, #5
 8001238:	4083      	lsls	r3, r0
 800123a:	2501      	movs	r5, #1
 800123c:	2220      	movs	r2, #32
 800123e:	1b40      	subs	r0, r0, r5
 8001240:	3001      	adds	r0, #1
 8001242:	1a12      	subs	r2, r2, r0
 8001244:	0019      	movs	r1, r3
 8001246:	4093      	lsls	r3, r2
 8001248:	40c1      	lsrs	r1, r0
 800124a:	1e5a      	subs	r2, r3, #1
 800124c:	4193      	sbcs	r3, r2
 800124e:	4319      	orrs	r1, r3
 8001250:	468c      	mov	ip, r1
 8001252:	1e0b      	subs	r3, r1, #0
 8001254:	d0e1      	beq.n	800121a <__aeabi_fsub+0x1aa>
 8001256:	075b      	lsls	r3, r3, #29
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x1ec>
 800125a:	e152      	b.n	8001502 <__aeabi_fsub+0x492>
 800125c:	230f      	movs	r3, #15
 800125e:	2500      	movs	r5, #0
 8001260:	400b      	ands	r3, r1
 8001262:	2b04      	cmp	r3, #4
 8001264:	d000      	beq.n	8001268 <__aeabi_fsub+0x1f8>
 8001266:	e752      	b.n	800110e <__aeabi_fsub+0x9e>
 8001268:	2001      	movs	r0, #1
 800126a:	014a      	lsls	r2, r1, #5
 800126c:	d400      	bmi.n	8001270 <__aeabi_fsub+0x200>
 800126e:	e092      	b.n	8001396 <__aeabi_fsub+0x326>
 8001270:	b2c0      	uxtb	r0, r0
 8001272:	4663      	mov	r3, ip
 8001274:	019a      	lsls	r2, r3, #6
 8001276:	0a52      	lsrs	r2, r2, #9
 8001278:	e756      	b.n	8001128 <__aeabi_fsub+0xb8>
 800127a:	4663      	mov	r3, ip
 800127c:	075b      	lsls	r3, r3, #29
 800127e:	d005      	beq.n	800128c <__aeabi_fsub+0x21c>
 8001280:	230f      	movs	r3, #15
 8001282:	4662      	mov	r2, ip
 8001284:	4013      	ands	r3, r2
 8001286:	2b04      	cmp	r3, #4
 8001288:	d000      	beq.n	800128c <__aeabi_fsub+0x21c>
 800128a:	e740      	b.n	800110e <__aeabi_fsub+0x9e>
 800128c:	002b      	movs	r3, r5
 800128e:	e765      	b.n	800115c <__aeabi_fsub+0xec>
 8001290:	0007      	movs	r7, r0
 8001292:	2f00      	cmp	r7, #0
 8001294:	d100      	bne.n	8001298 <__aeabi_fsub+0x228>
 8001296:	e745      	b.n	8001124 <__aeabi_fsub+0xb4>
 8001298:	2280      	movs	r2, #128	@ 0x80
 800129a:	03d2      	lsls	r2, r2, #15
 800129c:	433a      	orrs	r2, r7
 800129e:	0252      	lsls	r2, r2, #9
 80012a0:	20ff      	movs	r0, #255	@ 0xff
 80012a2:	0a52      	lsrs	r2, r2, #9
 80012a4:	e740      	b.n	8001128 <__aeabi_fsub+0xb8>
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d179      	bne.n	800139e <__aeabi_fsub+0x32e>
 80012aa:	22fe      	movs	r2, #254	@ 0xfe
 80012ac:	1c6b      	adds	r3, r5, #1
 80012ae:	421a      	tst	r2, r3
 80012b0:	d1aa      	bne.n	8001208 <__aeabi_fsub+0x198>
 80012b2:	4663      	mov	r3, ip
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d100      	bne.n	80012ba <__aeabi_fsub+0x24a>
 80012b8:	e0f5      	b.n	80014a6 <__aeabi_fsub+0x436>
 80012ba:	2900      	cmp	r1, #0
 80012bc:	d100      	bne.n	80012c0 <__aeabi_fsub+0x250>
 80012be:	e0d1      	b.n	8001464 <__aeabi_fsub+0x3f4>
 80012c0:	1a5f      	subs	r7, r3, r1
 80012c2:	2380      	movs	r3, #128	@ 0x80
 80012c4:	04db      	lsls	r3, r3, #19
 80012c6:	421f      	tst	r7, r3
 80012c8:	d100      	bne.n	80012cc <__aeabi_fsub+0x25c>
 80012ca:	e10e      	b.n	80014ea <__aeabi_fsub+0x47a>
 80012cc:	4662      	mov	r2, ip
 80012ce:	2401      	movs	r4, #1
 80012d0:	1a8a      	subs	r2, r1, r2
 80012d2:	4694      	mov	ip, r2
 80012d4:	2000      	movs	r0, #0
 80012d6:	4034      	ands	r4, r6
 80012d8:	2a00      	cmp	r2, #0
 80012da:	d100      	bne.n	80012de <__aeabi_fsub+0x26e>
 80012dc:	e724      	b.n	8001128 <__aeabi_fsub+0xb8>
 80012de:	2001      	movs	r0, #1
 80012e0:	421a      	tst	r2, r3
 80012e2:	d1c6      	bne.n	8001272 <__aeabi_fsub+0x202>
 80012e4:	2300      	movs	r3, #0
 80012e6:	08d7      	lsrs	r7, r2, #3
 80012e8:	e73d      	b.n	8001166 <__aeabi_fsub+0xf6>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d017      	beq.n	800131e <__aeabi_fsub+0x2ae>
 80012ee:	2d00      	cmp	r5, #0
 80012f0:	d000      	beq.n	80012f4 <__aeabi_fsub+0x284>
 80012f2:	e0af      	b.n	8001454 <__aeabi_fsub+0x3e4>
 80012f4:	23ff      	movs	r3, #255	@ 0xff
 80012f6:	4665      	mov	r5, ip
 80012f8:	2d00      	cmp	r5, #0
 80012fa:	d100      	bne.n	80012fe <__aeabi_fsub+0x28e>
 80012fc:	e0ad      	b.n	800145a <__aeabi_fsub+0x3ea>
 80012fe:	1e5e      	subs	r6, r3, #1
 8001300:	2b01      	cmp	r3, #1
 8001302:	d100      	bne.n	8001306 <__aeabi_fsub+0x296>
 8001304:	e089      	b.n	800141a <__aeabi_fsub+0x3aa>
 8001306:	2bff      	cmp	r3, #255	@ 0xff
 8001308:	d0c2      	beq.n	8001290 <__aeabi_fsub+0x220>
 800130a:	2e1b      	cmp	r6, #27
 800130c:	dc00      	bgt.n	8001310 <__aeabi_fsub+0x2a0>
 800130e:	e0ab      	b.n	8001468 <__aeabi_fsub+0x3f8>
 8001310:	1d4b      	adds	r3, r1, #5
 8001312:	469c      	mov	ip, r3
 8001314:	0013      	movs	r3, r2
 8001316:	e721      	b.n	800115c <__aeabi_fsub+0xec>
 8001318:	464b      	mov	r3, r9
 800131a:	2b00      	cmp	r3, #0
 800131c:	d170      	bne.n	8001400 <__aeabi_fsub+0x390>
 800131e:	22fe      	movs	r2, #254	@ 0xfe
 8001320:	1c6b      	adds	r3, r5, #1
 8001322:	421a      	tst	r2, r3
 8001324:	d15e      	bne.n	80013e4 <__aeabi_fsub+0x374>
 8001326:	2d00      	cmp	r5, #0
 8001328:	d000      	beq.n	800132c <__aeabi_fsub+0x2bc>
 800132a:	e0c3      	b.n	80014b4 <__aeabi_fsub+0x444>
 800132c:	4663      	mov	r3, ip
 800132e:	2b00      	cmp	r3, #0
 8001330:	d100      	bne.n	8001334 <__aeabi_fsub+0x2c4>
 8001332:	e0d0      	b.n	80014d6 <__aeabi_fsub+0x466>
 8001334:	2900      	cmp	r1, #0
 8001336:	d100      	bne.n	800133a <__aeabi_fsub+0x2ca>
 8001338:	e094      	b.n	8001464 <__aeabi_fsub+0x3f4>
 800133a:	000a      	movs	r2, r1
 800133c:	4462      	add	r2, ip
 800133e:	0153      	lsls	r3, r2, #5
 8001340:	d400      	bmi.n	8001344 <__aeabi_fsub+0x2d4>
 8001342:	e0d8      	b.n	80014f6 <__aeabi_fsub+0x486>
 8001344:	0192      	lsls	r2, r2, #6
 8001346:	2001      	movs	r0, #1
 8001348:	0a52      	lsrs	r2, r2, #9
 800134a:	e6ed      	b.n	8001128 <__aeabi_fsub+0xb8>
 800134c:	0008      	movs	r0, r1
 800134e:	2220      	movs	r2, #32
 8001350:	40d8      	lsrs	r0, r3
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	4099      	lsls	r1, r3
 8001356:	000b      	movs	r3, r1
 8001358:	1e5a      	subs	r2, r3, #1
 800135a:	4193      	sbcs	r3, r2
 800135c:	4303      	orrs	r3, r0
 800135e:	449c      	add	ip, r3
 8001360:	4663      	mov	r3, ip
 8001362:	015b      	lsls	r3, r3, #5
 8001364:	d589      	bpl.n	800127a <__aeabi_fsub+0x20a>
 8001366:	3501      	adds	r5, #1
 8001368:	2dff      	cmp	r5, #255	@ 0xff
 800136a:	d100      	bne.n	800136e <__aeabi_fsub+0x2fe>
 800136c:	e6da      	b.n	8001124 <__aeabi_fsub+0xb4>
 800136e:	4662      	mov	r2, ip
 8001370:	2301      	movs	r3, #1
 8001372:	4919      	ldr	r1, [pc, #100]	@ (80013d8 <__aeabi_fsub+0x368>)
 8001374:	4013      	ands	r3, r2
 8001376:	0852      	lsrs	r2, r2, #1
 8001378:	400a      	ands	r2, r1
 800137a:	431a      	orrs	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	4694      	mov	ip, r2
 8001380:	075b      	lsls	r3, r3, #29
 8001382:	d004      	beq.n	800138e <__aeabi_fsub+0x31e>
 8001384:	230f      	movs	r3, #15
 8001386:	4013      	ands	r3, r2
 8001388:	2b04      	cmp	r3, #4
 800138a:	d000      	beq.n	800138e <__aeabi_fsub+0x31e>
 800138c:	e6bf      	b.n	800110e <__aeabi_fsub+0x9e>
 800138e:	4663      	mov	r3, ip
 8001390:	015b      	lsls	r3, r3, #5
 8001392:	d500      	bpl.n	8001396 <__aeabi_fsub+0x326>
 8001394:	e6c2      	b.n	800111c <__aeabi_fsub+0xac>
 8001396:	4663      	mov	r3, ip
 8001398:	08df      	lsrs	r7, r3, #3
 800139a:	002b      	movs	r3, r5
 800139c:	e6e3      	b.n	8001166 <__aeabi_fsub+0xf6>
 800139e:	1b53      	subs	r3, r2, r5
 80013a0:	2d00      	cmp	r5, #0
 80013a2:	d100      	bne.n	80013a6 <__aeabi_fsub+0x336>
 80013a4:	e6f4      	b.n	8001190 <__aeabi_fsub+0x120>
 80013a6:	2080      	movs	r0, #128	@ 0x80
 80013a8:	4664      	mov	r4, ip
 80013aa:	04c0      	lsls	r0, r0, #19
 80013ac:	4304      	orrs	r4, r0
 80013ae:	46a4      	mov	ip, r4
 80013b0:	0034      	movs	r4, r6
 80013b2:	2001      	movs	r0, #1
 80013b4:	2b1b      	cmp	r3, #27
 80013b6:	dc09      	bgt.n	80013cc <__aeabi_fsub+0x35c>
 80013b8:	2520      	movs	r5, #32
 80013ba:	4660      	mov	r0, ip
 80013bc:	40d8      	lsrs	r0, r3
 80013be:	1aeb      	subs	r3, r5, r3
 80013c0:	4665      	mov	r5, ip
 80013c2:	409d      	lsls	r5, r3
 80013c4:	002b      	movs	r3, r5
 80013c6:	1e5d      	subs	r5, r3, #1
 80013c8:	41ab      	sbcs	r3, r5
 80013ca:	4318      	orrs	r0, r3
 80013cc:	1a0b      	subs	r3, r1, r0
 80013ce:	469c      	mov	ip, r3
 80013d0:	0015      	movs	r5, r2
 80013d2:	e680      	b.n	80010d6 <__aeabi_fsub+0x66>
 80013d4:	fbffffff 	.word	0xfbffffff
 80013d8:	7dffffff 	.word	0x7dffffff
 80013dc:	22fe      	movs	r2, #254	@ 0xfe
 80013de:	1c6b      	adds	r3, r5, #1
 80013e0:	4213      	tst	r3, r2
 80013e2:	d0a3      	beq.n	800132c <__aeabi_fsub+0x2bc>
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0x37a>
 80013e8:	e69c      	b.n	8001124 <__aeabi_fsub+0xb4>
 80013ea:	4461      	add	r1, ip
 80013ec:	0849      	lsrs	r1, r1, #1
 80013ee:	074a      	lsls	r2, r1, #29
 80013f0:	d049      	beq.n	8001486 <__aeabi_fsub+0x416>
 80013f2:	220f      	movs	r2, #15
 80013f4:	400a      	ands	r2, r1
 80013f6:	2a04      	cmp	r2, #4
 80013f8:	d045      	beq.n	8001486 <__aeabi_fsub+0x416>
 80013fa:	1d0a      	adds	r2, r1, #4
 80013fc:	4694      	mov	ip, r2
 80013fe:	e6ad      	b.n	800115c <__aeabi_fsub+0xec>
 8001400:	2d00      	cmp	r5, #0
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x396>
 8001404:	e776      	b.n	80012f4 <__aeabi_fsub+0x284>
 8001406:	e68d      	b.n	8001124 <__aeabi_fsub+0xb4>
 8001408:	0034      	movs	r4, r6
 800140a:	20ff      	movs	r0, #255	@ 0xff
 800140c:	2200      	movs	r2, #0
 800140e:	e68b      	b.n	8001128 <__aeabi_fsub+0xb8>
 8001410:	4663      	mov	r3, ip
 8001412:	2401      	movs	r4, #1
 8001414:	1acf      	subs	r7, r1, r3
 8001416:	4034      	ands	r4, r6
 8001418:	e664      	b.n	80010e4 <__aeabi_fsub+0x74>
 800141a:	4461      	add	r1, ip
 800141c:	014b      	lsls	r3, r1, #5
 800141e:	d56d      	bpl.n	80014fc <__aeabi_fsub+0x48c>
 8001420:	0848      	lsrs	r0, r1, #1
 8001422:	4944      	ldr	r1, [pc, #272]	@ (8001534 <__aeabi_fsub+0x4c4>)
 8001424:	4001      	ands	r1, r0
 8001426:	0743      	lsls	r3, r0, #29
 8001428:	d02c      	beq.n	8001484 <__aeabi_fsub+0x414>
 800142a:	230f      	movs	r3, #15
 800142c:	4003      	ands	r3, r0
 800142e:	2b04      	cmp	r3, #4
 8001430:	d028      	beq.n	8001484 <__aeabi_fsub+0x414>
 8001432:	1d0b      	adds	r3, r1, #4
 8001434:	469c      	mov	ip, r3
 8001436:	2302      	movs	r3, #2
 8001438:	e690      	b.n	800115c <__aeabi_fsub+0xec>
 800143a:	2900      	cmp	r1, #0
 800143c:	d100      	bne.n	8001440 <__aeabi_fsub+0x3d0>
 800143e:	e72b      	b.n	8001298 <__aeabi_fsub+0x228>
 8001440:	2380      	movs	r3, #128	@ 0x80
 8001442:	03db      	lsls	r3, r3, #15
 8001444:	429f      	cmp	r7, r3
 8001446:	d200      	bcs.n	800144a <__aeabi_fsub+0x3da>
 8001448:	e726      	b.n	8001298 <__aeabi_fsub+0x228>
 800144a:	4298      	cmp	r0, r3
 800144c:	d300      	bcc.n	8001450 <__aeabi_fsub+0x3e0>
 800144e:	e723      	b.n	8001298 <__aeabi_fsub+0x228>
 8001450:	2401      	movs	r4, #1
 8001452:	4034      	ands	r4, r6
 8001454:	0007      	movs	r7, r0
 8001456:	e71f      	b.n	8001298 <__aeabi_fsub+0x228>
 8001458:	0034      	movs	r4, r6
 800145a:	468c      	mov	ip, r1
 800145c:	e67e      	b.n	800115c <__aeabi_fsub+0xec>
 800145e:	2301      	movs	r3, #1
 8001460:	08cf      	lsrs	r7, r1, #3
 8001462:	e680      	b.n	8001166 <__aeabi_fsub+0xf6>
 8001464:	2300      	movs	r3, #0
 8001466:	e67e      	b.n	8001166 <__aeabi_fsub+0xf6>
 8001468:	2020      	movs	r0, #32
 800146a:	4665      	mov	r5, ip
 800146c:	1b80      	subs	r0, r0, r6
 800146e:	4085      	lsls	r5, r0
 8001470:	4663      	mov	r3, ip
 8001472:	0028      	movs	r0, r5
 8001474:	40f3      	lsrs	r3, r6
 8001476:	1e45      	subs	r5, r0, #1
 8001478:	41a8      	sbcs	r0, r5
 800147a:	4303      	orrs	r3, r0
 800147c:	469c      	mov	ip, r3
 800147e:	0015      	movs	r5, r2
 8001480:	448c      	add	ip, r1
 8001482:	e76d      	b.n	8001360 <__aeabi_fsub+0x2f0>
 8001484:	2302      	movs	r3, #2
 8001486:	08cf      	lsrs	r7, r1, #3
 8001488:	e66d      	b.n	8001166 <__aeabi_fsub+0xf6>
 800148a:	1b0f      	subs	r7, r1, r4
 800148c:	017b      	lsls	r3, r7, #5
 800148e:	d528      	bpl.n	80014e2 <__aeabi_fsub+0x472>
 8001490:	01bf      	lsls	r7, r7, #6
 8001492:	09bf      	lsrs	r7, r7, #6
 8001494:	0038      	movs	r0, r7
 8001496:	f000 f8bf 	bl	8001618 <__clzsi2>
 800149a:	003b      	movs	r3, r7
 800149c:	3805      	subs	r0, #5
 800149e:	4083      	lsls	r3, r0
 80014a0:	0034      	movs	r4, r6
 80014a2:	2501      	movs	r5, #1
 80014a4:	e6ca      	b.n	800123c <__aeabi_fsub+0x1cc>
 80014a6:	2900      	cmp	r1, #0
 80014a8:	d100      	bne.n	80014ac <__aeabi_fsub+0x43c>
 80014aa:	e6b5      	b.n	8001218 <__aeabi_fsub+0x1a8>
 80014ac:	2401      	movs	r4, #1
 80014ae:	0007      	movs	r7, r0
 80014b0:	4034      	ands	r4, r6
 80014b2:	e658      	b.n	8001166 <__aeabi_fsub+0xf6>
 80014b4:	4663      	mov	r3, ip
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d100      	bne.n	80014bc <__aeabi_fsub+0x44c>
 80014ba:	e6e9      	b.n	8001290 <__aeabi_fsub+0x220>
 80014bc:	2900      	cmp	r1, #0
 80014be:	d100      	bne.n	80014c2 <__aeabi_fsub+0x452>
 80014c0:	e6ea      	b.n	8001298 <__aeabi_fsub+0x228>
 80014c2:	2380      	movs	r3, #128	@ 0x80
 80014c4:	03db      	lsls	r3, r3, #15
 80014c6:	429f      	cmp	r7, r3
 80014c8:	d200      	bcs.n	80014cc <__aeabi_fsub+0x45c>
 80014ca:	e6e5      	b.n	8001298 <__aeabi_fsub+0x228>
 80014cc:	4298      	cmp	r0, r3
 80014ce:	d300      	bcc.n	80014d2 <__aeabi_fsub+0x462>
 80014d0:	e6e2      	b.n	8001298 <__aeabi_fsub+0x228>
 80014d2:	0007      	movs	r7, r0
 80014d4:	e6e0      	b.n	8001298 <__aeabi_fsub+0x228>
 80014d6:	2900      	cmp	r1, #0
 80014d8:	d100      	bne.n	80014dc <__aeabi_fsub+0x46c>
 80014da:	e69e      	b.n	800121a <__aeabi_fsub+0x1aa>
 80014dc:	2300      	movs	r3, #0
 80014de:	08cf      	lsrs	r7, r1, #3
 80014e0:	e641      	b.n	8001166 <__aeabi_fsub+0xf6>
 80014e2:	0034      	movs	r4, r6
 80014e4:	2301      	movs	r3, #1
 80014e6:	08ff      	lsrs	r7, r7, #3
 80014e8:	e63d      	b.n	8001166 <__aeabi_fsub+0xf6>
 80014ea:	2f00      	cmp	r7, #0
 80014ec:	d100      	bne.n	80014f0 <__aeabi_fsub+0x480>
 80014ee:	e693      	b.n	8001218 <__aeabi_fsub+0x1a8>
 80014f0:	2300      	movs	r3, #0
 80014f2:	08ff      	lsrs	r7, r7, #3
 80014f4:	e637      	b.n	8001166 <__aeabi_fsub+0xf6>
 80014f6:	2300      	movs	r3, #0
 80014f8:	08d7      	lsrs	r7, r2, #3
 80014fa:	e634      	b.n	8001166 <__aeabi_fsub+0xf6>
 80014fc:	2301      	movs	r3, #1
 80014fe:	08cf      	lsrs	r7, r1, #3
 8001500:	e631      	b.n	8001166 <__aeabi_fsub+0xf6>
 8001502:	2280      	movs	r2, #128	@ 0x80
 8001504:	000b      	movs	r3, r1
 8001506:	04d2      	lsls	r2, r2, #19
 8001508:	2001      	movs	r0, #1
 800150a:	4013      	ands	r3, r2
 800150c:	4211      	tst	r1, r2
 800150e:	d000      	beq.n	8001512 <__aeabi_fsub+0x4a2>
 8001510:	e6ae      	b.n	8001270 <__aeabi_fsub+0x200>
 8001512:	08cf      	lsrs	r7, r1, #3
 8001514:	e627      	b.n	8001166 <__aeabi_fsub+0xf6>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x4ac>
 800151a:	e75f      	b.n	80013dc <__aeabi_fsub+0x36c>
 800151c:	1b56      	subs	r6, r2, r5
 800151e:	2d00      	cmp	r5, #0
 8001520:	d101      	bne.n	8001526 <__aeabi_fsub+0x4b6>
 8001522:	0033      	movs	r3, r6
 8001524:	e6e7      	b.n	80012f6 <__aeabi_fsub+0x286>
 8001526:	2380      	movs	r3, #128	@ 0x80
 8001528:	4660      	mov	r0, ip
 800152a:	04db      	lsls	r3, r3, #19
 800152c:	4318      	orrs	r0, r3
 800152e:	4684      	mov	ip, r0
 8001530:	e6eb      	b.n	800130a <__aeabi_fsub+0x29a>
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	7dffffff 	.word	0x7dffffff

08001538 <__aeabi_f2iz>:
 8001538:	0241      	lsls	r1, r0, #9
 800153a:	0042      	lsls	r2, r0, #1
 800153c:	0fc3      	lsrs	r3, r0, #31
 800153e:	0a49      	lsrs	r1, r1, #9
 8001540:	2000      	movs	r0, #0
 8001542:	0e12      	lsrs	r2, r2, #24
 8001544:	2a7e      	cmp	r2, #126	@ 0x7e
 8001546:	dd03      	ble.n	8001550 <__aeabi_f2iz+0x18>
 8001548:	2a9d      	cmp	r2, #157	@ 0x9d
 800154a:	dd02      	ble.n	8001552 <__aeabi_f2iz+0x1a>
 800154c:	4a09      	ldr	r2, [pc, #36]	@ (8001574 <__aeabi_f2iz+0x3c>)
 800154e:	1898      	adds	r0, r3, r2
 8001550:	4770      	bx	lr
 8001552:	2080      	movs	r0, #128	@ 0x80
 8001554:	0400      	lsls	r0, r0, #16
 8001556:	4301      	orrs	r1, r0
 8001558:	2a95      	cmp	r2, #149	@ 0x95
 800155a:	dc07      	bgt.n	800156c <__aeabi_f2iz+0x34>
 800155c:	2096      	movs	r0, #150	@ 0x96
 800155e:	1a82      	subs	r2, r0, r2
 8001560:	40d1      	lsrs	r1, r2
 8001562:	4248      	negs	r0, r1
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f3      	bne.n	8001550 <__aeabi_f2iz+0x18>
 8001568:	0008      	movs	r0, r1
 800156a:	e7f1      	b.n	8001550 <__aeabi_f2iz+0x18>
 800156c:	3a96      	subs	r2, #150	@ 0x96
 800156e:	4091      	lsls	r1, r2
 8001570:	e7f7      	b.n	8001562 <__aeabi_f2iz+0x2a>
 8001572:	46c0      	nop			@ (mov r8, r8)
 8001574:	7fffffff 	.word	0x7fffffff

08001578 <__aeabi_i2f>:
 8001578:	b570      	push	{r4, r5, r6, lr}
 800157a:	2800      	cmp	r0, #0
 800157c:	d012      	beq.n	80015a4 <__aeabi_i2f+0x2c>
 800157e:	17c3      	asrs	r3, r0, #31
 8001580:	18c5      	adds	r5, r0, r3
 8001582:	405d      	eors	r5, r3
 8001584:	0fc4      	lsrs	r4, r0, #31
 8001586:	0028      	movs	r0, r5
 8001588:	f000 f846 	bl	8001618 <__clzsi2>
 800158c:	239e      	movs	r3, #158	@ 0x9e
 800158e:	1a1b      	subs	r3, r3, r0
 8001590:	2b96      	cmp	r3, #150	@ 0x96
 8001592:	dc0f      	bgt.n	80015b4 <__aeabi_i2f+0x3c>
 8001594:	2808      	cmp	r0, #8
 8001596:	d038      	beq.n	800160a <__aeabi_i2f+0x92>
 8001598:	3808      	subs	r0, #8
 800159a:	4085      	lsls	r5, r0
 800159c:	026d      	lsls	r5, r5, #9
 800159e:	0a6d      	lsrs	r5, r5, #9
 80015a0:	b2d8      	uxtb	r0, r3
 80015a2:	e002      	b.n	80015aa <__aeabi_i2f+0x32>
 80015a4:	2400      	movs	r4, #0
 80015a6:	2000      	movs	r0, #0
 80015a8:	2500      	movs	r5, #0
 80015aa:	05c0      	lsls	r0, r0, #23
 80015ac:	4328      	orrs	r0, r5
 80015ae:	07e4      	lsls	r4, r4, #31
 80015b0:	4320      	orrs	r0, r4
 80015b2:	bd70      	pop	{r4, r5, r6, pc}
 80015b4:	2b99      	cmp	r3, #153	@ 0x99
 80015b6:	dc14      	bgt.n	80015e2 <__aeabi_i2f+0x6a>
 80015b8:	1f42      	subs	r2, r0, #5
 80015ba:	4095      	lsls	r5, r2
 80015bc:	002a      	movs	r2, r5
 80015be:	4915      	ldr	r1, [pc, #84]	@ (8001614 <__aeabi_i2f+0x9c>)
 80015c0:	4011      	ands	r1, r2
 80015c2:	0755      	lsls	r5, r2, #29
 80015c4:	d01c      	beq.n	8001600 <__aeabi_i2f+0x88>
 80015c6:	250f      	movs	r5, #15
 80015c8:	402a      	ands	r2, r5
 80015ca:	2a04      	cmp	r2, #4
 80015cc:	d018      	beq.n	8001600 <__aeabi_i2f+0x88>
 80015ce:	3104      	adds	r1, #4
 80015d0:	08ca      	lsrs	r2, r1, #3
 80015d2:	0149      	lsls	r1, r1, #5
 80015d4:	d515      	bpl.n	8001602 <__aeabi_i2f+0x8a>
 80015d6:	239f      	movs	r3, #159	@ 0x9f
 80015d8:	0252      	lsls	r2, r2, #9
 80015da:	1a18      	subs	r0, r3, r0
 80015dc:	0a55      	lsrs	r5, r2, #9
 80015de:	b2c0      	uxtb	r0, r0
 80015e0:	e7e3      	b.n	80015aa <__aeabi_i2f+0x32>
 80015e2:	2205      	movs	r2, #5
 80015e4:	0029      	movs	r1, r5
 80015e6:	1a12      	subs	r2, r2, r0
 80015e8:	40d1      	lsrs	r1, r2
 80015ea:	0002      	movs	r2, r0
 80015ec:	321b      	adds	r2, #27
 80015ee:	4095      	lsls	r5, r2
 80015f0:	002a      	movs	r2, r5
 80015f2:	1e55      	subs	r5, r2, #1
 80015f4:	41aa      	sbcs	r2, r5
 80015f6:	430a      	orrs	r2, r1
 80015f8:	4906      	ldr	r1, [pc, #24]	@ (8001614 <__aeabi_i2f+0x9c>)
 80015fa:	4011      	ands	r1, r2
 80015fc:	0755      	lsls	r5, r2, #29
 80015fe:	d1e2      	bne.n	80015c6 <__aeabi_i2f+0x4e>
 8001600:	08ca      	lsrs	r2, r1, #3
 8001602:	0252      	lsls	r2, r2, #9
 8001604:	0a55      	lsrs	r5, r2, #9
 8001606:	b2d8      	uxtb	r0, r3
 8001608:	e7cf      	b.n	80015aa <__aeabi_i2f+0x32>
 800160a:	026d      	lsls	r5, r5, #9
 800160c:	0a6d      	lsrs	r5, r5, #9
 800160e:	308e      	adds	r0, #142	@ 0x8e
 8001610:	e7cb      	b.n	80015aa <__aeabi_i2f+0x32>
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	fbffffff 	.word	0xfbffffff

08001618 <__clzsi2>:
 8001618:	211c      	movs	r1, #28
 800161a:	2301      	movs	r3, #1
 800161c:	041b      	lsls	r3, r3, #16
 800161e:	4298      	cmp	r0, r3
 8001620:	d301      	bcc.n	8001626 <__clzsi2+0xe>
 8001622:	0c00      	lsrs	r0, r0, #16
 8001624:	3910      	subs	r1, #16
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	4298      	cmp	r0, r3
 800162a:	d301      	bcc.n	8001630 <__clzsi2+0x18>
 800162c:	0a00      	lsrs	r0, r0, #8
 800162e:	3908      	subs	r1, #8
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	4298      	cmp	r0, r3
 8001634:	d301      	bcc.n	800163a <__clzsi2+0x22>
 8001636:	0900      	lsrs	r0, r0, #4
 8001638:	3904      	subs	r1, #4
 800163a:	a202      	add	r2, pc, #8	@ (adr r2, 8001644 <__clzsi2+0x2c>)
 800163c:	5c10      	ldrb	r0, [r2, r0]
 800163e:	1840      	adds	r0, r0, r1
 8001640:	4770      	bx	lr
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	02020304 	.word	0x02020304
 8001648:	01010101 	.word	0x01010101
	...

08001654 <__clzdi2>:
 8001654:	b510      	push	{r4, lr}
 8001656:	2900      	cmp	r1, #0
 8001658:	d103      	bne.n	8001662 <__clzdi2+0xe>
 800165a:	f7ff ffdd 	bl	8001618 <__clzsi2>
 800165e:	3020      	adds	r0, #32
 8001660:	e002      	b.n	8001668 <__clzdi2+0x14>
 8001662:	0008      	movs	r0, r1
 8001664:	f7ff ffd8 	bl	8001618 <__clzsi2>
 8001668:	bd10      	pop	{r4, pc}
 800166a:	46c0      	nop			@ (mov r8, r8)

0800166c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001670:	f000 fd52 	bl	8002118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001674:	f000 f82a 	bl	80016cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001678:	f000 f9fc 	bl	8001a74 <MX_GPIO_Init>
  MX_DMA_Init();
 800167c:	f000 f9d4 	bl	8001a28 <MX_DMA_Init>
  MX_ADC1_Init();
 8001680:	f000 f882 	bl	8001788 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001684:	f000 f922 	bl	80018cc <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8001688:	f000 f980 	bl	800198c <MX_USART1_UART_Init>
  MX_TIM16_Init();
 800168c:	f000 f954 	bl	8001938 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001690:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <main+0x50>)
 8001692:	0018      	movs	r0, r3
 8001694:	f001 fd46 	bl	8003124 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AD_RES_BUFFER, 4);
 8001698:	4909      	ldr	r1, [pc, #36]	@ (80016c0 <main+0x54>)
 800169a:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <main+0x50>)
 800169c:	2204      	movs	r2, #4
 800169e:	0018      	movs	r0, r3
 80016a0:	f001 f8c0 	bl	8002824 <HAL_ADC_Start_DMA>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80016a4:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <main+0x58>)
 80016a6:	2100      	movs	r1, #0
 80016a8:	0018      	movs	r0, r3
 80016aa:	f001 ff38 	bl	800351e <HAL_DAC_Start>

  HAL_TIM_Base_Start_IT(&htim16);
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <main+0x5c>)
 80016b0:	0018      	movs	r0, r3
 80016b2:	f003 fbb7 	bl	8004e24 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016b6:	46c0      	nop			@ (mov r8, r8)
 80016b8:	e7fd      	b.n	80016b6 <main+0x4a>
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	20000028 	.word	0x20000028
 80016c0:	2000024c 	.word	0x2000024c
 80016c4:	200000e8 	.word	0x200000e8
 80016c8:	20000158 	.word	0x20000158

080016cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b093      	sub	sp, #76	@ 0x4c
 80016d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d2:	2410      	movs	r4, #16
 80016d4:	193b      	adds	r3, r7, r4
 80016d6:	0018      	movs	r0, r3
 80016d8:	2338      	movs	r3, #56	@ 0x38
 80016da:	001a      	movs	r2, r3
 80016dc:	2100      	movs	r1, #0
 80016de:	f004 fc2d 	bl	8005f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e2:	003b      	movs	r3, r7
 80016e4:	0018      	movs	r0, r3
 80016e6:	2310      	movs	r3, #16
 80016e8:	001a      	movs	r2, r3
 80016ea:	2100      	movs	r1, #0
 80016ec:	f004 fc26 	bl	8005f3c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	0018      	movs	r0, r3
 80016f6:	f002 fc75 	bl	8003fe4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016fa:	193b      	adds	r3, r7, r4
 80016fc:	2202      	movs	r2, #2
 80016fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001700:	193b      	adds	r3, r7, r4
 8001702:	2280      	movs	r2, #128	@ 0x80
 8001704:	0052      	lsls	r2, r2, #1
 8001706:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001708:	0021      	movs	r1, r4
 800170a:	187b      	adds	r3, r7, r1
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001710:	187b      	adds	r3, r7, r1
 8001712:	2240      	movs	r2, #64	@ 0x40
 8001714:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001716:	187b      	adds	r3, r7, r1
 8001718:	2202      	movs	r2, #2
 800171a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800171c:	187b      	adds	r3, r7, r1
 800171e:	2202      	movs	r2, #2
 8001720:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001722:	187b      	adds	r3, r7, r1
 8001724:	2200      	movs	r2, #0
 8001726:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001728:	187b      	adds	r3, r7, r1
 800172a:	2208      	movs	r2, #8
 800172c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800172e:	187b      	adds	r3, r7, r1
 8001730:	22c0      	movs	r2, #192	@ 0xc0
 8001732:	02d2      	lsls	r2, r2, #11
 8001734:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001736:	187b      	adds	r3, r7, r1
 8001738:	2280      	movs	r2, #128	@ 0x80
 800173a:	0492      	lsls	r2, r2, #18
 800173c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800173e:	187b      	adds	r3, r7, r1
 8001740:	2280      	movs	r2, #128	@ 0x80
 8001742:	0592      	lsls	r2, r2, #22
 8001744:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001746:	187b      	adds	r3, r7, r1
 8001748:	0018      	movs	r0, r3
 800174a:	f002 fc97 	bl	800407c <HAL_RCC_OscConfig>
 800174e:	1e03      	subs	r3, r0, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001752:	f000 fac3 	bl	8001cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001756:	003b      	movs	r3, r7
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175c:	003b      	movs	r3, r7
 800175e:	2202      	movs	r2, #2
 8001760:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001762:	003b      	movs	r3, r7
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001768:	003b      	movs	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800176e:	003b      	movs	r3, r7
 8001770:	2102      	movs	r1, #2
 8001772:	0018      	movs	r0, r3
 8001774:	f002 ff9c 	bl	80046b0 <HAL_RCC_ClockConfig>
 8001778:	1e03      	subs	r3, r0, #0
 800177a:	d001      	beq.n	8001780 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800177c:	f000 faae 	bl	8001cdc <Error_Handler>
  }
}
 8001780:	46c0      	nop			@ (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	b013      	add	sp, #76	@ 0x4c
 8001786:	bd90      	pop	{r4, r7, pc}

08001788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	0018      	movs	r0, r3
 8001792:	230c      	movs	r3, #12
 8001794:	001a      	movs	r2, r3
 8001796:	2100      	movs	r1, #0
 8001798:	f004 fbd0 	bl	8005f3c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800179c:	4b46      	ldr	r3, [pc, #280]	@ (80018b8 <MX_ADC1_Init+0x130>)
 800179e:	4a47      	ldr	r2, [pc, #284]	@ (80018bc <MX_ADC1_Init+0x134>)
 80017a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80017a2:	4b45      	ldr	r3, [pc, #276]	@ (80018b8 <MX_ADC1_Init+0x130>)
 80017a4:	2280      	movs	r2, #128	@ 0x80
 80017a6:	0392      	lsls	r2, r2, #14
 80017a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017aa:	4b43      	ldr	r3, [pc, #268]	@ (80018b8 <MX_ADC1_Init+0x130>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017b0:	4b41      	ldr	r3, [pc, #260]	@ (80018b8 <MX_ADC1_Init+0x130>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017b6:	4b40      	ldr	r3, [pc, #256]	@ (80018b8 <MX_ADC1_Init+0x130>)
 80017b8:	2280      	movs	r2, #128	@ 0x80
 80017ba:	0392      	lsls	r2, r2, #14
 80017bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80017be:	4b3e      	ldr	r3, [pc, #248]	@ (80018b8 <MX_ADC1_Init+0x130>)
 80017c0:	2208      	movs	r2, #8
 80017c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017c4:	4b3c      	ldr	r3, [pc, #240]	@ (80018b8 <MX_ADC1_Init+0x130>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80017ca:	4b3b      	ldr	r3, [pc, #236]	@ (80018b8 <MX_ADC1_Init+0x130>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017d0:	4b39      	ldr	r3, [pc, #228]	@ (80018b8 <MX_ADC1_Init+0x130>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 80017d6:	4b38      	ldr	r3, [pc, #224]	@ (80018b8 <MX_ADC1_Init+0x130>)
 80017d8:	2204      	movs	r2, #4
 80017da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017dc:	4b36      	ldr	r3, [pc, #216]	@ (80018b8 <MX_ADC1_Init+0x130>)
 80017de:	2220      	movs	r2, #32
 80017e0:	2100      	movs	r1, #0
 80017e2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017e4:	4b34      	ldr	r3, [pc, #208]	@ (80018b8 <MX_ADC1_Init+0x130>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ea:	4b33      	ldr	r3, [pc, #204]	@ (80018b8 <MX_ADC1_Init+0x130>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80017f0:	4b31      	ldr	r3, [pc, #196]	@ (80018b8 <MX_ADC1_Init+0x130>)
 80017f2:	222c      	movs	r2, #44	@ 0x2c
 80017f4:	2101      	movs	r1, #1
 80017f6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017f8:	4b2f      	ldr	r3, [pc, #188]	@ (80018b8 <MX_ADC1_Init+0x130>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80017fe:	4b2e      	ldr	r3, [pc, #184]	@ (80018b8 <MX_ADC1_Init+0x130>)
 8001800:	2207      	movs	r2, #7
 8001802:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001804:	4b2c      	ldr	r3, [pc, #176]	@ (80018b8 <MX_ADC1_Init+0x130>)
 8001806:	2207      	movs	r2, #7
 8001808:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800180a:	4b2b      	ldr	r3, [pc, #172]	@ (80018b8 <MX_ADC1_Init+0x130>)
 800180c:	223c      	movs	r2, #60	@ 0x3c
 800180e:	2100      	movs	r1, #0
 8001810:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001812:	4b29      	ldr	r3, [pc, #164]	@ (80018b8 <MX_ADC1_Init+0x130>)
 8001814:	2200      	movs	r2, #0
 8001816:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001818:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <MX_ADC1_Init+0x130>)
 800181a:	0018      	movs	r0, r3
 800181c:	f000 fe5a 	bl	80024d4 <HAL_ADC_Init>
 8001820:	1e03      	subs	r3, r0, #0
 8001822:	d001      	beq.n	8001828 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001824:	f000 fa5a 	bl	8001cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2200      	movs	r2, #0
 8001832:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800183a:	1d3a      	adds	r2, r7, #4
 800183c:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <MX_ADC1_Init+0x130>)
 800183e:	0011      	movs	r1, r2
 8001840:	0018      	movs	r0, r3
 8001842:	f001 f88d 	bl	8002960 <HAL_ADC_ConfigChannel>
 8001846:	1e03      	subs	r3, r0, #0
 8001848:	d001      	beq.n	800184e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800184a:	f000 fa47 	bl	8001cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	4a1b      	ldr	r2, [pc, #108]	@ (80018c0 <MX_ADC1_Init+0x138>)
 8001852:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2204      	movs	r2, #4
 8001858:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800185a:	1d3a      	adds	r2, r7, #4
 800185c:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <MX_ADC1_Init+0x130>)
 800185e:	0011      	movs	r1, r2
 8001860:	0018      	movs	r0, r3
 8001862:	f001 f87d 	bl	8002960 <HAL_ADC_ConfigChannel>
 8001866:	1e03      	subs	r3, r0, #0
 8001868:	d001      	beq.n	800186e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800186a:	f000 fa37 	bl	8001cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	4a14      	ldr	r2, [pc, #80]	@ (80018c4 <MX_ADC1_Init+0x13c>)
 8001872:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	2208      	movs	r2, #8
 8001878:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800187a:	1d3a      	adds	r2, r7, #4
 800187c:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <MX_ADC1_Init+0x130>)
 800187e:	0011      	movs	r1, r2
 8001880:	0018      	movs	r0, r3
 8001882:	f001 f86d 	bl	8002960 <HAL_ADC_ConfigChannel>
 8001886:	1e03      	subs	r3, r0, #0
 8001888:	d001      	beq.n	800188e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800188a:	f000 fa27 	bl	8001cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	4a0d      	ldr	r2, [pc, #52]	@ (80018c8 <MX_ADC1_Init+0x140>)
 8001892:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	220c      	movs	r2, #12
 8001898:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189a:	1d3a      	adds	r2, r7, #4
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <MX_ADC1_Init+0x130>)
 800189e:	0011      	movs	r1, r2
 80018a0:	0018      	movs	r0, r3
 80018a2:	f001 f85d 	bl	8002960 <HAL_ADC_ConfigChannel>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d001      	beq.n	80018ae <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80018aa:	f000 fa17 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018ae:	46c0      	nop			@ (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b004      	add	sp, #16
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	20000028 	.word	0x20000028
 80018bc:	40012400 	.word	0x40012400
 80018c0:	04000002 	.word	0x04000002
 80018c4:	08000004 	.word	0x08000004
 80018c8:	0c000008 	.word	0x0c000008

080018cc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	@ 0x28
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	0018      	movs	r0, r3
 80018d6:	2324      	movs	r3, #36	@ 0x24
 80018d8:	001a      	movs	r2, r3
 80018da:	2100      	movs	r1, #0
 80018dc:	f004 fb2e 	bl	8005f3c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80018e0:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <MX_DAC1_Init+0x64>)
 80018e2:	4a14      	ldr	r2, [pc, #80]	@ (8001934 <MX_DAC1_Init+0x68>)
 80018e4:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <MX_DAC1_Init+0x64>)
 80018e8:	0018      	movs	r0, r3
 80018ea:	f001 fdf5 	bl	80034d8 <HAL_DAC_Init>
 80018ee:	1e03      	subs	r3, r0, #0
 80018f0:	d001      	beq.n	80018f6 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 80018f2:	f000 f9f3 	bl	8001cdc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	2200      	movs	r2, #0
 8001900:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001914:	1d39      	adds	r1, r7, #4
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <MX_DAC1_Init+0x64>)
 8001918:	2200      	movs	r2, #0
 800191a:	0018      	movs	r0, r3
 800191c:	f001 fe7c 	bl	8003618 <HAL_DAC_ConfigChannel>
 8001920:	1e03      	subs	r3, r0, #0
 8001922:	d001      	beq.n	8001928 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8001924:	f000 f9da 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001928:	46c0      	nop			@ (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	b00a      	add	sp, #40	@ 0x28
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200000e8 	.word	0x200000e8
 8001934:	40007400 	.word	0x40007400

08001938 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800193c:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <MX_TIM16_Init+0x44>)
 800193e:	4a10      	ldr	r2, [pc, #64]	@ (8001980 <MX_TIM16_Init+0x48>)
 8001940:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 640-1;
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <MX_TIM16_Init+0x44>)
 8001944:	4a0f      	ldr	r2, [pc, #60]	@ (8001984 <MX_TIM16_Init+0x4c>)
 8001946:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <MX_TIM16_Init+0x44>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 800194e:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <MX_TIM16_Init+0x44>)
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <MX_TIM16_Init+0x50>)
 8001952:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MX_TIM16_Init+0x44>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800195a:	4b08      	ldr	r3, [pc, #32]	@ (800197c <MX_TIM16_Init+0x44>)
 800195c:	2200      	movs	r2, #0
 800195e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <MX_TIM16_Init+0x44>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001966:	4b05      	ldr	r3, [pc, #20]	@ (800197c <MX_TIM16_Init+0x44>)
 8001968:	0018      	movs	r0, r3
 800196a:	f003 fa03 	bl	8004d74 <HAL_TIM_Base_Init>
 800196e:	1e03      	subs	r3, r0, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001972:	f000 f9b3 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000158 	.word	0x20000158
 8001980:	40014400 	.word	0x40014400
 8001984:	0000027f 	.word	0x0000027f
 8001988:	000003e7 	.word	0x000003e7

0800198c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001990:	4b23      	ldr	r3, [pc, #140]	@ (8001a20 <MX_USART1_UART_Init+0x94>)
 8001992:	4a24      	ldr	r2, [pc, #144]	@ (8001a24 <MX_USART1_UART_Init+0x98>)
 8001994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001996:	4b22      	ldr	r3, [pc, #136]	@ (8001a20 <MX_USART1_UART_Init+0x94>)
 8001998:	22e1      	movs	r2, #225	@ 0xe1
 800199a:	0252      	lsls	r2, r2, #9
 800199c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	4b20      	ldr	r3, [pc, #128]	@ (8001a20 <MX_USART1_UART_Init+0x94>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <MX_USART1_UART_Init+0x94>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001a20 <MX_USART1_UART_Init+0x94>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a20 <MX_USART1_UART_Init+0x94>)
 80019b2:	220c      	movs	r2, #12
 80019b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <MX_USART1_UART_Init+0x94>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019bc:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <MX_USART1_UART_Init+0x94>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c2:	4b17      	ldr	r3, [pc, #92]	@ (8001a20 <MX_USART1_UART_Init+0x94>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019c8:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <MX_USART1_UART_Init+0x94>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ce:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <MX_USART1_UART_Init+0x94>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019d4:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <MX_USART1_UART_Init+0x94>)
 80019d6:	0018      	movs	r0, r3
 80019d8:	f003 fc4e 	bl	8005278 <HAL_UART_Init>
 80019dc:	1e03      	subs	r3, r0, #0
 80019de:	d001      	beq.n	80019e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019e0:	f000 f97c 	bl	8001cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <MX_USART1_UART_Init+0x94>)
 80019e6:	2100      	movs	r1, #0
 80019e8:	0018      	movs	r0, r3
 80019ea:	f004 f9c7 	bl	8005d7c <HAL_UARTEx_SetTxFifoThreshold>
 80019ee:	1e03      	subs	r3, r0, #0
 80019f0:	d001      	beq.n	80019f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019f2:	f000 f973 	bl	8001cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a20 <MX_USART1_UART_Init+0x94>)
 80019f8:	2100      	movs	r1, #0
 80019fa:	0018      	movs	r0, r3
 80019fc:	f004 f9fe 	bl	8005dfc <HAL_UARTEx_SetRxFifoThreshold>
 8001a00:	1e03      	subs	r3, r0, #0
 8001a02:	d001      	beq.n	8001a08 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a04:	f000 f96a 	bl	8001cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <MX_USART1_UART_Init+0x94>)
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f004 f97c 	bl	8005d08 <HAL_UARTEx_DisableFifoMode>
 8001a10:	1e03      	subs	r3, r0, #0
 8001a12:	d001      	beq.n	8001a18 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a14:	f000 f962 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a18:	46c0      	nop			@ (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	200001a4 	.word	0x200001a4
 8001a24:	40013800 	.word	0x40013800

08001a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a2e:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <MX_DMA_Init+0x48>)
 8001a30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a32:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <MX_DMA_Init+0x48>)
 8001a34:	2101      	movs	r1, #1
 8001a36:	430a      	orrs	r2, r1
 8001a38:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a70 <MX_DMA_Init+0x48>)
 8001a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4013      	ands	r3, r2
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2009      	movs	r0, #9
 8001a4c:	f001 fd12 	bl	8003474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a50:	2009      	movs	r0, #9
 8001a52:	f001 fd24 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f001 fd0a 	bl	8003474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001a60:	200a      	movs	r0, #10
 8001a62:	f001 fd1c 	bl	800349e <HAL_NVIC_EnableIRQ>

}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b002      	add	sp, #8
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	40021000 	.word	0x40021000

08001a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <MX_GPIO_Init+0x40>)
 8001a7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <MX_GPIO_Init+0x40>)
 8001a80:	2101      	movs	r1, #1
 8001a82:	430a      	orrs	r2, r1
 8001a84:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <MX_GPIO_Init+0x40>)
 8001a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <MX_GPIO_Init+0x40>)
 8001a94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a96:	4b07      	ldr	r3, [pc, #28]	@ (8001ab4 <MX_GPIO_Init+0x40>)
 8001a98:	2102      	movs	r1, #2
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a9e:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <MX_GPIO_Init+0x40>)
 8001aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b002      	add	sp, #8
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			@ (mov r8, r8)
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	  value_adc0 = AD_RES_BUFFER[0] - 2048;
 8001ac0:	4b21      	ldr	r3, [pc, #132]	@ (8001b48 <HAL_ADC_ConvCpltCallback+0x90>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	4a21      	ldr	r2, [pc, #132]	@ (8001b4c <HAL_ADC_ConvCpltCallback+0x94>)
 8001ac6:	4694      	mov	ip, r2
 8001ac8:	4463      	add	r3, ip
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <HAL_ADC_ConvCpltCallback+0x98>)
 8001ad0:	801a      	strh	r2, [r3, #0]
	  value_adc1 = AD_RES_BUFFER[1] - 2048;
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <HAL_ADC_ConvCpltCallback+0x90>)
 8001ad4:	885b      	ldrh	r3, [r3, #2]
 8001ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b4c <HAL_ADC_ConvCpltCallback+0x94>)
 8001ad8:	4694      	mov	ip, r2
 8001ada:	4463      	add	r3, ip
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	b21a      	sxth	r2, r3
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b54 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001ae2:	801a      	strh	r2, [r3, #0]
	  value_adc2 = AD_RES_BUFFER[2] - 2048;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <HAL_ADC_ConvCpltCallback+0x90>)
 8001ae6:	889b      	ldrh	r3, [r3, #4]
 8001ae8:	4a18      	ldr	r2, [pc, #96]	@ (8001b4c <HAL_ADC_ConvCpltCallback+0x94>)
 8001aea:	4694      	mov	ip, r2
 8001aec:	4463      	add	r3, ip
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001af4:	801a      	strh	r2, [r3, #0]
	  value_adc3 = AD_RES_BUFFER[3] - 2048;
 8001af6:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <HAL_ADC_ConvCpltCallback+0x90>)
 8001af8:	88db      	ldrh	r3, [r3, #6]
 8001afa:	4a14      	ldr	r2, [pc, #80]	@ (8001b4c <HAL_ADC_ConvCpltCallback+0x94>)
 8001afc:	4694      	mov	ip, r2
 8001afe:	4463      	add	r3, ip
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	b21a      	sxth	r2, r3
 8001b04:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001b06:	801a      	strh	r2, [r3, #0]

	  diff_x += AD_RES_BUFFER[0] - AD_RES_BUFFER[3];
 8001b08:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <HAL_ADC_ConvCpltCallback+0x90>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <HAL_ADC_ConvCpltCallback+0x90>)
 8001b10:	88db      	ldrh	r3, [r3, #6]
 8001b12:	1ad2      	subs	r2, r2, r3
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	18d2      	adds	r2, r2, r3
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001b1c:	601a      	str	r2, [r3, #0]
	  diff_y += AD_RES_BUFFER[1] - AD_RES_BUFFER[2];
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <HAL_ADC_ConvCpltCallback+0x90>)
 8001b20:	885b      	ldrh	r3, [r3, #2]
 8001b22:	001a      	movs	r2, r3
 8001b24:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <HAL_ADC_ConvCpltCallback+0x90>)
 8001b26:	889b      	ldrh	r3, [r3, #4]
 8001b28:	1ad2      	subs	r2, r2, r3
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <HAL_ADC_ConvCpltCallback+0xac>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	18d2      	adds	r2, r2, r3
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <HAL_ADC_ConvCpltCallback+0xac>)
 8001b32:	601a      	str	r2, [r3, #0]

	  counter++;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001b3c:	601a      	str	r2, [r3, #0]
}
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b002      	add	sp, #8
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	2000024c 	.word	0x2000024c
 8001b4c:	fffff800 	.word	0xfffff800
 8001b50:	20000238 	.word	0x20000238
 8001b54:	2000023a 	.word	0x2000023a
 8001b58:	2000023c 	.word	0x2000023c
 8001b5c:	2000023e 	.word	0x2000023e
 8001b60:	20000240 	.word	0x20000240
 8001b64:	20000244 	.word	0x20000244
 8001b68:	2000025c 	.word	0x2000025c

08001b6c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
    if (htim == &htim16) {
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	4b47      	ldr	r3, [pc, #284]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d000      	beq.n	8001b7e <HAL_TIM_PeriodElapsedCallback+0x12>
 8001b7c:	e085      	b.n	8001c8a <HAL_TIM_PeriodElapsedCallback+0x11e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7e:	b672      	cpsid	i
}
 8001b80:	46c0      	nop			@ (mov r8, r8)
        int32_t local_diff_x, local_diff_y;
        uint32_t local_counter;

        __disable_irq();
        local_diff_x = diff_x;
 8001b82:	4b45      	ldr	r3, [pc, #276]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	617b      	str	r3, [r7, #20]
        local_diff_y = diff_y;
 8001b88:	4b44      	ldr	r3, [pc, #272]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	613b      	str	r3, [r7, #16]
        local_counter = counter;
 8001b8e:	4b44      	ldr	r3, [pc, #272]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	60fb      	str	r3, [r7, #12]
        diff_x = 0;
 8001b94:	4b40      	ldr	r3, [pc, #256]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
        diff_y = 0;
 8001b9a:	4b40      	ldr	r3, [pc, #256]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
        counter = 0;
 8001ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ba6:	b662      	cpsie	i
}
 8001ba8:	46c0      	nop			@ (mov r8, r8)
        __enable_irq();

        if (local_counter == 0) {
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d11a      	bne.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0x7a>
            avg_x = value_adc0 - value_adc2;
 8001bb0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	5e9b      	ldrsh	r3, [r3, r2]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001bba:	2100      	movs	r1, #0
 8001bbc:	5e5b      	ldrsh	r3, [r3, r1]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b21a      	sxth	r2, r3
 8001bc6:	4b39      	ldr	r3, [pc, #228]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001bc8:	801a      	strh	r2, [r3, #0]
            avg_y = value_adc1 - value_adc3;
 8001bca:	4b39      	ldr	r3, [pc, #228]	@ (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	5e9b      	ldrsh	r3, [r3, r2]
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	4b38      	ldr	r3, [pc, #224]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	5e5b      	ldrsh	r3, [r3, r1]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	4b35      	ldr	r3, [pc, #212]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001be2:	801a      	strh	r2, [r3, #0]
 8001be4:	e011      	b.n	8001c0a <HAL_TIM_PeriodElapsedCallback+0x9e>
        } else {
            avg_x = local_diff_x / (int32_t)local_counter;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	0019      	movs	r1, r3
 8001bea:	6978      	ldr	r0, [r7, #20]
 8001bec:	f7fe fb14 	bl	8000218 <__divsi3>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001bf6:	801a      	strh	r2, [r3, #0]
            avg_y = local_diff_y / (int32_t)local_counter;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	6938      	ldr	r0, [r7, #16]
 8001bfe:	f7fe fb0b 	bl	8000218 <__divsi3>
 8001c02:	0003      	movs	r3, r0
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001c08:	801a      	strh	r2, [r3, #0]
        }

        angle = atan2f(avg_y, avg_x) * 57.2958f;
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	5e9b      	ldrsh	r3, [r3, r2]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff fcb1 	bl	8001578 <__aeabi_i2f>
 8001c16:	1c04      	adds	r4, r0, #0
 8001c18:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	5e9b      	ldrsh	r3, [r3, r2]
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f7ff fcaa 	bl	8001578 <__aeabi_i2f>
 8001c24:	1c03      	adds	r3, r0, #0
 8001c26:	1c19      	adds	r1, r3, #0
 8001c28:	1c20      	adds	r0, r4, #0
 8001c2a:	f004 f9b3 	bl	8005f94 <atan2f>
 8001c2e:	1c03      	adds	r3, r0, #0
 8001c30:	4922      	ldr	r1, [pc, #136]	@ (8001cbc <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001c32:	1c18      	adds	r0, r3, #0
 8001c34:	f7ff f8c2 	bl	8000dbc <__aeabi_fmul>
 8001c38:	1c03      	adds	r3, r0, #0
 8001c3a:	1c1a      	adds	r2, r3, #0
 8001c3c:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001c3e:	601a      	str	r2, [r3, #0]
        angle_scaled = 62 + (angle + 180.0f) * 3850.0f / 360.0f;
 8001c40:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	491f      	ldr	r1, [pc, #124]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001c46:	1c18      	adds	r0, r3, #0
 8001c48:	f7fe fcf8 	bl	800063c <__aeabi_fadd>
 8001c4c:	1c03      	adds	r3, r0, #0
 8001c4e:	491e      	ldr	r1, [pc, #120]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001c50:	1c18      	adds	r0, r3, #0
 8001c52:	f7ff f8b3 	bl	8000dbc <__aeabi_fmul>
 8001c56:	1c03      	adds	r3, r0, #0
 8001c58:	491c      	ldr	r1, [pc, #112]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001c5a:	1c18      	adds	r0, r3, #0
 8001c5c:	f7fe fee0 	bl	8000a20 <__aeabi_fdiv>
 8001c60:	1c03      	adds	r3, r0, #0
 8001c62:	491b      	ldr	r1, [pc, #108]	@ (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001c64:	1c18      	adds	r0, r3, #0
 8001c66:	f7fe fce9 	bl	800063c <__aeabi_fadd>
 8001c6a:	1c03      	adds	r3, r0, #0
 8001c6c:	1c18      	adds	r0, r3, #0
 8001c6e:	f7ff fc63 	bl	8001538 <__aeabi_f2iz>
 8001c72:	0003      	movs	r3, r0
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	4b17      	ldr	r3, [pc, #92]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001c78:	801a      	strh	r2, [r3, #0]

        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, angle_scaled);
 8001c7a:	4b16      	ldr	r3, [pc, #88]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	5e9b      	ldrsh	r3, [r3, r2]
 8001c80:	4815      	ldr	r0, [pc, #84]	@ (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	f001 fca0 	bl	80035ca <HAL_DAC_SetValue>
    }
}
 8001c8a:	46c0      	nop			@ (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b007      	add	sp, #28
 8001c90:	bd90      	pop	{r4, r7, pc}
 8001c92:	46c0      	nop			@ (mov r8, r8)
 8001c94:	20000158 	.word	0x20000158
 8001c98:	20000240 	.word	0x20000240
 8001c9c:	20000244 	.word	0x20000244
 8001ca0:	2000025c 	.word	0x2000025c
 8001ca4:	20000238 	.word	0x20000238
 8001ca8:	2000023c 	.word	0x2000023c
 8001cac:	20000248 	.word	0x20000248
 8001cb0:	2000023a 	.word	0x2000023a
 8001cb4:	2000023e 	.word	0x2000023e
 8001cb8:	2000024a 	.word	0x2000024a
 8001cbc:	42652ee6 	.word	0x42652ee6
 8001cc0:	20000254 	.word	0x20000254
 8001cc4:	43340000 	.word	0x43340000
 8001cc8:	4570a000 	.word	0x4570a000
 8001ccc:	43b40000 	.word	0x43b40000
 8001cd0:	42780000 	.word	0x42780000
 8001cd4:	20000258 	.word	0x20000258
 8001cd8:	200000e8 	.word	0x200000e8

08001cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce0:	b672      	cpsid	i
}
 8001ce2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce4:	46c0      	nop			@ (mov r8, r8)
 8001ce6:	e7fd      	b.n	8001ce4 <Error_Handler+0x8>

08001ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <HAL_MspInit+0x44>)
 8001cf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <HAL_MspInit+0x44>)
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <HAL_MspInit+0x44>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4013      	ands	r3, r2
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <HAL_MspInit+0x44>)
 8001d08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d0a:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <HAL_MspInit+0x44>)
 8001d0c:	2180      	movs	r1, #128	@ 0x80
 8001d0e:	0549      	lsls	r1, r1, #21
 8001d10:	430a      	orrs	r2, r1
 8001d12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d14:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <HAL_MspInit+0x44>)
 8001d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d18:	2380      	movs	r3, #128	@ 0x80
 8001d1a:	055b      	lsls	r3, r3, #21
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b002      	add	sp, #8
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	40021000 	.word	0x40021000

08001d30 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b097      	sub	sp, #92	@ 0x5c
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	2344      	movs	r3, #68	@ 0x44
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	2314      	movs	r3, #20
 8001d40:	001a      	movs	r2, r3
 8001d42:	2100      	movs	r1, #0
 8001d44:	f004 f8fa 	bl	8005f3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d48:	2410      	movs	r4, #16
 8001d4a:	193b      	adds	r3, r7, r4
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	2334      	movs	r3, #52	@ 0x34
 8001d50:	001a      	movs	r2, r3
 8001d52:	2100      	movs	r1, #0
 8001d54:	f004 f8f2 	bl	8005f3c <memset>
  if(hadc->Instance==ADC1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a35      	ldr	r2, [pc, #212]	@ (8001e34 <HAL_ADC_MspInit+0x104>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d164      	bne.n	8001e2c <HAL_ADC_MspInit+0xfc>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d62:	193b      	adds	r3, r7, r4
 8001d64:	2280      	movs	r2, #128	@ 0x80
 8001d66:	01d2      	lsls	r2, r2, #7
 8001d68:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001d6a:	193b      	adds	r3, r7, r4
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d70:	193b      	adds	r3, r7, r4
 8001d72:	0018      	movs	r0, r3
 8001d74:	f002 fe46 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 8001d78:	1e03      	subs	r3, r0, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001d7c:	f7ff ffae 	bl	8001cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d80:	4b2d      	ldr	r3, [pc, #180]	@ (8001e38 <HAL_ADC_MspInit+0x108>)
 8001d82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d84:	4b2c      	ldr	r3, [pc, #176]	@ (8001e38 <HAL_ADC_MspInit+0x108>)
 8001d86:	2180      	movs	r1, #128	@ 0x80
 8001d88:	0349      	lsls	r1, r1, #13
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e38 <HAL_ADC_MspInit+0x108>)
 8001d90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d92:	2380      	movs	r3, #128	@ 0x80
 8001d94:	035b      	lsls	r3, r3, #13
 8001d96:	4013      	ands	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9c:	4b26      	ldr	r3, [pc, #152]	@ (8001e38 <HAL_ADC_MspInit+0x108>)
 8001d9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001da0:	4b25      	ldr	r3, [pc, #148]	@ (8001e38 <HAL_ADC_MspInit+0x108>)
 8001da2:	2101      	movs	r1, #1
 8001da4:	430a      	orrs	r2, r1
 8001da6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001da8:	4b23      	ldr	r3, [pc, #140]	@ (8001e38 <HAL_ADC_MspInit+0x108>)
 8001daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dac:	2201      	movs	r2, #1
 8001dae:	4013      	ands	r3, r2
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001db4:	2144      	movs	r1, #68	@ 0x44
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	220f      	movs	r2, #15
 8001dba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	187a      	adds	r2, r7, r1
 8001dca:	23a0      	movs	r3, #160	@ 0xa0
 8001dcc:	05db      	lsls	r3, r3, #23
 8001dce:	0011      	movs	r1, r2
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f001 ffa3 	bl	8003d1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <HAL_ADC_MspInit+0x10c>)
 8001dd8:	4a19      	ldr	r2, [pc, #100]	@ (8001e40 <HAL_ADC_MspInit+0x110>)
 8001dda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <HAL_ADC_MspInit+0x10c>)
 8001dde:	2205      	movs	r2, #5
 8001de0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001de2:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <HAL_ADC_MspInit+0x10c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <HAL_ADC_MspInit+0x10c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <HAL_ADC_MspInit+0x10c>)
 8001df0:	2280      	movs	r2, #128	@ 0x80
 8001df2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <HAL_ADC_MspInit+0x10c>)
 8001df6:	2280      	movs	r2, #128	@ 0x80
 8001df8:	0052      	lsls	r2, r2, #1
 8001dfa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <HAL_ADC_MspInit+0x10c>)
 8001dfe:	2280      	movs	r2, #128	@ 0x80
 8001e00:	00d2      	lsls	r2, r2, #3
 8001e02:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e04:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <HAL_ADC_MspInit+0x10c>)
 8001e06:	2220      	movs	r2, #32
 8001e08:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <HAL_ADC_MspInit+0x10c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e10:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <HAL_ADC_MspInit+0x10c>)
 8001e12:	0018      	movs	r0, r3
 8001e14:	f001 fd30 	bl	8003878 <HAL_DMA_Init>
 8001e18:	1e03      	subs	r3, r0, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8001e1c:	f7ff ff5e 	bl	8001cdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a06      	ldr	r2, [pc, #24]	@ (8001e3c <HAL_ADC_MspInit+0x10c>)
 8001e24:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_ADC_MspInit+0x10c>)
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e2c:	46c0      	nop			@ (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b017      	add	sp, #92	@ 0x5c
 8001e32:	bd90      	pop	{r4, r7, pc}
 8001e34:	40012400 	.word	0x40012400
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	2000008c 	.word	0x2000008c
 8001e40:	4002001c 	.word	0x4002001c

08001e44 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e44:	b590      	push	{r4, r7, lr}
 8001e46:	b08b      	sub	sp, #44	@ 0x2c
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	2414      	movs	r4, #20
 8001e4e:	193b      	adds	r3, r7, r4
 8001e50:	0018      	movs	r0, r3
 8001e52:	2314      	movs	r3, #20
 8001e54:	001a      	movs	r2, r3
 8001e56:	2100      	movs	r1, #0
 8001e58:	f004 f870 	bl	8005f3c <memset>
  if(hdac->Instance==DAC1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2d      	ldr	r2, [pc, #180]	@ (8001f18 <HAL_DAC_MspInit+0xd4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d154      	bne.n	8001f10 <HAL_DAC_MspInit+0xcc>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001e66:	4b2d      	ldr	r3, [pc, #180]	@ (8001f1c <HAL_DAC_MspInit+0xd8>)
 8001e68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f1c <HAL_DAC_MspInit+0xd8>)
 8001e6c:	2180      	movs	r1, #128	@ 0x80
 8001e6e:	0589      	lsls	r1, r1, #22
 8001e70:	430a      	orrs	r2, r1
 8001e72:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e74:	4b29      	ldr	r3, [pc, #164]	@ (8001f1c <HAL_DAC_MspInit+0xd8>)
 8001e76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	059b      	lsls	r3, r3, #22
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	4b26      	ldr	r3, [pc, #152]	@ (8001f1c <HAL_DAC_MspInit+0xd8>)
 8001e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e86:	4b25      	ldr	r3, [pc, #148]	@ (8001f1c <HAL_DAC_MspInit+0xd8>)
 8001e88:	2101      	movs	r1, #1
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e8e:	4b23      	ldr	r3, [pc, #140]	@ (8001f1c <HAL_DAC_MspInit+0xd8>)
 8001e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e92:	2201      	movs	r2, #1
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e9a:	193b      	adds	r3, r7, r4
 8001e9c:	2230      	movs	r2, #48	@ 0x30
 8001e9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea0:	193b      	adds	r3, r7, r4
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	193b      	adds	r3, r7, r4
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eac:	193a      	adds	r2, r7, r4
 8001eae:	23a0      	movs	r3, #160	@ 0xa0
 8001eb0:	05db      	lsls	r3, r3, #23
 8001eb2:	0011      	movs	r1, r2
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f001 ff31 	bl	8003d1c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001eba:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <HAL_DAC_MspInit+0xdc>)
 8001ebc:	4a19      	ldr	r2, [pc, #100]	@ (8001f24 <HAL_DAC_MspInit+0xe0>)
 8001ebe:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001ec0:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <HAL_DAC_MspInit+0xdc>)
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec6:	4b16      	ldr	r3, [pc, #88]	@ (8001f20 <HAL_DAC_MspInit+0xdc>)
 8001ec8:	2210      	movs	r2, #16
 8001eca:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ecc:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <HAL_DAC_MspInit+0xdc>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ed2:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <HAL_DAC_MspInit+0xdc>)
 8001ed4:	2280      	movs	r2, #128	@ 0x80
 8001ed6:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <HAL_DAC_MspInit+0xdc>)
 8001eda:	2280      	movs	r2, #128	@ 0x80
 8001edc:	0052      	lsls	r2, r2, #1
 8001ede:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <HAL_DAC_MspInit+0xdc>)
 8001ee2:	2280      	movs	r2, #128	@ 0x80
 8001ee4:	00d2      	lsls	r2, r2, #3
 8001ee6:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <HAL_DAC_MspInit+0xdc>)
 8001eea:	2220      	movs	r2, #32
 8001eec:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <HAL_DAC_MspInit+0xdc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_DAC_MspInit+0xdc>)
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f001 fcbe 	bl	8003878 <HAL_DMA_Init>
 8001efc:	1e03      	subs	r3, r0, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 8001f00:	f7ff feec 	bl	8001cdc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a06      	ldr	r2, [pc, #24]	@ (8001f20 <HAL_DAC_MspInit+0xdc>)
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <HAL_DAC_MspInit+0xdc>)
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001f10:	46c0      	nop			@ (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b00b      	add	sp, #44	@ 0x2c
 8001f16:	bd90      	pop	{r4, r7, pc}
 8001f18:	40007400 	.word	0x40007400
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	200000fc 	.word	0x200000fc
 8001f24:	40020008 	.word	0x40020008

08001f28 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0e      	ldr	r2, [pc, #56]	@ (8001f70 <HAL_TIM_Base_MspInit+0x48>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d115      	bne.n	8001f66 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <HAL_TIM_Base_MspInit+0x4c>)
 8001f3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <HAL_TIM_Base_MspInit+0x4c>)
 8001f40:	2180      	movs	r1, #128	@ 0x80
 8001f42:	0289      	lsls	r1, r1, #10
 8001f44:	430a      	orrs	r2, r1
 8001f46:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f48:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <HAL_TIM_Base_MspInit+0x4c>)
 8001f4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f4c:	2380      	movs	r3, #128	@ 0x80
 8001f4e:	029b      	lsls	r3, r3, #10
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2015      	movs	r0, #21
 8001f5c:	f001 fa8a 	bl	8003474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001f60:	2015      	movs	r0, #21
 8001f62:	f001 fa9c 	bl	800349e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b004      	add	sp, #16
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	40014400 	.word	0x40014400
 8001f74:	40021000 	.word	0x40021000

08001f78 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b097      	sub	sp, #92	@ 0x5c
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	2344      	movs	r3, #68	@ 0x44
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	0018      	movs	r0, r3
 8001f86:	2314      	movs	r3, #20
 8001f88:	001a      	movs	r2, r3
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	f003 ffd6 	bl	8005f3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f90:	2410      	movs	r4, #16
 8001f92:	193b      	adds	r3, r7, r4
 8001f94:	0018      	movs	r0, r3
 8001f96:	2334      	movs	r3, #52	@ 0x34
 8001f98:	001a      	movs	r2, r3
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	f003 ffce 	bl	8005f3c <memset>
  if(huart->Instance==USART1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a22      	ldr	r2, [pc, #136]	@ (8002030 <HAL_UART_MspInit+0xb8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d13d      	bne.n	8002026 <HAL_UART_MspInit+0xae>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001faa:	193b      	adds	r3, r7, r4
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001fb0:	193b      	adds	r3, r7, r4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb6:	193b      	adds	r3, r7, r4
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f002 fd23 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 8001fbe:	1e03      	subs	r3, r0, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001fc2:	f7ff fe8b 	bl	8001cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <HAL_UART_MspInit+0xbc>)
 8001fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fca:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <HAL_UART_MspInit+0xbc>)
 8001fcc:	2180      	movs	r1, #128	@ 0x80
 8001fce:	01c9      	lsls	r1, r1, #7
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fd4:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <HAL_UART_MspInit+0xbc>)
 8001fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fd8:	2380      	movs	r3, #128	@ 0x80
 8001fda:	01db      	lsls	r3, r3, #7
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <HAL_UART_MspInit+0xbc>)
 8001fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fe6:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <HAL_UART_MspInit+0xbc>)
 8001fe8:	2102      	movs	r1, #2
 8001fea:	430a      	orrs	r2, r1
 8001fec:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fee:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <HAL_UART_MspInit+0xbc>)
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ffa:	2144      	movs	r1, #68	@ 0x44
 8001ffc:	187b      	adds	r3, r7, r1
 8001ffe:	22c0      	movs	r2, #192	@ 0xc0
 8002000:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	187b      	adds	r3, r7, r1
 8002004:	2202      	movs	r2, #2
 8002006:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	187b      	adds	r3, r7, r1
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	187b      	adds	r3, r7, r1
 8002010:	2200      	movs	r2, #0
 8002012:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002014:	187b      	adds	r3, r7, r1
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201a:	187b      	adds	r3, r7, r1
 800201c:	4a06      	ldr	r2, [pc, #24]	@ (8002038 <HAL_UART_MspInit+0xc0>)
 800201e:	0019      	movs	r1, r3
 8002020:	0010      	movs	r0, r2
 8002022:	f001 fe7b 	bl	8003d1c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002026:	46c0      	nop			@ (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b017      	add	sp, #92	@ 0x5c
 800202c:	bd90      	pop	{r4, r7, pc}
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	40013800 	.word	0x40013800
 8002034:	40021000 	.word	0x40021000
 8002038:	50000400 	.word	0x50000400

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002040:	46c0      	nop			@ (mov r8, r8)
 8002042:	e7fd      	b.n	8002040 <NMI_Handler+0x4>

08002044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002048:	46c0      	nop			@ (mov r8, r8)
 800204a:	e7fd      	b.n	8002048 <HardFault_Handler+0x4>

0800204c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002050:	46c0      	nop			@ (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002064:	f000 f8c2 	bl	80021ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002068:	46c0      	nop			@ (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002074:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <DMA1_Channel1_IRQHandler+0x14>)
 8002076:	0018      	movs	r0, r3
 8002078:	f001 fd0e 	bl	8003a98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800207c:	46c0      	nop			@ (mov r8, r8)
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			@ (mov r8, r8)
 8002084:	200000fc 	.word	0x200000fc

08002088 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800208c:	4b03      	ldr	r3, [pc, #12]	@ (800209c <DMA1_Channel2_3_IRQHandler+0x14>)
 800208e:	0018      	movs	r0, r3
 8002090:	f001 fd02 	bl	8003a98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002094:	46c0      	nop			@ (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	46c0      	nop			@ (mov r8, r8)
 800209c:	2000008c 	.word	0x2000008c

080020a0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80020a4:	4b03      	ldr	r3, [pc, #12]	@ (80020b4 <TIM16_IRQHandler+0x14>)
 80020a6:	0018      	movs	r0, r3
 80020a8:	f002 ff18 	bl	8004edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80020ac:	46c0      	nop			@ (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	46c0      	nop			@ (mov r8, r8)
 80020b4:	20000158 	.word	0x20000158

080020b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020bc:	46c0      	nop			@ (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020c4:	480d      	ldr	r0, [pc, #52]	@ (80020fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020c8:	f7ff fff6 	bl	80020b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020cc:	480c      	ldr	r0, [pc, #48]	@ (8002100 <LoopForever+0x6>)
  ldr r1, =_edata
 80020ce:	490d      	ldr	r1, [pc, #52]	@ (8002104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002108 <LoopForever+0xe>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d4:	e002      	b.n	80020dc <LoopCopyDataInit>

080020d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020da:	3304      	adds	r3, #4

080020dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e0:	d3f9      	bcc.n	80020d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e2:	4a0a      	ldr	r2, [pc, #40]	@ (800210c <LoopForever+0x12>)
  ldr r4, =_ebss
 80020e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002110 <LoopForever+0x16>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e8:	e001      	b.n	80020ee <LoopFillZerobss>

080020ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ec:	3204      	adds	r2, #4

080020ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f0:	d3fb      	bcc.n	80020ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020f2:	f003 ff2b 	bl	8005f4c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80020f6:	f7ff fab9 	bl	800166c <main>

080020fa <LoopForever>:

LoopForever:
  b LoopForever
 80020fa:	e7fe      	b.n	80020fa <LoopForever>
  ldr   r0, =_estack
 80020fc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002104:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002108:	0800641c 	.word	0x0800641c
  ldr r2, =_sbss
 800210c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002110:	20000264 	.word	0x20000264

08002114 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002114:	e7fe      	b.n	8002114 <ADC1_COMP_IRQHandler>
	...

08002118 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002124:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <HAL_Init+0x3c>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <HAL_Init+0x3c>)
 800212a:	2180      	movs	r1, #128	@ 0x80
 800212c:	0049      	lsls	r1, r1, #1
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002132:	2003      	movs	r0, #3
 8002134:	f000 f810 	bl	8002158 <HAL_InitTick>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d003      	beq.n	8002144 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800213c:	1dfb      	adds	r3, r7, #7
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
 8002142:	e001      	b.n	8002148 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002144:	f7ff fdd0 	bl	8001ce8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002148:	1dfb      	adds	r3, r7, #7
 800214a:	781b      	ldrb	r3, [r3, #0]
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b002      	add	sp, #8
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40022000 	.word	0x40022000

08002158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002160:	230f      	movs	r3, #15
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002168:	4b1d      	ldr	r3, [pc, #116]	@ (80021e0 <HAL_InitTick+0x88>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d02b      	beq.n	80021c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002170:	4b1c      	ldr	r3, [pc, #112]	@ (80021e4 <HAL_InitTick+0x8c>)
 8002172:	681c      	ldr	r4, [r3, #0]
 8002174:	4b1a      	ldr	r3, [pc, #104]	@ (80021e0 <HAL_InitTick+0x88>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	0019      	movs	r1, r3
 800217a:	23fa      	movs	r3, #250	@ 0xfa
 800217c:	0098      	lsls	r0, r3, #2
 800217e:	f7fd ffc1 	bl	8000104 <__udivsi3>
 8002182:	0003      	movs	r3, r0
 8002184:	0019      	movs	r1, r3
 8002186:	0020      	movs	r0, r4
 8002188:	f7fd ffbc 	bl	8000104 <__udivsi3>
 800218c:	0003      	movs	r3, r0
 800218e:	0018      	movs	r0, r3
 8002190:	f001 f995 	bl	80034be <HAL_SYSTICK_Config>
 8002194:	1e03      	subs	r3, r0, #0
 8002196:	d112      	bne.n	80021be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d80a      	bhi.n	80021b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	2301      	movs	r3, #1
 80021a2:	425b      	negs	r3, r3
 80021a4:	2200      	movs	r2, #0
 80021a6:	0018      	movs	r0, r3
 80021a8:	f001 f964 	bl	8003474 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021ac:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <HAL_InitTick+0x90>)
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e00d      	b.n	80021d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80021b4:	230f      	movs	r3, #15
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
 80021bc:	e008      	b.n	80021d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021be:	230f      	movs	r3, #15
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	2201      	movs	r2, #1
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	e003      	b.n	80021d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021c8:	230f      	movs	r3, #15
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80021d0:	230f      	movs	r3, #15
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	781b      	ldrb	r3, [r3, #0]
}
 80021d6:	0018      	movs	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	b005      	add	sp, #20
 80021dc:	bd90      	pop	{r4, r7, pc}
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	20000008 	.word	0x20000008
 80021e4:	20000000 	.word	0x20000000
 80021e8:	20000004 	.word	0x20000004

080021ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <HAL_IncTick+0x1c>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	001a      	movs	r2, r3
 80021f6:	4b05      	ldr	r3, [pc, #20]	@ (800220c <HAL_IncTick+0x20>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	18d2      	adds	r2, r2, r3
 80021fc:	4b03      	ldr	r3, [pc, #12]	@ (800220c <HAL_IncTick+0x20>)
 80021fe:	601a      	str	r2, [r3, #0]
}
 8002200:	46c0      	nop			@ (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	46c0      	nop			@ (mov r8, r8)
 8002208:	20000008 	.word	0x20000008
 800220c:	20000260 	.word	0x20000260

08002210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  return uwTick;
 8002214:	4b02      	ldr	r3, [pc, #8]	@ (8002220 <HAL_GetTick+0x10>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	20000260 	.word	0x20000260

08002224 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a05      	ldr	r2, [pc, #20]	@ (8002248 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002234:	401a      	ands	r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	601a      	str	r2, [r3, #0]
}
 800223e:	46c0      	nop			@ (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	b002      	add	sp, #8
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	fe3fffff 	.word	0xfe3fffff

0800224c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	23e0      	movs	r3, #224	@ 0xe0
 800225a:	045b      	lsls	r3, r3, #17
 800225c:	4013      	ands	r3, r2
}
 800225e:	0018      	movs	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	b002      	add	sp, #8
 8002264:	bd80      	pop	{r7, pc}

08002266 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	2104      	movs	r1, #4
 800227a:	400a      	ands	r2, r1
 800227c:	2107      	movs	r1, #7
 800227e:	4091      	lsls	r1, r2
 8002280:	000a      	movs	r2, r1
 8002282:	43d2      	mvns	r2, r2
 8002284:	401a      	ands	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2104      	movs	r1, #4
 800228a:	400b      	ands	r3, r1
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4099      	lsls	r1, r3
 8002290:	000b      	movs	r3, r1
 8002292:	431a      	orrs	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002298:	46c0      	nop			@ (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b004      	add	sp, #16
 800229e:	bd80      	pop	{r7, pc}

080022a0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	2104      	movs	r1, #4
 80022b2:	400a      	ands	r2, r1
 80022b4:	2107      	movs	r1, #7
 80022b6:	4091      	lsls	r1, r2
 80022b8:	000a      	movs	r2, r1
 80022ba:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2104      	movs	r1, #4
 80022c0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80022c2:	40da      	lsrs	r2, r3
 80022c4:	0013      	movs	r3, r2
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b002      	add	sp, #8
 80022cc:	bd80      	pop	{r7, pc}

080022ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	23c0      	movs	r3, #192	@ 0xc0
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	4013      	ands	r3, r2
 80022e0:	d101      	bne.n	80022e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	211f      	movs	r1, #31
 8002304:	400a      	ands	r2, r1
 8002306:	210f      	movs	r1, #15
 8002308:	4091      	lsls	r1, r2
 800230a:	000a      	movs	r2, r1
 800230c:	43d2      	mvns	r2, r2
 800230e:	401a      	ands	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	0e9b      	lsrs	r3, r3, #26
 8002314:	210f      	movs	r1, #15
 8002316:	4019      	ands	r1, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	201f      	movs	r0, #31
 800231c:	4003      	ands	r3, r0
 800231e:	4099      	lsls	r1, r3
 8002320:	000b      	movs	r3, r1
 8002322:	431a      	orrs	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002328:	46c0      	nop			@ (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b004      	add	sp, #16
 800232e:	bd80      	pop	{r7, pc}

08002330 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	035b      	lsls	r3, r3, #13
 8002342:	0b5b      	lsrs	r3, r3, #13
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800234a:	46c0      	nop			@ (mov r8, r8)
 800234c:	46bd      	mov	sp, r7
 800234e:	b002      	add	sp, #8
 8002350:	bd80      	pop	{r7, pc}

08002352 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	0352      	lsls	r2, r2, #13
 8002364:	0b52      	lsrs	r2, r2, #13
 8002366:	43d2      	mvns	r2, r2
 8002368:	401a      	ands	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800236e:	46c0      	nop			@ (mov r8, r8)
 8002370:	46bd      	mov	sp, r7
 8002372:	b002      	add	sp, #8
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	0212      	lsls	r2, r2, #8
 800238c:	43d2      	mvns	r2, r2
 800238e:	401a      	ands	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	400b      	ands	r3, r1
 8002398:	4904      	ldr	r1, [pc, #16]	@ (80023ac <LL_ADC_SetChannelSamplingTime+0x34>)
 800239a:	400b      	ands	r3, r1
 800239c:	431a      	orrs	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b004      	add	sp, #16
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	07ffff00 	.word	0x07ffff00

080023b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4a05      	ldr	r2, [pc, #20]	@ (80023d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80023be:	4013      	ands	r3, r2
 80023c0:	2280      	movs	r2, #128	@ 0x80
 80023c2:	0552      	lsls	r2, r2, #21
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023ca:	46c0      	nop			@ (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b002      	add	sp, #8
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	6fffffe8 	.word	0x6fffffe8

080023d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	2380      	movs	r3, #128	@ 0x80
 80023e6:	055b      	lsls	r3, r3, #21
 80023e8:	401a      	ands	r2, r3
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	055b      	lsls	r3, r3, #21
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d101      	bne.n	80023f6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	0018      	movs	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b002      	add	sp, #8
 80023fe:	bd80      	pop	{r7, pc}

08002400 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4a04      	ldr	r2, [pc, #16]	@ (8002420 <LL_ADC_Enable+0x20>)
 800240e:	4013      	ands	r3, r2
 8002410:	2201      	movs	r2, #1
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002418:	46c0      	nop			@ (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b002      	add	sp, #8
 800241e:	bd80      	pop	{r7, pc}
 8002420:	7fffffe8 	.word	0x7fffffe8

08002424 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a04      	ldr	r2, [pc, #16]	@ (8002444 <LL_ADC_Disable+0x20>)
 8002432:	4013      	ands	r3, r2
 8002434:	2202      	movs	r2, #2
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800243c:	46c0      	nop			@ (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bd80      	pop	{r7, pc}
 8002444:	7fffffe8 	.word	0x7fffffe8

08002448 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2201      	movs	r2, #1
 8002456:	4013      	ands	r3, r2
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <LL_ADC_IsEnabled+0x18>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <LL_ADC_IsEnabled+0x1a>
 8002460:	2300      	movs	r3, #0
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b002      	add	sp, #8
 8002468:	bd80      	pop	{r7, pc}

0800246a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2202      	movs	r2, #2
 8002478:	4013      	ands	r3, r2
 800247a:	2b02      	cmp	r3, #2
 800247c:	d101      	bne.n	8002482 <LL_ADC_IsDisableOngoing+0x18>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <LL_ADC_IsDisableOngoing+0x1a>
 8002482:	2300      	movs	r3, #0
}
 8002484:	0018      	movs	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}

0800248c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a04      	ldr	r2, [pc, #16]	@ (80024ac <LL_ADC_REG_StartConversion+0x20>)
 800249a:	4013      	ands	r3, r2
 800249c:	2204      	movs	r2, #4
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024a4:	46c0      	nop			@ (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	7fffffe8 	.word	0x7fffffe8

080024b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2204      	movs	r2, #4
 80024be:	4013      	ands	r3, r2
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d101      	bne.n	80024c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	0018      	movs	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b002      	add	sp, #8
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024dc:	231f      	movs	r3, #31
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e17f      	b.n	80027fa <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10a      	bne.n	8002518 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	0018      	movs	r0, r3
 8002506:	f7ff fc13 	bl	8001d30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2254      	movs	r2, #84	@ 0x54
 8002514:	2100      	movs	r1, #0
 8002516:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0018      	movs	r0, r3
 800251e:	f7ff ff5b 	bl	80023d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002522:	1e03      	subs	r3, r0, #0
 8002524:	d115      	bne.n	8002552 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0018      	movs	r0, r3
 800252c:	f7ff ff40 	bl	80023b0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002530:	4bb4      	ldr	r3, [pc, #720]	@ (8002804 <HAL_ADC_Init+0x330>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	49b4      	ldr	r1, [pc, #720]	@ (8002808 <HAL_ADC_Init+0x334>)
 8002536:	0018      	movs	r0, r3
 8002538:	f7fd fde4 	bl	8000104 <__udivsi3>
 800253c:	0003      	movs	r3, r0
 800253e:	3301      	adds	r3, #1
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002544:	e002      	b.n	800254c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3b01      	subs	r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f9      	bne.n	8002546 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	0018      	movs	r0, r3
 8002558:	f7ff ff3e 	bl	80023d8 <LL_ADC_IsInternalRegulatorEnabled>
 800255c:	1e03      	subs	r3, r0, #0
 800255e:	d10f      	bne.n	8002580 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002564:	2210      	movs	r2, #16
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002570:	2201      	movs	r2, #1
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002578:	231f      	movs	r3, #31
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0018      	movs	r0, r3
 8002586:	f7ff ff93 	bl	80024b0 <LL_ADC_REG_IsConversionOngoing>
 800258a:	0003      	movs	r3, r0
 800258c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002592:	2210      	movs	r2, #16
 8002594:	4013      	ands	r3, r2
 8002596:	d000      	beq.n	800259a <HAL_ADC_Init+0xc6>
 8002598:	e122      	b.n	80027e0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d000      	beq.n	80025a2 <HAL_ADC_Init+0xce>
 80025a0:	e11e      	b.n	80027e0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a6:	4a99      	ldr	r2, [pc, #612]	@ (800280c <HAL_ADC_Init+0x338>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	2202      	movs	r2, #2
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	0018      	movs	r0, r3
 80025b8:	f7ff ff46 	bl	8002448 <LL_ADC_IsEnabled>
 80025bc:	1e03      	subs	r3, r0, #0
 80025be:	d000      	beq.n	80025c2 <HAL_ADC_Init+0xee>
 80025c0:	e0ad      	b.n	800271e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	7e1b      	ldrb	r3, [r3, #24]
 80025ca:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80025cc:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7e5b      	ldrb	r3, [r3, #25]
 80025d2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80025d4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7e9b      	ldrb	r3, [r3, #26]
 80025da:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80025dc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_ADC_Init+0x118>
 80025e6:	2380      	movs	r3, #128	@ 0x80
 80025e8:	015b      	lsls	r3, r3, #5
 80025ea:	e000      	b.n	80025ee <HAL_ADC_Init+0x11a>
 80025ec:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80025ee:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80025f4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	da04      	bge.n	8002608 <HAL_ADC_Init+0x134>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	e001      	b.n	800260c <HAL_ADC_Init+0x138>
 8002608:	2380      	movs	r3, #128	@ 0x80
 800260a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800260c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	212c      	movs	r1, #44	@ 0x2c
 8002612:	5c5b      	ldrb	r3, [r3, r1]
 8002614:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002616:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2220      	movs	r2, #32
 8002622:	5c9b      	ldrb	r3, [r3, r2]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d115      	bne.n	8002654 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	7e9b      	ldrb	r3, [r3, #26]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2280      	movs	r2, #128	@ 0x80
 8002634:	0252      	lsls	r2, r2, #9
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	e00b      	b.n	8002654 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002640:	2220      	movs	r2, #32
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264c:	2201      	movs	r2, #1
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002660:	23e0      	movs	r3, #224	@ 0xe0
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800266a:	4313      	orrs	r3, r2
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a65      	ldr	r2, [pc, #404]	@ (8002810 <HAL_ADC_Init+0x33c>)
 800267a:	4013      	ands	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	430a      	orrs	r2, r1
 8002686:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	0f9b      	lsrs	r3, r3, #30
 800268e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002694:	4313      	orrs	r3, r2
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	223c      	movs	r2, #60	@ 0x3c
 80026a0:	5c9b      	ldrb	r3, [r3, r2]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d111      	bne.n	80026ca <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	0f9b      	lsrs	r3, r3, #30
 80026ac:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026b2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80026b8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80026be:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	2201      	movs	r2, #1
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	4a50      	ldr	r2, [pc, #320]	@ (8002814 <HAL_ADC_Init+0x340>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	0019      	movs	r1, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	430a      	orrs	r2, r1
 80026de:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	23c0      	movs	r3, #192	@ 0xc0
 80026e6:	061b      	lsls	r3, r3, #24
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d018      	beq.n	800271e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	05db      	lsls	r3, r3, #23
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d012      	beq.n	800271e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80026fc:	2380      	movs	r3, #128	@ 0x80
 80026fe:	061b      	lsls	r3, r3, #24
 8002700:	429a      	cmp	r2, r3
 8002702:	d00c      	beq.n	800271e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002704:	4b44      	ldr	r3, [pc, #272]	@ (8002818 <HAL_ADC_Init+0x344>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a44      	ldr	r2, [pc, #272]	@ (800281c <HAL_ADC_Init+0x348>)
 800270a:	4013      	ands	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	23f0      	movs	r3, #240	@ 0xf0
 8002714:	039b      	lsls	r3, r3, #14
 8002716:	401a      	ands	r2, r3
 8002718:	4b3f      	ldr	r3, [pc, #252]	@ (8002818 <HAL_ADC_Init+0x344>)
 800271a:	430a      	orrs	r2, r1
 800271c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002726:	001a      	movs	r2, r3
 8002728:	2100      	movs	r1, #0
 800272a:	f7ff fd9c 	bl	8002266 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002736:	493a      	ldr	r1, [pc, #232]	@ (8002820 <HAL_ADC_Init+0x34c>)
 8002738:	001a      	movs	r2, r3
 800273a:	f7ff fd94 	bl	8002266 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2110      	movs	r1, #16
 8002752:	4249      	negs	r1, r1
 8002754:	430a      	orrs	r2, r1
 8002756:	629a      	str	r2, [r3, #40]	@ 0x28
 8002758:	e018      	b.n	800278c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	2380      	movs	r3, #128	@ 0x80
 8002760:	039b      	lsls	r3, r3, #14
 8002762:	429a      	cmp	r2, r3
 8002764:	d112      	bne.n	800278c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	3b01      	subs	r3, #1
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	221c      	movs	r2, #28
 8002776:	4013      	ands	r3, r2
 8002778:	2210      	movs	r2, #16
 800277a:	4252      	negs	r2, r2
 800277c:	409a      	lsls	r2, r3
 800277e:	0011      	movs	r1, r2
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2100      	movs	r1, #0
 8002792:	0018      	movs	r0, r3
 8002794:	f7ff fd84 	bl	80022a0 <LL_ADC_GetSamplingTimeCommonChannels>
 8002798:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800279e:	429a      	cmp	r2, r3
 80027a0:	d10b      	bne.n	80027ba <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ac:	2203      	movs	r2, #3
 80027ae:	4393      	bics	r3, r2
 80027b0:	2201      	movs	r2, #1
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80027b8:	e01c      	b.n	80027f4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027be:	2212      	movs	r2, #18
 80027c0:	4393      	bics	r3, r2
 80027c2:	2210      	movs	r2, #16
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ce:	2201      	movs	r2, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80027d6:	231f      	movs	r3, #31
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80027de:	e009      	b.n	80027f4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e4:	2210      	movs	r2, #16
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80027ec:	231f      	movs	r3, #31
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80027f4:	231f      	movs	r3, #31
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	781b      	ldrb	r3, [r3, #0]
}
 80027fa:	0018      	movs	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b008      	add	sp, #32
 8002800:	bd80      	pop	{r7, pc}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	20000000 	.word	0x20000000
 8002808:	00030d40 	.word	0x00030d40
 800280c:	fffffefd 	.word	0xfffffefd
 8002810:	ffde0201 	.word	0xffde0201
 8002814:	1ffffc02 	.word	0x1ffffc02
 8002818:	40012708 	.word	0x40012708
 800281c:	ffc3ffff 	.word	0xffc3ffff
 8002820:	07ffff04 	.word	0x07ffff04

08002824 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002824:	b5b0      	push	{r4, r5, r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0018      	movs	r0, r3
 8002836:	f7ff fe3b 	bl	80024b0 <LL_ADC_REG_IsConversionOngoing>
 800283a:	1e03      	subs	r3, r0, #0
 800283c:	d16c      	bne.n	8002918 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2254      	movs	r2, #84	@ 0x54
 8002842:	5c9b      	ldrb	r3, [r3, r2]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_ADC_Start_DMA+0x28>
 8002848:	2302      	movs	r3, #2
 800284a:	e06c      	b.n	8002926 <HAL_ADC_Start_DMA+0x102>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2254      	movs	r2, #84	@ 0x54
 8002850:	2101      	movs	r1, #1
 8002852:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	4013      	ands	r3, r2
 800285e:	d113      	bne.n	8002888 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0018      	movs	r0, r3
 8002866:	f7ff fdef 	bl	8002448 <LL_ADC_IsEnabled>
 800286a:	1e03      	subs	r3, r0, #0
 800286c:	d004      	beq.n	8002878 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	0018      	movs	r0, r3
 8002874:	f7ff fdd6 	bl	8002424 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2101      	movs	r1, #1
 8002884:	430a      	orrs	r2, r1
 8002886:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002888:	2517      	movs	r5, #23
 800288a:	197c      	adds	r4, r7, r5
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	0018      	movs	r0, r3
 8002890:	f000 fa3e 	bl	8002d10 <ADC_Enable>
 8002894:	0003      	movs	r3, r0
 8002896:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002898:	002c      	movs	r4, r5
 800289a:	193b      	adds	r3, r7, r4
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d13e      	bne.n	8002920 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a6:	4a22      	ldr	r2, [pc, #136]	@ (8002930 <HAL_ADC_Start_DMA+0x10c>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	2280      	movs	r2, #128	@ 0x80
 80028ac:	0052      	lsls	r2, r2, #1
 80028ae:	431a      	orrs	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028be:	4a1d      	ldr	r2, [pc, #116]	@ (8002934 <HAL_ADC_Start_DMA+0x110>)
 80028c0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002938 <HAL_ADC_Start_DMA+0x114>)
 80028c8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ce:	4a1b      	ldr	r2, [pc, #108]	@ (800293c <HAL_ADC_Start_DMA+0x118>)
 80028d0:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	221c      	movs	r2, #28
 80028d8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2254      	movs	r2, #84	@ 0x54
 80028de:	2100      	movs	r1, #0
 80028e0:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2110      	movs	r1, #16
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	3340      	adds	r3, #64	@ 0x40
 80028fc:	0019      	movs	r1, r3
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	193c      	adds	r4, r7, r4
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f001 f842 	bl	800398c <HAL_DMA_Start_IT>
 8002908:	0003      	movs	r3, r0
 800290a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	0018      	movs	r0, r3
 8002912:	f7ff fdbb 	bl	800248c <LL_ADC_REG_StartConversion>
 8002916:	e003      	b.n	8002920 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002918:	2317      	movs	r3, #23
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	2202      	movs	r2, #2
 800291e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002920:	2317      	movs	r3, #23
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	781b      	ldrb	r3, [r3, #0]
}
 8002926:	0018      	movs	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	b006      	add	sp, #24
 800292c:	bdb0      	pop	{r4, r5, r7, pc}
 800292e:	46c0      	nop			@ (mov r8, r8)
 8002930:	fffff0fe 	.word	0xfffff0fe
 8002934:	08002ed9 	.word	0x08002ed9
 8002938:	08002fa1 	.word	0x08002fa1
 800293c:	08002fbf 	.word	0x08002fbf

08002940 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002948:	46c0      	nop			@ (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b002      	add	sp, #8
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002958:	46c0      	nop			@ (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b002      	add	sp, #8
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800296a:	2317      	movs	r3, #23
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2254      	movs	r2, #84	@ 0x54
 800297a:	5c9b      	ldrb	r3, [r3, r2]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x24>
 8002980:	2302      	movs	r3, #2
 8002982:	e1c0      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x3a6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2254      	movs	r2, #84	@ 0x54
 8002988:	2101      	movs	r1, #1
 800298a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0018      	movs	r0, r3
 8002992:	f7ff fd8d 	bl	80024b0 <LL_ADC_REG_IsConversionOngoing>
 8002996:	1e03      	subs	r3, r0, #0
 8002998:	d000      	beq.n	800299c <HAL_ADC_ConfigChannel+0x3c>
 800299a:	e1a3      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d100      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x46>
 80029a4:	e143      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	2380      	movs	r3, #128	@ 0x80
 80029ac:	061b      	lsls	r3, r3, #24
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d004      	beq.n	80029bc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029b6:	4ac1      	ldr	r2, [pc, #772]	@ (8002cbc <HAL_ADC_ConfigChannel+0x35c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d108      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0019      	movs	r1, r3
 80029c6:	0010      	movs	r0, r2
 80029c8:	f7ff fcb2 	bl	8002330 <LL_ADC_REG_SetSequencerChAdd>
 80029cc:	e0c9      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	211f      	movs	r1, #31
 80029d8:	400b      	ands	r3, r1
 80029da:	210f      	movs	r1, #15
 80029dc:	4099      	lsls	r1, r3
 80029de:	000b      	movs	r3, r1
 80029e0:	43db      	mvns	r3, r3
 80029e2:	4013      	ands	r3, r2
 80029e4:	0019      	movs	r1, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	035b      	lsls	r3, r3, #13
 80029ec:	0b5b      	lsrs	r3, r3, #13
 80029ee:	d105      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x9c>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	221f      	movs	r2, #31
 80029f8:	4013      	ands	r3, r2
 80029fa:	e098      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2201      	movs	r2, #1
 8002a02:	4013      	ands	r3, r2
 8002a04:	d000      	beq.n	8002a08 <HAL_ADC_ConfigChannel+0xa8>
 8002a06:	e091      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x1cc>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d000      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0xb4>
 8002a12:	e089      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x1c8>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2204      	movs	r2, #4
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d000      	beq.n	8002a20 <HAL_ADC_ConfigChannel+0xc0>
 8002a1e:	e081      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x1c4>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2208      	movs	r2, #8
 8002a26:	4013      	ands	r3, r2
 8002a28:	d000      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0xcc>
 8002a2a:	e079      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x1c0>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2210      	movs	r2, #16
 8002a32:	4013      	ands	r3, r2
 8002a34:	d000      	beq.n	8002a38 <HAL_ADC_ConfigChannel+0xd8>
 8002a36:	e071      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x1bc>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d000      	beq.n	8002a44 <HAL_ADC_ConfigChannel+0xe4>
 8002a42:	e069      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x1b8>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2240      	movs	r2, #64	@ 0x40
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d000      	beq.n	8002a50 <HAL_ADC_ConfigChannel+0xf0>
 8002a4e:	e061      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x1b4>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2280      	movs	r2, #128	@ 0x80
 8002a56:	4013      	ands	r3, r2
 8002a58:	d000      	beq.n	8002a5c <HAL_ADC_ConfigChannel+0xfc>
 8002a5a:	e059      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x1b0>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2380      	movs	r3, #128	@ 0x80
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4013      	ands	r3, r2
 8002a66:	d151      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1ac>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	2380      	movs	r3, #128	@ 0x80
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4013      	ands	r3, r2
 8002a72:	d149      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x1a8>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	2380      	movs	r3, #128	@ 0x80
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d141      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1a4>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d139      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x1a0>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	2380      	movs	r3, #128	@ 0x80
 8002a92:	015b      	lsls	r3, r3, #5
 8002a94:	4013      	ands	r3, r2
 8002a96:	d131      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x19c>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	2380      	movs	r3, #128	@ 0x80
 8002a9e:	019b      	lsls	r3, r3, #6
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d129      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x198>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	2380      	movs	r3, #128	@ 0x80
 8002aaa:	01db      	lsls	r3, r3, #7
 8002aac:	4013      	ands	r3, r2
 8002aae:	d121      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x194>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	2380      	movs	r3, #128	@ 0x80
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d119      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x190>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	@ 0x80
 8002ac2:	025b      	lsls	r3, r3, #9
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d111      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x18c>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	2380      	movs	r3, #128	@ 0x80
 8002ace:	029b      	lsls	r3, r3, #10
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d109      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x188>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2380      	movs	r3, #128	@ 0x80
 8002ada:	02db      	lsls	r3, r3, #11
 8002adc:	4013      	ands	r3, r2
 8002ade:	d001      	beq.n	8002ae4 <HAL_ADC_ConfigChannel+0x184>
 8002ae0:	2312      	movs	r3, #18
 8002ae2:	e024      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e022      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002ae8:	2311      	movs	r3, #17
 8002aea:	e020      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002aec:	2310      	movs	r3, #16
 8002aee:	e01e      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002af0:	230f      	movs	r3, #15
 8002af2:	e01c      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002af4:	230e      	movs	r3, #14
 8002af6:	e01a      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002af8:	230d      	movs	r3, #13
 8002afa:	e018      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002afc:	230c      	movs	r3, #12
 8002afe:	e016      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002b00:	230b      	movs	r3, #11
 8002b02:	e014      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002b04:	230a      	movs	r3, #10
 8002b06:	e012      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002b08:	2309      	movs	r3, #9
 8002b0a:	e010      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002b0c:	2308      	movs	r3, #8
 8002b0e:	e00e      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002b10:	2307      	movs	r3, #7
 8002b12:	e00c      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002b14:	2306      	movs	r3, #6
 8002b16:	e00a      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002b18:	2305      	movs	r3, #5
 8002b1a:	e008      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	e006      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002b20:	2303      	movs	r3, #3
 8002b22:	e004      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e002      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1ce>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	6852      	ldr	r2, [r2, #4]
 8002b32:	201f      	movs	r0, #31
 8002b34:	4002      	ands	r2, r0
 8002b36:	4093      	lsls	r3, r2
 8002b38:	000a      	movs	r2, r1
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d808      	bhi.n	8002b62 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	6859      	ldr	r1, [r3, #4]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	001a      	movs	r2, r3
 8002b5e:	f7ff fbc7 	bl	80022f0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	001a      	movs	r2, r3
 8002b70:	f7ff fc02 	bl	8002378 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	db00      	blt.n	8002b7e <HAL_ADC_ConfigChannel+0x21e>
 8002b7c:	e0bc      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b7e:	4b50      	ldr	r3, [pc, #320]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x360>)
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7ff fb63 	bl	800224c <LL_ADC_GetCommonPathInternalCh>
 8002b86:	0003      	movs	r3, r0
 8002b88:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a4d      	ldr	r2, [pc, #308]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x364>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d122      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	2380      	movs	r3, #128	@ 0x80
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b9c:	d11d      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	2280      	movs	r2, #128	@ 0x80
 8002ba2:	0412      	lsls	r2, r2, #16
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	4a46      	ldr	r2, [pc, #280]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x360>)
 8002ba8:	0019      	movs	r1, r3
 8002baa:	0010      	movs	r0, r2
 8002bac:	f7ff fb3a 	bl	8002224 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bb0:	4b45      	ldr	r3, [pc, #276]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x368>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4945      	ldr	r1, [pc, #276]	@ (8002ccc <HAL_ADC_ConfigChannel+0x36c>)
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f7fd faa4 	bl	8000104 <__udivsi3>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	0013      	movs	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	189b      	adds	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bca:	e002      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f9      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bd8:	e08e      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a3c      	ldr	r2, [pc, #240]	@ (8002cd0 <HAL_ADC_ConfigChannel+0x370>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d10e      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	045b      	lsls	r3, r3, #17
 8002bea:	4013      	ands	r3, r2
 8002bec:	d109      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2280      	movs	r2, #128	@ 0x80
 8002bf2:	0452      	lsls	r2, r2, #17
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	4a32      	ldr	r2, [pc, #200]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x360>)
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	0010      	movs	r0, r2
 8002bfc:	f7ff fb12 	bl	8002224 <LL_ADC_SetCommonPathInternalCh>
 8002c00:	e07a      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a33      	ldr	r2, [pc, #204]	@ (8002cd4 <HAL_ADC_ConfigChannel+0x374>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d000      	beq.n	8002c0e <HAL_ADC_ConfigChannel+0x2ae>
 8002c0c:	e074      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	2380      	movs	r3, #128	@ 0x80
 8002c12:	03db      	lsls	r3, r3, #15
 8002c14:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c16:	d000      	beq.n	8002c1a <HAL_ADC_ConfigChannel+0x2ba>
 8002c18:	e06e      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2280      	movs	r2, #128	@ 0x80
 8002c1e:	03d2      	lsls	r2, r2, #15
 8002c20:	4313      	orrs	r3, r2
 8002c22:	4a27      	ldr	r2, [pc, #156]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x360>)
 8002c24:	0019      	movs	r1, r3
 8002c26:	0010      	movs	r0, r2
 8002c28:	f7ff fafc 	bl	8002224 <LL_ADC_SetCommonPathInternalCh>
 8002c2c:	e064      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	2380      	movs	r3, #128	@ 0x80
 8002c34:	061b      	lsls	r3, r3, #24
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d004      	beq.n	8002c44 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002cbc <HAL_ADC_ConfigChannel+0x35c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d107      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	0010      	movs	r0, r2
 8002c50:	f7ff fb7f 	bl	8002352 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	da4d      	bge.n	8002cf8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c5c:	4b18      	ldr	r3, [pc, #96]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x360>)
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7ff faf4 	bl	800224c <LL_ADC_GetCommonPathInternalCh>
 8002c64:	0003      	movs	r3, r0
 8002c66:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a15      	ldr	r2, [pc, #84]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x364>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d108      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4a18      	ldr	r2, [pc, #96]	@ (8002cd8 <HAL_ADC_ConfigChannel+0x378>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	4a11      	ldr	r2, [pc, #68]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x360>)
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	0010      	movs	r0, r2
 8002c7e:	f7ff fad1 	bl	8002224 <LL_ADC_SetCommonPathInternalCh>
 8002c82:	e039      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a11      	ldr	r2, [pc, #68]	@ (8002cd0 <HAL_ADC_ConfigChannel+0x370>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d108      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4a12      	ldr	r2, [pc, #72]	@ (8002cdc <HAL_ADC_ConfigChannel+0x37c>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x360>)
 8002c96:	0019      	movs	r1, r3
 8002c98:	0010      	movs	r0, r2
 8002c9a:	f7ff fac3 	bl	8002224 <LL_ADC_SetCommonPathInternalCh>
 8002c9e:	e02b      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8002cd4 <HAL_ADC_ConfigChannel+0x374>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d126      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4a0c      	ldr	r2, [pc, #48]	@ (8002ce0 <HAL_ADC_ConfigChannel+0x380>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	4a03      	ldr	r2, [pc, #12]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x360>)
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	0010      	movs	r0, r2
 8002cb6:	f7ff fab5 	bl	8002224 <LL_ADC_SetCommonPathInternalCh>
 8002cba:	e01d      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x398>
 8002cbc:	80000004 	.word	0x80000004
 8002cc0:	40012708 	.word	0x40012708
 8002cc4:	b0001000 	.word	0xb0001000
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	00030d40 	.word	0x00030d40
 8002cd0:	b8004000 	.word	0xb8004000
 8002cd4:	b4002000 	.word	0xb4002000
 8002cd8:	ff7fffff 	.word	0xff7fffff
 8002cdc:	feffffff 	.word	0xfeffffff
 8002ce0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce8:	2220      	movs	r2, #32
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002cf0:	2317      	movs	r3, #23
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2254      	movs	r2, #84	@ 0x54
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002d00:	2317      	movs	r3, #23
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	781b      	ldrb	r3, [r3, #0]
}
 8002d06:	0018      	movs	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b006      	add	sp, #24
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			@ (mov r8, r8)

08002d10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f7ff fb91 	bl	8002448 <LL_ADC_IsEnabled>
 8002d26:	1e03      	subs	r3, r0, #0
 8002d28:	d000      	beq.n	8002d2c <ADC_Enable+0x1c>
 8002d2a:	e069      	b.n	8002e00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	4a36      	ldr	r2, [pc, #216]	@ (8002e0c <ADC_Enable+0xfc>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	d00d      	beq.n	8002d54 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d48:	2201      	movs	r2, #1
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e056      	b.n	8002e02 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f7ff fb51 	bl	8002400 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e10 <ADC_Enable+0x100>)
 8002d60:	0018      	movs	r0, r3
 8002d62:	f7ff fa73 	bl	800224c <LL_ADC_GetCommonPathInternalCh>
 8002d66:	0002      	movs	r2, r0
 8002d68:	2380      	movs	r3, #128	@ 0x80
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d00f      	beq.n	8002d90 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d70:	4b28      	ldr	r3, [pc, #160]	@ (8002e14 <ADC_Enable+0x104>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4928      	ldr	r1, [pc, #160]	@ (8002e18 <ADC_Enable+0x108>)
 8002d76:	0018      	movs	r0, r3
 8002d78:	f7fd f9c4 	bl	8000104 <__udivsi3>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002d80:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d82:	e002      	b.n	8002d8a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f9      	bne.n	8002d84 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	7e5b      	ldrb	r3, [r3, #25]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d033      	beq.n	8002e00 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002d98:	f7ff fa3a 	bl	8002210 <HAL_GetTick>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002da0:	e027      	b.n	8002df2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	0018      	movs	r0, r3
 8002da8:	f7ff fb4e 	bl	8002448 <LL_ADC_IsEnabled>
 8002dac:	1e03      	subs	r3, r0, #0
 8002dae:	d104      	bne.n	8002dba <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7ff fb23 	bl	8002400 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dba:	f7ff fa29 	bl	8002210 <HAL_GetTick>
 8002dbe:	0002      	movs	r2, r0
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d914      	bls.n	8002df2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d00d      	beq.n	8002df2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dda:	2210      	movs	r2, #16
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de6:	2201      	movs	r2, #1
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e007      	b.n	8002e02 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d1d0      	bne.n	8002da2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	0018      	movs	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b004      	add	sp, #16
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	80000017 	.word	0x80000017
 8002e10:	40012708 	.word	0x40012708
 8002e14:	20000000 	.word	0x20000000
 8002e18:	00030d40 	.word	0x00030d40

08002e1c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f7ff fb1e 	bl	800246a <LL_ADC_IsDisableOngoing>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	0018      	movs	r0, r3
 8002e38:	f7ff fb06 	bl	8002448 <LL_ADC_IsEnabled>
 8002e3c:	1e03      	subs	r3, r0, #0
 8002e3e:	d046      	beq.n	8002ece <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d143      	bne.n	8002ece <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2205      	movs	r2, #5
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d10d      	bne.n	8002e70 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f7ff fae3 	bl	8002424 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2203      	movs	r2, #3
 8002e64:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e66:	f7ff f9d3 	bl	8002210 <HAL_GetTick>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e6e:	e028      	b.n	8002ec2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e74:	2210      	movs	r2, #16
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e80:	2201      	movs	r2, #1
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e021      	b.n	8002ed0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e8c:	f7ff f9c0 	bl	8002210 <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d913      	bls.n	8002ec2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d00d      	beq.n	8002ec2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eaa:	2210      	movs	r2, #16
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e006      	b.n	8002ed0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d1de      	bne.n	8002e8c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b004      	add	sp, #16
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eea:	2250      	movs	r2, #80	@ 0x50
 8002eec:	4013      	ands	r3, r2
 8002eee:	d141      	bne.n	8002f74 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef4:	2280      	movs	r2, #128	@ 0x80
 8002ef6:	0092      	lsls	r2, r2, #2
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7ff f9e3 	bl	80022ce <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f08:	1e03      	subs	r3, r0, #0
 8002f0a:	d02e      	beq.n	8002f6a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	7e9b      	ldrb	r3, [r3, #26]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d12a      	bne.n	8002f6a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d123      	bne.n	8002f6a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	0018      	movs	r0, r3
 8002f28:	f7ff fac2 	bl	80024b0 <LL_ADC_REG_IsConversionOngoing>
 8002f2c:	1e03      	subs	r3, r0, #0
 8002f2e:	d110      	bne.n	8002f52 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	210c      	movs	r1, #12
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f44:	4a15      	ldr	r2, [pc, #84]	@ (8002f9c <ADC_DMAConvCplt+0xc4>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	2201      	movs	r2, #1
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f50:	e00b      	b.n	8002f6a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f56:	2220      	movs	r2, #32
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f62:	2201      	movs	r2, #1
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7fe fda3 	bl	8001ab8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f72:	e00f      	b.n	8002f94 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f78:	2210      	movs	r2, #16
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d004      	beq.n	8002f88 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7ff fce5 	bl	8002950 <HAL_ADC_ErrorCallback>
}
 8002f86:	e005      	b.n	8002f94 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	0010      	movs	r0, r2
 8002f92:	4798      	blx	r3
}
 8002f94:	46c0      	nop			@ (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b004      	add	sp, #16
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	fffffefe 	.word	0xfffffefe

08002fa0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7ff fcc5 	bl	8002940 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fb6:	46c0      	nop			@ (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b004      	add	sp, #16
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd0:	2240      	movs	r2, #64	@ 0x40
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fdc:	2204      	movs	r2, #4
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7ff fcb2 	bl	8002950 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fec:	46c0      	nop			@ (mov r8, r8)
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b004      	add	sp, #16
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <LL_ADC_GetCommonClock>:
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	23f0      	movs	r3, #240	@ 0xf0
 8003002:	039b      	lsls	r3, r3, #14
 8003004:	4013      	ands	r3, r2
}
 8003006:	0018      	movs	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	b002      	add	sp, #8
 800300c:	bd80      	pop	{r7, pc}

0800300e <LL_ADC_GetClock>:
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	0f9b      	lsrs	r3, r3, #30
 800301c:	079b      	lsls	r3, r3, #30
}
 800301e:	0018      	movs	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	b002      	add	sp, #8
 8003024:	bd80      	pop	{r7, pc}

08003026 <LL_ADC_SetCalibrationFactor>:
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	22b4      	movs	r2, #180	@ 0xb4
 8003034:	589b      	ldr	r3, [r3, r2]
 8003036:	227f      	movs	r2, #127	@ 0x7f
 8003038:	4393      	bics	r3, r2
 800303a:	001a      	movs	r2, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	21b4      	movs	r1, #180	@ 0xb4
 8003044:	505a      	str	r2, [r3, r1]
}
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b002      	add	sp, #8
 800304c:	bd80      	pop	{r7, pc}

0800304e <LL_ADC_GetCalibrationFactor>:
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	22b4      	movs	r2, #180	@ 0xb4
 800305a:	589b      	ldr	r3, [r3, r2]
 800305c:	227f      	movs	r2, #127	@ 0x7f
 800305e:	4013      	ands	r3, r2
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}

08003068 <LL_ADC_Enable>:
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a04      	ldr	r2, [pc, #16]	@ (8003088 <LL_ADC_Enable+0x20>)
 8003076:	4013      	ands	r3, r2
 8003078:	2201      	movs	r2, #1
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	609a      	str	r2, [r3, #8]
}
 8003080:	46c0      	nop			@ (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}
 8003088:	7fffffe8 	.word	0x7fffffe8

0800308c <LL_ADC_Disable>:
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4a04      	ldr	r2, [pc, #16]	@ (80030ac <LL_ADC_Disable+0x20>)
 800309a:	4013      	ands	r3, r2
 800309c:	2202      	movs	r2, #2
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	609a      	str	r2, [r3, #8]
}
 80030a4:	46c0      	nop			@ (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b002      	add	sp, #8
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	7fffffe8 	.word	0x7fffffe8

080030b0 <LL_ADC_IsEnabled>:
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2201      	movs	r2, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <LL_ADC_IsEnabled+0x18>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <LL_ADC_IsEnabled+0x1a>
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	0018      	movs	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b002      	add	sp, #8
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <LL_ADC_StartCalibration>:
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4a05      	ldr	r2, [pc, #20]	@ (80030f8 <LL_ADC_StartCalibration+0x24>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	2280      	movs	r2, #128	@ 0x80
 80030e6:	0612      	lsls	r2, r2, #24
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	609a      	str	r2, [r3, #8]
}
 80030ee:	46c0      	nop			@ (mov r8, r8)
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b002      	add	sp, #8
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	46c0      	nop			@ (mov r8, r8)
 80030f8:	7fffffe8 	.word	0x7fffffe8

080030fc <LL_ADC_IsCalibrationOnGoing>:
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	0fdb      	lsrs	r3, r3, #31
 800310a:	07da      	lsls	r2, r3, #31
 800310c:	2380      	movs	r3, #128	@ 0x80
 800310e:	061b      	lsls	r3, r3, #24
 8003110:	429a      	cmp	r2, r3
 8003112:	d101      	bne.n	8003118 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003118:	2300      	movs	r3, #0
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b002      	add	sp, #8
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b08b      	sub	sp, #44	@ 0x2c
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2254      	movs	r2, #84	@ 0x54
 8003138:	5c9b      	ldrb	r3, [r3, r2]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_ADCEx_Calibration_Start+0x1e>
 800313e:	2302      	movs	r3, #2
 8003140:	e0dd      	b.n	80032fe <HAL_ADCEx_Calibration_Start+0x1da>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2254      	movs	r2, #84	@ 0x54
 8003146:	2101      	movs	r1, #1
 8003148:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800314a:	231f      	movs	r3, #31
 800314c:	18fc      	adds	r4, r7, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	0018      	movs	r0, r3
 8003152:	f7ff fe63 	bl	8002e1c <ADC_Disable>
 8003156:	0003      	movs	r3, r0
 8003158:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	0018      	movs	r0, r3
 8003160:	f7ff ffa6 	bl	80030b0 <LL_ADC_IsEnabled>
 8003164:	1e03      	subs	r3, r0, #0
 8003166:	d000      	beq.n	800316a <HAL_ADCEx_Calibration_Start+0x46>
 8003168:	e0bc      	b.n	80032e4 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316e:	4a66      	ldr	r2, [pc, #408]	@ (8003308 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8003170:	4013      	ands	r3, r2
 8003172:	2202      	movs	r2, #2
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4a62      	ldr	r2, [pc, #392]	@ (800330c <HAL_ADCEx_Calibration_Start+0x1e8>)
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	495f      	ldr	r1, [pc, #380]	@ (8003310 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8003192:	400a      	ands	r2, r1
 8003194:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003196:	2300      	movs	r3, #0
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
 800319a:	e02d      	b.n	80031f8 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	0018      	movs	r0, r3
 80031a2:	f7ff ff97 	bl	80030d4 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031a6:	e014      	b.n	80031d2 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3301      	adds	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4a58      	ldr	r2, [pc, #352]	@ (8003314 <HAL_ADCEx_Calibration_Start+0x1f0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d90d      	bls.n	80031d2 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ba:	2212      	movs	r2, #18
 80031bc:	4393      	bics	r3, r2
 80031be:	2210      	movs	r2, #16
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2254      	movs	r2, #84	@ 0x54
 80031ca:	2100      	movs	r1, #0
 80031cc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e095      	b.n	80032fe <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	0018      	movs	r0, r3
 80031d8:	f7ff ff90 	bl	80030fc <LL_ADC_IsCalibrationOnGoing>
 80031dc:	1e03      	subs	r3, r0, #0
 80031de:	d1e3      	bne.n	80031a8 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7ff ff32 	bl	800304e <LL_ADC_GetCalibrationFactor>
 80031ea:	0002      	movs	r2, r0
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	189b      	adds	r3, r3, r2
 80031f0:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	3301      	adds	r3, #1
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fa:	2b07      	cmp	r3, #7
 80031fc:	d9ce      	bls.n	800319c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80031fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003200:	6a38      	ldr	r0, [r7, #32]
 8003202:	f7fc ff7f 	bl	8000104 <__udivsi3>
 8003206:	0003      	movs	r3, r0
 8003208:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	0018      	movs	r0, r3
 8003210:	f7ff ff2a 	bl	8003068 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0018      	movs	r0, r3
 800321a:	f7ff fef8 	bl	800300e <LL_ADC_GetClock>
 800321e:	1e03      	subs	r3, r0, #0
 8003220:	d11b      	bne.n	800325a <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003222:	4b3d      	ldr	r3, [pc, #244]	@ (8003318 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8003224:	0018      	movs	r0, r3
 8003226:	f7ff fee5 	bl	8002ff4 <LL_ADC_GetCommonClock>
 800322a:	0003      	movs	r3, r0
 800322c:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	23e0      	movs	r3, #224	@ 0xe0
 8003232:	035b      	lsls	r3, r3, #13
 8003234:	429a      	cmp	r2, r3
 8003236:	d310      	bcc.n	800325a <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	0c9b      	lsrs	r3, r3, #18
 800323c:	3b03      	subs	r3, #3
 800323e:	2201      	movs	r2, #1
 8003240:	409a      	lsls	r2, r3
 8003242:	0013      	movs	r3, r2
 8003244:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 800324c:	e002      	b.n	8003254 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3b01      	subs	r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f9      	bne.n	800324e <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6a3a      	ldr	r2, [r7, #32]
 8003260:	0011      	movs	r1, r2
 8003262:	0018      	movs	r0, r3
 8003264:	f7ff fedf 	bl	8003026 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	0018      	movs	r0, r3
 800326e:	f7ff ff0d 	bl	800308c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003272:	f7fe ffcd 	bl	8002210 <HAL_GetTick>
 8003276:	0003      	movs	r3, r0
 8003278:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800327a:	e01b      	b.n	80032b4 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800327c:	f7fe ffc8 	bl	8002210 <HAL_GetTick>
 8003280:	0002      	movs	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d914      	bls.n	80032b4 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	0018      	movs	r0, r3
 8003290:	f7ff ff0e 	bl	80030b0 <LL_ADC_IsEnabled>
 8003294:	1e03      	subs	r3, r0, #0
 8003296:	d00d      	beq.n	80032b4 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329c:	2210      	movs	r2, #16
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a8:	2201      	movs	r2, #1
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e024      	b.n	80032fe <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	0018      	movs	r0, r3
 80032ba:	f7ff fef9 	bl	80030b0 <LL_ADC_IsEnabled>
 80032be:	1e03      	subs	r3, r0, #0
 80032c0:	d1dc      	bne.n	800327c <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68d9      	ldr	r1, [r3, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d6:	2203      	movs	r2, #3
 80032d8:	4393      	bics	r3, r2
 80032da:	2201      	movs	r2, #1
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	659a      	str	r2, [r3, #88]	@ 0x58
 80032e2:	e005      	b.n	80032f0 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e8:	2210      	movs	r2, #16
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2254      	movs	r2, #84	@ 0x54
 80032f4:	2100      	movs	r1, #0
 80032f6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80032f8:	231f      	movs	r3, #31
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	781b      	ldrb	r3, [r3, #0]
}
 80032fe:	0018      	movs	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	b00b      	add	sp, #44	@ 0x2c
 8003304:	bd90      	pop	{r4, r7, pc}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	fffffefd 	.word	0xfffffefd
 800330c:	00008003 	.word	0x00008003
 8003310:	ffff7ffc 	.word	0xffff7ffc
 8003314:	0002f1ff 	.word	0x0002f1ff
 8003318:	40012708 	.word	0x40012708

0800331c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	0002      	movs	r2, r0
 8003324:	1dfb      	adds	r3, r7, #7
 8003326:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003328:	1dfb      	adds	r3, r7, #7
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b7f      	cmp	r3, #127	@ 0x7f
 800332e:	d809      	bhi.n	8003344 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003330:	1dfb      	adds	r3, r7, #7
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	001a      	movs	r2, r3
 8003336:	231f      	movs	r3, #31
 8003338:	401a      	ands	r2, r3
 800333a:	4b04      	ldr	r3, [pc, #16]	@ (800334c <__NVIC_EnableIRQ+0x30>)
 800333c:	2101      	movs	r1, #1
 800333e:	4091      	lsls	r1, r2
 8003340:	000a      	movs	r2, r1
 8003342:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003344:	46c0      	nop			@ (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b002      	add	sp, #8
 800334a:	bd80      	pop	{r7, pc}
 800334c:	e000e100 	.word	0xe000e100

08003350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	0002      	movs	r2, r0
 8003358:	6039      	str	r1, [r7, #0]
 800335a:	1dfb      	adds	r3, r7, #7
 800335c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800335e:	1dfb      	adds	r3, r7, #7
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b7f      	cmp	r3, #127	@ 0x7f
 8003364:	d828      	bhi.n	80033b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003366:	4a2f      	ldr	r2, [pc, #188]	@ (8003424 <__NVIC_SetPriority+0xd4>)
 8003368:	1dfb      	adds	r3, r7, #7
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	b25b      	sxtb	r3, r3
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	33c0      	adds	r3, #192	@ 0xc0
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	589b      	ldr	r3, [r3, r2]
 8003376:	1dfa      	adds	r2, r7, #7
 8003378:	7812      	ldrb	r2, [r2, #0]
 800337a:	0011      	movs	r1, r2
 800337c:	2203      	movs	r2, #3
 800337e:	400a      	ands	r2, r1
 8003380:	00d2      	lsls	r2, r2, #3
 8003382:	21ff      	movs	r1, #255	@ 0xff
 8003384:	4091      	lsls	r1, r2
 8003386:	000a      	movs	r2, r1
 8003388:	43d2      	mvns	r2, r2
 800338a:	401a      	ands	r2, r3
 800338c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	019b      	lsls	r3, r3, #6
 8003392:	22ff      	movs	r2, #255	@ 0xff
 8003394:	401a      	ands	r2, r3
 8003396:	1dfb      	adds	r3, r7, #7
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	0018      	movs	r0, r3
 800339c:	2303      	movs	r3, #3
 800339e:	4003      	ands	r3, r0
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033a4:	481f      	ldr	r0, [pc, #124]	@ (8003424 <__NVIC_SetPriority+0xd4>)
 80033a6:	1dfb      	adds	r3, r7, #7
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	b25b      	sxtb	r3, r3
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	430a      	orrs	r2, r1
 80033b0:	33c0      	adds	r3, #192	@ 0xc0
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80033b6:	e031      	b.n	800341c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003428 <__NVIC_SetPriority+0xd8>)
 80033ba:	1dfb      	adds	r3, r7, #7
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	0019      	movs	r1, r3
 80033c0:	230f      	movs	r3, #15
 80033c2:	400b      	ands	r3, r1
 80033c4:	3b08      	subs	r3, #8
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	3306      	adds	r3, #6
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	18d3      	adds	r3, r2, r3
 80033ce:	3304      	adds	r3, #4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	1dfa      	adds	r2, r7, #7
 80033d4:	7812      	ldrb	r2, [r2, #0]
 80033d6:	0011      	movs	r1, r2
 80033d8:	2203      	movs	r2, #3
 80033da:	400a      	ands	r2, r1
 80033dc:	00d2      	lsls	r2, r2, #3
 80033de:	21ff      	movs	r1, #255	@ 0xff
 80033e0:	4091      	lsls	r1, r2
 80033e2:	000a      	movs	r2, r1
 80033e4:	43d2      	mvns	r2, r2
 80033e6:	401a      	ands	r2, r3
 80033e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	019b      	lsls	r3, r3, #6
 80033ee:	22ff      	movs	r2, #255	@ 0xff
 80033f0:	401a      	ands	r2, r3
 80033f2:	1dfb      	adds	r3, r7, #7
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	0018      	movs	r0, r3
 80033f8:	2303      	movs	r3, #3
 80033fa:	4003      	ands	r3, r0
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003400:	4809      	ldr	r0, [pc, #36]	@ (8003428 <__NVIC_SetPriority+0xd8>)
 8003402:	1dfb      	adds	r3, r7, #7
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	001c      	movs	r4, r3
 8003408:	230f      	movs	r3, #15
 800340a:	4023      	ands	r3, r4
 800340c:	3b08      	subs	r3, #8
 800340e:	089b      	lsrs	r3, r3, #2
 8003410:	430a      	orrs	r2, r1
 8003412:	3306      	adds	r3, #6
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	18c3      	adds	r3, r0, r3
 8003418:	3304      	adds	r3, #4
 800341a:	601a      	str	r2, [r3, #0]
}
 800341c:	46c0      	nop			@ (mov r8, r8)
 800341e:	46bd      	mov	sp, r7
 8003420:	b003      	add	sp, #12
 8003422:	bd90      	pop	{r4, r7, pc}
 8003424:	e000e100 	.word	0xe000e100
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	1e5a      	subs	r2, r3, #1
 8003438:	2380      	movs	r3, #128	@ 0x80
 800343a:	045b      	lsls	r3, r3, #17
 800343c:	429a      	cmp	r2, r3
 800343e:	d301      	bcc.n	8003444 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003440:	2301      	movs	r3, #1
 8003442:	e010      	b.n	8003466 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003444:	4b0a      	ldr	r3, [pc, #40]	@ (8003470 <SysTick_Config+0x44>)
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	3a01      	subs	r2, #1
 800344a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800344c:	2301      	movs	r3, #1
 800344e:	425b      	negs	r3, r3
 8003450:	2103      	movs	r1, #3
 8003452:	0018      	movs	r0, r3
 8003454:	f7ff ff7c 	bl	8003350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003458:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <SysTick_Config+0x44>)
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800345e:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <SysTick_Config+0x44>)
 8003460:	2207      	movs	r2, #7
 8003462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003464:	2300      	movs	r3, #0
}
 8003466:	0018      	movs	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	b002      	add	sp, #8
 800346c:	bd80      	pop	{r7, pc}
 800346e:	46c0      	nop			@ (mov r8, r8)
 8003470:	e000e010 	.word	0xe000e010

08003474 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	210f      	movs	r1, #15
 8003480:	187b      	adds	r3, r7, r1
 8003482:	1c02      	adds	r2, r0, #0
 8003484:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	187b      	adds	r3, r7, r1
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b25b      	sxtb	r3, r3
 800348e:	0011      	movs	r1, r2
 8003490:	0018      	movs	r0, r3
 8003492:	f7ff ff5d 	bl	8003350 <__NVIC_SetPriority>
}
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	46bd      	mov	sp, r7
 800349a:	b004      	add	sp, #16
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	0002      	movs	r2, r0
 80034a6:	1dfb      	adds	r3, r7, #7
 80034a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034aa:	1dfb      	adds	r3, r7, #7
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	b25b      	sxtb	r3, r3
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7ff ff33 	bl	800331c <__NVIC_EnableIRQ>
}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7ff ffaf 	bl	800342c <SysTick_Config>
 80034ce:	0003      	movs	r3, r0
}
 80034d0:	0018      	movs	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e015      	b.n	8003516 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	791b      	ldrb	r3, [r3, #4]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d106      	bne.n	8003502 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	0018      	movs	r0, r3
 80034fe:	f7fe fca1 	bl	8001e44 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2202      	movs	r2, #2
 8003506:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	0018      	movs	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	b002      	add	sp, #8
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e047      	b.n	80035c2 <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	795b      	ldrb	r3, [r3, #5]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_DAC_Start+0x20>
 800353a:	2302      	movs	r3, #2
 800353c:	e041      	b.n	80035c2 <HAL_DAC_Start+0xa4>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2210      	movs	r2, #16
 8003554:	4013      	ands	r3, r2
 8003556:	2201      	movs	r2, #1
 8003558:	409a      	lsls	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10f      	bne.n	8003588 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	223e      	movs	r2, #62	@ 0x3e
 8003570:	4013      	ands	r3, r2
 8003572:	2b02      	cmp	r3, #2
 8003574:	d11e      	bne.n	80035b4 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2101      	movs	r1, #1
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	e015      	b.n	80035b4 <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	23f8      	movs	r3, #248	@ 0xf8
 8003590:	039b      	lsls	r3, r3, #14
 8003592:	401a      	ands	r2, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2110      	movs	r1, #16
 8003598:	400b      	ands	r3, r1
 800359a:	2102      	movs	r1, #2
 800359c:	4099      	lsls	r1, r3
 800359e:	000b      	movs	r3, r1
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d107      	bne.n	80035b4 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2102      	movs	r1, #2
 80035b0:	430a      	orrs	r2, r1
 80035b2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	0018      	movs	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b002      	add	sp, #8
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b086      	sub	sp, #24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e014      	b.n	8003610 <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d105      	bne.n	80035fe <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	18d3      	adds	r3, r2, r3
 80035f8:	3308      	adds	r3, #8
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	e004      	b.n	8003608 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	18d3      	adds	r3, r2, r3
 8003604:	3314      	adds	r3, #20
 8003606:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	0018      	movs	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	b006      	add	sp, #24
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003624:	231f      	movs	r3, #31
 8003626:	18fb      	adds	r3, r7, r3
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_DAC_ConfigChannel+0x20>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e115      	b.n	8003868 <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	795b      	ldrb	r3, [r3, #5]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_DAC_ConfigChannel+0x30>
 8003644:	2302      	movs	r3, #2
 8003646:	e10f      	b.n	8003868 <HAL_DAC_ConfigChannel+0x250>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2202      	movs	r2, #2
 8003652:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d000      	beq.n	800365e <HAL_DAC_ConfigChannel+0x46>
 800365c:	e07a      	b.n	8003754 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800365e:	f7fe fdd7 	bl	8002210 <HAL_GetTick>
 8003662:	0003      	movs	r3, r0
 8003664:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d13d      	bne.n	80036e8 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800366c:	e018      	b.n	80036a0 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800366e:	f7fe fdcf 	bl	8002210 <HAL_GetTick>
 8003672:	0002      	movs	r2, r0
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d911      	bls.n	80036a0 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003682:	2380      	movs	r3, #128	@ 0x80
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	4013      	ands	r3, r2
 8003688:	d00a      	beq.n	80036a0 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2208      	movs	r2, #8
 8003690:	431a      	orrs	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2203      	movs	r2, #3
 800369a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e0e3      	b.n	8003868 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036a6:	2380      	movs	r3, #128	@ 0x80
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	4013      	ands	r3, r2
 80036ac:	d1df      	bne.n	800366e <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	6992      	ldr	r2, [r2, #24]
 80036b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80036b8:	e020      	b.n	80036fc <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80036ba:	f7fe fda9 	bl	8002210 <HAL_GetTick>
 80036be:	0002      	movs	r2, r0
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d90f      	bls.n	80036e8 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	da0a      	bge.n	80036e8 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2208      	movs	r2, #8
 80036d8:	431a      	orrs	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2203      	movs	r2, #3
 80036e2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e0bf      	b.n	8003868 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	dbe3      	blt.n	80036ba <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	6992      	ldr	r2, [r2, #24]
 80036fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	2110      	movs	r1, #16
 8003706:	400a      	ands	r2, r1
 8003708:	4959      	ldr	r1, [pc, #356]	@ (8003870 <HAL_DAC_ConfigChannel+0x258>)
 800370a:	4091      	lsls	r1, r2
 800370c:	000a      	movs	r2, r1
 800370e:	43d2      	mvns	r2, r2
 8003710:	401a      	ands	r2, r3
 8003712:	0011      	movs	r1, r2
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2010      	movs	r0, #16
 800371c:	4003      	ands	r3, r0
 800371e:	409a      	lsls	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	2110      	movs	r1, #16
 8003732:	400a      	ands	r2, r1
 8003734:	21ff      	movs	r1, #255	@ 0xff
 8003736:	4091      	lsls	r1, r2
 8003738:	000a      	movs	r2, r1
 800373a:	43d2      	mvns	r2, r2
 800373c:	401a      	ands	r2, r3
 800373e:	0011      	movs	r1, r2
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	6a1a      	ldr	r2, [r3, #32]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2010      	movs	r0, #16
 8003748:	4003      	ands	r3, r0
 800374a:	409a      	lsls	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d11d      	bne.n	8003798 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003762:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2210      	movs	r2, #16
 8003768:	4013      	ands	r3, r2
 800376a:	221f      	movs	r2, #31
 800376c:	409a      	lsls	r2, r3
 800376e:	0013      	movs	r3, r2
 8003770:	43da      	mvns	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	4013      	ands	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2210      	movs	r2, #16
 8003782:	4013      	ands	r3, r2
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	409a      	lsls	r2, r3
 8003788:	0013      	movs	r3, r2
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2210      	movs	r2, #16
 80037a4:	4013      	ands	r3, r2
 80037a6:	2207      	movs	r2, #7
 80037a8:	409a      	lsls	r2, r3
 80037aa:	0013      	movs	r3, r2
 80037ac:	43da      	mvns	r2, r3
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	4013      	ands	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	431a      	orrs	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2210      	movs	r2, #16
 80037ca:	4013      	ands	r3, r2
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	409a      	lsls	r2, r3
 80037d0:	0013      	movs	r3, r2
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2110      	movs	r1, #16
 80037ea:	400b      	ands	r3, r1
 80037ec:	2180      	movs	r1, #128	@ 0x80
 80037ee:	01c9      	lsls	r1, r1, #7
 80037f0:	4099      	lsls	r1, r3
 80037f2:	000b      	movs	r3, r1
 80037f4:	43d9      	mvns	r1, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	400a      	ands	r2, r1
 80037fc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2210      	movs	r2, #16
 800380a:	4013      	ands	r3, r2
 800380c:	4a19      	ldr	r2, [pc, #100]	@ (8003874 <HAL_DAC_ConfigChannel+0x25c>)
 800380e:	409a      	lsls	r2, r3
 8003810:	0013      	movs	r3, r2
 8003812:	43da      	mvns	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4013      	ands	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2210      	movs	r2, #16
 8003824:	4013      	ands	r3, r2
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	409a      	lsls	r2, r3
 800382a:	0013      	movs	r3, r2
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2110      	movs	r1, #16
 8003844:	400b      	ands	r3, r1
 8003846:	21c0      	movs	r1, #192	@ 0xc0
 8003848:	4099      	lsls	r1, r3
 800384a:	000b      	movs	r3, r1
 800384c:	43d9      	mvns	r1, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	400a      	ands	r2, r1
 8003854:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2201      	movs	r2, #1
 800385a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003862:	231f      	movs	r3, #31
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	781b      	ldrb	r3, [r3, #0]
}
 8003868:	0018      	movs	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	b008      	add	sp, #32
 800386e:	bd80      	pop	{r7, pc}
 8003870:	000003ff 	.word	0x000003ff
 8003874:	00000ffe 	.word	0x00000ffe

08003878 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e077      	b.n	800397a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a3d      	ldr	r2, [pc, #244]	@ (8003984 <HAL_DMA_Init+0x10c>)
 8003890:	4694      	mov	ip, r2
 8003892:	4463      	add	r3, ip
 8003894:	2114      	movs	r1, #20
 8003896:	0018      	movs	r0, r3
 8003898:	f7fc fc34 	bl	8000104 <__udivsi3>
 800389c:	0003      	movs	r3, r0
 800389e:	009a      	lsls	r2, r3, #2
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2225      	movs	r2, #37	@ 0x25
 80038a8:	2102      	movs	r1, #2
 80038aa:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4934      	ldr	r1, [pc, #208]	@ (8003988 <HAL_DMA_Init+0x110>)
 80038b8:	400a      	ands	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 f9c1 	bl	8003c7c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	2380      	movs	r3, #128	@ 0x80
 8003900:	01db      	lsls	r3, r3, #7
 8003902:	429a      	cmp	r2, r3
 8003904:	d102      	bne.n	800390c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003914:	213f      	movs	r1, #63	@ 0x3f
 8003916:	400a      	ands	r2, r1
 8003918:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003922:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d011      	beq.n	8003950 <HAL_DMA_Init+0xd8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b04      	cmp	r3, #4
 8003932:	d80d      	bhi.n	8003950 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	0018      	movs	r0, r3
 8003938:	f000 f9cc 	bl	8003cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	e008      	b.n	8003962 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2225      	movs	r2, #37	@ 0x25
 800396c:	2101      	movs	r1, #1
 800396e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2224      	movs	r2, #36	@ 0x24
 8003974:	2100      	movs	r1, #0
 8003976:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	0018      	movs	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	b002      	add	sp, #8
 8003980:	bd80      	pop	{r7, pc}
 8003982:	46c0      	nop			@ (mov r8, r8)
 8003984:	bffdfff8 	.word	0xbffdfff8
 8003988:	ffff800f 	.word	0xffff800f

0800398c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800399a:	2317      	movs	r3, #23
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2224      	movs	r2, #36	@ 0x24
 80039a6:	5c9b      	ldrb	r3, [r3, r2]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_DMA_Start_IT+0x24>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e06f      	b.n	8003a90 <HAL_DMA_Start_IT+0x104>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2224      	movs	r2, #36	@ 0x24
 80039b4:	2101      	movs	r1, #1
 80039b6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2225      	movs	r2, #37	@ 0x25
 80039bc:	5c9b      	ldrb	r3, [r3, r2]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d157      	bne.n	8003a74 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2225      	movs	r2, #37	@ 0x25
 80039c8:	2102      	movs	r1, #2
 80039ca:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2101      	movs	r1, #1
 80039de:	438a      	bics	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f907 	bl	8003bfc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	210e      	movs	r1, #14
 8003a02:	430a      	orrs	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e00f      	b.n	8003a28 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2104      	movs	r1, #4
 8003a14:	438a      	bics	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	210a      	movs	r1, #10
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	2380      	movs	r3, #128	@ 0x80
 8003a30:	025b      	lsls	r3, r3, #9
 8003a32:	4013      	ands	r3, r2
 8003a34:	d008      	beq.n	8003a48 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a40:	2180      	movs	r1, #128	@ 0x80
 8003a42:	0049      	lsls	r1, r1, #1
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a5a:	2180      	movs	r1, #128	@ 0x80
 8003a5c:	0049      	lsls	r1, r1, #1
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e00a      	b.n	8003a8a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2280      	movs	r2, #128	@ 0x80
 8003a78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2224      	movs	r2, #36	@ 0x24
 8003a7e:	2100      	movs	r1, #0
 8003a80:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003a82:	2317      	movs	r3, #23
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	2201      	movs	r2, #1
 8003a88:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003a8a:	2317      	movs	r3, #23
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	781b      	ldrb	r3, [r3, #0]
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b006      	add	sp, #24
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003aa0:	4b55      	ldr	r3, [pc, #340]	@ (8003bf8 <HAL_DMA_IRQHandler+0x160>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	221c      	movs	r2, #28
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	0013      	movs	r3, r2
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d027      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x7a>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d023      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d107      	bne.n	8003ae6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2104      	movs	r1, #4
 8003ae2:	438a      	bics	r2, r1
 8003ae4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003ae6:	4b44      	ldr	r3, [pc, #272]	@ (8003bf8 <HAL_DMA_IRQHandler+0x160>)
 8003ae8:	6859      	ldr	r1, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	221c      	movs	r2, #28
 8003af0:	4013      	ands	r3, r2
 8003af2:	2204      	movs	r2, #4
 8003af4:	409a      	lsls	r2, r3
 8003af6:	4b40      	ldr	r3, [pc, #256]	@ (8003bf8 <HAL_DMA_IRQHandler+0x160>)
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d100      	bne.n	8003b06 <HAL_DMA_IRQHandler+0x6e>
 8003b04:	e073      	b.n	8003bee <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	0010      	movs	r0, r2
 8003b0e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003b10:	e06d      	b.n	8003bee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	221c      	movs	r2, #28
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	409a      	lsls	r2, r3
 8003b1e:	0013      	movs	r3, r2
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4013      	ands	r3, r2
 8003b24:	d02e      	beq.n	8003b84 <HAL_DMA_IRQHandler+0xec>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d02a      	beq.n	8003b84 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2220      	movs	r2, #32
 8003b36:	4013      	ands	r3, r2
 8003b38:	d10b      	bne.n	8003b52 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	210a      	movs	r1, #10
 8003b46:	438a      	bics	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2225      	movs	r2, #37	@ 0x25
 8003b4e:	2101      	movs	r1, #1
 8003b50:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003b52:	4b29      	ldr	r3, [pc, #164]	@ (8003bf8 <HAL_DMA_IRQHandler+0x160>)
 8003b54:	6859      	ldr	r1, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	221c      	movs	r2, #28
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2202      	movs	r2, #2
 8003b60:	409a      	lsls	r2, r3
 8003b62:	4b25      	ldr	r3, [pc, #148]	@ (8003bf8 <HAL_DMA_IRQHandler+0x160>)
 8003b64:	430a      	orrs	r2, r1
 8003b66:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2224      	movs	r2, #36	@ 0x24
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d03a      	beq.n	8003bee <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	0010      	movs	r0, r2
 8003b80:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003b82:	e034      	b.n	8003bee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b88:	221c      	movs	r2, #28
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	0013      	movs	r3, r2
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4013      	ands	r3, r2
 8003b96:	d02b      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x158>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d027      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	210e      	movs	r1, #14
 8003bac:	438a      	bics	r2, r1
 8003bae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003bb0:	4b11      	ldr	r3, [pc, #68]	@ (8003bf8 <HAL_DMA_IRQHandler+0x160>)
 8003bb2:	6859      	ldr	r1, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	221c      	movs	r2, #28
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf8 <HAL_DMA_IRQHandler+0x160>)
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2225      	movs	r2, #37	@ 0x25
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	@ 0x24
 8003bd8:	2100      	movs	r1, #0
 8003bda:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	0010      	movs	r0, r2
 8003bec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003bee:	46c0      	nop			@ (mov r8, r8)
 8003bf0:	46c0      	nop			@ (mov r8, r8)
}
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b004      	add	sp, #16
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40020000 	.word	0x40020000

08003bfc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003c12:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d004      	beq.n	8003c26 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003c24:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003c26:	4b14      	ldr	r3, [pc, #80]	@ (8003c78 <DMA_SetConfig+0x7c>)
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	221c      	movs	r2, #28
 8003c30:	4013      	ands	r3, r2
 8003c32:	2201      	movs	r2, #1
 8003c34:	409a      	lsls	r2, r3
 8003c36:	4b10      	ldr	r3, [pc, #64]	@ (8003c78 <DMA_SetConfig+0x7c>)
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b10      	cmp	r3, #16
 8003c4a:	d108      	bne.n	8003c5e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c5c:	e007      	b.n	8003c6e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	60da      	str	r2, [r3, #12]
}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b004      	add	sp, #16
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			@ (mov r8, r8)
 8003c78:	40020000 	.word	0x40020000

08003c7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	089b      	lsrs	r3, r3, #2
 8003c8a:	4a10      	ldr	r2, [pc, #64]	@ (8003ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003c8c:	4694      	mov	ip, r2
 8003c8e:	4463      	add	r3, ip
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	001a      	movs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	001a      	movs	r2, r3
 8003c9e:	23ff      	movs	r3, #255	@ 0xff
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	3b08      	subs	r3, #8
 8003ca4:	2114      	movs	r1, #20
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f7fc fa2c 	bl	8000104 <__udivsi3>
 8003cac:	0003      	movs	r3, r0
 8003cae:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a07      	ldr	r2, [pc, #28]	@ (8003cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003cb4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	221f      	movs	r2, #31
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003cc4:	46c0      	nop			@ (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b004      	add	sp, #16
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	10008200 	.word	0x10008200
 8003cd0:	40020880 	.word	0x40020880

08003cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	223f      	movs	r2, #63	@ 0x3f
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8003d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003cea:	4694      	mov	ip, r2
 8003cec:	4463      	add	r3, ip
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a07      	ldr	r2, [pc, #28]	@ (8003d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003cfa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	2203      	movs	r2, #3
 8003d02:	4013      	ands	r3, r2
 8003d04:	2201      	movs	r2, #1
 8003d06:	409a      	lsls	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003d0c:	46c0      	nop			@ (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b004      	add	sp, #16
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	1000823f 	.word	0x1000823f
 8003d18:	40020940 	.word	0x40020940

08003d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d2a:	e147      	b.n	8003fbc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2101      	movs	r1, #1
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4091      	lsls	r1, r2
 8003d36:	000a      	movs	r2, r1
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d100      	bne.n	8003d44 <HAL_GPIO_Init+0x28>
 8003d42:	e138      	b.n	8003fb6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2203      	movs	r2, #3
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d005      	beq.n	8003d5c <HAL_GPIO_Init+0x40>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2203      	movs	r2, #3
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d130      	bne.n	8003dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	2203      	movs	r2, #3
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	0013      	movs	r3, r2
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4013      	ands	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	0013      	movs	r3, r2
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d92:	2201      	movs	r2, #1
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	409a      	lsls	r2, r3
 8003d98:	0013      	movs	r3, r2
 8003d9a:	43da      	mvns	r2, r3
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	2201      	movs	r2, #1
 8003daa:	401a      	ands	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	409a      	lsls	r2, r3
 8003db0:	0013      	movs	r3, r2
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d017      	beq.n	8003dfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	0013      	movs	r3, r2
 8003dda:	43da      	mvns	r2, r3
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4013      	ands	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	409a      	lsls	r2, r3
 8003dec:	0013      	movs	r3, r2
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2203      	movs	r2, #3
 8003e00:	4013      	ands	r3, r2
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d123      	bne.n	8003e4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	08da      	lsrs	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3208      	adds	r2, #8
 8003e0e:	0092      	lsls	r2, r2, #2
 8003e10:	58d3      	ldr	r3, [r2, r3]
 8003e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2207      	movs	r2, #7
 8003e18:	4013      	ands	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	220f      	movs	r2, #15
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	0013      	movs	r3, r2
 8003e22:	43da      	mvns	r2, r3
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2107      	movs	r1, #7
 8003e32:	400b      	ands	r3, r1
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	409a      	lsls	r2, r3
 8003e38:	0013      	movs	r3, r2
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	08da      	lsrs	r2, r3, #3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3208      	adds	r2, #8
 8003e48:	0092      	lsls	r2, r2, #2
 8003e4a:	6939      	ldr	r1, [r7, #16]
 8003e4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	2203      	movs	r2, #3
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	0013      	movs	r3, r2
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4013      	ands	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	401a      	ands	r2, r3
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	409a      	lsls	r2, r3
 8003e74:	0013      	movs	r3, r2
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	23c0      	movs	r3, #192	@ 0xc0
 8003e88:	029b      	lsls	r3, r3, #10
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d100      	bne.n	8003e90 <HAL_GPIO_Init+0x174>
 8003e8e:	e092      	b.n	8003fb6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003e90:	4a50      	ldr	r2, [pc, #320]	@ (8003fd4 <HAL_GPIO_Init+0x2b8>)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	3318      	adds	r3, #24
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	589b      	ldr	r3, [r3, r2]
 8003e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	220f      	movs	r2, #15
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	0013      	movs	r3, r2
 8003eac:	43da      	mvns	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	23a0      	movs	r3, #160	@ 0xa0
 8003eb8:	05db      	lsls	r3, r3, #23
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d013      	beq.n	8003ee6 <HAL_GPIO_Init+0x1ca>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a45      	ldr	r2, [pc, #276]	@ (8003fd8 <HAL_GPIO_Init+0x2bc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00d      	beq.n	8003ee2 <HAL_GPIO_Init+0x1c6>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a44      	ldr	r2, [pc, #272]	@ (8003fdc <HAL_GPIO_Init+0x2c0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d007      	beq.n	8003ede <HAL_GPIO_Init+0x1c2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a43      	ldr	r2, [pc, #268]	@ (8003fe0 <HAL_GPIO_Init+0x2c4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <HAL_GPIO_Init+0x1be>
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e006      	b.n	8003ee8 <HAL_GPIO_Init+0x1cc>
 8003eda:	2305      	movs	r3, #5
 8003edc:	e004      	b.n	8003ee8 <HAL_GPIO_Init+0x1cc>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e002      	b.n	8003ee8 <HAL_GPIO_Init+0x1cc>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <HAL_GPIO_Init+0x1cc>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	2103      	movs	r1, #3
 8003eec:	400a      	ands	r2, r1
 8003eee:	00d2      	lsls	r2, r2, #3
 8003ef0:	4093      	lsls	r3, r2
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003ef8:	4936      	ldr	r1, [pc, #216]	@ (8003fd4 <HAL_GPIO_Init+0x2b8>)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	089b      	lsrs	r3, r3, #2
 8003efe:	3318      	adds	r3, #24
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f06:	4b33      	ldr	r3, [pc, #204]	@ (8003fd4 <HAL_GPIO_Init+0x2b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	2380      	movs	r3, #128	@ 0x80
 8003f1c:	035b      	lsls	r3, r3, #13
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd4 <HAL_GPIO_Init+0x2b8>)
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003f30:	4b28      	ldr	r3, [pc, #160]	@ (8003fd4 <HAL_GPIO_Init+0x2b8>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	43da      	mvns	r2, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	2380      	movs	r3, #128	@ 0x80
 8003f46:	039b      	lsls	r3, r3, #14
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f54:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd4 <HAL_GPIO_Init+0x2b8>)
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd4 <HAL_GPIO_Init+0x2b8>)
 8003f5c:	2384      	movs	r3, #132	@ 0x84
 8003f5e:	58d3      	ldr	r3, [r2, r3]
 8003f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	43da      	mvns	r2, r3
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	029b      	lsls	r3, r3, #10
 8003f74:	4013      	ands	r3, r2
 8003f76:	d003      	beq.n	8003f80 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f80:	4914      	ldr	r1, [pc, #80]	@ (8003fd4 <HAL_GPIO_Init+0x2b8>)
 8003f82:	2284      	movs	r2, #132	@ 0x84
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003f88:	4a12      	ldr	r2, [pc, #72]	@ (8003fd4 <HAL_GPIO_Init+0x2b8>)
 8003f8a:	2380      	movs	r3, #128	@ 0x80
 8003f8c:	58d3      	ldr	r3, [r2, r3]
 8003f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	43da      	mvns	r2, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4013      	ands	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	2380      	movs	r3, #128	@ 0x80
 8003fa0:	025b      	lsls	r3, r3, #9
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d003      	beq.n	8003fae <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fae:	4909      	ldr	r1, [pc, #36]	@ (8003fd4 <HAL_GPIO_Init+0x2b8>)
 8003fb0:	2280      	movs	r2, #128	@ 0x80
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	40da      	lsrs	r2, r3
 8003fc4:	1e13      	subs	r3, r2, #0
 8003fc6:	d000      	beq.n	8003fca <HAL_GPIO_Init+0x2ae>
 8003fc8:	e6b0      	b.n	8003d2c <HAL_GPIO_Init+0x10>
  }
}
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	46c0      	nop			@ (mov r8, r8)
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b006      	add	sp, #24
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40021800 	.word	0x40021800
 8003fd8:	50000400 	.word	0x50000400
 8003fdc:	50000800 	.word	0x50000800
 8003fe0:	50000c00 	.word	0x50000c00

08003fe4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003fec:	4b19      	ldr	r3, [pc, #100]	@ (8004054 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a19      	ldr	r2, [pc, #100]	@ (8004058 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	0019      	movs	r1, r3
 8003ff6:	4b17      	ldr	r3, [pc, #92]	@ (8004054 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	2380      	movs	r3, #128	@ 0x80
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	429a      	cmp	r2, r3
 8004006:	d11f      	bne.n	8004048 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004008:	4b14      	ldr	r3, [pc, #80]	@ (800405c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	0013      	movs	r3, r2
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	189b      	adds	r3, r3, r2
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	4912      	ldr	r1, [pc, #72]	@ (8004060 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004016:	0018      	movs	r0, r3
 8004018:	f7fc f874 	bl	8000104 <__udivsi3>
 800401c:	0003      	movs	r3, r0
 800401e:	3301      	adds	r3, #1
 8004020:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004022:	e008      	b.n	8004036 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3b01      	subs	r3, #1
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	e001      	b.n	8004036 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e009      	b.n	800404a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004036:	4b07      	ldr	r3, [pc, #28]	@ (8004054 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	2380      	movs	r3, #128	@ 0x80
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	401a      	ands	r2, r3
 8004040:	2380      	movs	r3, #128	@ 0x80
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	429a      	cmp	r2, r3
 8004046:	d0ed      	beq.n	8004024 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	0018      	movs	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	b004      	add	sp, #16
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	40007000 	.word	0x40007000
 8004058:	fffff9ff 	.word	0xfffff9ff
 800405c:	20000000 	.word	0x20000000
 8004060:	000f4240 	.word	0x000f4240

08004064 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004068:	4b03      	ldr	r3, [pc, #12]	@ (8004078 <LL_RCC_GetAPB1Prescaler+0x14>)
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	23e0      	movs	r3, #224	@ 0xe0
 800406e:	01db      	lsls	r3, r3, #7
 8004070:	4013      	ands	r3, r2
}
 8004072:	0018      	movs	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40021000 	.word	0x40021000

0800407c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e2fe      	b.n	800468c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2201      	movs	r2, #1
 8004094:	4013      	ands	r3, r2
 8004096:	d100      	bne.n	800409a <HAL_RCC_OscConfig+0x1e>
 8004098:	e07c      	b.n	8004194 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800409a:	4bc3      	ldr	r3, [pc, #780]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2238      	movs	r2, #56	@ 0x38
 80040a0:	4013      	ands	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040a4:	4bc0      	ldr	r3, [pc, #768]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2203      	movs	r2, #3
 80040aa:	4013      	ands	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d102      	bne.n	80040ba <HAL_RCC_OscConfig+0x3e>
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d002      	beq.n	80040c0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d10b      	bne.n	80040d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c0:	4bb9      	ldr	r3, [pc, #740]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	2380      	movs	r3, #128	@ 0x80
 80040c6:	029b      	lsls	r3, r3, #10
 80040c8:	4013      	ands	r3, r2
 80040ca:	d062      	beq.n	8004192 <HAL_RCC_OscConfig+0x116>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d15e      	bne.n	8004192 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e2d9      	b.n	800468c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	2380      	movs	r3, #128	@ 0x80
 80040de:	025b      	lsls	r3, r3, #9
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d107      	bne.n	80040f4 <HAL_RCC_OscConfig+0x78>
 80040e4:	4bb0      	ldr	r3, [pc, #704]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4baf      	ldr	r3, [pc, #700]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80040ea:	2180      	movs	r1, #128	@ 0x80
 80040ec:	0249      	lsls	r1, r1, #9
 80040ee:	430a      	orrs	r2, r1
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	e020      	b.n	8004136 <HAL_RCC_OscConfig+0xba>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	23a0      	movs	r3, #160	@ 0xa0
 80040fa:	02db      	lsls	r3, r3, #11
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d10e      	bne.n	800411e <HAL_RCC_OscConfig+0xa2>
 8004100:	4ba9      	ldr	r3, [pc, #676]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4ba8      	ldr	r3, [pc, #672]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004106:	2180      	movs	r1, #128	@ 0x80
 8004108:	02c9      	lsls	r1, r1, #11
 800410a:	430a      	orrs	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	4ba6      	ldr	r3, [pc, #664]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	4ba5      	ldr	r3, [pc, #660]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004114:	2180      	movs	r1, #128	@ 0x80
 8004116:	0249      	lsls	r1, r1, #9
 8004118:	430a      	orrs	r2, r1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e00b      	b.n	8004136 <HAL_RCC_OscConfig+0xba>
 800411e:	4ba2      	ldr	r3, [pc, #648]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	4ba1      	ldr	r3, [pc, #644]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004124:	49a1      	ldr	r1, [pc, #644]	@ (80043ac <HAL_RCC_OscConfig+0x330>)
 8004126:	400a      	ands	r2, r1
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	4b9f      	ldr	r3, [pc, #636]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4b9e      	ldr	r3, [pc, #632]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004130:	499f      	ldr	r1, [pc, #636]	@ (80043b0 <HAL_RCC_OscConfig+0x334>)
 8004132:	400a      	ands	r2, r1
 8004134:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d014      	beq.n	8004168 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fe f867 	bl	8002210 <HAL_GetTick>
 8004142:	0003      	movs	r3, r0
 8004144:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004148:	f7fe f862 	bl	8002210 <HAL_GetTick>
 800414c:	0002      	movs	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	@ 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e298      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800415a:	4b93      	ldr	r3, [pc, #588]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	2380      	movs	r3, #128	@ 0x80
 8004160:	029b      	lsls	r3, r3, #10
 8004162:	4013      	ands	r3, r2
 8004164:	d0f0      	beq.n	8004148 <HAL_RCC_OscConfig+0xcc>
 8004166:	e015      	b.n	8004194 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fe f852 	bl	8002210 <HAL_GetTick>
 800416c:	0003      	movs	r3, r0
 800416e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004172:	f7fe f84d 	bl	8002210 <HAL_GetTick>
 8004176:	0002      	movs	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b64      	cmp	r3, #100	@ 0x64
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e283      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004184:	4b88      	ldr	r3, [pc, #544]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	2380      	movs	r3, #128	@ 0x80
 800418a:	029b      	lsls	r3, r3, #10
 800418c:	4013      	ands	r3, r2
 800418e:	d1f0      	bne.n	8004172 <HAL_RCC_OscConfig+0xf6>
 8004190:	e000      	b.n	8004194 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004192:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2202      	movs	r2, #2
 800419a:	4013      	ands	r3, r2
 800419c:	d100      	bne.n	80041a0 <HAL_RCC_OscConfig+0x124>
 800419e:	e099      	b.n	80042d4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041a0:	4b81      	ldr	r3, [pc, #516]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	2238      	movs	r2, #56	@ 0x38
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041aa:	4b7f      	ldr	r3, [pc, #508]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	2203      	movs	r2, #3
 80041b0:	4013      	ands	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2b10      	cmp	r3, #16
 80041b8:	d102      	bne.n	80041c0 <HAL_RCC_OscConfig+0x144>
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d002      	beq.n	80041c6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d135      	bne.n	8004232 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041c6:	4b78      	ldr	r3, [pc, #480]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	4013      	ands	r3, r2
 80041d0:	d005      	beq.n	80041de <HAL_RCC_OscConfig+0x162>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e256      	b.n	800468c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041de:	4b72      	ldr	r3, [pc, #456]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	4a74      	ldr	r2, [pc, #464]	@ (80043b4 <HAL_RCC_OscConfig+0x338>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	0019      	movs	r1, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	021a      	lsls	r2, r3, #8
 80041ee:	4b6e      	ldr	r3, [pc, #440]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80041f0:	430a      	orrs	r2, r1
 80041f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d112      	bne.n	8004220 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80041fa:	4b6b      	ldr	r3, [pc, #428]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a6e      	ldr	r2, [pc, #440]	@ (80043b8 <HAL_RCC_OscConfig+0x33c>)
 8004200:	4013      	ands	r3, r2
 8004202:	0019      	movs	r1, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	4b67      	ldr	r3, [pc, #412]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800420a:	430a      	orrs	r2, r1
 800420c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800420e:	4b66      	ldr	r3, [pc, #408]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	0adb      	lsrs	r3, r3, #11
 8004214:	2207      	movs	r2, #7
 8004216:	4013      	ands	r3, r2
 8004218:	4a68      	ldr	r2, [pc, #416]	@ (80043bc <HAL_RCC_OscConfig+0x340>)
 800421a:	40da      	lsrs	r2, r3
 800421c:	4b68      	ldr	r3, [pc, #416]	@ (80043c0 <HAL_RCC_OscConfig+0x344>)
 800421e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004220:	4b68      	ldr	r3, [pc, #416]	@ (80043c4 <HAL_RCC_OscConfig+0x348>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	0018      	movs	r0, r3
 8004226:	f7fd ff97 	bl	8002158 <HAL_InitTick>
 800422a:	1e03      	subs	r3, r0, #0
 800422c:	d051      	beq.n	80042d2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e22c      	b.n	800468c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d030      	beq.n	800429c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800423a:	4b5b      	ldr	r3, [pc, #364]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a5e      	ldr	r2, [pc, #376]	@ (80043b8 <HAL_RCC_OscConfig+0x33c>)
 8004240:	4013      	ands	r3, r2
 8004242:	0019      	movs	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	4b57      	ldr	r3, [pc, #348]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800424a:	430a      	orrs	r2, r1
 800424c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800424e:	4b56      	ldr	r3, [pc, #344]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b55      	ldr	r3, [pc, #340]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004254:	2180      	movs	r1, #128	@ 0x80
 8004256:	0049      	lsls	r1, r1, #1
 8004258:	430a      	orrs	r2, r1
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fd ffd8 	bl	8002210 <HAL_GetTick>
 8004260:	0003      	movs	r3, r0
 8004262:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004266:	f7fd ffd3 	bl	8002210 <HAL_GetTick>
 800426a:	0002      	movs	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e209      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004278:	4b4b      	ldr	r3, [pc, #300]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	2380      	movs	r3, #128	@ 0x80
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4013      	ands	r3, r2
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004284:	4b48      	ldr	r3, [pc, #288]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4a4a      	ldr	r2, [pc, #296]	@ (80043b4 <HAL_RCC_OscConfig+0x338>)
 800428a:	4013      	ands	r3, r2
 800428c:	0019      	movs	r1, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	021a      	lsls	r2, r3, #8
 8004294:	4b44      	ldr	r3, [pc, #272]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	e01b      	b.n	80042d4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800429c:	4b42      	ldr	r3, [pc, #264]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b41      	ldr	r3, [pc, #260]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80042a2:	4949      	ldr	r1, [pc, #292]	@ (80043c8 <HAL_RCC_OscConfig+0x34c>)
 80042a4:	400a      	ands	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fd ffb2 	bl	8002210 <HAL_GetTick>
 80042ac:	0003      	movs	r3, r0
 80042ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b2:	f7fd ffad 	bl	8002210 <HAL_GetTick>
 80042b6:	0002      	movs	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e1e3      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042c4:	4b38      	ldr	r3, [pc, #224]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	2380      	movs	r3, #128	@ 0x80
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4013      	ands	r3, r2
 80042ce:	d1f0      	bne.n	80042b2 <HAL_RCC_OscConfig+0x236>
 80042d0:	e000      	b.n	80042d4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042d2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2208      	movs	r2, #8
 80042da:	4013      	ands	r3, r2
 80042dc:	d047      	beq.n	800436e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80042de:	4b32      	ldr	r3, [pc, #200]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2238      	movs	r2, #56	@ 0x38
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b18      	cmp	r3, #24
 80042e8:	d10a      	bne.n	8004300 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80042ea:	4b2f      	ldr	r3, [pc, #188]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80042ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ee:	2202      	movs	r2, #2
 80042f0:	4013      	ands	r3, r2
 80042f2:	d03c      	beq.n	800436e <HAL_RCC_OscConfig+0x2f2>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d138      	bne.n	800436e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e1c5      	b.n	800468c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d019      	beq.n	800433c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004308:	4b27      	ldr	r3, [pc, #156]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800430a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800430c:	4b26      	ldr	r3, [pc, #152]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800430e:	2101      	movs	r1, #1
 8004310:	430a      	orrs	r2, r1
 8004312:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fd ff7c 	bl	8002210 <HAL_GetTick>
 8004318:	0003      	movs	r3, r0
 800431a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800431e:	f7fd ff77 	bl	8002210 <HAL_GetTick>
 8004322:	0002      	movs	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e1ad      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004330:	4b1d      	ldr	r3, [pc, #116]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004334:	2202      	movs	r2, #2
 8004336:	4013      	ands	r3, r2
 8004338:	d0f1      	beq.n	800431e <HAL_RCC_OscConfig+0x2a2>
 800433a:	e018      	b.n	800436e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800433c:	4b1a      	ldr	r3, [pc, #104]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800433e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004340:	4b19      	ldr	r3, [pc, #100]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004342:	2101      	movs	r1, #1
 8004344:	438a      	bics	r2, r1
 8004346:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fd ff62 	bl	8002210 <HAL_GetTick>
 800434c:	0003      	movs	r3, r0
 800434e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004352:	f7fd ff5d 	bl	8002210 <HAL_GetTick>
 8004356:	0002      	movs	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e193      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004364:	4b10      	ldr	r3, [pc, #64]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004368:	2202      	movs	r2, #2
 800436a:	4013      	ands	r3, r2
 800436c:	d1f1      	bne.n	8004352 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2204      	movs	r2, #4
 8004374:	4013      	ands	r3, r2
 8004376:	d100      	bne.n	800437a <HAL_RCC_OscConfig+0x2fe>
 8004378:	e0c6      	b.n	8004508 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800437a:	231f      	movs	r3, #31
 800437c:	18fb      	adds	r3, r7, r3
 800437e:	2200      	movs	r2, #0
 8004380:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004382:	4b09      	ldr	r3, [pc, #36]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2238      	movs	r2, #56	@ 0x38
 8004388:	4013      	ands	r3, r2
 800438a:	2b20      	cmp	r3, #32
 800438c:	d11e      	bne.n	80043cc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800438e:	4b06      	ldr	r3, [pc, #24]	@ (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004392:	2202      	movs	r2, #2
 8004394:	4013      	ands	r3, r2
 8004396:	d100      	bne.n	800439a <HAL_RCC_OscConfig+0x31e>
 8004398:	e0b6      	b.n	8004508 <HAL_RCC_OscConfig+0x48c>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d000      	beq.n	80043a4 <HAL_RCC_OscConfig+0x328>
 80043a2:	e0b1      	b.n	8004508 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e171      	b.n	800468c <HAL_RCC_OscConfig+0x610>
 80043a8:	40021000 	.word	0x40021000
 80043ac:	fffeffff 	.word	0xfffeffff
 80043b0:	fffbffff 	.word	0xfffbffff
 80043b4:	ffff80ff 	.word	0xffff80ff
 80043b8:	ffffc7ff 	.word	0xffffc7ff
 80043bc:	00f42400 	.word	0x00f42400
 80043c0:	20000000 	.word	0x20000000
 80043c4:	20000004 	.word	0x20000004
 80043c8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043cc:	4bb1      	ldr	r3, [pc, #708]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 80043ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043d0:	2380      	movs	r3, #128	@ 0x80
 80043d2:	055b      	lsls	r3, r3, #21
 80043d4:	4013      	ands	r3, r2
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_OscConfig+0x360>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <HAL_RCC_OscConfig+0x362>
 80043dc:	2300      	movs	r3, #0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d011      	beq.n	8004406 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80043e2:	4bac      	ldr	r3, [pc, #688]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 80043e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043e6:	4bab      	ldr	r3, [pc, #684]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 80043e8:	2180      	movs	r1, #128	@ 0x80
 80043ea:	0549      	lsls	r1, r1, #21
 80043ec:	430a      	orrs	r2, r1
 80043ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80043f0:	4ba8      	ldr	r3, [pc, #672]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 80043f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043f4:	2380      	movs	r3, #128	@ 0x80
 80043f6:	055b      	lsls	r3, r3, #21
 80043f8:	4013      	ands	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80043fe:	231f      	movs	r3, #31
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004406:	4ba4      	ldr	r3, [pc, #656]	@ (8004698 <HAL_RCC_OscConfig+0x61c>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	2380      	movs	r3, #128	@ 0x80
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	4013      	ands	r3, r2
 8004410:	d11a      	bne.n	8004448 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004412:	4ba1      	ldr	r3, [pc, #644]	@ (8004698 <HAL_RCC_OscConfig+0x61c>)
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4ba0      	ldr	r3, [pc, #640]	@ (8004698 <HAL_RCC_OscConfig+0x61c>)
 8004418:	2180      	movs	r1, #128	@ 0x80
 800441a:	0049      	lsls	r1, r1, #1
 800441c:	430a      	orrs	r2, r1
 800441e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004420:	f7fd fef6 	bl	8002210 <HAL_GetTick>
 8004424:	0003      	movs	r3, r0
 8004426:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442a:	f7fd fef1 	bl	8002210 <HAL_GetTick>
 800442e:	0002      	movs	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e127      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800443c:	4b96      	ldr	r3, [pc, #600]	@ (8004698 <HAL_RCC_OscConfig+0x61c>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	2380      	movs	r3, #128	@ 0x80
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	4013      	ands	r3, r2
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d106      	bne.n	800445e <HAL_RCC_OscConfig+0x3e2>
 8004450:	4b90      	ldr	r3, [pc, #576]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004452:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004454:	4b8f      	ldr	r3, [pc, #572]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004456:	2101      	movs	r1, #1
 8004458:	430a      	orrs	r2, r1
 800445a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800445c:	e01c      	b.n	8004498 <HAL_RCC_OscConfig+0x41c>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b05      	cmp	r3, #5
 8004464:	d10c      	bne.n	8004480 <HAL_RCC_OscConfig+0x404>
 8004466:	4b8b      	ldr	r3, [pc, #556]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004468:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800446a:	4b8a      	ldr	r3, [pc, #552]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 800446c:	2104      	movs	r1, #4
 800446e:	430a      	orrs	r2, r1
 8004470:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004472:	4b88      	ldr	r3, [pc, #544]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004474:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004476:	4b87      	ldr	r3, [pc, #540]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004478:	2101      	movs	r1, #1
 800447a:	430a      	orrs	r2, r1
 800447c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800447e:	e00b      	b.n	8004498 <HAL_RCC_OscConfig+0x41c>
 8004480:	4b84      	ldr	r3, [pc, #528]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004482:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004484:	4b83      	ldr	r3, [pc, #524]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004486:	2101      	movs	r1, #1
 8004488:	438a      	bics	r2, r1
 800448a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800448c:	4b81      	ldr	r3, [pc, #516]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 800448e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004490:	4b80      	ldr	r3, [pc, #512]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004492:	2104      	movs	r1, #4
 8004494:	438a      	bics	r2, r1
 8004496:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d014      	beq.n	80044ca <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fd feb6 	bl	8002210 <HAL_GetTick>
 80044a4:	0003      	movs	r3, r0
 80044a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044a8:	e009      	b.n	80044be <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044aa:	f7fd feb1 	bl	8002210 <HAL_GetTick>
 80044ae:	0002      	movs	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	4a79      	ldr	r2, [pc, #484]	@ (800469c <HAL_RCC_OscConfig+0x620>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e0e6      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044be:	4b75      	ldr	r3, [pc, #468]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 80044c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c2:	2202      	movs	r2, #2
 80044c4:	4013      	ands	r3, r2
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x42e>
 80044c8:	e013      	b.n	80044f2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ca:	f7fd fea1 	bl	8002210 <HAL_GetTick>
 80044ce:	0003      	movs	r3, r0
 80044d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044d2:	e009      	b.n	80044e8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7fd fe9c 	bl	8002210 <HAL_GetTick>
 80044d8:	0002      	movs	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	4a6f      	ldr	r2, [pc, #444]	@ (800469c <HAL_RCC_OscConfig+0x620>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e0d1      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 80044ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ec:	2202      	movs	r2, #2
 80044ee:	4013      	ands	r3, r2
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80044f2:	231f      	movs	r3, #31
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d105      	bne.n	8004508 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80044fc:	4b65      	ldr	r3, [pc, #404]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 80044fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004500:	4b64      	ldr	r3, [pc, #400]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004502:	4967      	ldr	r1, [pc, #412]	@ (80046a0 <HAL_RCC_OscConfig+0x624>)
 8004504:	400a      	ands	r2, r1
 8004506:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d100      	bne.n	8004512 <HAL_RCC_OscConfig+0x496>
 8004510:	e0bb      	b.n	800468a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004512:	4b60      	ldr	r3, [pc, #384]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2238      	movs	r2, #56	@ 0x38
 8004518:	4013      	ands	r3, r2
 800451a:	2b10      	cmp	r3, #16
 800451c:	d100      	bne.n	8004520 <HAL_RCC_OscConfig+0x4a4>
 800451e:	e07b      	b.n	8004618 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	2b02      	cmp	r3, #2
 8004526:	d156      	bne.n	80045d6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004528:	4b5a      	ldr	r3, [pc, #360]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4b59      	ldr	r3, [pc, #356]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 800452e:	495d      	ldr	r1, [pc, #372]	@ (80046a4 <HAL_RCC_OscConfig+0x628>)
 8004530:	400a      	ands	r2, r1
 8004532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fd fe6c 	bl	8002210 <HAL_GetTick>
 8004538:	0003      	movs	r3, r0
 800453a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453e:	f7fd fe67 	bl	8002210 <HAL_GetTick>
 8004542:	0002      	movs	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e09d      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004550:	4b50      	ldr	r3, [pc, #320]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	2380      	movs	r3, #128	@ 0x80
 8004556:	049b      	lsls	r3, r3, #18
 8004558:	4013      	ands	r3, r2
 800455a:	d1f0      	bne.n	800453e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800455c:	4b4d      	ldr	r3, [pc, #308]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4a51      	ldr	r2, [pc, #324]	@ (80046a8 <HAL_RCC_OscConfig+0x62c>)
 8004562:	4013      	ands	r3, r2
 8004564:	0019      	movs	r1, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1a      	ldr	r2, [r3, #32]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004574:	021b      	lsls	r3, r3, #8
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004588:	431a      	orrs	r2, r3
 800458a:	4b42      	ldr	r3, [pc, #264]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 800458c:	430a      	orrs	r2, r1
 800458e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004590:	4b40      	ldr	r3, [pc, #256]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	4b3f      	ldr	r3, [pc, #252]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004596:	2180      	movs	r1, #128	@ 0x80
 8004598:	0449      	lsls	r1, r1, #17
 800459a:	430a      	orrs	r2, r1
 800459c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800459e:	4b3d      	ldr	r3, [pc, #244]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	4b3c      	ldr	r3, [pc, #240]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 80045a4:	2180      	movs	r1, #128	@ 0x80
 80045a6:	0549      	lsls	r1, r1, #21
 80045a8:	430a      	orrs	r2, r1
 80045aa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fd fe30 	bl	8002210 <HAL_GetTick>
 80045b0:	0003      	movs	r3, r0
 80045b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b6:	f7fd fe2b 	bl	8002210 <HAL_GetTick>
 80045ba:	0002      	movs	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e061      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c8:	4b32      	ldr	r3, [pc, #200]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	2380      	movs	r3, #128	@ 0x80
 80045ce:	049b      	lsls	r3, r3, #18
 80045d0:	4013      	ands	r3, r2
 80045d2:	d0f0      	beq.n	80045b6 <HAL_RCC_OscConfig+0x53a>
 80045d4:	e059      	b.n	800468a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b2e      	ldr	r3, [pc, #184]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 80045dc:	4931      	ldr	r1, [pc, #196]	@ (80046a4 <HAL_RCC_OscConfig+0x628>)
 80045de:	400a      	ands	r2, r1
 80045e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e2:	f7fd fe15 	bl	8002210 <HAL_GetTick>
 80045e6:	0003      	movs	r3, r0
 80045e8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd fe10 	bl	8002210 <HAL_GetTick>
 80045f0:	0002      	movs	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e046      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045fe:	4b25      	ldr	r3, [pc, #148]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	2380      	movs	r3, #128	@ 0x80
 8004604:	049b      	lsls	r3, r3, #18
 8004606:	4013      	ands	r3, r2
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800460a:	4b22      	ldr	r3, [pc, #136]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	4b21      	ldr	r3, [pc, #132]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004610:	4926      	ldr	r1, [pc, #152]	@ (80046ac <HAL_RCC_OscConfig+0x630>)
 8004612:	400a      	ands	r2, r1
 8004614:	60da      	str	r2, [r3, #12]
 8004616:	e038      	b.n	800468a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e033      	b.n	800468c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004624:	4b1b      	ldr	r3, [pc, #108]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2203      	movs	r2, #3
 800462e:	401a      	ands	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	429a      	cmp	r2, r3
 8004636:	d126      	bne.n	8004686 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2270      	movs	r2, #112	@ 0x70
 800463c:	401a      	ands	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004642:	429a      	cmp	r2, r3
 8004644:	d11f      	bne.n	8004686 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	23fe      	movs	r3, #254	@ 0xfe
 800464a:	01db      	lsls	r3, r3, #7
 800464c:	401a      	ands	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004652:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d116      	bne.n	8004686 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	23f8      	movs	r3, #248	@ 0xf8
 800465c:	039b      	lsls	r3, r3, #14
 800465e:	401a      	ands	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d10e      	bne.n	8004686 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	23e0      	movs	r3, #224	@ 0xe0
 800466c:	051b      	lsls	r3, r3, #20
 800466e:	401a      	ands	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d106      	bne.n	8004686 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	0f5b      	lsrs	r3, r3, #29
 800467c:	075a      	lsls	r2, r3, #29
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d001      	beq.n	800468a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	0018      	movs	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	b008      	add	sp, #32
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40021000 	.word	0x40021000
 8004698:	40007000 	.word	0x40007000
 800469c:	00001388 	.word	0x00001388
 80046a0:	efffffff 	.word	0xefffffff
 80046a4:	feffffff 	.word	0xfeffffff
 80046a8:	11c1808c 	.word	0x11c1808c
 80046ac:	eefefffc 	.word	0xeefefffc

080046b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0e9      	b.n	8004898 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046c4:	4b76      	ldr	r3, [pc, #472]	@ (80048a0 <HAL_RCC_ClockConfig+0x1f0>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2207      	movs	r2, #7
 80046ca:	4013      	ands	r3, r2
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d91e      	bls.n	8004710 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d2:	4b73      	ldr	r3, [pc, #460]	@ (80048a0 <HAL_RCC_ClockConfig+0x1f0>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2207      	movs	r2, #7
 80046d8:	4393      	bics	r3, r2
 80046da:	0019      	movs	r1, r3
 80046dc:	4b70      	ldr	r3, [pc, #448]	@ (80048a0 <HAL_RCC_ClockConfig+0x1f0>)
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046e4:	f7fd fd94 	bl	8002210 <HAL_GetTick>
 80046e8:	0003      	movs	r3, r0
 80046ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046ec:	e009      	b.n	8004702 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ee:	f7fd fd8f 	bl	8002210 <HAL_GetTick>
 80046f2:	0002      	movs	r2, r0
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	4a6a      	ldr	r2, [pc, #424]	@ (80048a4 <HAL_RCC_ClockConfig+0x1f4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e0ca      	b.n	8004898 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004702:	4b67      	ldr	r3, [pc, #412]	@ (80048a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2207      	movs	r2, #7
 8004708:	4013      	ands	r3, r2
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d1ee      	bne.n	80046ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2202      	movs	r2, #2
 8004716:	4013      	ands	r3, r2
 8004718:	d015      	beq.n	8004746 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2204      	movs	r2, #4
 8004720:	4013      	ands	r3, r2
 8004722:	d006      	beq.n	8004732 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004724:	4b60      	ldr	r3, [pc, #384]	@ (80048a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	4b5f      	ldr	r3, [pc, #380]	@ (80048a8 <HAL_RCC_ClockConfig+0x1f8>)
 800472a:	21e0      	movs	r1, #224	@ 0xe0
 800472c:	01c9      	lsls	r1, r1, #7
 800472e:	430a      	orrs	r2, r1
 8004730:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004732:	4b5d      	ldr	r3, [pc, #372]	@ (80048a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	4a5d      	ldr	r2, [pc, #372]	@ (80048ac <HAL_RCC_ClockConfig+0x1fc>)
 8004738:	4013      	ands	r3, r2
 800473a:	0019      	movs	r1, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	4b59      	ldr	r3, [pc, #356]	@ (80048a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004742:	430a      	orrs	r2, r1
 8004744:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2201      	movs	r2, #1
 800474c:	4013      	ands	r3, r2
 800474e:	d057      	beq.n	8004800 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d107      	bne.n	8004768 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004758:	4b53      	ldr	r3, [pc, #332]	@ (80048a8 <HAL_RCC_ClockConfig+0x1f8>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	2380      	movs	r3, #128	@ 0x80
 800475e:	029b      	lsls	r3, r3, #10
 8004760:	4013      	ands	r3, r2
 8004762:	d12b      	bne.n	80047bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e097      	b.n	8004898 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d107      	bne.n	8004780 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004770:	4b4d      	ldr	r3, [pc, #308]	@ (80048a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	2380      	movs	r3, #128	@ 0x80
 8004776:	049b      	lsls	r3, r3, #18
 8004778:	4013      	ands	r3, r2
 800477a:	d11f      	bne.n	80047bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e08b      	b.n	8004898 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d107      	bne.n	8004798 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004788:	4b47      	ldr	r3, [pc, #284]	@ (80048a8 <HAL_RCC_ClockConfig+0x1f8>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	2380      	movs	r3, #128	@ 0x80
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4013      	ands	r3, r2
 8004792:	d113      	bne.n	80047bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e07f      	b.n	8004898 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b03      	cmp	r3, #3
 800479e:	d106      	bne.n	80047ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047a0:	4b41      	ldr	r3, [pc, #260]	@ (80048a8 <HAL_RCC_ClockConfig+0x1f8>)
 80047a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a4:	2202      	movs	r2, #2
 80047a6:	4013      	ands	r3, r2
 80047a8:	d108      	bne.n	80047bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e074      	b.n	8004898 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ae:	4b3e      	ldr	r3, [pc, #248]	@ (80048a8 <HAL_RCC_ClockConfig+0x1f8>)
 80047b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b2:	2202      	movs	r2, #2
 80047b4:	4013      	ands	r3, r2
 80047b6:	d101      	bne.n	80047bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e06d      	b.n	8004898 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047bc:	4b3a      	ldr	r3, [pc, #232]	@ (80048a8 <HAL_RCC_ClockConfig+0x1f8>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2207      	movs	r2, #7
 80047c2:	4393      	bics	r3, r2
 80047c4:	0019      	movs	r1, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	4b37      	ldr	r3, [pc, #220]	@ (80048a8 <HAL_RCC_ClockConfig+0x1f8>)
 80047cc:	430a      	orrs	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d0:	f7fd fd1e 	bl	8002210 <HAL_GetTick>
 80047d4:	0003      	movs	r3, r0
 80047d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d8:	e009      	b.n	80047ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047da:	f7fd fd19 	bl	8002210 <HAL_GetTick>
 80047de:	0002      	movs	r2, r0
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	4a2f      	ldr	r2, [pc, #188]	@ (80048a4 <HAL_RCC_ClockConfig+0x1f4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e054      	b.n	8004898 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ee:	4b2e      	ldr	r3, [pc, #184]	@ (80048a8 <HAL_RCC_ClockConfig+0x1f8>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2238      	movs	r2, #56	@ 0x38
 80047f4:	401a      	ands	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d1ec      	bne.n	80047da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004800:	4b27      	ldr	r3, [pc, #156]	@ (80048a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2207      	movs	r2, #7
 8004806:	4013      	ands	r3, r2
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d21e      	bcs.n	800484c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480e:	4b24      	ldr	r3, [pc, #144]	@ (80048a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2207      	movs	r2, #7
 8004814:	4393      	bics	r3, r2
 8004816:	0019      	movs	r1, r3
 8004818:	4b21      	ldr	r3, [pc, #132]	@ (80048a0 <HAL_RCC_ClockConfig+0x1f0>)
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004820:	f7fd fcf6 	bl	8002210 <HAL_GetTick>
 8004824:	0003      	movs	r3, r0
 8004826:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004828:	e009      	b.n	800483e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800482a:	f7fd fcf1 	bl	8002210 <HAL_GetTick>
 800482e:	0002      	movs	r2, r0
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	4a1b      	ldr	r2, [pc, #108]	@ (80048a4 <HAL_RCC_ClockConfig+0x1f4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e02c      	b.n	8004898 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800483e:	4b18      	ldr	r3, [pc, #96]	@ (80048a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2207      	movs	r2, #7
 8004844:	4013      	ands	r3, r2
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d1ee      	bne.n	800482a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2204      	movs	r2, #4
 8004852:	4013      	ands	r3, r2
 8004854:	d009      	beq.n	800486a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004856:	4b14      	ldr	r3, [pc, #80]	@ (80048a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	4a15      	ldr	r2, [pc, #84]	@ (80048b0 <HAL_RCC_ClockConfig+0x200>)
 800485c:	4013      	ands	r3, r2
 800485e:	0019      	movs	r1, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	4b10      	ldr	r3, [pc, #64]	@ (80048a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004866:	430a      	orrs	r2, r1
 8004868:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800486a:	f000 f829 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 800486e:	0001      	movs	r1, r0
 8004870:	4b0d      	ldr	r3, [pc, #52]	@ (80048a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	0a1b      	lsrs	r3, r3, #8
 8004876:	220f      	movs	r2, #15
 8004878:	401a      	ands	r2, r3
 800487a:	4b0e      	ldr	r3, [pc, #56]	@ (80048b4 <HAL_RCC_ClockConfig+0x204>)
 800487c:	0092      	lsls	r2, r2, #2
 800487e:	58d3      	ldr	r3, [r2, r3]
 8004880:	221f      	movs	r2, #31
 8004882:	4013      	ands	r3, r2
 8004884:	000a      	movs	r2, r1
 8004886:	40da      	lsrs	r2, r3
 8004888:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <HAL_RCC_ClockConfig+0x208>)
 800488a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800488c:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <HAL_RCC_ClockConfig+0x20c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	0018      	movs	r0, r3
 8004892:	f7fd fc61 	bl	8002158 <HAL_InitTick>
 8004896:	0003      	movs	r3, r0
}
 8004898:	0018      	movs	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	b004      	add	sp, #16
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40022000 	.word	0x40022000
 80048a4:	00001388 	.word	0x00001388
 80048a8:	40021000 	.word	0x40021000
 80048ac:	fffff0ff 	.word	0xfffff0ff
 80048b0:	ffff8fff 	.word	0xffff8fff
 80048b4:	0800634c 	.word	0x0800634c
 80048b8:	20000000 	.word	0x20000000
 80048bc:	20000004 	.word	0x20000004

080048c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048c6:	4b3c      	ldr	r3, [pc, #240]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2238      	movs	r2, #56	@ 0x38
 80048cc:	4013      	ands	r3, r2
 80048ce:	d10f      	bne.n	80048f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80048d0:	4b39      	ldr	r3, [pc, #228]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	0adb      	lsrs	r3, r3, #11
 80048d6:	2207      	movs	r2, #7
 80048d8:	4013      	ands	r3, r2
 80048da:	2201      	movs	r2, #1
 80048dc:	409a      	lsls	r2, r3
 80048de:	0013      	movs	r3, r2
 80048e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80048e2:	6839      	ldr	r1, [r7, #0]
 80048e4:	4835      	ldr	r0, [pc, #212]	@ (80049bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80048e6:	f7fb fc0d 	bl	8000104 <__udivsi3>
 80048ea:	0003      	movs	r3, r0
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	e05d      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048f0:	4b31      	ldr	r3, [pc, #196]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2238      	movs	r2, #56	@ 0x38
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d102      	bne.n	8004902 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048fc:	4b30      	ldr	r3, [pc, #192]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	e054      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004902:	4b2d      	ldr	r3, [pc, #180]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2238      	movs	r2, #56	@ 0x38
 8004908:	4013      	ands	r3, r2
 800490a:	2b10      	cmp	r3, #16
 800490c:	d138      	bne.n	8004980 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800490e:	4b2a      	ldr	r3, [pc, #168]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	2203      	movs	r2, #3
 8004914:	4013      	ands	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004918:	4b27      	ldr	r3, [pc, #156]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	2207      	movs	r2, #7
 8004920:	4013      	ands	r3, r2
 8004922:	3301      	adds	r3, #1
 8004924:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d10d      	bne.n	8004948 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	4824      	ldr	r0, [pc, #144]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004930:	f7fb fbe8 	bl	8000104 <__udivsi3>
 8004934:	0003      	movs	r3, r0
 8004936:	0019      	movs	r1, r3
 8004938:	4b1f      	ldr	r3, [pc, #124]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	0a1b      	lsrs	r3, r3, #8
 800493e:	227f      	movs	r2, #127	@ 0x7f
 8004940:	4013      	ands	r3, r2
 8004942:	434b      	muls	r3, r1
 8004944:	617b      	str	r3, [r7, #20]
        break;
 8004946:	e00d      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	481c      	ldr	r0, [pc, #112]	@ (80049bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800494c:	f7fb fbda 	bl	8000104 <__udivsi3>
 8004950:	0003      	movs	r3, r0
 8004952:	0019      	movs	r1, r3
 8004954:	4b18      	ldr	r3, [pc, #96]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	0a1b      	lsrs	r3, r3, #8
 800495a:	227f      	movs	r2, #127	@ 0x7f
 800495c:	4013      	ands	r3, r2
 800495e:	434b      	muls	r3, r1
 8004960:	617b      	str	r3, [r7, #20]
        break;
 8004962:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004964:	4b14      	ldr	r3, [pc, #80]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	0f5b      	lsrs	r3, r3, #29
 800496a:	2207      	movs	r2, #7
 800496c:	4013      	ands	r3, r2
 800496e:	3301      	adds	r3, #1
 8004970:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	6978      	ldr	r0, [r7, #20]
 8004976:	f7fb fbc5 	bl	8000104 <__udivsi3>
 800497a:	0003      	movs	r3, r0
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	e015      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004980:	4b0d      	ldr	r3, [pc, #52]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2238      	movs	r2, #56	@ 0x38
 8004986:	4013      	ands	r3, r2
 8004988:	2b20      	cmp	r3, #32
 800498a:	d103      	bne.n	8004994 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800498c:	2380      	movs	r3, #128	@ 0x80
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	e00b      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004994:	4b08      	ldr	r3, [pc, #32]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2238      	movs	r2, #56	@ 0x38
 800499a:	4013      	ands	r3, r2
 800499c:	2b18      	cmp	r3, #24
 800499e:	d103      	bne.n	80049a8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80049a0:	23fa      	movs	r3, #250	@ 0xfa
 80049a2:	01db      	lsls	r3, r3, #7
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	e001      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049ac:	693b      	ldr	r3, [r7, #16]
}
 80049ae:	0018      	movs	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b006      	add	sp, #24
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	46c0      	nop			@ (mov r8, r8)
 80049b8:	40021000 	.word	0x40021000
 80049bc:	00f42400 	.word	0x00f42400
 80049c0:	007a1200 	.word	0x007a1200

080049c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c8:	4b02      	ldr	r3, [pc, #8]	@ (80049d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80049ca:	681b      	ldr	r3, [r3, #0]
}
 80049cc:	0018      	movs	r0, r3
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	20000000 	.word	0x20000000

080049d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d8:	b5b0      	push	{r4, r5, r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80049dc:	f7ff fff2 	bl	80049c4 <HAL_RCC_GetHCLKFreq>
 80049e0:	0004      	movs	r4, r0
 80049e2:	f7ff fb3f 	bl	8004064 <LL_RCC_GetAPB1Prescaler>
 80049e6:	0003      	movs	r3, r0
 80049e8:	0b1a      	lsrs	r2, r3, #12
 80049ea:	4b05      	ldr	r3, [pc, #20]	@ (8004a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049ec:	0092      	lsls	r2, r2, #2
 80049ee:	58d3      	ldr	r3, [r2, r3]
 80049f0:	221f      	movs	r2, #31
 80049f2:	4013      	ands	r3, r2
 80049f4:	40dc      	lsrs	r4, r3
 80049f6:	0023      	movs	r3, r4
}
 80049f8:	0018      	movs	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bdb0      	pop	{r4, r5, r7, pc}
 80049fe:	46c0      	nop			@ (mov r8, r8)
 8004a00:	0800638c 	.word	0x0800638c

08004a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004a0c:	2313      	movs	r3, #19
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	2200      	movs	r2, #0
 8004a12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a14:	2312      	movs	r3, #18
 8004a16:	18fb      	adds	r3, r7, r3
 8004a18:	2200      	movs	r2, #0
 8004a1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	2380      	movs	r3, #128	@ 0x80
 8004a22:	029b      	lsls	r3, r3, #10
 8004a24:	4013      	ands	r3, r2
 8004a26:	d100      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004a28:	e0a3      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a2a:	2011      	movs	r0, #17
 8004a2c:	183b      	adds	r3, r7, r0
 8004a2e:	2200      	movs	r2, #0
 8004a30:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a32:	4bc3      	ldr	r3, [pc, #780]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a36:	2380      	movs	r3, #128	@ 0x80
 8004a38:	055b      	lsls	r3, r3, #21
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d110      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a3e:	4bc0      	ldr	r3, [pc, #768]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a42:	4bbf      	ldr	r3, [pc, #764]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a44:	2180      	movs	r1, #128	@ 0x80
 8004a46:	0549      	lsls	r1, r1, #21
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a4c:	4bbc      	ldr	r3, [pc, #752]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a50:	2380      	movs	r3, #128	@ 0x80
 8004a52:	055b      	lsls	r3, r3, #21
 8004a54:	4013      	ands	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]
 8004a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a5a:	183b      	adds	r3, r7, r0
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a60:	4bb8      	ldr	r3, [pc, #736]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4bb7      	ldr	r3, [pc, #732]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a66:	2180      	movs	r1, #128	@ 0x80
 8004a68:	0049      	lsls	r1, r1, #1
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a6e:	f7fd fbcf 	bl	8002210 <HAL_GetTick>
 8004a72:	0003      	movs	r3, r0
 8004a74:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a76:	e00b      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a78:	f7fd fbca 	bl	8002210 <HAL_GetTick>
 8004a7c:	0002      	movs	r2, r0
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d904      	bls.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004a86:	2313      	movs	r3, #19
 8004a88:	18fb      	adds	r3, r7, r3
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	701a      	strb	r2, [r3, #0]
        break;
 8004a8e:	e005      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a90:	4bac      	ldr	r3, [pc, #688]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	2380      	movs	r3, #128	@ 0x80
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d0ed      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004a9c:	2313      	movs	r3, #19
 8004a9e:	18fb      	adds	r3, r7, r3
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d154      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004aa6:	4ba6      	ldr	r3, [pc, #664]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aa8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004aaa:	23c0      	movs	r3, #192	@ 0xc0
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4013      	ands	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d019      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d014      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ac2:	4b9f      	ldr	r3, [pc, #636]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac6:	4aa0      	ldr	r2, [pc, #640]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004acc:	4b9c      	ldr	r3, [pc, #624]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ace:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ad0:	4b9b      	ldr	r3, [pc, #620]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ad2:	2180      	movs	r1, #128	@ 0x80
 8004ad4:	0249      	lsls	r1, r1, #9
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ada:	4b99      	ldr	r3, [pc, #612]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004adc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ade:	4b98      	ldr	r3, [pc, #608]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ae0:	499a      	ldr	r1, [pc, #616]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004ae2:	400a      	ands	r2, r1
 8004ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ae6:	4b96      	ldr	r3, [pc, #600]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2201      	movs	r2, #1
 8004af0:	4013      	ands	r3, r2
 8004af2:	d016      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fd fb8c 	bl	8002210 <HAL_GetTick>
 8004af8:	0003      	movs	r3, r0
 8004afa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004afc:	e00c      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afe:	f7fd fb87 	bl	8002210 <HAL_GetTick>
 8004b02:	0002      	movs	r2, r0
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	4a91      	ldr	r2, [pc, #580]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d904      	bls.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004b0e:	2313      	movs	r3, #19
 8004b10:	18fb      	adds	r3, r7, r3
 8004b12:	2203      	movs	r2, #3
 8004b14:	701a      	strb	r2, [r3, #0]
            break;
 8004b16:	e004      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b18:	4b89      	ldr	r3, [pc, #548]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d0ed      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004b22:	2313      	movs	r3, #19
 8004b24:	18fb      	adds	r3, r7, r3
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10a      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b2c:	4b84      	ldr	r3, [pc, #528]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b30:	4a85      	ldr	r2, [pc, #532]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	0019      	movs	r1, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b3a:	4b81      	ldr	r3, [pc, #516]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b40:	e00c      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b42:	2312      	movs	r3, #18
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	2213      	movs	r2, #19
 8004b48:	18ba      	adds	r2, r7, r2
 8004b4a:	7812      	ldrb	r2, [r2, #0]
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	e005      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	2312      	movs	r3, #18
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	2213      	movs	r2, #19
 8004b56:	18ba      	adds	r2, r7, r2
 8004b58:	7812      	ldrb	r2, [r2, #0]
 8004b5a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b5c:	2311      	movs	r3, #17
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d105      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b66:	4b76      	ldr	r3, [pc, #472]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b6a:	4b75      	ldr	r3, [pc, #468]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b6c:	4979      	ldr	r1, [pc, #484]	@ (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004b6e:	400a      	ands	r2, r1
 8004b70:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2201      	movs	r2, #1
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d009      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b7c:	4b70      	ldr	r3, [pc, #448]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b80:	2203      	movs	r2, #3
 8004b82:	4393      	bics	r3, r2
 8004b84:	0019      	movs	r1, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2202      	movs	r2, #2
 8004b96:	4013      	ands	r3, r2
 8004b98:	d009      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b9a:	4b69      	ldr	r3, [pc, #420]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b9e:	220c      	movs	r2, #12
 8004ba0:	4393      	bics	r3, r2
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	4b65      	ldr	r3, [pc, #404]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004baa:	430a      	orrs	r2, r1
 8004bac:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d009      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bb8:	4b61      	ldr	r3, [pc, #388]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbc:	4a66      	ldr	r2, [pc, #408]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	0019      	movs	r1, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	4b5e      	ldr	r3, [pc, #376]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	2380      	movs	r3, #128	@ 0x80
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d009      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bd8:	4b59      	ldr	r3, [pc, #356]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bdc:	4a5f      	ldr	r2, [pc, #380]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	0019      	movs	r1, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699a      	ldr	r2, [r3, #24]
 8004be6:	4b56      	ldr	r3, [pc, #344]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004be8:	430a      	orrs	r2, r1
 8004bea:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	2380      	movs	r3, #128	@ 0x80
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d009      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bf8:	4b51      	ldr	r3, [pc, #324]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfc:	4a58      	ldr	r2, [pc, #352]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	0019      	movs	r1, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69da      	ldr	r2, [r3, #28]
 8004c06:	4b4e      	ldr	r3, [pc, #312]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2220      	movs	r2, #32
 8004c12:	4013      	ands	r3, r2
 8004c14:	d009      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c16:	4b4a      	ldr	r3, [pc, #296]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1a:	4a52      	ldr	r2, [pc, #328]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	0019      	movs	r1, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	4b46      	ldr	r3, [pc, #280]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c26:	430a      	orrs	r2, r1
 8004c28:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	2380      	movs	r3, #128	@ 0x80
 8004c30:	01db      	lsls	r3, r3, #7
 8004c32:	4013      	ands	r3, r2
 8004c34:	d015      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c36:	4b42      	ldr	r3, [pc, #264]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	0899      	lsrs	r1, r3, #2
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1a      	ldr	r2, [r3, #32]
 8004c42:	4b3f      	ldr	r3, [pc, #252]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c44:	430a      	orrs	r2, r1
 8004c46:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1a      	ldr	r2, [r3, #32]
 8004c4c:	2380      	movs	r3, #128	@ 0x80
 8004c4e:	05db      	lsls	r3, r3, #23
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d106      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c54:	4b3a      	ldr	r3, [pc, #232]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	4b39      	ldr	r3, [pc, #228]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c5a:	2180      	movs	r1, #128	@ 0x80
 8004c5c:	0249      	lsls	r1, r1, #9
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	2380      	movs	r3, #128	@ 0x80
 8004c68:	031b      	lsls	r3, r3, #12
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c6e:	4b34      	ldr	r3, [pc, #208]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c72:	2240      	movs	r2, #64	@ 0x40
 8004c74:	4393      	bics	r3, r2
 8004c76:	0019      	movs	r1, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c7c:	4b30      	ldr	r3, [pc, #192]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	2380      	movs	r3, #128	@ 0x80
 8004c88:	039b      	lsls	r3, r3, #14
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d016      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c92:	4a35      	ldr	r2, [pc, #212]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	0019      	movs	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c9c:	4b28      	ldr	r3, [pc, #160]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ca6:	2380      	movs	r3, #128	@ 0x80
 8004ca8:	03db      	lsls	r3, r3, #15
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d106      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004cae:	4b24      	ldr	r3, [pc, #144]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	4b23      	ldr	r3, [pc, #140]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cb4:	2180      	movs	r1, #128	@ 0x80
 8004cb6:	0449      	lsls	r1, r1, #17
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	2380      	movs	r3, #128	@ 0x80
 8004cc2:	03db      	lsls	r3, r3, #15
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d016      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ccc:	4a27      	ldr	r2, [pc, #156]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	0019      	movs	r1, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce0:	2380      	movs	r3, #128	@ 0x80
 8004ce2:	045b      	lsls	r3, r3, #17
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d106      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ce8:	4b15      	ldr	r3, [pc, #84]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	4b14      	ldr	r3, [pc, #80]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cee:	2180      	movs	r1, #128	@ 0x80
 8004cf0:	0449      	lsls	r1, r1, #17
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	2380      	movs	r3, #128	@ 0x80
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d016      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004d02:	4b0f      	ldr	r3, [pc, #60]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d06:	4a1a      	ldr	r2, [pc, #104]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	0019      	movs	r1, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d12:	430a      	orrs	r2, r1
 8004d14:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695a      	ldr	r2, [r3, #20]
 8004d1a:	2380      	movs	r3, #128	@ 0x80
 8004d1c:	01db      	lsls	r3, r3, #7
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d106      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004d22:	4b07      	ldr	r3, [pc, #28]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d28:	2180      	movs	r1, #128	@ 0x80
 8004d2a:	0249      	lsls	r1, r1, #9
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004d30:	2312      	movs	r3, #18
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	781b      	ldrb	r3, [r3, #0]
}
 8004d36:	0018      	movs	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b006      	add	sp, #24
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	46c0      	nop			@ (mov r8, r8)
 8004d40:	40021000 	.word	0x40021000
 8004d44:	40007000 	.word	0x40007000
 8004d48:	fffffcff 	.word	0xfffffcff
 8004d4c:	fffeffff 	.word	0xfffeffff
 8004d50:	00001388 	.word	0x00001388
 8004d54:	efffffff 	.word	0xefffffff
 8004d58:	fffff3ff 	.word	0xfffff3ff
 8004d5c:	fff3ffff 	.word	0xfff3ffff
 8004d60:	ffcfffff 	.word	0xffcfffff
 8004d64:	ffffcfff 	.word	0xffffcfff
 8004d68:	ffbfffff 	.word	0xffbfffff
 8004d6c:	feffffff 	.word	0xfeffffff
 8004d70:	ffff3fff 	.word	0xffff3fff

08004d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e04a      	b.n	8004e1c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	223d      	movs	r2, #61	@ 0x3d
 8004d8a:	5c9b      	ldrb	r3, [r3, r2]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d107      	bne.n	8004da2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	223c      	movs	r2, #60	@ 0x3c
 8004d96:	2100      	movs	r1, #0
 8004d98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f7fd f8c3 	bl	8001f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	223d      	movs	r2, #61	@ 0x3d
 8004da6:	2102      	movs	r1, #2
 8004da8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3304      	adds	r3, #4
 8004db2:	0019      	movs	r1, r3
 8004db4:	0010      	movs	r0, r2
 8004db6:	f000 f9b9 	bl	800512c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2248      	movs	r2, #72	@ 0x48
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	223e      	movs	r2, #62	@ 0x3e
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	5499      	strb	r1, [r3, r2]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	223f      	movs	r2, #63	@ 0x3f
 8004dce:	2101      	movs	r1, #1
 8004dd0:	5499      	strb	r1, [r3, r2]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2240      	movs	r2, #64	@ 0x40
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	5499      	strb	r1, [r3, r2]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2241      	movs	r2, #65	@ 0x41
 8004dde:	2101      	movs	r1, #1
 8004de0:	5499      	strb	r1, [r3, r2]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2242      	movs	r2, #66	@ 0x42
 8004de6:	2101      	movs	r1, #1
 8004de8:	5499      	strb	r1, [r3, r2]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2243      	movs	r2, #67	@ 0x43
 8004dee:	2101      	movs	r1, #1
 8004df0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2244      	movs	r2, #68	@ 0x44
 8004df6:	2101      	movs	r1, #1
 8004df8:	5499      	strb	r1, [r3, r2]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2245      	movs	r2, #69	@ 0x45
 8004dfe:	2101      	movs	r1, #1
 8004e00:	5499      	strb	r1, [r3, r2]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2246      	movs	r2, #70	@ 0x46
 8004e06:	2101      	movs	r1, #1
 8004e08:	5499      	strb	r1, [r3, r2]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2247      	movs	r2, #71	@ 0x47
 8004e0e:	2101      	movs	r1, #1
 8004e10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	223d      	movs	r2, #61	@ 0x3d
 8004e16:	2101      	movs	r1, #1
 8004e18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	b002      	add	sp, #8
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	223d      	movs	r2, #61	@ 0x3d
 8004e30:	5c9b      	ldrb	r3, [r3, r2]
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d001      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e042      	b.n	8004ec2 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	223d      	movs	r2, #61	@ 0x3d
 8004e40:	2102      	movs	r1, #2
 8004e42:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2101      	movs	r1, #1
 8004e50:	430a      	orrs	r2, r1
 8004e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1c      	ldr	r2, [pc, #112]	@ (8004ecc <HAL_TIM_Base_Start_IT+0xa8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00f      	beq.n	8004e7e <HAL_TIM_Base_Start_IT+0x5a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	2380      	movs	r3, #128	@ 0x80
 8004e64:	05db      	lsls	r3, r3, #23
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d009      	beq.n	8004e7e <HAL_TIM_Base_Start_IT+0x5a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a18      	ldr	r2, [pc, #96]	@ (8004ed0 <HAL_TIM_Base_Start_IT+0xac>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d004      	beq.n	8004e7e <HAL_TIM_Base_Start_IT+0x5a>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a16      	ldr	r2, [pc, #88]	@ (8004ed4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d116      	bne.n	8004eac <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	4a14      	ldr	r2, [pc, #80]	@ (8004ed8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b06      	cmp	r3, #6
 8004e8e:	d016      	beq.n	8004ebe <HAL_TIM_Base_Start_IT+0x9a>
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	2380      	movs	r3, #128	@ 0x80
 8004e94:	025b      	lsls	r3, r3, #9
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d011      	beq.n	8004ebe <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eaa:	e008      	b.n	8004ebe <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e000      	b.n	8004ec0 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ebe:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b004      	add	sp, #16
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	40012c00 	.word	0x40012c00
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	00010007 	.word	0x00010007

08004edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d021      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2202      	movs	r2, #2
 8004f00:	4013      	ands	r3, r2
 8004f02:	d01d      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2203      	movs	r2, #3
 8004f0a:	4252      	negs	r2, r2
 8004f0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2203      	movs	r2, #3
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	d004      	beq.n	8004f2a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	0018      	movs	r0, r3
 8004f24:	f000 f8ea 	bl	80050fc <HAL_TIM_IC_CaptureCallback>
 8004f28:	e007      	b.n	8004f3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	f000 f8dd 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	0018      	movs	r0, r3
 8004f36:	f000 f8e9 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2204      	movs	r2, #4
 8004f44:	4013      	ands	r3, r2
 8004f46:	d022      	beq.n	8004f8e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d01e      	beq.n	8004f8e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2205      	movs	r2, #5
 8004f56:	4252      	negs	r2, r2
 8004f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	23c0      	movs	r3, #192	@ 0xc0
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	0018      	movs	r0, r3
 8004f72:	f000 f8c3 	bl	80050fc <HAL_TIM_IC_CaptureCallback>
 8004f76:	e007      	b.n	8004f88 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	f000 f8b6 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	0018      	movs	r0, r3
 8004f84:	f000 f8c2 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2208      	movs	r2, #8
 8004f92:	4013      	ands	r3, r2
 8004f94:	d021      	beq.n	8004fda <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2208      	movs	r2, #8
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d01d      	beq.n	8004fda <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2209      	movs	r2, #9
 8004fa4:	4252      	negs	r2, r2
 8004fa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2204      	movs	r2, #4
 8004fac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d004      	beq.n	8004fc4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	f000 f89d 	bl	80050fc <HAL_TIM_IC_CaptureCallback>
 8004fc2:	e007      	b.n	8004fd4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f000 f890 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f000 f89c 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2210      	movs	r2, #16
 8004fde:	4013      	ands	r3, r2
 8004fe0:	d022      	beq.n	8005028 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2210      	movs	r2, #16
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d01e      	beq.n	8005028 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2211      	movs	r2, #17
 8004ff0:	4252      	negs	r2, r2
 8004ff2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	23c0      	movs	r3, #192	@ 0xc0
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4013      	ands	r3, r2
 8005006:	d004      	beq.n	8005012 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	0018      	movs	r0, r3
 800500c:	f000 f876 	bl	80050fc <HAL_TIM_IC_CaptureCallback>
 8005010:	e007      	b.n	8005022 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	0018      	movs	r0, r3
 8005016:	f000 f869 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	0018      	movs	r0, r3
 800501e:	f000 f875 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2201      	movs	r2, #1
 800502c:	4013      	ands	r3, r2
 800502e:	d00c      	beq.n	800504a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	4013      	ands	r3, r2
 8005036:	d008      	beq.n	800504a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2202      	movs	r2, #2
 800503e:	4252      	negs	r2, r2
 8005040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	0018      	movs	r0, r3
 8005046:	f7fc fd91 	bl	8001b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2280      	movs	r2, #128	@ 0x80
 800504e:	4013      	ands	r3, r2
 8005050:	d104      	bne.n	800505c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	2380      	movs	r3, #128	@ 0x80
 8005056:	019b      	lsls	r3, r3, #6
 8005058:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800505a:	d00b      	beq.n	8005074 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2280      	movs	r2, #128	@ 0x80
 8005060:	4013      	ands	r3, r2
 8005062:	d007      	beq.n	8005074 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1e      	ldr	r2, [pc, #120]	@ (80050e4 <HAL_TIM_IRQHandler+0x208>)
 800506a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	0018      	movs	r0, r3
 8005070:	f000 f8f2 	bl	8005258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	2380      	movs	r3, #128	@ 0x80
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	4013      	ands	r3, r2
 800507c:	d00b      	beq.n	8005096 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2280      	movs	r2, #128	@ 0x80
 8005082:	4013      	ands	r3, r2
 8005084:	d007      	beq.n	8005096 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a17      	ldr	r2, [pc, #92]	@ (80050e8 <HAL_TIM_IRQHandler+0x20c>)
 800508c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	0018      	movs	r0, r3
 8005092:	f000 f8e9 	bl	8005268 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2240      	movs	r2, #64	@ 0x40
 800509a:	4013      	ands	r3, r2
 800509c:	d00c      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2240      	movs	r2, #64	@ 0x40
 80050a2:	4013      	ands	r3, r2
 80050a4:	d008      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2241      	movs	r2, #65	@ 0x41
 80050ac:	4252      	negs	r2, r2
 80050ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	0018      	movs	r0, r3
 80050b4:	f000 f832 	bl	800511c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2220      	movs	r2, #32
 80050bc:	4013      	ands	r3, r2
 80050be:	d00c      	beq.n	80050da <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	4013      	ands	r3, r2
 80050c6:	d008      	beq.n	80050da <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2221      	movs	r2, #33	@ 0x21
 80050ce:	4252      	negs	r2, r2
 80050d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	0018      	movs	r0, r3
 80050d6:	f000 f8b7 	bl	8005248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050da:	46c0      	nop			@ (mov r8, r8)
 80050dc:	46bd      	mov	sp, r7
 80050de:	b004      	add	sp, #16
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	46c0      	nop			@ (mov r8, r8)
 80050e4:	ffffdf7f 	.word	0xffffdf7f
 80050e8:	fffffeff 	.word	0xfffffeff

080050ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050f4:	46c0      	nop			@ (mov r8, r8)
 80050f6:	46bd      	mov	sp, r7
 80050f8:	b002      	add	sp, #8
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005104:	46c0      	nop			@ (mov r8, r8)
 8005106:	46bd      	mov	sp, r7
 8005108:	b002      	add	sp, #8
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005114:	46c0      	nop			@ (mov r8, r8)
 8005116:	46bd      	mov	sp, r7
 8005118:	b002      	add	sp, #8
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005124:	46c0      	nop			@ (mov r8, r8)
 8005126:	46bd      	mov	sp, r7
 8005128:	b002      	add	sp, #8
 800512a:	bd80      	pop	{r7, pc}

0800512c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a3b      	ldr	r2, [pc, #236]	@ (800522c <TIM_Base_SetConfig+0x100>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d008      	beq.n	8005156 <TIM_Base_SetConfig+0x2a>
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	2380      	movs	r3, #128	@ 0x80
 8005148:	05db      	lsls	r3, r3, #23
 800514a:	429a      	cmp	r2, r3
 800514c:	d003      	beq.n	8005156 <TIM_Base_SetConfig+0x2a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a37      	ldr	r2, [pc, #220]	@ (8005230 <TIM_Base_SetConfig+0x104>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d108      	bne.n	8005168 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2270      	movs	r2, #112	@ 0x70
 800515a:	4393      	bics	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a30      	ldr	r2, [pc, #192]	@ (800522c <TIM_Base_SetConfig+0x100>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d018      	beq.n	80051a2 <TIM_Base_SetConfig+0x76>
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	2380      	movs	r3, #128	@ 0x80
 8005174:	05db      	lsls	r3, r3, #23
 8005176:	429a      	cmp	r2, r3
 8005178:	d013      	beq.n	80051a2 <TIM_Base_SetConfig+0x76>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2c      	ldr	r2, [pc, #176]	@ (8005230 <TIM_Base_SetConfig+0x104>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00f      	beq.n	80051a2 <TIM_Base_SetConfig+0x76>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a2b      	ldr	r2, [pc, #172]	@ (8005234 <TIM_Base_SetConfig+0x108>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00b      	beq.n	80051a2 <TIM_Base_SetConfig+0x76>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a2a      	ldr	r2, [pc, #168]	@ (8005238 <TIM_Base_SetConfig+0x10c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d007      	beq.n	80051a2 <TIM_Base_SetConfig+0x76>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a29      	ldr	r2, [pc, #164]	@ (800523c <TIM_Base_SetConfig+0x110>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d003      	beq.n	80051a2 <TIM_Base_SetConfig+0x76>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a28      	ldr	r2, [pc, #160]	@ (8005240 <TIM_Base_SetConfig+0x114>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d108      	bne.n	80051b4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a27      	ldr	r2, [pc, #156]	@ (8005244 <TIM_Base_SetConfig+0x118>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2280      	movs	r2, #128	@ 0x80
 80051b8:	4393      	bics	r3, r2
 80051ba:	001a      	movs	r2, r3
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a13      	ldr	r2, [pc, #76]	@ (800522c <TIM_Base_SetConfig+0x100>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00b      	beq.n	80051fa <TIM_Base_SetConfig+0xce>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a14      	ldr	r2, [pc, #80]	@ (8005238 <TIM_Base_SetConfig+0x10c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d007      	beq.n	80051fa <TIM_Base_SetConfig+0xce>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a13      	ldr	r2, [pc, #76]	@ (800523c <TIM_Base_SetConfig+0x110>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d003      	beq.n	80051fa <TIM_Base_SetConfig+0xce>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a12      	ldr	r2, [pc, #72]	@ (8005240 <TIM_Base_SetConfig+0x114>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d103      	bne.n	8005202 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	691a      	ldr	r2, [r3, #16]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2201      	movs	r2, #1
 800520e:	4013      	ands	r3, r2
 8005210:	2b01      	cmp	r3, #1
 8005212:	d106      	bne.n	8005222 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	2201      	movs	r2, #1
 800521a:	4393      	bics	r3, r2
 800521c:	001a      	movs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	611a      	str	r2, [r3, #16]
  }
}
 8005222:	46c0      	nop			@ (mov r8, r8)
 8005224:	46bd      	mov	sp, r7
 8005226:	b004      	add	sp, #16
 8005228:	bd80      	pop	{r7, pc}
 800522a:	46c0      	nop			@ (mov r8, r8)
 800522c:	40012c00 	.word	0x40012c00
 8005230:	40000400 	.word	0x40000400
 8005234:	40002000 	.word	0x40002000
 8005238:	40014000 	.word	0x40014000
 800523c:	40014400 	.word	0x40014400
 8005240:	40014800 	.word	0x40014800
 8005244:	fffffcff 	.word	0xfffffcff

08005248 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005250:	46c0      	nop			@ (mov r8, r8)
 8005252:	46bd      	mov	sp, r7
 8005254:	b002      	add	sp, #8
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005260:	46c0      	nop			@ (mov r8, r8)
 8005262:	46bd      	mov	sp, r7
 8005264:	b002      	add	sp, #8
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005270:	46c0      	nop			@ (mov r8, r8)
 8005272:	46bd      	mov	sp, r7
 8005274:	b002      	add	sp, #8
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e046      	b.n	8005318 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2288      	movs	r2, #136	@ 0x88
 800528e:	589b      	ldr	r3, [r3, r2]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d107      	bne.n	80052a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2284      	movs	r2, #132	@ 0x84
 8005298:	2100      	movs	r1, #0
 800529a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	0018      	movs	r0, r3
 80052a0:	f7fc fe6a 	bl	8001f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2288      	movs	r2, #136	@ 0x88
 80052a8:	2124      	movs	r1, #36	@ 0x24
 80052aa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2101      	movs	r1, #1
 80052b8:	438a      	bics	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	0018      	movs	r0, r3
 80052c8:	f000 faea 	bl	80058a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	0018      	movs	r0, r3
 80052d0:	f000 f828 	bl	8005324 <UART_SetConfig>
 80052d4:	0003      	movs	r3, r0
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e01c      	b.n	8005318 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	490d      	ldr	r1, [pc, #52]	@ (8005320 <HAL_UART_Init+0xa8>)
 80052ea:	400a      	ands	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	212a      	movs	r1, #42	@ 0x2a
 80052fa:	438a      	bics	r2, r1
 80052fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2101      	movs	r1, #1
 800530a:	430a      	orrs	r2, r1
 800530c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	0018      	movs	r0, r3
 8005312:	f000 fb79 	bl	8005a08 <UART_CheckIdleState>
 8005316:	0003      	movs	r3, r0
}
 8005318:	0018      	movs	r0, r3
 800531a:	46bd      	mov	sp, r7
 800531c:	b002      	add	sp, #8
 800531e:	bd80      	pop	{r7, pc}
 8005320:	ffffb7ff 	.word	0xffffb7ff

08005324 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005324:	b5b0      	push	{r4, r5, r7, lr}
 8005326:	b090      	sub	sp, #64	@ 0x40
 8005328:	af00      	add	r7, sp, #0
 800532a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800532c:	231a      	movs	r3, #26
 800532e:	2220      	movs	r2, #32
 8005330:	189b      	adds	r3, r3, r2
 8005332:	19db      	adds	r3, r3, r7
 8005334:	2200      	movs	r2, #0
 8005336:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	431a      	orrs	r2, r3
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	431a      	orrs	r2, r3
 8005348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	4313      	orrs	r3, r2
 800534e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4aaf      	ldr	r2, [pc, #700]	@ (8005614 <UART_SetConfig+0x2f0>)
 8005358:	4013      	ands	r3, r2
 800535a:	0019      	movs	r1, r3
 800535c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005362:	430b      	orrs	r3, r1
 8005364:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	4aaa      	ldr	r2, [pc, #680]	@ (8005618 <UART_SetConfig+0x2f4>)
 800536e:	4013      	ands	r3, r2
 8005370:	0018      	movs	r0, r3
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	68d9      	ldr	r1, [r3, #12]
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	0003      	movs	r3, r0
 800537c:	430b      	orrs	r3, r1
 800537e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4aa4      	ldr	r2, [pc, #656]	@ (800561c <UART_SetConfig+0x2f8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d004      	beq.n	800539a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005396:	4313      	orrs	r3, r2
 8005398:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	4a9f      	ldr	r2, [pc, #636]	@ (8005620 <UART_SetConfig+0x2fc>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	0019      	movs	r1, r3
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ac:	430b      	orrs	r3, r1
 80053ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b6:	220f      	movs	r2, #15
 80053b8:	4393      	bics	r3, r2
 80053ba:	0018      	movs	r0, r3
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	0003      	movs	r3, r0
 80053c6:	430b      	orrs	r3, r1
 80053c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a95      	ldr	r2, [pc, #596]	@ (8005624 <UART_SetConfig+0x300>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d131      	bne.n	8005438 <UART_SetConfig+0x114>
 80053d4:	4b94      	ldr	r3, [pc, #592]	@ (8005628 <UART_SetConfig+0x304>)
 80053d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d8:	2203      	movs	r2, #3
 80053da:	4013      	ands	r3, r2
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d01d      	beq.n	800541c <UART_SetConfig+0xf8>
 80053e0:	d823      	bhi.n	800542a <UART_SetConfig+0x106>
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d00c      	beq.n	8005400 <UART_SetConfig+0xdc>
 80053e6:	d820      	bhi.n	800542a <UART_SetConfig+0x106>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <UART_SetConfig+0xce>
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d00e      	beq.n	800540e <UART_SetConfig+0xea>
 80053f0:	e01b      	b.n	800542a <UART_SetConfig+0x106>
 80053f2:	231b      	movs	r3, #27
 80053f4:	2220      	movs	r2, #32
 80053f6:	189b      	adds	r3, r3, r2
 80053f8:	19db      	adds	r3, r3, r7
 80053fa:	2200      	movs	r2, #0
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	e0b4      	b.n	800556a <UART_SetConfig+0x246>
 8005400:	231b      	movs	r3, #27
 8005402:	2220      	movs	r2, #32
 8005404:	189b      	adds	r3, r3, r2
 8005406:	19db      	adds	r3, r3, r7
 8005408:	2202      	movs	r2, #2
 800540a:	701a      	strb	r2, [r3, #0]
 800540c:	e0ad      	b.n	800556a <UART_SetConfig+0x246>
 800540e:	231b      	movs	r3, #27
 8005410:	2220      	movs	r2, #32
 8005412:	189b      	adds	r3, r3, r2
 8005414:	19db      	adds	r3, r3, r7
 8005416:	2204      	movs	r2, #4
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	e0a6      	b.n	800556a <UART_SetConfig+0x246>
 800541c:	231b      	movs	r3, #27
 800541e:	2220      	movs	r2, #32
 8005420:	189b      	adds	r3, r3, r2
 8005422:	19db      	adds	r3, r3, r7
 8005424:	2208      	movs	r2, #8
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	e09f      	b.n	800556a <UART_SetConfig+0x246>
 800542a:	231b      	movs	r3, #27
 800542c:	2220      	movs	r2, #32
 800542e:	189b      	adds	r3, r3, r2
 8005430:	19db      	adds	r3, r3, r7
 8005432:	2210      	movs	r2, #16
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	e098      	b.n	800556a <UART_SetConfig+0x246>
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a7b      	ldr	r2, [pc, #492]	@ (800562c <UART_SetConfig+0x308>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d131      	bne.n	80054a6 <UART_SetConfig+0x182>
 8005442:	4b79      	ldr	r3, [pc, #484]	@ (8005628 <UART_SetConfig+0x304>)
 8005444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005446:	220c      	movs	r2, #12
 8005448:	4013      	ands	r3, r2
 800544a:	2b0c      	cmp	r3, #12
 800544c:	d01d      	beq.n	800548a <UART_SetConfig+0x166>
 800544e:	d823      	bhi.n	8005498 <UART_SetConfig+0x174>
 8005450:	2b08      	cmp	r3, #8
 8005452:	d00c      	beq.n	800546e <UART_SetConfig+0x14a>
 8005454:	d820      	bhi.n	8005498 <UART_SetConfig+0x174>
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <UART_SetConfig+0x13c>
 800545a:	2b04      	cmp	r3, #4
 800545c:	d00e      	beq.n	800547c <UART_SetConfig+0x158>
 800545e:	e01b      	b.n	8005498 <UART_SetConfig+0x174>
 8005460:	231b      	movs	r3, #27
 8005462:	2220      	movs	r2, #32
 8005464:	189b      	adds	r3, r3, r2
 8005466:	19db      	adds	r3, r3, r7
 8005468:	2200      	movs	r2, #0
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	e07d      	b.n	800556a <UART_SetConfig+0x246>
 800546e:	231b      	movs	r3, #27
 8005470:	2220      	movs	r2, #32
 8005472:	189b      	adds	r3, r3, r2
 8005474:	19db      	adds	r3, r3, r7
 8005476:	2202      	movs	r2, #2
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	e076      	b.n	800556a <UART_SetConfig+0x246>
 800547c:	231b      	movs	r3, #27
 800547e:	2220      	movs	r2, #32
 8005480:	189b      	adds	r3, r3, r2
 8005482:	19db      	adds	r3, r3, r7
 8005484:	2204      	movs	r2, #4
 8005486:	701a      	strb	r2, [r3, #0]
 8005488:	e06f      	b.n	800556a <UART_SetConfig+0x246>
 800548a:	231b      	movs	r3, #27
 800548c:	2220      	movs	r2, #32
 800548e:	189b      	adds	r3, r3, r2
 8005490:	19db      	adds	r3, r3, r7
 8005492:	2208      	movs	r2, #8
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	e068      	b.n	800556a <UART_SetConfig+0x246>
 8005498:	231b      	movs	r3, #27
 800549a:	2220      	movs	r2, #32
 800549c:	189b      	adds	r3, r3, r2
 800549e:	19db      	adds	r3, r3, r7
 80054a0:	2210      	movs	r2, #16
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	e061      	b.n	800556a <UART_SetConfig+0x246>
 80054a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a61      	ldr	r2, [pc, #388]	@ (8005630 <UART_SetConfig+0x30c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d106      	bne.n	80054be <UART_SetConfig+0x19a>
 80054b0:	231b      	movs	r3, #27
 80054b2:	2220      	movs	r2, #32
 80054b4:	189b      	adds	r3, r3, r2
 80054b6:	19db      	adds	r3, r3, r7
 80054b8:	2200      	movs	r2, #0
 80054ba:	701a      	strb	r2, [r3, #0]
 80054bc:	e055      	b.n	800556a <UART_SetConfig+0x246>
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a5c      	ldr	r2, [pc, #368]	@ (8005634 <UART_SetConfig+0x310>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d106      	bne.n	80054d6 <UART_SetConfig+0x1b2>
 80054c8:	231b      	movs	r3, #27
 80054ca:	2220      	movs	r2, #32
 80054cc:	189b      	adds	r3, r3, r2
 80054ce:	19db      	adds	r3, r3, r7
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
 80054d4:	e049      	b.n	800556a <UART_SetConfig+0x246>
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a50      	ldr	r2, [pc, #320]	@ (800561c <UART_SetConfig+0x2f8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d13e      	bne.n	800555e <UART_SetConfig+0x23a>
 80054e0:	4b51      	ldr	r3, [pc, #324]	@ (8005628 <UART_SetConfig+0x304>)
 80054e2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054e4:	23c0      	movs	r3, #192	@ 0xc0
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	4013      	ands	r3, r2
 80054ea:	22c0      	movs	r2, #192	@ 0xc0
 80054ec:	0112      	lsls	r2, r2, #4
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d027      	beq.n	8005542 <UART_SetConfig+0x21e>
 80054f2:	22c0      	movs	r2, #192	@ 0xc0
 80054f4:	0112      	lsls	r2, r2, #4
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d82a      	bhi.n	8005550 <UART_SetConfig+0x22c>
 80054fa:	2280      	movs	r2, #128	@ 0x80
 80054fc:	0112      	lsls	r2, r2, #4
 80054fe:	4293      	cmp	r3, r2
 8005500:	d011      	beq.n	8005526 <UART_SetConfig+0x202>
 8005502:	2280      	movs	r2, #128	@ 0x80
 8005504:	0112      	lsls	r2, r2, #4
 8005506:	4293      	cmp	r3, r2
 8005508:	d822      	bhi.n	8005550 <UART_SetConfig+0x22c>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d004      	beq.n	8005518 <UART_SetConfig+0x1f4>
 800550e:	2280      	movs	r2, #128	@ 0x80
 8005510:	00d2      	lsls	r2, r2, #3
 8005512:	4293      	cmp	r3, r2
 8005514:	d00e      	beq.n	8005534 <UART_SetConfig+0x210>
 8005516:	e01b      	b.n	8005550 <UART_SetConfig+0x22c>
 8005518:	231b      	movs	r3, #27
 800551a:	2220      	movs	r2, #32
 800551c:	189b      	adds	r3, r3, r2
 800551e:	19db      	adds	r3, r3, r7
 8005520:	2200      	movs	r2, #0
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	e021      	b.n	800556a <UART_SetConfig+0x246>
 8005526:	231b      	movs	r3, #27
 8005528:	2220      	movs	r2, #32
 800552a:	189b      	adds	r3, r3, r2
 800552c:	19db      	adds	r3, r3, r7
 800552e:	2202      	movs	r2, #2
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	e01a      	b.n	800556a <UART_SetConfig+0x246>
 8005534:	231b      	movs	r3, #27
 8005536:	2220      	movs	r2, #32
 8005538:	189b      	adds	r3, r3, r2
 800553a:	19db      	adds	r3, r3, r7
 800553c:	2204      	movs	r2, #4
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	e013      	b.n	800556a <UART_SetConfig+0x246>
 8005542:	231b      	movs	r3, #27
 8005544:	2220      	movs	r2, #32
 8005546:	189b      	adds	r3, r3, r2
 8005548:	19db      	adds	r3, r3, r7
 800554a:	2208      	movs	r2, #8
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	e00c      	b.n	800556a <UART_SetConfig+0x246>
 8005550:	231b      	movs	r3, #27
 8005552:	2220      	movs	r2, #32
 8005554:	189b      	adds	r3, r3, r2
 8005556:	19db      	adds	r3, r3, r7
 8005558:	2210      	movs	r2, #16
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	e005      	b.n	800556a <UART_SetConfig+0x246>
 800555e:	231b      	movs	r3, #27
 8005560:	2220      	movs	r2, #32
 8005562:	189b      	adds	r3, r3, r2
 8005564:	19db      	adds	r3, r3, r7
 8005566:	2210      	movs	r2, #16
 8005568:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800556a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2b      	ldr	r2, [pc, #172]	@ (800561c <UART_SetConfig+0x2f8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d000      	beq.n	8005576 <UART_SetConfig+0x252>
 8005574:	e0a9      	b.n	80056ca <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005576:	231b      	movs	r3, #27
 8005578:	2220      	movs	r2, #32
 800557a:	189b      	adds	r3, r3, r2
 800557c:	19db      	adds	r3, r3, r7
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b08      	cmp	r3, #8
 8005582:	d015      	beq.n	80055b0 <UART_SetConfig+0x28c>
 8005584:	dc18      	bgt.n	80055b8 <UART_SetConfig+0x294>
 8005586:	2b04      	cmp	r3, #4
 8005588:	d00d      	beq.n	80055a6 <UART_SetConfig+0x282>
 800558a:	dc15      	bgt.n	80055b8 <UART_SetConfig+0x294>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <UART_SetConfig+0x272>
 8005590:	2b02      	cmp	r3, #2
 8005592:	d005      	beq.n	80055a0 <UART_SetConfig+0x27c>
 8005594:	e010      	b.n	80055b8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005596:	f7ff fa1f 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 800559a:	0003      	movs	r3, r0
 800559c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800559e:	e014      	b.n	80055ca <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055a0:	4b25      	ldr	r3, [pc, #148]	@ (8005638 <UART_SetConfig+0x314>)
 80055a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055a4:	e011      	b.n	80055ca <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055a6:	f7ff f98b 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 80055aa:	0003      	movs	r3, r0
 80055ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055ae:	e00c      	b.n	80055ca <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055b0:	2380      	movs	r3, #128	@ 0x80
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055b6:	e008      	b.n	80055ca <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80055bc:	231a      	movs	r3, #26
 80055be:	2220      	movs	r2, #32
 80055c0:	189b      	adds	r3, r3, r2
 80055c2:	19db      	adds	r3, r3, r7
 80055c4:	2201      	movs	r2, #1
 80055c6:	701a      	strb	r2, [r3, #0]
        break;
 80055c8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d100      	bne.n	80055d2 <UART_SetConfig+0x2ae>
 80055d0:	e14b      	b.n	800586a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055d6:	4b19      	ldr	r3, [pc, #100]	@ (800563c <UART_SetConfig+0x318>)
 80055d8:	0052      	lsls	r2, r2, #1
 80055da:	5ad3      	ldrh	r3, [r2, r3]
 80055dc:	0019      	movs	r1, r3
 80055de:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80055e0:	f7fa fd90 	bl	8000104 <__udivsi3>
 80055e4:	0003      	movs	r3, r0
 80055e6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	0013      	movs	r3, r2
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	189b      	adds	r3, r3, r2
 80055f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d305      	bcc.n	8005604 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005600:	429a      	cmp	r2, r3
 8005602:	d91d      	bls.n	8005640 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005604:	231a      	movs	r3, #26
 8005606:	2220      	movs	r2, #32
 8005608:	189b      	adds	r3, r3, r2
 800560a:	19db      	adds	r3, r3, r7
 800560c:	2201      	movs	r2, #1
 800560e:	701a      	strb	r2, [r3, #0]
 8005610:	e12b      	b.n	800586a <UART_SetConfig+0x546>
 8005612:	46c0      	nop			@ (mov r8, r8)
 8005614:	cfff69f3 	.word	0xcfff69f3
 8005618:	ffffcfff 	.word	0xffffcfff
 800561c:	40008000 	.word	0x40008000
 8005620:	11fff4ff 	.word	0x11fff4ff
 8005624:	40013800 	.word	0x40013800
 8005628:	40021000 	.word	0x40021000
 800562c:	40004400 	.word	0x40004400
 8005630:	40004800 	.word	0x40004800
 8005634:	40004c00 	.word	0x40004c00
 8005638:	00f42400 	.word	0x00f42400
 800563c:	080063ac 	.word	0x080063ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	2300      	movs	r3, #0
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800564c:	4b92      	ldr	r3, [pc, #584]	@ (8005898 <UART_SetConfig+0x574>)
 800564e:	0052      	lsls	r2, r2, #1
 8005650:	5ad3      	ldrh	r3, [r2, r3]
 8005652:	613b      	str	r3, [r7, #16]
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	69b8      	ldr	r0, [r7, #24]
 800565e:	69f9      	ldr	r1, [r7, #28]
 8005660:	f7fa ff00 	bl	8000464 <__aeabi_uldivmod>
 8005664:	0002      	movs	r2, r0
 8005666:	000b      	movs	r3, r1
 8005668:	0e11      	lsrs	r1, r2, #24
 800566a:	021d      	lsls	r5, r3, #8
 800566c:	430d      	orrs	r5, r1
 800566e:	0214      	lsls	r4, r2, #8
 8005670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	085b      	lsrs	r3, r3, #1
 8005676:	60bb      	str	r3, [r7, #8]
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	68b8      	ldr	r0, [r7, #8]
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	1900      	adds	r0, r0, r4
 8005682:	4169      	adcs	r1, r5
 8005684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	603b      	str	r3, [r7, #0]
 800568a:	2300      	movs	r3, #0
 800568c:	607b      	str	r3, [r7, #4]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f7fa fee7 	bl	8000464 <__aeabi_uldivmod>
 8005696:	0002      	movs	r2, r0
 8005698:	000b      	movs	r3, r1
 800569a:	0013      	movs	r3, r2
 800569c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800569e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056a0:	23c0      	movs	r3, #192	@ 0xc0
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d309      	bcc.n	80056bc <UART_SetConfig+0x398>
 80056a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056aa:	2380      	movs	r3, #128	@ 0x80
 80056ac:	035b      	lsls	r3, r3, #13
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d204      	bcs.n	80056bc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056b8:	60da      	str	r2, [r3, #12]
 80056ba:	e0d6      	b.n	800586a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80056bc:	231a      	movs	r3, #26
 80056be:	2220      	movs	r2, #32
 80056c0:	189b      	adds	r3, r3, r2
 80056c2:	19db      	adds	r3, r3, r7
 80056c4:	2201      	movs	r2, #1
 80056c6:	701a      	strb	r2, [r3, #0]
 80056c8:	e0cf      	b.n	800586a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	69da      	ldr	r2, [r3, #28]
 80056ce:	2380      	movs	r3, #128	@ 0x80
 80056d0:	021b      	lsls	r3, r3, #8
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d000      	beq.n	80056d8 <UART_SetConfig+0x3b4>
 80056d6:	e070      	b.n	80057ba <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80056d8:	231b      	movs	r3, #27
 80056da:	2220      	movs	r2, #32
 80056dc:	189b      	adds	r3, r3, r2
 80056de:	19db      	adds	r3, r3, r7
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d015      	beq.n	8005712 <UART_SetConfig+0x3ee>
 80056e6:	dc18      	bgt.n	800571a <UART_SetConfig+0x3f6>
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d00d      	beq.n	8005708 <UART_SetConfig+0x3e4>
 80056ec:	dc15      	bgt.n	800571a <UART_SetConfig+0x3f6>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <UART_SetConfig+0x3d4>
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d005      	beq.n	8005702 <UART_SetConfig+0x3de>
 80056f6:	e010      	b.n	800571a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f8:	f7ff f96e 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 80056fc:	0003      	movs	r3, r0
 80056fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005700:	e014      	b.n	800572c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005702:	4b66      	ldr	r3, [pc, #408]	@ (800589c <UART_SetConfig+0x578>)
 8005704:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005706:	e011      	b.n	800572c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005708:	f7ff f8da 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 800570c:	0003      	movs	r3, r0
 800570e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005710:	e00c      	b.n	800572c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005712:	2380      	movs	r3, #128	@ 0x80
 8005714:	021b      	lsls	r3, r3, #8
 8005716:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005718:	e008      	b.n	800572c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800571e:	231a      	movs	r3, #26
 8005720:	2220      	movs	r2, #32
 8005722:	189b      	adds	r3, r3, r2
 8005724:	19db      	adds	r3, r3, r7
 8005726:	2201      	movs	r2, #1
 8005728:	701a      	strb	r2, [r3, #0]
        break;
 800572a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800572c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572e:	2b00      	cmp	r3, #0
 8005730:	d100      	bne.n	8005734 <UART_SetConfig+0x410>
 8005732:	e09a      	b.n	800586a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005738:	4b57      	ldr	r3, [pc, #348]	@ (8005898 <UART_SetConfig+0x574>)
 800573a:	0052      	lsls	r2, r2, #1
 800573c:	5ad3      	ldrh	r3, [r2, r3]
 800573e:	0019      	movs	r1, r3
 8005740:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005742:	f7fa fcdf 	bl	8000104 <__udivsi3>
 8005746:	0003      	movs	r3, r0
 8005748:	005a      	lsls	r2, r3, #1
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	085b      	lsrs	r3, r3, #1
 8005750:	18d2      	adds	r2, r2, r3
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	0019      	movs	r1, r3
 8005758:	0010      	movs	r0, r2
 800575a:	f7fa fcd3 	bl	8000104 <__udivsi3>
 800575e:	0003      	movs	r3, r0
 8005760:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005764:	2b0f      	cmp	r3, #15
 8005766:	d921      	bls.n	80057ac <UART_SetConfig+0x488>
 8005768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800576a:	2380      	movs	r3, #128	@ 0x80
 800576c:	025b      	lsls	r3, r3, #9
 800576e:	429a      	cmp	r2, r3
 8005770:	d21c      	bcs.n	80057ac <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005774:	b29a      	uxth	r2, r3
 8005776:	200e      	movs	r0, #14
 8005778:	2420      	movs	r4, #32
 800577a:	1903      	adds	r3, r0, r4
 800577c:	19db      	adds	r3, r3, r7
 800577e:	210f      	movs	r1, #15
 8005780:	438a      	bics	r2, r1
 8005782:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005786:	085b      	lsrs	r3, r3, #1
 8005788:	b29b      	uxth	r3, r3
 800578a:	2207      	movs	r2, #7
 800578c:	4013      	ands	r3, r2
 800578e:	b299      	uxth	r1, r3
 8005790:	1903      	adds	r3, r0, r4
 8005792:	19db      	adds	r3, r3, r7
 8005794:	1902      	adds	r2, r0, r4
 8005796:	19d2      	adds	r2, r2, r7
 8005798:	8812      	ldrh	r2, [r2, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	1902      	adds	r2, r0, r4
 80057a4:	19d2      	adds	r2, r2, r7
 80057a6:	8812      	ldrh	r2, [r2, #0]
 80057a8:	60da      	str	r2, [r3, #12]
 80057aa:	e05e      	b.n	800586a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80057ac:	231a      	movs	r3, #26
 80057ae:	2220      	movs	r2, #32
 80057b0:	189b      	adds	r3, r3, r2
 80057b2:	19db      	adds	r3, r3, r7
 80057b4:	2201      	movs	r2, #1
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	e057      	b.n	800586a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057ba:	231b      	movs	r3, #27
 80057bc:	2220      	movs	r2, #32
 80057be:	189b      	adds	r3, r3, r2
 80057c0:	19db      	adds	r3, r3, r7
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d015      	beq.n	80057f4 <UART_SetConfig+0x4d0>
 80057c8:	dc18      	bgt.n	80057fc <UART_SetConfig+0x4d8>
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d00d      	beq.n	80057ea <UART_SetConfig+0x4c6>
 80057ce:	dc15      	bgt.n	80057fc <UART_SetConfig+0x4d8>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <UART_SetConfig+0x4b6>
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d005      	beq.n	80057e4 <UART_SetConfig+0x4c0>
 80057d8:	e010      	b.n	80057fc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057da:	f7ff f8fd 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 80057de:	0003      	movs	r3, r0
 80057e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057e2:	e014      	b.n	800580e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057e4:	4b2d      	ldr	r3, [pc, #180]	@ (800589c <UART_SetConfig+0x578>)
 80057e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057e8:	e011      	b.n	800580e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ea:	f7ff f869 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 80057ee:	0003      	movs	r3, r0
 80057f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057f2:	e00c      	b.n	800580e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057f4:	2380      	movs	r3, #128	@ 0x80
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057fa:	e008      	b.n	800580e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005800:	231a      	movs	r3, #26
 8005802:	2220      	movs	r2, #32
 8005804:	189b      	adds	r3, r3, r2
 8005806:	19db      	adds	r3, r3, r7
 8005808:	2201      	movs	r2, #1
 800580a:	701a      	strb	r2, [r3, #0]
        break;
 800580c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800580e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005810:	2b00      	cmp	r3, #0
 8005812:	d02a      	beq.n	800586a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005816:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005818:	4b1f      	ldr	r3, [pc, #124]	@ (8005898 <UART_SetConfig+0x574>)
 800581a:	0052      	lsls	r2, r2, #1
 800581c:	5ad3      	ldrh	r3, [r2, r3]
 800581e:	0019      	movs	r1, r3
 8005820:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005822:	f7fa fc6f 	bl	8000104 <__udivsi3>
 8005826:	0003      	movs	r3, r0
 8005828:	001a      	movs	r2, r3
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	085b      	lsrs	r3, r3, #1
 8005830:	18d2      	adds	r2, r2, r3
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	0019      	movs	r1, r3
 8005838:	0010      	movs	r0, r2
 800583a:	f7fa fc63 	bl	8000104 <__udivsi3>
 800583e:	0003      	movs	r3, r0
 8005840:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005844:	2b0f      	cmp	r3, #15
 8005846:	d90a      	bls.n	800585e <UART_SetConfig+0x53a>
 8005848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800584a:	2380      	movs	r3, #128	@ 0x80
 800584c:	025b      	lsls	r3, r3, #9
 800584e:	429a      	cmp	r2, r3
 8005850:	d205      	bcs.n	800585e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005854:	b29a      	uxth	r2, r3
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60da      	str	r2, [r3, #12]
 800585c:	e005      	b.n	800586a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800585e:	231a      	movs	r3, #26
 8005860:	2220      	movs	r2, #32
 8005862:	189b      	adds	r3, r3, r2
 8005864:	19db      	adds	r3, r3, r7
 8005866:	2201      	movs	r2, #1
 8005868:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	226a      	movs	r2, #106	@ 0x6a
 800586e:	2101      	movs	r1, #1
 8005870:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	2268      	movs	r2, #104	@ 0x68
 8005876:	2101      	movs	r1, #1
 8005878:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	2200      	movs	r2, #0
 800587e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005882:	2200      	movs	r2, #0
 8005884:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005886:	231a      	movs	r3, #26
 8005888:	2220      	movs	r2, #32
 800588a:	189b      	adds	r3, r3, r2
 800588c:	19db      	adds	r3, r3, r7
 800588e:	781b      	ldrb	r3, [r3, #0]
}
 8005890:	0018      	movs	r0, r3
 8005892:	46bd      	mov	sp, r7
 8005894:	b010      	add	sp, #64	@ 0x40
 8005896:	bdb0      	pop	{r4, r5, r7, pc}
 8005898:	080063ac 	.word	0x080063ac
 800589c:	00f42400 	.word	0x00f42400

080058a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ac:	2208      	movs	r2, #8
 80058ae:	4013      	ands	r3, r2
 80058b0:	d00b      	beq.n	80058ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	4a4a      	ldr	r2, [pc, #296]	@ (80059e4 <UART_AdvFeatureConfig+0x144>)
 80058ba:	4013      	ands	r3, r2
 80058bc:	0019      	movs	r1, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ce:	2201      	movs	r2, #1
 80058d0:	4013      	ands	r3, r2
 80058d2:	d00b      	beq.n	80058ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	4a43      	ldr	r2, [pc, #268]	@ (80059e8 <UART_AdvFeatureConfig+0x148>)
 80058dc:	4013      	ands	r3, r2
 80058de:	0019      	movs	r1, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f0:	2202      	movs	r2, #2
 80058f2:	4013      	ands	r3, r2
 80058f4:	d00b      	beq.n	800590e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4a3b      	ldr	r2, [pc, #236]	@ (80059ec <UART_AdvFeatureConfig+0x14c>)
 80058fe:	4013      	ands	r3, r2
 8005900:	0019      	movs	r1, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005912:	2204      	movs	r2, #4
 8005914:	4013      	ands	r3, r2
 8005916:	d00b      	beq.n	8005930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	4a34      	ldr	r2, [pc, #208]	@ (80059f0 <UART_AdvFeatureConfig+0x150>)
 8005920:	4013      	ands	r3, r2
 8005922:	0019      	movs	r1, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005934:	2210      	movs	r2, #16
 8005936:	4013      	ands	r3, r2
 8005938:	d00b      	beq.n	8005952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	4a2c      	ldr	r2, [pc, #176]	@ (80059f4 <UART_AdvFeatureConfig+0x154>)
 8005942:	4013      	ands	r3, r2
 8005944:	0019      	movs	r1, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005956:	2220      	movs	r2, #32
 8005958:	4013      	ands	r3, r2
 800595a:	d00b      	beq.n	8005974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	4a25      	ldr	r2, [pc, #148]	@ (80059f8 <UART_AdvFeatureConfig+0x158>)
 8005964:	4013      	ands	r3, r2
 8005966:	0019      	movs	r1, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005978:	2240      	movs	r2, #64	@ 0x40
 800597a:	4013      	ands	r3, r2
 800597c:	d01d      	beq.n	80059ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	4a1d      	ldr	r2, [pc, #116]	@ (80059fc <UART_AdvFeatureConfig+0x15c>)
 8005986:	4013      	ands	r3, r2
 8005988:	0019      	movs	r1, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800599a:	2380      	movs	r3, #128	@ 0x80
 800599c:	035b      	lsls	r3, r3, #13
 800599e:	429a      	cmp	r2, r3
 80059a0:	d10b      	bne.n	80059ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	4a15      	ldr	r2, [pc, #84]	@ (8005a00 <UART_AdvFeatureConfig+0x160>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	0019      	movs	r1, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059be:	2280      	movs	r2, #128	@ 0x80
 80059c0:	4013      	ands	r3, r2
 80059c2:	d00b      	beq.n	80059dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005a04 <UART_AdvFeatureConfig+0x164>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	0019      	movs	r1, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	605a      	str	r2, [r3, #4]
  }
}
 80059dc:	46c0      	nop			@ (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	b002      	add	sp, #8
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	ffff7fff 	.word	0xffff7fff
 80059e8:	fffdffff 	.word	0xfffdffff
 80059ec:	fffeffff 	.word	0xfffeffff
 80059f0:	fffbffff 	.word	0xfffbffff
 80059f4:	ffffefff 	.word	0xffffefff
 80059f8:	ffffdfff 	.word	0xffffdfff
 80059fc:	ffefffff 	.word	0xffefffff
 8005a00:	ff9fffff 	.word	0xff9fffff
 8005a04:	fff7ffff 	.word	0xfff7ffff

08005a08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b092      	sub	sp, #72	@ 0x48
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2290      	movs	r2, #144	@ 0x90
 8005a14:	2100      	movs	r1, #0
 8005a16:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a18:	f7fc fbfa 	bl	8002210 <HAL_GetTick>
 8005a1c:	0003      	movs	r3, r0
 8005a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2208      	movs	r2, #8
 8005a28:	4013      	ands	r3, r2
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d12d      	bne.n	8005a8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a30:	2280      	movs	r2, #128	@ 0x80
 8005a32:	0391      	lsls	r1, r2, #14
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	4a47      	ldr	r2, [pc, #284]	@ (8005b54 <UART_CheckIdleState+0x14c>)
 8005a38:	9200      	str	r2, [sp, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f000 f88e 	bl	8005b5c <UART_WaitOnFlagUntilTimeout>
 8005a40:	1e03      	subs	r3, r0, #0
 8005a42:	d022      	beq.n	8005a8a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a44:	f3ef 8310 	mrs	r3, PRIMASK
 8005a48:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a4e:	2301      	movs	r3, #1
 8005a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a54:	f383 8810 	msr	PRIMASK, r3
}
 8005a58:	46c0      	nop			@ (mov r8, r8)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2180      	movs	r1, #128	@ 0x80
 8005a66:	438a      	bics	r2, r1
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a70:	f383 8810 	msr	PRIMASK, r3
}
 8005a74:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2288      	movs	r2, #136	@ 0x88
 8005a7a:	2120      	movs	r1, #32
 8005a7c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2284      	movs	r2, #132	@ 0x84
 8005a82:	2100      	movs	r1, #0
 8005a84:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e060      	b.n	8005b4c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2204      	movs	r2, #4
 8005a92:	4013      	ands	r3, r2
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d146      	bne.n	8005b26 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a9a:	2280      	movs	r2, #128	@ 0x80
 8005a9c:	03d1      	lsls	r1, r2, #15
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8005b54 <UART_CheckIdleState+0x14c>)
 8005aa2:	9200      	str	r2, [sp, #0]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f000 f859 	bl	8005b5c <UART_WaitOnFlagUntilTimeout>
 8005aaa:	1e03      	subs	r3, r0, #0
 8005aac:	d03b      	beq.n	8005b26 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aae:	f3ef 8310 	mrs	r3, PRIMASK
 8005ab2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ab8:	2301      	movs	r3, #1
 8005aba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f383 8810 	msr	PRIMASK, r3
}
 8005ac2:	46c0      	nop			@ (mov r8, r8)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4922      	ldr	r1, [pc, #136]	@ (8005b58 <UART_CheckIdleState+0x150>)
 8005ad0:	400a      	ands	r2, r1
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f383 8810 	msr	PRIMASK, r3
}
 8005ade:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ae4:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ae6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aea:	2301      	movs	r3, #1
 8005aec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f383 8810 	msr	PRIMASK, r3
}
 8005af4:	46c0      	nop			@ (mov r8, r8)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2101      	movs	r1, #1
 8005b02:	438a      	bics	r2, r1
 8005b04:	609a      	str	r2, [r3, #8]
 8005b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	f383 8810 	msr	PRIMASK, r3
}
 8005b10:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	228c      	movs	r2, #140	@ 0x8c
 8005b16:	2120      	movs	r1, #32
 8005b18:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2284      	movs	r2, #132	@ 0x84
 8005b1e:	2100      	movs	r1, #0
 8005b20:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e012      	b.n	8005b4c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2288      	movs	r2, #136	@ 0x88
 8005b2a:	2120      	movs	r1, #32
 8005b2c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	228c      	movs	r2, #140	@ 0x8c
 8005b32:	2120      	movs	r1, #32
 8005b34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2284      	movs	r2, #132	@ 0x84
 8005b46:	2100      	movs	r1, #0
 8005b48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	b010      	add	sp, #64	@ 0x40
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	01ffffff 	.word	0x01ffffff
 8005b58:	fffffedf 	.word	0xfffffedf

08005b5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	1dfb      	adds	r3, r7, #7
 8005b6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b6c:	e051      	b.n	8005c12 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	3301      	adds	r3, #1
 8005b72:	d04e      	beq.n	8005c12 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b74:	f7fc fb4c 	bl	8002210 <HAL_GetTick>
 8005b78:	0002      	movs	r2, r0
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d302      	bcc.n	8005b8a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e051      	b.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2204      	movs	r2, #4
 8005b96:	4013      	ands	r3, r2
 8005b98:	d03b      	beq.n	8005c12 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b80      	cmp	r3, #128	@ 0x80
 8005b9e:	d038      	beq.n	8005c12 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b40      	cmp	r3, #64	@ 0x40
 8005ba4:	d035      	beq.n	8005c12 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	2208      	movs	r2, #8
 8005bae:	4013      	ands	r3, r2
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d111      	bne.n	8005bd8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2208      	movs	r2, #8
 8005bba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f000 f83c 	bl	8005c3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2290      	movs	r2, #144	@ 0x90
 8005bc8:	2108      	movs	r1, #8
 8005bca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2284      	movs	r2, #132	@ 0x84
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e02c      	b.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	69da      	ldr	r2, [r3, #28]
 8005bde:	2380      	movs	r3, #128	@ 0x80
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	401a      	ands	r2, r3
 8005be4:	2380      	movs	r3, #128	@ 0x80
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d112      	bne.n	8005c12 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2280      	movs	r2, #128	@ 0x80
 8005bf2:	0112      	lsls	r2, r2, #4
 8005bf4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f000 f81f 	bl	8005c3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2290      	movs	r2, #144	@ 0x90
 8005c02:	2120      	movs	r1, #32
 8005c04:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2284      	movs	r2, #132	@ 0x84
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e00f      	b.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	425a      	negs	r2, r3
 8005c22:	4153      	adcs	r3, r2
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	001a      	movs	r2, r3
 8005c28:	1dfb      	adds	r3, r7, #7
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d09e      	beq.n	8005b6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	0018      	movs	r0, r3
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b004      	add	sp, #16
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08e      	sub	sp, #56	@ 0x38
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c44:	f3ef 8310 	mrs	r3, PRIMASK
 8005c48:	617b      	str	r3, [r7, #20]
  return(result);
 8005c4a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c4e:	2301      	movs	r3, #1
 8005c50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f383 8810 	msr	PRIMASK, r3
}
 8005c58:	46c0      	nop			@ (mov r8, r8)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4926      	ldr	r1, [pc, #152]	@ (8005d00 <UART_EndRxTransfer+0xc4>)
 8005c66:	400a      	ands	r2, r1
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	f383 8810 	msr	PRIMASK, r3
}
 8005c74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c76:	f3ef 8310 	mrs	r3, PRIMASK
 8005c7a:	623b      	str	r3, [r7, #32]
  return(result);
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c80:	2301      	movs	r3, #1
 8005c82:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	f383 8810 	msr	PRIMASK, r3
}
 8005c8a:	46c0      	nop			@ (mov r8, r8)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	491b      	ldr	r1, [pc, #108]	@ (8005d04 <UART_EndRxTransfer+0xc8>)
 8005c98:	400a      	ands	r2, r1
 8005c9a:	609a      	str	r2, [r3, #8]
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca2:	f383 8810 	msr	PRIMASK, r3
}
 8005ca6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d118      	bne.n	8005ce2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cb6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cba:	2301      	movs	r3, #1
 8005cbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f383 8810 	msr	PRIMASK, r3
}
 8005cc4:	46c0      	nop			@ (mov r8, r8)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2110      	movs	r1, #16
 8005cd2:	438a      	bics	r2, r1
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f383 8810 	msr	PRIMASK, r3
}
 8005ce0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	228c      	movs	r2, #140	@ 0x8c
 8005ce6:	2120      	movs	r1, #32
 8005ce8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005cf6:	46c0      	nop			@ (mov r8, r8)
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	b00e      	add	sp, #56	@ 0x38
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	46c0      	nop			@ (mov r8, r8)
 8005d00:	fffffedf 	.word	0xfffffedf
 8005d04:	effffffe 	.word	0xeffffffe

08005d08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2284      	movs	r2, #132	@ 0x84
 8005d14:	5c9b      	ldrb	r3, [r3, r2]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_UARTEx_DisableFifoMode+0x16>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e027      	b.n	8005d6e <HAL_UARTEx_DisableFifoMode+0x66>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2284      	movs	r2, #132	@ 0x84
 8005d22:	2101      	movs	r1, #1
 8005d24:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2288      	movs	r2, #136	@ 0x88
 8005d2a:	2124      	movs	r1, #36	@ 0x24
 8005d2c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2101      	movs	r1, #1
 8005d42:	438a      	bics	r2, r1
 8005d44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4a0b      	ldr	r2, [pc, #44]	@ (8005d78 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2288      	movs	r2, #136	@ 0x88
 8005d60:	2120      	movs	r1, #32
 8005d62:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2284      	movs	r2, #132	@ 0x84
 8005d68:	2100      	movs	r1, #0
 8005d6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	0018      	movs	r0, r3
 8005d70:	46bd      	mov	sp, r7
 8005d72:	b004      	add	sp, #16
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	46c0      	nop			@ (mov r8, r8)
 8005d78:	dfffffff 	.word	0xdfffffff

08005d7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2284      	movs	r2, #132	@ 0x84
 8005d8a:	5c9b      	ldrb	r3, [r3, r2]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e02e      	b.n	8005df2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2284      	movs	r2, #132	@ 0x84
 8005d98:	2101      	movs	r1, #1
 8005d9a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2288      	movs	r2, #136	@ 0x88
 8005da0:	2124      	movs	r1, #36	@ 0x24
 8005da2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2101      	movs	r1, #1
 8005db8:	438a      	bics	r2, r1
 8005dba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	08d9      	lsrs	r1, r3, #3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f000 f854 	bl	8005e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2288      	movs	r2, #136	@ 0x88
 8005de4:	2120      	movs	r1, #32
 8005de6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2284      	movs	r2, #132	@ 0x84
 8005dec:	2100      	movs	r1, #0
 8005dee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	0018      	movs	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	b004      	add	sp, #16
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2284      	movs	r2, #132	@ 0x84
 8005e0a:	5c9b      	ldrb	r3, [r3, r2]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e02f      	b.n	8005e74 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2284      	movs	r2, #132	@ 0x84
 8005e18:	2101      	movs	r1, #1
 8005e1a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2288      	movs	r2, #136	@ 0x88
 8005e20:	2124      	movs	r1, #36	@ 0x24
 8005e22:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2101      	movs	r1, #1
 8005e38:	438a      	bics	r2, r1
 8005e3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	4a0e      	ldr	r2, [pc, #56]	@ (8005e7c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	0019      	movs	r1, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	0018      	movs	r0, r3
 8005e56:	f000 f813 	bl	8005e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2288      	movs	r2, #136	@ 0x88
 8005e66:	2120      	movs	r1, #32
 8005e68:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2284      	movs	r2, #132	@ 0x84
 8005e6e:	2100      	movs	r1, #0
 8005e70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	0018      	movs	r0, r3
 8005e76:	46bd      	mov	sp, r7
 8005e78:	b004      	add	sp, #16
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	f1ffffff 	.word	0xf1ffffff

08005e80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d108      	bne.n	8005ea2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	226a      	movs	r2, #106	@ 0x6a
 8005e94:	2101      	movs	r1, #1
 8005e96:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2268      	movs	r2, #104	@ 0x68
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ea0:	e043      	b.n	8005f2a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ea2:	260f      	movs	r6, #15
 8005ea4:	19bb      	adds	r3, r7, r6
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005eaa:	200e      	movs	r0, #14
 8005eac:	183b      	adds	r3, r7, r0
 8005eae:	2208      	movs	r2, #8
 8005eb0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	0e5b      	lsrs	r3, r3, #25
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	240d      	movs	r4, #13
 8005ebe:	193b      	adds	r3, r7, r4
 8005ec0:	2107      	movs	r1, #7
 8005ec2:	400a      	ands	r2, r1
 8005ec4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	0f5b      	lsrs	r3, r3, #29
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	250c      	movs	r5, #12
 8005ed2:	197b      	adds	r3, r7, r5
 8005ed4:	2107      	movs	r1, #7
 8005ed6:	400a      	ands	r2, r1
 8005ed8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005eda:	183b      	adds	r3, r7, r0
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	197a      	adds	r2, r7, r5
 8005ee0:	7812      	ldrb	r2, [r2, #0]
 8005ee2:	4914      	ldr	r1, [pc, #80]	@ (8005f34 <UARTEx_SetNbDataToProcess+0xb4>)
 8005ee4:	5c8a      	ldrb	r2, [r1, r2]
 8005ee6:	435a      	muls	r2, r3
 8005ee8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005eea:	197b      	adds	r3, r7, r5
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	4a12      	ldr	r2, [pc, #72]	@ (8005f38 <UARTEx_SetNbDataToProcess+0xb8>)
 8005ef0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ef2:	0019      	movs	r1, r3
 8005ef4:	f7fa f990 	bl	8000218 <__divsi3>
 8005ef8:	0003      	movs	r3, r0
 8005efa:	b299      	uxth	r1, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	226a      	movs	r2, #106	@ 0x6a
 8005f00:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f02:	19bb      	adds	r3, r7, r6
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	193a      	adds	r2, r7, r4
 8005f08:	7812      	ldrb	r2, [r2, #0]
 8005f0a:	490a      	ldr	r1, [pc, #40]	@ (8005f34 <UARTEx_SetNbDataToProcess+0xb4>)
 8005f0c:	5c8a      	ldrb	r2, [r1, r2]
 8005f0e:	435a      	muls	r2, r3
 8005f10:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f12:	193b      	adds	r3, r7, r4
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	4a08      	ldr	r2, [pc, #32]	@ (8005f38 <UARTEx_SetNbDataToProcess+0xb8>)
 8005f18:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	f7fa f97c 	bl	8000218 <__divsi3>
 8005f20:	0003      	movs	r3, r0
 8005f22:	b299      	uxth	r1, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2268      	movs	r2, #104	@ 0x68
 8005f28:	5299      	strh	r1, [r3, r2]
}
 8005f2a:	46c0      	nop			@ (mov r8, r8)
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	b005      	add	sp, #20
 8005f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f32:	46c0      	nop			@ (mov r8, r8)
 8005f34:	080063c4 	.word	0x080063c4
 8005f38:	080063cc 	.word	0x080063cc

08005f3c <memset>:
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	1882      	adds	r2, r0, r2
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d100      	bne.n	8005f46 <memset+0xa>
 8005f44:	4770      	bx	lr
 8005f46:	7019      	strb	r1, [r3, #0]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	e7f9      	b.n	8005f40 <memset+0x4>

08005f4c <__libc_init_array>:
 8005f4c:	b570      	push	{r4, r5, r6, lr}
 8005f4e:	2600      	movs	r6, #0
 8005f50:	4c0c      	ldr	r4, [pc, #48]	@ (8005f84 <__libc_init_array+0x38>)
 8005f52:	4d0d      	ldr	r5, [pc, #52]	@ (8005f88 <__libc_init_array+0x3c>)
 8005f54:	1b64      	subs	r4, r4, r5
 8005f56:	10a4      	asrs	r4, r4, #2
 8005f58:	42a6      	cmp	r6, r4
 8005f5a:	d109      	bne.n	8005f70 <__libc_init_array+0x24>
 8005f5c:	2600      	movs	r6, #0
 8005f5e:	f000 f9ab 	bl	80062b8 <_init>
 8005f62:	4c0a      	ldr	r4, [pc, #40]	@ (8005f8c <__libc_init_array+0x40>)
 8005f64:	4d0a      	ldr	r5, [pc, #40]	@ (8005f90 <__libc_init_array+0x44>)
 8005f66:	1b64      	subs	r4, r4, r5
 8005f68:	10a4      	asrs	r4, r4, #2
 8005f6a:	42a6      	cmp	r6, r4
 8005f6c:	d105      	bne.n	8005f7a <__libc_init_array+0x2e>
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}
 8005f70:	00b3      	lsls	r3, r6, #2
 8005f72:	58eb      	ldr	r3, [r5, r3]
 8005f74:	4798      	blx	r3
 8005f76:	3601      	adds	r6, #1
 8005f78:	e7ee      	b.n	8005f58 <__libc_init_array+0xc>
 8005f7a:	00b3      	lsls	r3, r6, #2
 8005f7c:	58eb      	ldr	r3, [r5, r3]
 8005f7e:	4798      	blx	r3
 8005f80:	3601      	adds	r6, #1
 8005f82:	e7f2      	b.n	8005f6a <__libc_init_array+0x1e>
 8005f84:	08006414 	.word	0x08006414
 8005f88:	08006414 	.word	0x08006414
 8005f8c:	08006418 	.word	0x08006418
 8005f90:	08006414 	.word	0x08006414

08005f94 <atan2f>:
 8005f94:	b510      	push	{r4, lr}
 8005f96:	f000 f801 	bl	8005f9c <__ieee754_atan2f>
 8005f9a:	bd10      	pop	{r4, pc}

08005f9c <__ieee754_atan2f>:
 8005f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f9e:	25ff      	movs	r5, #255	@ 0xff
 8005fa0:	004a      	lsls	r2, r1, #1
 8005fa2:	9101      	str	r1, [sp, #4]
 8005fa4:	0852      	lsrs	r2, r2, #1
 8005fa6:	05ed      	lsls	r5, r5, #23
 8005fa8:	42aa      	cmp	r2, r5
 8005faa:	d804      	bhi.n	8005fb6 <__ieee754_atan2f+0x1a>
 8005fac:	0043      	lsls	r3, r0, #1
 8005fae:	0007      	movs	r7, r0
 8005fb0:	085b      	lsrs	r3, r3, #1
 8005fb2:	42ab      	cmp	r3, r5
 8005fb4:	d902      	bls.n	8005fbc <__ieee754_atan2f+0x20>
 8005fb6:	f7fa fb41 	bl	800063c <__aeabi_fadd>
 8005fba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005fbc:	24fe      	movs	r4, #254	@ 0xfe
 8005fbe:	05a4      	lsls	r4, r4, #22
 8005fc0:	42a1      	cmp	r1, r4
 8005fc2:	d102      	bne.n	8005fca <__ieee754_atan2f+0x2e>
 8005fc4:	f000 f864 	bl	8006090 <atanf>
 8005fc8:	e7f7      	b.n	8005fba <__ieee754_atan2f+0x1e>
 8005fca:	2602      	movs	r6, #2
 8005fcc:	178c      	asrs	r4, r1, #30
 8005fce:	4034      	ands	r4, r6
 8005fd0:	0fc6      	lsrs	r6, r0, #31
 8005fd2:	4334      	orrs	r4, r6
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d105      	bne.n	8005fe4 <__ieee754_atan2f+0x48>
 8005fd8:	2c02      	cmp	r4, #2
 8005fda:	d045      	beq.n	8006068 <__ieee754_atan2f+0xcc>
 8005fdc:	2c03      	cmp	r4, #3
 8005fde:	d1ec      	bne.n	8005fba <__ieee754_atan2f+0x1e>
 8005fe0:	4823      	ldr	r0, [pc, #140]	@ (8006070 <__ieee754_atan2f+0xd4>)
 8005fe2:	e7ea      	b.n	8005fba <__ieee754_atan2f+0x1e>
 8005fe4:	2a00      	cmp	r2, #0
 8005fe6:	d103      	bne.n	8005ff0 <__ieee754_atan2f+0x54>
 8005fe8:	2f00      	cmp	r7, #0
 8005fea:	db3f      	blt.n	800606c <__ieee754_atan2f+0xd0>
 8005fec:	4821      	ldr	r0, [pc, #132]	@ (8006074 <__ieee754_atan2f+0xd8>)
 8005fee:	e7e4      	b.n	8005fba <__ieee754_atan2f+0x1e>
 8005ff0:	42aa      	cmp	r2, r5
 8005ff2:	d10e      	bne.n	8006012 <__ieee754_atan2f+0x76>
 8005ff4:	3c01      	subs	r4, #1
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d104      	bne.n	8006004 <__ieee754_atan2f+0x68>
 8005ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8006078 <__ieee754_atan2f+0xdc>)
 8005ffc:	2c02      	cmp	r4, #2
 8005ffe:	d905      	bls.n	800600c <__ieee754_atan2f+0x70>
 8006000:	481e      	ldr	r0, [pc, #120]	@ (800607c <__ieee754_atan2f+0xe0>)
 8006002:	e7da      	b.n	8005fba <__ieee754_atan2f+0x1e>
 8006004:	2000      	movs	r0, #0
 8006006:	2c02      	cmp	r4, #2
 8006008:	d8d7      	bhi.n	8005fba <__ieee754_atan2f+0x1e>
 800600a:	4b1d      	ldr	r3, [pc, #116]	@ (8006080 <__ieee754_atan2f+0xe4>)
 800600c:	00a4      	lsls	r4, r4, #2
 800600e:	58e0      	ldr	r0, [r4, r3]
 8006010:	e7d3      	b.n	8005fba <__ieee754_atan2f+0x1e>
 8006012:	42ab      	cmp	r3, r5
 8006014:	d0e8      	beq.n	8005fe8 <__ieee754_atan2f+0x4c>
 8006016:	1a9b      	subs	r3, r3, r2
 8006018:	15db      	asrs	r3, r3, #23
 800601a:	2b3c      	cmp	r3, #60	@ 0x3c
 800601c:	dc14      	bgt.n	8006048 <__ieee754_atan2f+0xac>
 800601e:	2900      	cmp	r1, #0
 8006020:	da01      	bge.n	8006026 <__ieee754_atan2f+0x8a>
 8006022:	333c      	adds	r3, #60	@ 0x3c
 8006024:	db12      	blt.n	800604c <__ieee754_atan2f+0xb0>
 8006026:	f7fa fcfb 	bl	8000a20 <__aeabi_fdiv>
 800602a:	f000 f941 	bl	80062b0 <fabsf>
 800602e:	f000 f82f 	bl	8006090 <atanf>
 8006032:	2c01      	cmp	r4, #1
 8006034:	d00c      	beq.n	8006050 <__ieee754_atan2f+0xb4>
 8006036:	2c02      	cmp	r4, #2
 8006038:	d00e      	beq.n	8006058 <__ieee754_atan2f+0xbc>
 800603a:	2c00      	cmp	r4, #0
 800603c:	d0bd      	beq.n	8005fba <__ieee754_atan2f+0x1e>
 800603e:	4911      	ldr	r1, [pc, #68]	@ (8006084 <__ieee754_atan2f+0xe8>)
 8006040:	f7fa fafc 	bl	800063c <__aeabi_fadd>
 8006044:	4910      	ldr	r1, [pc, #64]	@ (8006088 <__ieee754_atan2f+0xec>)
 8006046:	e00c      	b.n	8006062 <__ieee754_atan2f+0xc6>
 8006048:	480a      	ldr	r0, [pc, #40]	@ (8006074 <__ieee754_atan2f+0xd8>)
 800604a:	e7f2      	b.n	8006032 <__ieee754_atan2f+0x96>
 800604c:	2000      	movs	r0, #0
 800604e:	e7f0      	b.n	8006032 <__ieee754_atan2f+0x96>
 8006050:	2380      	movs	r3, #128	@ 0x80
 8006052:	061b      	lsls	r3, r3, #24
 8006054:	18c0      	adds	r0, r0, r3
 8006056:	e7b0      	b.n	8005fba <__ieee754_atan2f+0x1e>
 8006058:	490a      	ldr	r1, [pc, #40]	@ (8006084 <__ieee754_atan2f+0xe8>)
 800605a:	f7fa faef 	bl	800063c <__aeabi_fadd>
 800605e:	1c01      	adds	r1, r0, #0
 8006060:	4809      	ldr	r0, [pc, #36]	@ (8006088 <__ieee754_atan2f+0xec>)
 8006062:	f7fb f805 	bl	8001070 <__aeabi_fsub>
 8006066:	e7a8      	b.n	8005fba <__ieee754_atan2f+0x1e>
 8006068:	4807      	ldr	r0, [pc, #28]	@ (8006088 <__ieee754_atan2f+0xec>)
 800606a:	e7a6      	b.n	8005fba <__ieee754_atan2f+0x1e>
 800606c:	4807      	ldr	r0, [pc, #28]	@ (800608c <__ieee754_atan2f+0xf0>)
 800606e:	e7a4      	b.n	8005fba <__ieee754_atan2f+0x1e>
 8006070:	c0490fdb 	.word	0xc0490fdb
 8006074:	3fc90fdb 	.word	0x3fc90fdb
 8006078:	080063e0 	.word	0x080063e0
 800607c:	3f490fdb 	.word	0x3f490fdb
 8006080:	080063d4 	.word	0x080063d4
 8006084:	33bbbd2e 	.word	0x33bbbd2e
 8006088:	40490fdb 	.word	0x40490fdb
 800608c:	bfc90fdb 	.word	0xbfc90fdb

08006090 <atanf>:
 8006090:	23a1      	movs	r3, #161	@ 0xa1
 8006092:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006094:	0045      	lsls	r5, r0, #1
 8006096:	1c04      	adds	r4, r0, #0
 8006098:	9001      	str	r0, [sp, #4]
 800609a:	086d      	lsrs	r5, r5, #1
 800609c:	05db      	lsls	r3, r3, #23
 800609e:	429d      	cmp	r5, r3
 80060a0:	d30f      	bcc.n	80060c2 <atanf+0x32>
 80060a2:	23ff      	movs	r3, #255	@ 0xff
 80060a4:	05db      	lsls	r3, r3, #23
 80060a6:	429d      	cmp	r5, r3
 80060a8:	d904      	bls.n	80060b4 <atanf+0x24>
 80060aa:	1c01      	adds	r1, r0, #0
 80060ac:	f7fa fac6 	bl	800063c <__aeabi_fadd>
 80060b0:	1c04      	adds	r4, r0, #0
 80060b2:	e004      	b.n	80060be <atanf+0x2e>
 80060b4:	9b01      	ldr	r3, [sp, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	dc00      	bgt.n	80060bc <atanf+0x2c>
 80060ba:	e0cc      	b.n	8006256 <atanf+0x1c6>
 80060bc:	4c67      	ldr	r4, [pc, #412]	@ (800625c <atanf+0x1cc>)
 80060be:	1c20      	adds	r0, r4, #0
 80060c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060c2:	4b67      	ldr	r3, [pc, #412]	@ (8006260 <atanf+0x1d0>)
 80060c4:	429d      	cmp	r5, r3
 80060c6:	d80f      	bhi.n	80060e8 <atanf+0x58>
 80060c8:	23c4      	movs	r3, #196	@ 0xc4
 80060ca:	059b      	lsls	r3, r3, #22
 80060cc:	429d      	cmp	r5, r3
 80060ce:	d208      	bcs.n	80060e2 <atanf+0x52>
 80060d0:	4964      	ldr	r1, [pc, #400]	@ (8006264 <atanf+0x1d4>)
 80060d2:	f7fa fab3 	bl	800063c <__aeabi_fadd>
 80060d6:	21fe      	movs	r1, #254	@ 0xfe
 80060d8:	0589      	lsls	r1, r1, #22
 80060da:	f7fa f9af 	bl	800043c <__aeabi_fcmpgt>
 80060de:	2800      	cmp	r0, #0
 80060e0:	d1ed      	bne.n	80060be <atanf+0x2e>
 80060e2:	2601      	movs	r6, #1
 80060e4:	4276      	negs	r6, r6
 80060e6:	e01b      	b.n	8006120 <atanf+0x90>
 80060e8:	f000 f8e2 	bl	80062b0 <fabsf>
 80060ec:	4b5e      	ldr	r3, [pc, #376]	@ (8006268 <atanf+0x1d8>)
 80060ee:	1c04      	adds	r4, r0, #0
 80060f0:	429d      	cmp	r5, r3
 80060f2:	d87b      	bhi.n	80061ec <atanf+0x15c>
 80060f4:	4b5d      	ldr	r3, [pc, #372]	@ (800626c <atanf+0x1dc>)
 80060f6:	429d      	cmp	r5, r3
 80060f8:	d867      	bhi.n	80061ca <atanf+0x13a>
 80060fa:	1c01      	adds	r1, r0, #0
 80060fc:	f7fa fa9e 	bl	800063c <__aeabi_fadd>
 8006100:	21fe      	movs	r1, #254	@ 0xfe
 8006102:	0589      	lsls	r1, r1, #22
 8006104:	f7fa ffb4 	bl	8001070 <__aeabi_fsub>
 8006108:	2180      	movs	r1, #128	@ 0x80
 800610a:	1c05      	adds	r5, r0, #0
 800610c:	05c9      	lsls	r1, r1, #23
 800610e:	1c20      	adds	r0, r4, #0
 8006110:	f7fa fa94 	bl	800063c <__aeabi_fadd>
 8006114:	1c01      	adds	r1, r0, #0
 8006116:	1c28      	adds	r0, r5, #0
 8006118:	f7fa fc82 	bl	8000a20 <__aeabi_fdiv>
 800611c:	2600      	movs	r6, #0
 800611e:	1c04      	adds	r4, r0, #0
 8006120:	1c21      	adds	r1, r4, #0
 8006122:	1c20      	adds	r0, r4, #0
 8006124:	f7fa fe4a 	bl	8000dbc <__aeabi_fmul>
 8006128:	1c01      	adds	r1, r0, #0
 800612a:	1c07      	adds	r7, r0, #0
 800612c:	f7fa fe46 	bl	8000dbc <__aeabi_fmul>
 8006130:	494f      	ldr	r1, [pc, #316]	@ (8006270 <atanf+0x1e0>)
 8006132:	1c05      	adds	r5, r0, #0
 8006134:	f7fa fe42 	bl	8000dbc <__aeabi_fmul>
 8006138:	494e      	ldr	r1, [pc, #312]	@ (8006274 <atanf+0x1e4>)
 800613a:	f7fa fa7f 	bl	800063c <__aeabi_fadd>
 800613e:	1c29      	adds	r1, r5, #0
 8006140:	f7fa fe3c 	bl	8000dbc <__aeabi_fmul>
 8006144:	494c      	ldr	r1, [pc, #304]	@ (8006278 <atanf+0x1e8>)
 8006146:	f7fa fa79 	bl	800063c <__aeabi_fadd>
 800614a:	1c29      	adds	r1, r5, #0
 800614c:	f7fa fe36 	bl	8000dbc <__aeabi_fmul>
 8006150:	494a      	ldr	r1, [pc, #296]	@ (800627c <atanf+0x1ec>)
 8006152:	f7fa fa73 	bl	800063c <__aeabi_fadd>
 8006156:	1c29      	adds	r1, r5, #0
 8006158:	f7fa fe30 	bl	8000dbc <__aeabi_fmul>
 800615c:	4948      	ldr	r1, [pc, #288]	@ (8006280 <atanf+0x1f0>)
 800615e:	f7fa fa6d 	bl	800063c <__aeabi_fadd>
 8006162:	1c29      	adds	r1, r5, #0
 8006164:	f7fa fe2a 	bl	8000dbc <__aeabi_fmul>
 8006168:	4946      	ldr	r1, [pc, #280]	@ (8006284 <atanf+0x1f4>)
 800616a:	f7fa fa67 	bl	800063c <__aeabi_fadd>
 800616e:	1c39      	adds	r1, r7, #0
 8006170:	f7fa fe24 	bl	8000dbc <__aeabi_fmul>
 8006174:	4944      	ldr	r1, [pc, #272]	@ (8006288 <atanf+0x1f8>)
 8006176:	1c07      	adds	r7, r0, #0
 8006178:	1c28      	adds	r0, r5, #0
 800617a:	f7fa fe1f 	bl	8000dbc <__aeabi_fmul>
 800617e:	4943      	ldr	r1, [pc, #268]	@ (800628c <atanf+0x1fc>)
 8006180:	f7fa ff76 	bl	8001070 <__aeabi_fsub>
 8006184:	1c29      	adds	r1, r5, #0
 8006186:	f7fa fe19 	bl	8000dbc <__aeabi_fmul>
 800618a:	4941      	ldr	r1, [pc, #260]	@ (8006290 <atanf+0x200>)
 800618c:	f7fa ff70 	bl	8001070 <__aeabi_fsub>
 8006190:	1c29      	adds	r1, r5, #0
 8006192:	f7fa fe13 	bl	8000dbc <__aeabi_fmul>
 8006196:	493f      	ldr	r1, [pc, #252]	@ (8006294 <atanf+0x204>)
 8006198:	f7fa ff6a 	bl	8001070 <__aeabi_fsub>
 800619c:	1c29      	adds	r1, r5, #0
 800619e:	f7fa fe0d 	bl	8000dbc <__aeabi_fmul>
 80061a2:	493d      	ldr	r1, [pc, #244]	@ (8006298 <atanf+0x208>)
 80061a4:	f7fa ff64 	bl	8001070 <__aeabi_fsub>
 80061a8:	1c29      	adds	r1, r5, #0
 80061aa:	f7fa fe07 	bl	8000dbc <__aeabi_fmul>
 80061ae:	1c01      	adds	r1, r0, #0
 80061b0:	1c38      	adds	r0, r7, #0
 80061b2:	f7fa fa43 	bl	800063c <__aeabi_fadd>
 80061b6:	1c21      	adds	r1, r4, #0
 80061b8:	f7fa fe00 	bl	8000dbc <__aeabi_fmul>
 80061bc:	1c73      	adds	r3, r6, #1
 80061be:	d134      	bne.n	800622a <atanf+0x19a>
 80061c0:	1c01      	adds	r1, r0, #0
 80061c2:	1c20      	adds	r0, r4, #0
 80061c4:	f7fa ff54 	bl	8001070 <__aeabi_fsub>
 80061c8:	e772      	b.n	80060b0 <atanf+0x20>
 80061ca:	21fe      	movs	r1, #254	@ 0xfe
 80061cc:	0589      	lsls	r1, r1, #22
 80061ce:	f7fa ff4f 	bl	8001070 <__aeabi_fsub>
 80061d2:	21fe      	movs	r1, #254	@ 0xfe
 80061d4:	1c05      	adds	r5, r0, #0
 80061d6:	0589      	lsls	r1, r1, #22
 80061d8:	1c20      	adds	r0, r4, #0
 80061da:	f7fa fa2f 	bl	800063c <__aeabi_fadd>
 80061de:	1c01      	adds	r1, r0, #0
 80061e0:	1c28      	adds	r0, r5, #0
 80061e2:	f7fa fc1d 	bl	8000a20 <__aeabi_fdiv>
 80061e6:	2601      	movs	r6, #1
 80061e8:	1c04      	adds	r4, r0, #0
 80061ea:	e799      	b.n	8006120 <atanf+0x90>
 80061ec:	4b2b      	ldr	r3, [pc, #172]	@ (800629c <atanf+0x20c>)
 80061ee:	429d      	cmp	r5, r3
 80061f0:	d814      	bhi.n	800621c <atanf+0x18c>
 80061f2:	21ff      	movs	r1, #255	@ 0xff
 80061f4:	0589      	lsls	r1, r1, #22
 80061f6:	f7fa ff3b 	bl	8001070 <__aeabi_fsub>
 80061fa:	21ff      	movs	r1, #255	@ 0xff
 80061fc:	1c05      	adds	r5, r0, #0
 80061fe:	0589      	lsls	r1, r1, #22
 8006200:	1c20      	adds	r0, r4, #0
 8006202:	f7fa fddb 	bl	8000dbc <__aeabi_fmul>
 8006206:	21fe      	movs	r1, #254	@ 0xfe
 8006208:	0589      	lsls	r1, r1, #22
 800620a:	f7fa fa17 	bl	800063c <__aeabi_fadd>
 800620e:	1c01      	adds	r1, r0, #0
 8006210:	1c28      	adds	r0, r5, #0
 8006212:	f7fa fc05 	bl	8000a20 <__aeabi_fdiv>
 8006216:	2602      	movs	r6, #2
 8006218:	1c04      	adds	r4, r0, #0
 800621a:	e781      	b.n	8006120 <atanf+0x90>
 800621c:	1c01      	adds	r1, r0, #0
 800621e:	4820      	ldr	r0, [pc, #128]	@ (80062a0 <atanf+0x210>)
 8006220:	f7fa fbfe 	bl	8000a20 <__aeabi_fdiv>
 8006224:	2603      	movs	r6, #3
 8006226:	1c04      	adds	r4, r0, #0
 8006228:	e77a      	b.n	8006120 <atanf+0x90>
 800622a:	4b1e      	ldr	r3, [pc, #120]	@ (80062a4 <atanf+0x214>)
 800622c:	00b6      	lsls	r6, r6, #2
 800622e:	58f1      	ldr	r1, [r6, r3]
 8006230:	f7fa ff1e 	bl	8001070 <__aeabi_fsub>
 8006234:	1c21      	adds	r1, r4, #0
 8006236:	f7fa ff1b 	bl	8001070 <__aeabi_fsub>
 800623a:	4d1b      	ldr	r5, [pc, #108]	@ (80062a8 <atanf+0x218>)
 800623c:	1c01      	adds	r1, r0, #0
 800623e:	5970      	ldr	r0, [r6, r5]
 8006240:	f7fa ff16 	bl	8001070 <__aeabi_fsub>
 8006244:	9b01      	ldr	r3, [sp, #4]
 8006246:	1c04      	adds	r4, r0, #0
 8006248:	2b00      	cmp	r3, #0
 800624a:	db00      	blt.n	800624e <atanf+0x1be>
 800624c:	e737      	b.n	80060be <atanf+0x2e>
 800624e:	2380      	movs	r3, #128	@ 0x80
 8006250:	061b      	lsls	r3, r3, #24
 8006252:	18c4      	adds	r4, r0, r3
 8006254:	e733      	b.n	80060be <atanf+0x2e>
 8006256:	4c15      	ldr	r4, [pc, #84]	@ (80062ac <atanf+0x21c>)
 8006258:	e731      	b.n	80060be <atanf+0x2e>
 800625a:	46c0      	nop			@ (mov r8, r8)
 800625c:	3fc90fdb 	.word	0x3fc90fdb
 8006260:	3edfffff 	.word	0x3edfffff
 8006264:	7149f2ca 	.word	0x7149f2ca
 8006268:	3f97ffff 	.word	0x3f97ffff
 800626c:	3f2fffff 	.word	0x3f2fffff
 8006270:	3c8569d7 	.word	0x3c8569d7
 8006274:	3d4bda59 	.word	0x3d4bda59
 8006278:	3d886b35 	.word	0x3d886b35
 800627c:	3dba2e6e 	.word	0x3dba2e6e
 8006280:	3e124925 	.word	0x3e124925
 8006284:	3eaaaaab 	.word	0x3eaaaaab
 8006288:	bd15a221 	.word	0xbd15a221
 800628c:	3d6ef16b 	.word	0x3d6ef16b
 8006290:	3d9d8795 	.word	0x3d9d8795
 8006294:	3de38e38 	.word	0x3de38e38
 8006298:	3e4ccccd 	.word	0x3e4ccccd
 800629c:	401bffff 	.word	0x401bffff
 80062a0:	bf800000 	.word	0xbf800000
 80062a4:	080063ec 	.word	0x080063ec
 80062a8:	080063fc 	.word	0x080063fc
 80062ac:	bfc90fdb 	.word	0xbfc90fdb

080062b0 <fabsf>:
 80062b0:	0040      	lsls	r0, r0, #1
 80062b2:	0840      	lsrs	r0, r0, #1
 80062b4:	4770      	bx	lr
	...

080062b8 <_init>:
 80062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ba:	46c0      	nop			@ (mov r8, r8)
 80062bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062be:	bc08      	pop	{r3}
 80062c0:	469e      	mov	lr, r3
 80062c2:	4770      	bx	lr

080062c4 <_fini>:
 80062c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c6:	46c0      	nop			@ (mov r8, r8)
 80062c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ca:	bc08      	pop	{r3}
 80062cc:	469e      	mov	lr, r3
 80062ce:	4770      	bx	lr
