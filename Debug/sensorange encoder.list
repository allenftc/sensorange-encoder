
sensorange encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08006a94  08006a94  00007a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd8  08006bd8  00008014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006bd8  08006bd8  00007bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006be0  08006be0  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006be0  08006be0  00007be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006be4  08006be4  00007be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006be8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000014  08006bfc  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08006bfc  00008334  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014745  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b3b  00000000  00000000  0001c781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0001f2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e69  00000000  00000000  00020508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003135  00000000  00000000  00021371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001588a  00000000  00000000  000244a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad2dd  00000000  00000000  00039d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e700d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004598  00000000  00000000  000e7050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000eb5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006a7c 	.word	0x08006a7c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	08006a7c 	.word	0x08006a7c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0008      	movs	r0, r1
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 fcaf 	bl	8000d5c <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 fc37 	bl	8000c7c <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fca1 	bl	8000d5c <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fc97 	bl	8000d5c <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fc45 	bl	8000ccc <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fc3b 	bl	8000ccc <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_uldivmod>:
 8000464:	2b00      	cmp	r3, #0
 8000466:	d111      	bne.n	800048c <__aeabi_uldivmod+0x28>
 8000468:	2a00      	cmp	r2, #0
 800046a:	d10f      	bne.n	800048c <__aeabi_uldivmod+0x28>
 800046c:	2900      	cmp	r1, #0
 800046e:	d100      	bne.n	8000472 <__aeabi_uldivmod+0xe>
 8000470:	2800      	cmp	r0, #0
 8000472:	d002      	beq.n	800047a <__aeabi_uldivmod+0x16>
 8000474:	2100      	movs	r1, #0
 8000476:	43c9      	mvns	r1, r1
 8000478:	0008      	movs	r0, r1
 800047a:	b407      	push	{r0, r1, r2}
 800047c:	4802      	ldr	r0, [pc, #8]	@ (8000488 <__aeabi_uldivmod+0x24>)
 800047e:	a102      	add	r1, pc, #8	@ (adr r1, 8000488 <__aeabi_uldivmod+0x24>)
 8000480:	1840      	adds	r0, r0, r1
 8000482:	9002      	str	r0, [sp, #8]
 8000484:	bd03      	pop	{r0, r1, pc}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	ffffff65 	.word	0xffffff65
 800048c:	b403      	push	{r0, r1}
 800048e:	4668      	mov	r0, sp
 8000490:	b501      	push	{r0, lr}
 8000492:	9802      	ldr	r0, [sp, #8]
 8000494:	f000 f81e 	bl	80004d4 <__udivmoddi4>
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	469e      	mov	lr, r3
 800049c:	b002      	add	sp, #8
 800049e:	bc0c      	pop	{r2, r3}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_f2uiz>:
 80004a4:	219e      	movs	r1, #158	@ 0x9e
 80004a6:	b510      	push	{r4, lr}
 80004a8:	05c9      	lsls	r1, r1, #23
 80004aa:	1c04      	adds	r4, r0, #0
 80004ac:	f7ff ffd0 	bl	8000450 <__aeabi_fcmpge>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d103      	bne.n	80004bc <__aeabi_f2uiz+0x18>
 80004b4:	1c20      	adds	r0, r4, #0
 80004b6:	f001 f857 	bl	8001568 <__aeabi_f2iz>
 80004ba:	bd10      	pop	{r4, pc}
 80004bc:	219e      	movs	r1, #158	@ 0x9e
 80004be:	1c20      	adds	r0, r4, #0
 80004c0:	05c9      	lsls	r1, r1, #23
 80004c2:	f000 fded 	bl	80010a0 <__aeabi_fsub>
 80004c6:	f001 f84f 	bl	8001568 <__aeabi_f2iz>
 80004ca:	2380      	movs	r3, #128	@ 0x80
 80004cc:	061b      	lsls	r3, r3, #24
 80004ce:	469c      	mov	ip, r3
 80004d0:	4460      	add	r0, ip
 80004d2:	e7f2      	b.n	80004ba <__aeabi_f2uiz+0x16>

080004d4 <__udivmoddi4>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	4657      	mov	r7, sl
 80004d8:	464e      	mov	r6, r9
 80004da:	4645      	mov	r5, r8
 80004dc:	46de      	mov	lr, fp
 80004de:	b5e0      	push	{r5, r6, r7, lr}
 80004e0:	0004      	movs	r4, r0
 80004e2:	000d      	movs	r5, r1
 80004e4:	4692      	mov	sl, r2
 80004e6:	4699      	mov	r9, r3
 80004e8:	b083      	sub	sp, #12
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d830      	bhi.n	8000550 <__udivmoddi4+0x7c>
 80004ee:	d02d      	beq.n	800054c <__udivmoddi4+0x78>
 80004f0:	4649      	mov	r1, r9
 80004f2:	4650      	mov	r0, sl
 80004f4:	f001 f8c6 	bl	8001684 <__clzdi2>
 80004f8:	0029      	movs	r1, r5
 80004fa:	0006      	movs	r6, r0
 80004fc:	0020      	movs	r0, r4
 80004fe:	f001 f8c1 	bl	8001684 <__clzdi2>
 8000502:	1a33      	subs	r3, r6, r0
 8000504:	4698      	mov	r8, r3
 8000506:	3b20      	subs	r3, #32
 8000508:	d434      	bmi.n	8000574 <__udivmoddi4+0xa0>
 800050a:	469b      	mov	fp, r3
 800050c:	4653      	mov	r3, sl
 800050e:	465a      	mov	r2, fp
 8000510:	4093      	lsls	r3, r2
 8000512:	4642      	mov	r2, r8
 8000514:	001f      	movs	r7, r3
 8000516:	4653      	mov	r3, sl
 8000518:	4093      	lsls	r3, r2
 800051a:	001e      	movs	r6, r3
 800051c:	42af      	cmp	r7, r5
 800051e:	d83b      	bhi.n	8000598 <__udivmoddi4+0xc4>
 8000520:	42af      	cmp	r7, r5
 8000522:	d100      	bne.n	8000526 <__udivmoddi4+0x52>
 8000524:	e079      	b.n	800061a <__udivmoddi4+0x146>
 8000526:	465b      	mov	r3, fp
 8000528:	1ba4      	subs	r4, r4, r6
 800052a:	41bd      	sbcs	r5, r7
 800052c:	2b00      	cmp	r3, #0
 800052e:	da00      	bge.n	8000532 <__udivmoddi4+0x5e>
 8000530:	e076      	b.n	8000620 <__udivmoddi4+0x14c>
 8000532:	2200      	movs	r2, #0
 8000534:	2300      	movs	r3, #0
 8000536:	9200      	str	r2, [sp, #0]
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	465a      	mov	r2, fp
 800053e:	4093      	lsls	r3, r2
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2301      	movs	r3, #1
 8000544:	4642      	mov	r2, r8
 8000546:	4093      	lsls	r3, r2
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	e029      	b.n	80005a0 <__udivmoddi4+0xcc>
 800054c:	4282      	cmp	r2, r0
 800054e:	d9cf      	bls.n	80004f0 <__udivmoddi4+0x1c>
 8000550:	2200      	movs	r2, #0
 8000552:	2300      	movs	r3, #0
 8000554:	9200      	str	r2, [sp, #0]
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <__udivmoddi4+0x8e>
 800055e:	601c      	str	r4, [r3, #0]
 8000560:	605d      	str	r5, [r3, #4]
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	b003      	add	sp, #12
 8000568:	bcf0      	pop	{r4, r5, r6, r7}
 800056a:	46bb      	mov	fp, r7
 800056c:	46b2      	mov	sl, r6
 800056e:	46a9      	mov	r9, r5
 8000570:	46a0      	mov	r8, r4
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	4642      	mov	r2, r8
 8000576:	469b      	mov	fp, r3
 8000578:	2320      	movs	r3, #32
 800057a:	1a9b      	subs	r3, r3, r2
 800057c:	4652      	mov	r2, sl
 800057e:	40da      	lsrs	r2, r3
 8000580:	4641      	mov	r1, r8
 8000582:	0013      	movs	r3, r2
 8000584:	464a      	mov	r2, r9
 8000586:	408a      	lsls	r2, r1
 8000588:	0017      	movs	r7, r2
 800058a:	4642      	mov	r2, r8
 800058c:	431f      	orrs	r7, r3
 800058e:	4653      	mov	r3, sl
 8000590:	4093      	lsls	r3, r2
 8000592:	001e      	movs	r6, r3
 8000594:	42af      	cmp	r7, r5
 8000596:	d9c3      	bls.n	8000520 <__udivmoddi4+0x4c>
 8000598:	2200      	movs	r2, #0
 800059a:	2300      	movs	r3, #0
 800059c:	9200      	str	r2, [sp, #0]
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	4643      	mov	r3, r8
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0d8      	beq.n	8000558 <__udivmoddi4+0x84>
 80005a6:	07fb      	lsls	r3, r7, #31
 80005a8:	0872      	lsrs	r2, r6, #1
 80005aa:	431a      	orrs	r2, r3
 80005ac:	4646      	mov	r6, r8
 80005ae:	087b      	lsrs	r3, r7, #1
 80005b0:	e00e      	b.n	80005d0 <__udivmoddi4+0xfc>
 80005b2:	42ab      	cmp	r3, r5
 80005b4:	d101      	bne.n	80005ba <__udivmoddi4+0xe6>
 80005b6:	42a2      	cmp	r2, r4
 80005b8:	d80c      	bhi.n	80005d4 <__udivmoddi4+0x100>
 80005ba:	1aa4      	subs	r4, r4, r2
 80005bc:	419d      	sbcs	r5, r3
 80005be:	2001      	movs	r0, #1
 80005c0:	1924      	adds	r4, r4, r4
 80005c2:	416d      	adcs	r5, r5
 80005c4:	2100      	movs	r1, #0
 80005c6:	3e01      	subs	r6, #1
 80005c8:	1824      	adds	r4, r4, r0
 80005ca:	414d      	adcs	r5, r1
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d006      	beq.n	80005de <__udivmoddi4+0x10a>
 80005d0:	42ab      	cmp	r3, r5
 80005d2:	d9ee      	bls.n	80005b2 <__udivmoddi4+0xde>
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1924      	adds	r4, r4, r4
 80005d8:	416d      	adcs	r5, r5
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d1f8      	bne.n	80005d0 <__udivmoddi4+0xfc>
 80005de:	9800      	ldr	r0, [sp, #0]
 80005e0:	9901      	ldr	r1, [sp, #4]
 80005e2:	465b      	mov	r3, fp
 80005e4:	1900      	adds	r0, r0, r4
 80005e6:	4169      	adcs	r1, r5
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db24      	blt.n	8000636 <__udivmoddi4+0x162>
 80005ec:	002b      	movs	r3, r5
 80005ee:	465a      	mov	r2, fp
 80005f0:	4644      	mov	r4, r8
 80005f2:	40d3      	lsrs	r3, r2
 80005f4:	002a      	movs	r2, r5
 80005f6:	40e2      	lsrs	r2, r4
 80005f8:	001c      	movs	r4, r3
 80005fa:	465b      	mov	r3, fp
 80005fc:	0015      	movs	r5, r2
 80005fe:	2b00      	cmp	r3, #0
 8000600:	db2a      	blt.n	8000658 <__udivmoddi4+0x184>
 8000602:	0026      	movs	r6, r4
 8000604:	409e      	lsls	r6, r3
 8000606:	0033      	movs	r3, r6
 8000608:	0026      	movs	r6, r4
 800060a:	4647      	mov	r7, r8
 800060c:	40be      	lsls	r6, r7
 800060e:	0032      	movs	r2, r6
 8000610:	1a80      	subs	r0, r0, r2
 8000612:	4199      	sbcs	r1, r3
 8000614:	9000      	str	r0, [sp, #0]
 8000616:	9101      	str	r1, [sp, #4]
 8000618:	e79e      	b.n	8000558 <__udivmoddi4+0x84>
 800061a:	42a3      	cmp	r3, r4
 800061c:	d8bc      	bhi.n	8000598 <__udivmoddi4+0xc4>
 800061e:	e782      	b.n	8000526 <__udivmoddi4+0x52>
 8000620:	4642      	mov	r2, r8
 8000622:	2320      	movs	r3, #32
 8000624:	2100      	movs	r1, #0
 8000626:	1a9b      	subs	r3, r3, r2
 8000628:	2200      	movs	r2, #0
 800062a:	9100      	str	r1, [sp, #0]
 800062c:	9201      	str	r2, [sp, #4]
 800062e:	2201      	movs	r2, #1
 8000630:	40da      	lsrs	r2, r3
 8000632:	9201      	str	r2, [sp, #4]
 8000634:	e785      	b.n	8000542 <__udivmoddi4+0x6e>
 8000636:	4642      	mov	r2, r8
 8000638:	2320      	movs	r3, #32
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	002a      	movs	r2, r5
 800063e:	4646      	mov	r6, r8
 8000640:	409a      	lsls	r2, r3
 8000642:	0023      	movs	r3, r4
 8000644:	40f3      	lsrs	r3, r6
 8000646:	4644      	mov	r4, r8
 8000648:	4313      	orrs	r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	40e2      	lsrs	r2, r4
 800064e:	001c      	movs	r4, r3
 8000650:	465b      	mov	r3, fp
 8000652:	0015      	movs	r5, r2
 8000654:	2b00      	cmp	r3, #0
 8000656:	dad4      	bge.n	8000602 <__udivmoddi4+0x12e>
 8000658:	4642      	mov	r2, r8
 800065a:	002f      	movs	r7, r5
 800065c:	2320      	movs	r3, #32
 800065e:	0026      	movs	r6, r4
 8000660:	4097      	lsls	r7, r2
 8000662:	1a9b      	subs	r3, r3, r2
 8000664:	40de      	lsrs	r6, r3
 8000666:	003b      	movs	r3, r7
 8000668:	4333      	orrs	r3, r6
 800066a:	e7cd      	b.n	8000608 <__udivmoddi4+0x134>

0800066c <__aeabi_fadd>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	024b      	lsls	r3, r1, #9
 8000670:	0a5a      	lsrs	r2, r3, #9
 8000672:	4694      	mov	ip, r2
 8000674:	004a      	lsls	r2, r1, #1
 8000676:	0fc9      	lsrs	r1, r1, #31
 8000678:	46ce      	mov	lr, r9
 800067a:	4647      	mov	r7, r8
 800067c:	4689      	mov	r9, r1
 800067e:	0045      	lsls	r5, r0, #1
 8000680:	0246      	lsls	r6, r0, #9
 8000682:	0e2d      	lsrs	r5, r5, #24
 8000684:	0e12      	lsrs	r2, r2, #24
 8000686:	b580      	push	{r7, lr}
 8000688:	0999      	lsrs	r1, r3, #6
 800068a:	0a77      	lsrs	r7, r6, #9
 800068c:	0fc4      	lsrs	r4, r0, #31
 800068e:	09b6      	lsrs	r6, r6, #6
 8000690:	1aab      	subs	r3, r5, r2
 8000692:	454c      	cmp	r4, r9
 8000694:	d020      	beq.n	80006d8 <__aeabi_fadd+0x6c>
 8000696:	2b00      	cmp	r3, #0
 8000698:	dd0c      	ble.n	80006b4 <__aeabi_fadd+0x48>
 800069a:	2a00      	cmp	r2, #0
 800069c:	d134      	bne.n	8000708 <__aeabi_fadd+0x9c>
 800069e:	2900      	cmp	r1, #0
 80006a0:	d02a      	beq.n	80006f8 <__aeabi_fadd+0x8c>
 80006a2:	1e5a      	subs	r2, r3, #1
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d100      	bne.n	80006aa <__aeabi_fadd+0x3e>
 80006a8:	e08f      	b.n	80007ca <__aeabi_fadd+0x15e>
 80006aa:	2bff      	cmp	r3, #255	@ 0xff
 80006ac:	d100      	bne.n	80006b0 <__aeabi_fadd+0x44>
 80006ae:	e0cd      	b.n	800084c <__aeabi_fadd+0x1e0>
 80006b0:	0013      	movs	r3, r2
 80006b2:	e02f      	b.n	8000714 <__aeabi_fadd+0xa8>
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d060      	beq.n	800077a <__aeabi_fadd+0x10e>
 80006b8:	1b53      	subs	r3, r2, r5
 80006ba:	2d00      	cmp	r5, #0
 80006bc:	d000      	beq.n	80006c0 <__aeabi_fadd+0x54>
 80006be:	e0ee      	b.n	800089e <__aeabi_fadd+0x232>
 80006c0:	2e00      	cmp	r6, #0
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fadd+0x5a>
 80006c4:	e13e      	b.n	8000944 <__aeabi_fadd+0x2d8>
 80006c6:	1e5c      	subs	r4, r3, #1
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d100      	bne.n	80006ce <__aeabi_fadd+0x62>
 80006cc:	e16b      	b.n	80009a6 <__aeabi_fadd+0x33a>
 80006ce:	2bff      	cmp	r3, #255	@ 0xff
 80006d0:	d100      	bne.n	80006d4 <__aeabi_fadd+0x68>
 80006d2:	e0b9      	b.n	8000848 <__aeabi_fadd+0x1dc>
 80006d4:	0023      	movs	r3, r4
 80006d6:	e0e7      	b.n	80008a8 <__aeabi_fadd+0x23c>
 80006d8:	2b00      	cmp	r3, #0
 80006da:	dc00      	bgt.n	80006de <__aeabi_fadd+0x72>
 80006dc:	e0a4      	b.n	8000828 <__aeabi_fadd+0x1bc>
 80006de:	2a00      	cmp	r2, #0
 80006e0:	d069      	beq.n	80007b6 <__aeabi_fadd+0x14a>
 80006e2:	2dff      	cmp	r5, #255	@ 0xff
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fadd+0x7c>
 80006e6:	e0b1      	b.n	800084c <__aeabi_fadd+0x1e0>
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	04d2      	lsls	r2, r2, #19
 80006ec:	4311      	orrs	r1, r2
 80006ee:	2b1b      	cmp	r3, #27
 80006f0:	dc00      	bgt.n	80006f4 <__aeabi_fadd+0x88>
 80006f2:	e0e9      	b.n	80008c8 <__aeabi_fadd+0x25c>
 80006f4:	002b      	movs	r3, r5
 80006f6:	3605      	adds	r6, #5
 80006f8:	08f7      	lsrs	r7, r6, #3
 80006fa:	2bff      	cmp	r3, #255	@ 0xff
 80006fc:	d100      	bne.n	8000700 <__aeabi_fadd+0x94>
 80006fe:	e0a5      	b.n	800084c <__aeabi_fadd+0x1e0>
 8000700:	027a      	lsls	r2, r7, #9
 8000702:	0a52      	lsrs	r2, r2, #9
 8000704:	b2d8      	uxtb	r0, r3
 8000706:	e030      	b.n	800076a <__aeabi_fadd+0xfe>
 8000708:	2dff      	cmp	r5, #255	@ 0xff
 800070a:	d100      	bne.n	800070e <__aeabi_fadd+0xa2>
 800070c:	e09e      	b.n	800084c <__aeabi_fadd+0x1e0>
 800070e:	2280      	movs	r2, #128	@ 0x80
 8000710:	04d2      	lsls	r2, r2, #19
 8000712:	4311      	orrs	r1, r2
 8000714:	2001      	movs	r0, #1
 8000716:	2b1b      	cmp	r3, #27
 8000718:	dc08      	bgt.n	800072c <__aeabi_fadd+0xc0>
 800071a:	0008      	movs	r0, r1
 800071c:	2220      	movs	r2, #32
 800071e:	40d8      	lsrs	r0, r3
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	4099      	lsls	r1, r3
 8000724:	000b      	movs	r3, r1
 8000726:	1e5a      	subs	r2, r3, #1
 8000728:	4193      	sbcs	r3, r2
 800072a:	4318      	orrs	r0, r3
 800072c:	1a36      	subs	r6, r6, r0
 800072e:	0173      	lsls	r3, r6, #5
 8000730:	d400      	bmi.n	8000734 <__aeabi_fadd+0xc8>
 8000732:	e071      	b.n	8000818 <__aeabi_fadd+0x1ac>
 8000734:	01b6      	lsls	r6, r6, #6
 8000736:	09b7      	lsrs	r7, r6, #6
 8000738:	0038      	movs	r0, r7
 800073a:	f000 ff85 	bl	8001648 <__clzsi2>
 800073e:	003b      	movs	r3, r7
 8000740:	3805      	subs	r0, #5
 8000742:	4083      	lsls	r3, r0
 8000744:	4285      	cmp	r5, r0
 8000746:	dd4d      	ble.n	80007e4 <__aeabi_fadd+0x178>
 8000748:	4eb4      	ldr	r6, [pc, #720]	@ (8000a1c <__aeabi_fadd+0x3b0>)
 800074a:	1a2d      	subs	r5, r5, r0
 800074c:	401e      	ands	r6, r3
 800074e:	075a      	lsls	r2, r3, #29
 8000750:	d068      	beq.n	8000824 <__aeabi_fadd+0x1b8>
 8000752:	220f      	movs	r2, #15
 8000754:	4013      	ands	r3, r2
 8000756:	2b04      	cmp	r3, #4
 8000758:	d064      	beq.n	8000824 <__aeabi_fadd+0x1b8>
 800075a:	3604      	adds	r6, #4
 800075c:	0173      	lsls	r3, r6, #5
 800075e:	d561      	bpl.n	8000824 <__aeabi_fadd+0x1b8>
 8000760:	1c68      	adds	r0, r5, #1
 8000762:	2dfe      	cmp	r5, #254	@ 0xfe
 8000764:	d154      	bne.n	8000810 <__aeabi_fadd+0x1a4>
 8000766:	20ff      	movs	r0, #255	@ 0xff
 8000768:	2200      	movs	r2, #0
 800076a:	05c0      	lsls	r0, r0, #23
 800076c:	4310      	orrs	r0, r2
 800076e:	07e4      	lsls	r4, r4, #31
 8000770:	4320      	orrs	r0, r4
 8000772:	bcc0      	pop	{r6, r7}
 8000774:	46b9      	mov	r9, r7
 8000776:	46b0      	mov	r8, r6
 8000778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800077a:	22fe      	movs	r2, #254	@ 0xfe
 800077c:	4690      	mov	r8, r2
 800077e:	1c68      	adds	r0, r5, #1
 8000780:	0002      	movs	r2, r0
 8000782:	4640      	mov	r0, r8
 8000784:	4210      	tst	r0, r2
 8000786:	d16b      	bne.n	8000860 <__aeabi_fadd+0x1f4>
 8000788:	2d00      	cmp	r5, #0
 800078a:	d000      	beq.n	800078e <__aeabi_fadd+0x122>
 800078c:	e0dd      	b.n	800094a <__aeabi_fadd+0x2de>
 800078e:	2e00      	cmp	r6, #0
 8000790:	d100      	bne.n	8000794 <__aeabi_fadd+0x128>
 8000792:	e102      	b.n	800099a <__aeabi_fadd+0x32e>
 8000794:	2900      	cmp	r1, #0
 8000796:	d0b3      	beq.n	8000700 <__aeabi_fadd+0x94>
 8000798:	2280      	movs	r2, #128	@ 0x80
 800079a:	1a77      	subs	r7, r6, r1
 800079c:	04d2      	lsls	r2, r2, #19
 800079e:	4217      	tst	r7, r2
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fadd+0x138>
 80007a2:	e136      	b.n	8000a12 <__aeabi_fadd+0x3a6>
 80007a4:	464c      	mov	r4, r9
 80007a6:	1b8e      	subs	r6, r1, r6
 80007a8:	d061      	beq.n	800086e <__aeabi_fadd+0x202>
 80007aa:	2001      	movs	r0, #1
 80007ac:	4216      	tst	r6, r2
 80007ae:	d130      	bne.n	8000812 <__aeabi_fadd+0x1a6>
 80007b0:	2300      	movs	r3, #0
 80007b2:	08f7      	lsrs	r7, r6, #3
 80007b4:	e7a4      	b.n	8000700 <__aeabi_fadd+0x94>
 80007b6:	2900      	cmp	r1, #0
 80007b8:	d09e      	beq.n	80006f8 <__aeabi_fadd+0x8c>
 80007ba:	1e5a      	subs	r2, r3, #1
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d100      	bne.n	80007c2 <__aeabi_fadd+0x156>
 80007c0:	e0ca      	b.n	8000958 <__aeabi_fadd+0x2ec>
 80007c2:	2bff      	cmp	r3, #255	@ 0xff
 80007c4:	d042      	beq.n	800084c <__aeabi_fadd+0x1e0>
 80007c6:	0013      	movs	r3, r2
 80007c8:	e791      	b.n	80006ee <__aeabi_fadd+0x82>
 80007ca:	1a71      	subs	r1, r6, r1
 80007cc:	014b      	lsls	r3, r1, #5
 80007ce:	d400      	bmi.n	80007d2 <__aeabi_fadd+0x166>
 80007d0:	e0d1      	b.n	8000976 <__aeabi_fadd+0x30a>
 80007d2:	018f      	lsls	r7, r1, #6
 80007d4:	09bf      	lsrs	r7, r7, #6
 80007d6:	0038      	movs	r0, r7
 80007d8:	f000 ff36 	bl	8001648 <__clzsi2>
 80007dc:	003b      	movs	r3, r7
 80007de:	3805      	subs	r0, #5
 80007e0:	4083      	lsls	r3, r0
 80007e2:	2501      	movs	r5, #1
 80007e4:	2220      	movs	r2, #32
 80007e6:	1b40      	subs	r0, r0, r5
 80007e8:	3001      	adds	r0, #1
 80007ea:	1a12      	subs	r2, r2, r0
 80007ec:	001e      	movs	r6, r3
 80007ee:	4093      	lsls	r3, r2
 80007f0:	40c6      	lsrs	r6, r0
 80007f2:	1e5a      	subs	r2, r3, #1
 80007f4:	4193      	sbcs	r3, r2
 80007f6:	431e      	orrs	r6, r3
 80007f8:	d039      	beq.n	800086e <__aeabi_fadd+0x202>
 80007fa:	0773      	lsls	r3, r6, #29
 80007fc:	d100      	bne.n	8000800 <__aeabi_fadd+0x194>
 80007fe:	e11b      	b.n	8000a38 <__aeabi_fadd+0x3cc>
 8000800:	230f      	movs	r3, #15
 8000802:	2500      	movs	r5, #0
 8000804:	4033      	ands	r3, r6
 8000806:	2b04      	cmp	r3, #4
 8000808:	d1a7      	bne.n	800075a <__aeabi_fadd+0xee>
 800080a:	2001      	movs	r0, #1
 800080c:	0172      	lsls	r2, r6, #5
 800080e:	d57c      	bpl.n	800090a <__aeabi_fadd+0x29e>
 8000810:	b2c0      	uxtb	r0, r0
 8000812:	01b2      	lsls	r2, r6, #6
 8000814:	0a52      	lsrs	r2, r2, #9
 8000816:	e7a8      	b.n	800076a <__aeabi_fadd+0xfe>
 8000818:	0773      	lsls	r3, r6, #29
 800081a:	d003      	beq.n	8000824 <__aeabi_fadd+0x1b8>
 800081c:	230f      	movs	r3, #15
 800081e:	4033      	ands	r3, r6
 8000820:	2b04      	cmp	r3, #4
 8000822:	d19a      	bne.n	800075a <__aeabi_fadd+0xee>
 8000824:	002b      	movs	r3, r5
 8000826:	e767      	b.n	80006f8 <__aeabi_fadd+0x8c>
 8000828:	2b00      	cmp	r3, #0
 800082a:	d023      	beq.n	8000874 <__aeabi_fadd+0x208>
 800082c:	1b53      	subs	r3, r2, r5
 800082e:	2d00      	cmp	r5, #0
 8000830:	d17b      	bne.n	800092a <__aeabi_fadd+0x2be>
 8000832:	2e00      	cmp	r6, #0
 8000834:	d100      	bne.n	8000838 <__aeabi_fadd+0x1cc>
 8000836:	e086      	b.n	8000946 <__aeabi_fadd+0x2da>
 8000838:	1e5d      	subs	r5, r3, #1
 800083a:	2b01      	cmp	r3, #1
 800083c:	d100      	bne.n	8000840 <__aeabi_fadd+0x1d4>
 800083e:	e08b      	b.n	8000958 <__aeabi_fadd+0x2ec>
 8000840:	2bff      	cmp	r3, #255	@ 0xff
 8000842:	d002      	beq.n	800084a <__aeabi_fadd+0x1de>
 8000844:	002b      	movs	r3, r5
 8000846:	e075      	b.n	8000934 <__aeabi_fadd+0x2c8>
 8000848:	464c      	mov	r4, r9
 800084a:	4667      	mov	r7, ip
 800084c:	2f00      	cmp	r7, #0
 800084e:	d100      	bne.n	8000852 <__aeabi_fadd+0x1e6>
 8000850:	e789      	b.n	8000766 <__aeabi_fadd+0xfa>
 8000852:	2280      	movs	r2, #128	@ 0x80
 8000854:	03d2      	lsls	r2, r2, #15
 8000856:	433a      	orrs	r2, r7
 8000858:	0252      	lsls	r2, r2, #9
 800085a:	20ff      	movs	r0, #255	@ 0xff
 800085c:	0a52      	lsrs	r2, r2, #9
 800085e:	e784      	b.n	800076a <__aeabi_fadd+0xfe>
 8000860:	1a77      	subs	r7, r6, r1
 8000862:	017b      	lsls	r3, r7, #5
 8000864:	d46b      	bmi.n	800093e <__aeabi_fadd+0x2d2>
 8000866:	2f00      	cmp	r7, #0
 8000868:	d000      	beq.n	800086c <__aeabi_fadd+0x200>
 800086a:	e765      	b.n	8000738 <__aeabi_fadd+0xcc>
 800086c:	2400      	movs	r4, #0
 800086e:	2000      	movs	r0, #0
 8000870:	2200      	movs	r2, #0
 8000872:	e77a      	b.n	800076a <__aeabi_fadd+0xfe>
 8000874:	22fe      	movs	r2, #254	@ 0xfe
 8000876:	1c6b      	adds	r3, r5, #1
 8000878:	421a      	tst	r2, r3
 800087a:	d149      	bne.n	8000910 <__aeabi_fadd+0x2a4>
 800087c:	2d00      	cmp	r5, #0
 800087e:	d000      	beq.n	8000882 <__aeabi_fadd+0x216>
 8000880:	e09f      	b.n	80009c2 <__aeabi_fadd+0x356>
 8000882:	2e00      	cmp	r6, #0
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x21c>
 8000886:	e0ba      	b.n	80009fe <__aeabi_fadd+0x392>
 8000888:	2900      	cmp	r1, #0
 800088a:	d100      	bne.n	800088e <__aeabi_fadd+0x222>
 800088c:	e0cf      	b.n	8000a2e <__aeabi_fadd+0x3c2>
 800088e:	1872      	adds	r2, r6, r1
 8000890:	0153      	lsls	r3, r2, #5
 8000892:	d400      	bmi.n	8000896 <__aeabi_fadd+0x22a>
 8000894:	e0cd      	b.n	8000a32 <__aeabi_fadd+0x3c6>
 8000896:	0192      	lsls	r2, r2, #6
 8000898:	2001      	movs	r0, #1
 800089a:	0a52      	lsrs	r2, r2, #9
 800089c:	e765      	b.n	800076a <__aeabi_fadd+0xfe>
 800089e:	2aff      	cmp	r2, #255	@ 0xff
 80008a0:	d0d2      	beq.n	8000848 <__aeabi_fadd+0x1dc>
 80008a2:	2080      	movs	r0, #128	@ 0x80
 80008a4:	04c0      	lsls	r0, r0, #19
 80008a6:	4306      	orrs	r6, r0
 80008a8:	2001      	movs	r0, #1
 80008aa:	2b1b      	cmp	r3, #27
 80008ac:	dc08      	bgt.n	80008c0 <__aeabi_fadd+0x254>
 80008ae:	0030      	movs	r0, r6
 80008b0:	2420      	movs	r4, #32
 80008b2:	40d8      	lsrs	r0, r3
 80008b4:	1ae3      	subs	r3, r4, r3
 80008b6:	409e      	lsls	r6, r3
 80008b8:	0033      	movs	r3, r6
 80008ba:	1e5c      	subs	r4, r3, #1
 80008bc:	41a3      	sbcs	r3, r4
 80008be:	4318      	orrs	r0, r3
 80008c0:	464c      	mov	r4, r9
 80008c2:	0015      	movs	r5, r2
 80008c4:	1a0e      	subs	r6, r1, r0
 80008c6:	e732      	b.n	800072e <__aeabi_fadd+0xc2>
 80008c8:	0008      	movs	r0, r1
 80008ca:	2220      	movs	r2, #32
 80008cc:	40d8      	lsrs	r0, r3
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	4099      	lsls	r1, r3
 80008d2:	000b      	movs	r3, r1
 80008d4:	1e5a      	subs	r2, r3, #1
 80008d6:	4193      	sbcs	r3, r2
 80008d8:	4303      	orrs	r3, r0
 80008da:	18f6      	adds	r6, r6, r3
 80008dc:	0173      	lsls	r3, r6, #5
 80008de:	d59b      	bpl.n	8000818 <__aeabi_fadd+0x1ac>
 80008e0:	3501      	adds	r5, #1
 80008e2:	2dff      	cmp	r5, #255	@ 0xff
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fadd+0x27c>
 80008e6:	e73e      	b.n	8000766 <__aeabi_fadd+0xfa>
 80008e8:	2301      	movs	r3, #1
 80008ea:	494d      	ldr	r1, [pc, #308]	@ (8000a20 <__aeabi_fadd+0x3b4>)
 80008ec:	0872      	lsrs	r2, r6, #1
 80008ee:	4033      	ands	r3, r6
 80008f0:	400a      	ands	r2, r1
 80008f2:	431a      	orrs	r2, r3
 80008f4:	0016      	movs	r6, r2
 80008f6:	0753      	lsls	r3, r2, #29
 80008f8:	d004      	beq.n	8000904 <__aeabi_fadd+0x298>
 80008fa:	230f      	movs	r3, #15
 80008fc:	4013      	ands	r3, r2
 80008fe:	2b04      	cmp	r3, #4
 8000900:	d000      	beq.n	8000904 <__aeabi_fadd+0x298>
 8000902:	e72a      	b.n	800075a <__aeabi_fadd+0xee>
 8000904:	0173      	lsls	r3, r6, #5
 8000906:	d500      	bpl.n	800090a <__aeabi_fadd+0x29e>
 8000908:	e72a      	b.n	8000760 <__aeabi_fadd+0xf4>
 800090a:	002b      	movs	r3, r5
 800090c:	08f7      	lsrs	r7, r6, #3
 800090e:	e6f7      	b.n	8000700 <__aeabi_fadd+0x94>
 8000910:	2bff      	cmp	r3, #255	@ 0xff
 8000912:	d100      	bne.n	8000916 <__aeabi_fadd+0x2aa>
 8000914:	e727      	b.n	8000766 <__aeabi_fadd+0xfa>
 8000916:	1871      	adds	r1, r6, r1
 8000918:	0849      	lsrs	r1, r1, #1
 800091a:	074a      	lsls	r2, r1, #29
 800091c:	d02f      	beq.n	800097e <__aeabi_fadd+0x312>
 800091e:	220f      	movs	r2, #15
 8000920:	400a      	ands	r2, r1
 8000922:	2a04      	cmp	r2, #4
 8000924:	d02b      	beq.n	800097e <__aeabi_fadd+0x312>
 8000926:	1d0e      	adds	r6, r1, #4
 8000928:	e6e6      	b.n	80006f8 <__aeabi_fadd+0x8c>
 800092a:	2aff      	cmp	r2, #255	@ 0xff
 800092c:	d08d      	beq.n	800084a <__aeabi_fadd+0x1de>
 800092e:	2080      	movs	r0, #128	@ 0x80
 8000930:	04c0      	lsls	r0, r0, #19
 8000932:	4306      	orrs	r6, r0
 8000934:	2b1b      	cmp	r3, #27
 8000936:	dd24      	ble.n	8000982 <__aeabi_fadd+0x316>
 8000938:	0013      	movs	r3, r2
 800093a:	1d4e      	adds	r6, r1, #5
 800093c:	e6dc      	b.n	80006f8 <__aeabi_fadd+0x8c>
 800093e:	464c      	mov	r4, r9
 8000940:	1b8f      	subs	r7, r1, r6
 8000942:	e6f9      	b.n	8000738 <__aeabi_fadd+0xcc>
 8000944:	464c      	mov	r4, r9
 8000946:	000e      	movs	r6, r1
 8000948:	e6d6      	b.n	80006f8 <__aeabi_fadd+0x8c>
 800094a:	2e00      	cmp	r6, #0
 800094c:	d149      	bne.n	80009e2 <__aeabi_fadd+0x376>
 800094e:	2900      	cmp	r1, #0
 8000950:	d068      	beq.n	8000a24 <__aeabi_fadd+0x3b8>
 8000952:	4667      	mov	r7, ip
 8000954:	464c      	mov	r4, r9
 8000956:	e77c      	b.n	8000852 <__aeabi_fadd+0x1e6>
 8000958:	1870      	adds	r0, r6, r1
 800095a:	0143      	lsls	r3, r0, #5
 800095c:	d574      	bpl.n	8000a48 <__aeabi_fadd+0x3dc>
 800095e:	4930      	ldr	r1, [pc, #192]	@ (8000a20 <__aeabi_fadd+0x3b4>)
 8000960:	0840      	lsrs	r0, r0, #1
 8000962:	4001      	ands	r1, r0
 8000964:	0743      	lsls	r3, r0, #29
 8000966:	d009      	beq.n	800097c <__aeabi_fadd+0x310>
 8000968:	230f      	movs	r3, #15
 800096a:	4003      	ands	r3, r0
 800096c:	2b04      	cmp	r3, #4
 800096e:	d005      	beq.n	800097c <__aeabi_fadd+0x310>
 8000970:	2302      	movs	r3, #2
 8000972:	1d0e      	adds	r6, r1, #4
 8000974:	e6c0      	b.n	80006f8 <__aeabi_fadd+0x8c>
 8000976:	2301      	movs	r3, #1
 8000978:	08cf      	lsrs	r7, r1, #3
 800097a:	e6c1      	b.n	8000700 <__aeabi_fadd+0x94>
 800097c:	2302      	movs	r3, #2
 800097e:	08cf      	lsrs	r7, r1, #3
 8000980:	e6be      	b.n	8000700 <__aeabi_fadd+0x94>
 8000982:	2520      	movs	r5, #32
 8000984:	0030      	movs	r0, r6
 8000986:	40d8      	lsrs	r0, r3
 8000988:	1aeb      	subs	r3, r5, r3
 800098a:	409e      	lsls	r6, r3
 800098c:	0033      	movs	r3, r6
 800098e:	1e5d      	subs	r5, r3, #1
 8000990:	41ab      	sbcs	r3, r5
 8000992:	4303      	orrs	r3, r0
 8000994:	0015      	movs	r5, r2
 8000996:	185e      	adds	r6, r3, r1
 8000998:	e7a0      	b.n	80008dc <__aeabi_fadd+0x270>
 800099a:	2900      	cmp	r1, #0
 800099c:	d100      	bne.n	80009a0 <__aeabi_fadd+0x334>
 800099e:	e765      	b.n	800086c <__aeabi_fadd+0x200>
 80009a0:	464c      	mov	r4, r9
 80009a2:	4667      	mov	r7, ip
 80009a4:	e6ac      	b.n	8000700 <__aeabi_fadd+0x94>
 80009a6:	1b8f      	subs	r7, r1, r6
 80009a8:	017b      	lsls	r3, r7, #5
 80009aa:	d52e      	bpl.n	8000a0a <__aeabi_fadd+0x39e>
 80009ac:	01bf      	lsls	r7, r7, #6
 80009ae:	09bf      	lsrs	r7, r7, #6
 80009b0:	0038      	movs	r0, r7
 80009b2:	f000 fe49 	bl	8001648 <__clzsi2>
 80009b6:	003b      	movs	r3, r7
 80009b8:	3805      	subs	r0, #5
 80009ba:	4083      	lsls	r3, r0
 80009bc:	464c      	mov	r4, r9
 80009be:	3501      	adds	r5, #1
 80009c0:	e710      	b.n	80007e4 <__aeabi_fadd+0x178>
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fadd+0x35c>
 80009c6:	e740      	b.n	800084a <__aeabi_fadd+0x1de>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	d100      	bne.n	80009ce <__aeabi_fadd+0x362>
 80009cc:	e741      	b.n	8000852 <__aeabi_fadd+0x1e6>
 80009ce:	2380      	movs	r3, #128	@ 0x80
 80009d0:	03db      	lsls	r3, r3, #15
 80009d2:	429f      	cmp	r7, r3
 80009d4:	d200      	bcs.n	80009d8 <__aeabi_fadd+0x36c>
 80009d6:	e73c      	b.n	8000852 <__aeabi_fadd+0x1e6>
 80009d8:	459c      	cmp	ip, r3
 80009da:	d300      	bcc.n	80009de <__aeabi_fadd+0x372>
 80009dc:	e739      	b.n	8000852 <__aeabi_fadd+0x1e6>
 80009de:	4667      	mov	r7, ip
 80009e0:	e737      	b.n	8000852 <__aeabi_fadd+0x1e6>
 80009e2:	2900      	cmp	r1, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x37c>
 80009e6:	e734      	b.n	8000852 <__aeabi_fadd+0x1e6>
 80009e8:	2380      	movs	r3, #128	@ 0x80
 80009ea:	03db      	lsls	r3, r3, #15
 80009ec:	429f      	cmp	r7, r3
 80009ee:	d200      	bcs.n	80009f2 <__aeabi_fadd+0x386>
 80009f0:	e72f      	b.n	8000852 <__aeabi_fadd+0x1e6>
 80009f2:	459c      	cmp	ip, r3
 80009f4:	d300      	bcc.n	80009f8 <__aeabi_fadd+0x38c>
 80009f6:	e72c      	b.n	8000852 <__aeabi_fadd+0x1e6>
 80009f8:	464c      	mov	r4, r9
 80009fa:	4667      	mov	r7, ip
 80009fc:	e729      	b.n	8000852 <__aeabi_fadd+0x1e6>
 80009fe:	2900      	cmp	r1, #0
 8000a00:	d100      	bne.n	8000a04 <__aeabi_fadd+0x398>
 8000a02:	e734      	b.n	800086e <__aeabi_fadd+0x202>
 8000a04:	2300      	movs	r3, #0
 8000a06:	08cf      	lsrs	r7, r1, #3
 8000a08:	e67a      	b.n	8000700 <__aeabi_fadd+0x94>
 8000a0a:	464c      	mov	r4, r9
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	08ff      	lsrs	r7, r7, #3
 8000a10:	e676      	b.n	8000700 <__aeabi_fadd+0x94>
 8000a12:	2f00      	cmp	r7, #0
 8000a14:	d100      	bne.n	8000a18 <__aeabi_fadd+0x3ac>
 8000a16:	e729      	b.n	800086c <__aeabi_fadd+0x200>
 8000a18:	08ff      	lsrs	r7, r7, #3
 8000a1a:	e671      	b.n	8000700 <__aeabi_fadd+0x94>
 8000a1c:	fbffffff 	.word	0xfbffffff
 8000a20:	7dffffff 	.word	0x7dffffff
 8000a24:	2280      	movs	r2, #128	@ 0x80
 8000a26:	2400      	movs	r4, #0
 8000a28:	20ff      	movs	r0, #255	@ 0xff
 8000a2a:	03d2      	lsls	r2, r2, #15
 8000a2c:	e69d      	b.n	800076a <__aeabi_fadd+0xfe>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e666      	b.n	8000700 <__aeabi_fadd+0x94>
 8000a32:	2300      	movs	r3, #0
 8000a34:	08d7      	lsrs	r7, r2, #3
 8000a36:	e663      	b.n	8000700 <__aeabi_fadd+0x94>
 8000a38:	2001      	movs	r0, #1
 8000a3a:	0172      	lsls	r2, r6, #5
 8000a3c:	d500      	bpl.n	8000a40 <__aeabi_fadd+0x3d4>
 8000a3e:	e6e7      	b.n	8000810 <__aeabi_fadd+0x1a4>
 8000a40:	0031      	movs	r1, r6
 8000a42:	2300      	movs	r3, #0
 8000a44:	08cf      	lsrs	r7, r1, #3
 8000a46:	e65b      	b.n	8000700 <__aeabi_fadd+0x94>
 8000a48:	2301      	movs	r3, #1
 8000a4a:	08c7      	lsrs	r7, r0, #3
 8000a4c:	e658      	b.n	8000700 <__aeabi_fadd+0x94>
 8000a4e:	46c0      	nop			@ (mov r8, r8)

08000a50 <__aeabi_fdiv>:
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	4646      	mov	r6, r8
 8000a54:	464f      	mov	r7, r9
 8000a56:	46d6      	mov	lr, sl
 8000a58:	0245      	lsls	r5, r0, #9
 8000a5a:	b5c0      	push	{r6, r7, lr}
 8000a5c:	0fc3      	lsrs	r3, r0, #31
 8000a5e:	0047      	lsls	r7, r0, #1
 8000a60:	4698      	mov	r8, r3
 8000a62:	1c0e      	adds	r6, r1, #0
 8000a64:	0a6d      	lsrs	r5, r5, #9
 8000a66:	0e3f      	lsrs	r7, r7, #24
 8000a68:	d05b      	beq.n	8000b22 <__aeabi_fdiv+0xd2>
 8000a6a:	2fff      	cmp	r7, #255	@ 0xff
 8000a6c:	d021      	beq.n	8000ab2 <__aeabi_fdiv+0x62>
 8000a6e:	2380      	movs	r3, #128	@ 0x80
 8000a70:	00ed      	lsls	r5, r5, #3
 8000a72:	04db      	lsls	r3, r3, #19
 8000a74:	431d      	orrs	r5, r3
 8000a76:	2300      	movs	r3, #0
 8000a78:	4699      	mov	r9, r3
 8000a7a:	469a      	mov	sl, r3
 8000a7c:	3f7f      	subs	r7, #127	@ 0x7f
 8000a7e:	0274      	lsls	r4, r6, #9
 8000a80:	0073      	lsls	r3, r6, #1
 8000a82:	0a64      	lsrs	r4, r4, #9
 8000a84:	0e1b      	lsrs	r3, r3, #24
 8000a86:	0ff6      	lsrs	r6, r6, #31
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d020      	beq.n	8000ace <__aeabi_fdiv+0x7e>
 8000a8c:	2bff      	cmp	r3, #255	@ 0xff
 8000a8e:	d043      	beq.n	8000b18 <__aeabi_fdiv+0xc8>
 8000a90:	2280      	movs	r2, #128	@ 0x80
 8000a92:	2000      	movs	r0, #0
 8000a94:	00e4      	lsls	r4, r4, #3
 8000a96:	04d2      	lsls	r2, r2, #19
 8000a98:	4314      	orrs	r4, r2
 8000a9a:	3b7f      	subs	r3, #127	@ 0x7f
 8000a9c:	4642      	mov	r2, r8
 8000a9e:	1aff      	subs	r7, r7, r3
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	4072      	eors	r2, r6
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d900      	bls.n	8000aaa <__aeabi_fdiv+0x5a>
 8000aa8:	e09d      	b.n	8000be6 <__aeabi_fdiv+0x196>
 8000aaa:	4971      	ldr	r1, [pc, #452]	@ (8000c70 <__aeabi_fdiv+0x220>)
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	58cb      	ldr	r3, [r1, r3]
 8000ab0:	469f      	mov	pc, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d15a      	bne.n	8000b6c <__aeabi_fdiv+0x11c>
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	4699      	mov	r9, r3
 8000aba:	3b06      	subs	r3, #6
 8000abc:	0274      	lsls	r4, r6, #9
 8000abe:	469a      	mov	sl, r3
 8000ac0:	0073      	lsls	r3, r6, #1
 8000ac2:	27ff      	movs	r7, #255	@ 0xff
 8000ac4:	0a64      	lsrs	r4, r4, #9
 8000ac6:	0e1b      	lsrs	r3, r3, #24
 8000ac8:	0ff6      	lsrs	r6, r6, #31
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1de      	bne.n	8000a8c <__aeabi_fdiv+0x3c>
 8000ace:	2c00      	cmp	r4, #0
 8000ad0:	d13b      	bne.n	8000b4a <__aeabi_fdiv+0xfa>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	4642      	mov	r2, r8
 8000ad6:	4649      	mov	r1, r9
 8000ad8:	4072      	eors	r2, r6
 8000ada:	4319      	orrs	r1, r3
 8000adc:	290e      	cmp	r1, #14
 8000ade:	d818      	bhi.n	8000b12 <__aeabi_fdiv+0xc2>
 8000ae0:	4864      	ldr	r0, [pc, #400]	@ (8000c74 <__aeabi_fdiv+0x224>)
 8000ae2:	0089      	lsls	r1, r1, #2
 8000ae4:	5841      	ldr	r1, [r0, r1]
 8000ae6:	468f      	mov	pc, r1
 8000ae8:	4653      	mov	r3, sl
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d100      	bne.n	8000af0 <__aeabi_fdiv+0xa0>
 8000aee:	e0b8      	b.n	8000c62 <__aeabi_fdiv+0x212>
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	d06e      	beq.n	8000bd2 <__aeabi_fdiv+0x182>
 8000af4:	4642      	mov	r2, r8
 8000af6:	002c      	movs	r4, r5
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d140      	bne.n	8000b7e <__aeabi_fdiv+0x12e>
 8000afc:	2000      	movs	r0, #0
 8000afe:	2400      	movs	r4, #0
 8000b00:	05c0      	lsls	r0, r0, #23
 8000b02:	4320      	orrs	r0, r4
 8000b04:	07d2      	lsls	r2, r2, #31
 8000b06:	4310      	orrs	r0, r2
 8000b08:	bce0      	pop	{r5, r6, r7}
 8000b0a:	46ba      	mov	sl, r7
 8000b0c:	46b1      	mov	r9, r6
 8000b0e:	46a8      	mov	r8, r5
 8000b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b12:	20ff      	movs	r0, #255	@ 0xff
 8000b14:	2400      	movs	r4, #0
 8000b16:	e7f3      	b.n	8000b00 <__aeabi_fdiv+0xb0>
 8000b18:	2c00      	cmp	r4, #0
 8000b1a:	d120      	bne.n	8000b5e <__aeabi_fdiv+0x10e>
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	3fff      	subs	r7, #255	@ 0xff
 8000b20:	e7d8      	b.n	8000ad4 <__aeabi_fdiv+0x84>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d105      	bne.n	8000b32 <__aeabi_fdiv+0xe2>
 8000b26:	2304      	movs	r3, #4
 8000b28:	4699      	mov	r9, r3
 8000b2a:	3b03      	subs	r3, #3
 8000b2c:	2700      	movs	r7, #0
 8000b2e:	469a      	mov	sl, r3
 8000b30:	e7a5      	b.n	8000a7e <__aeabi_fdiv+0x2e>
 8000b32:	0028      	movs	r0, r5
 8000b34:	f000 fd88 	bl	8001648 <__clzsi2>
 8000b38:	2776      	movs	r7, #118	@ 0x76
 8000b3a:	1f43      	subs	r3, r0, #5
 8000b3c:	409d      	lsls	r5, r3
 8000b3e:	2300      	movs	r3, #0
 8000b40:	427f      	negs	r7, r7
 8000b42:	4699      	mov	r9, r3
 8000b44:	469a      	mov	sl, r3
 8000b46:	1a3f      	subs	r7, r7, r0
 8000b48:	e799      	b.n	8000a7e <__aeabi_fdiv+0x2e>
 8000b4a:	0020      	movs	r0, r4
 8000b4c:	f000 fd7c 	bl	8001648 <__clzsi2>
 8000b50:	1f43      	subs	r3, r0, #5
 8000b52:	409c      	lsls	r4, r3
 8000b54:	2376      	movs	r3, #118	@ 0x76
 8000b56:	425b      	negs	r3, r3
 8000b58:	1a1b      	subs	r3, r3, r0
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	e79e      	b.n	8000a9c <__aeabi_fdiv+0x4c>
 8000b5e:	2303      	movs	r3, #3
 8000b60:	464a      	mov	r2, r9
 8000b62:	431a      	orrs	r2, r3
 8000b64:	4691      	mov	r9, r2
 8000b66:	2003      	movs	r0, #3
 8000b68:	33fc      	adds	r3, #252	@ 0xfc
 8000b6a:	e797      	b.n	8000a9c <__aeabi_fdiv+0x4c>
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	4699      	mov	r9, r3
 8000b70:	3b09      	subs	r3, #9
 8000b72:	27ff      	movs	r7, #255	@ 0xff
 8000b74:	469a      	mov	sl, r3
 8000b76:	e782      	b.n	8000a7e <__aeabi_fdiv+0x2e>
 8000b78:	2803      	cmp	r0, #3
 8000b7a:	d02c      	beq.n	8000bd6 <__aeabi_fdiv+0x186>
 8000b7c:	0032      	movs	r2, r6
 8000b7e:	0038      	movs	r0, r7
 8000b80:	307f      	adds	r0, #127	@ 0x7f
 8000b82:	2800      	cmp	r0, #0
 8000b84:	dd47      	ble.n	8000c16 <__aeabi_fdiv+0x1c6>
 8000b86:	0763      	lsls	r3, r4, #29
 8000b88:	d004      	beq.n	8000b94 <__aeabi_fdiv+0x144>
 8000b8a:	230f      	movs	r3, #15
 8000b8c:	4023      	ands	r3, r4
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	d000      	beq.n	8000b94 <__aeabi_fdiv+0x144>
 8000b92:	3404      	adds	r4, #4
 8000b94:	0123      	lsls	r3, r4, #4
 8000b96:	d503      	bpl.n	8000ba0 <__aeabi_fdiv+0x150>
 8000b98:	0038      	movs	r0, r7
 8000b9a:	4b37      	ldr	r3, [pc, #220]	@ (8000c78 <__aeabi_fdiv+0x228>)
 8000b9c:	3080      	adds	r0, #128	@ 0x80
 8000b9e:	401c      	ands	r4, r3
 8000ba0:	28fe      	cmp	r0, #254	@ 0xfe
 8000ba2:	dcb6      	bgt.n	8000b12 <__aeabi_fdiv+0xc2>
 8000ba4:	01a4      	lsls	r4, r4, #6
 8000ba6:	0a64      	lsrs	r4, r4, #9
 8000ba8:	b2c0      	uxtb	r0, r0
 8000baa:	e7a9      	b.n	8000b00 <__aeabi_fdiv+0xb0>
 8000bac:	2480      	movs	r4, #128	@ 0x80
 8000bae:	2200      	movs	r2, #0
 8000bb0:	20ff      	movs	r0, #255	@ 0xff
 8000bb2:	03e4      	lsls	r4, r4, #15
 8000bb4:	e7a4      	b.n	8000b00 <__aeabi_fdiv+0xb0>
 8000bb6:	2380      	movs	r3, #128	@ 0x80
 8000bb8:	03db      	lsls	r3, r3, #15
 8000bba:	421d      	tst	r5, r3
 8000bbc:	d001      	beq.n	8000bc2 <__aeabi_fdiv+0x172>
 8000bbe:	421c      	tst	r4, r3
 8000bc0:	d00b      	beq.n	8000bda <__aeabi_fdiv+0x18a>
 8000bc2:	2480      	movs	r4, #128	@ 0x80
 8000bc4:	03e4      	lsls	r4, r4, #15
 8000bc6:	432c      	orrs	r4, r5
 8000bc8:	0264      	lsls	r4, r4, #9
 8000bca:	4642      	mov	r2, r8
 8000bcc:	20ff      	movs	r0, #255	@ 0xff
 8000bce:	0a64      	lsrs	r4, r4, #9
 8000bd0:	e796      	b.n	8000b00 <__aeabi_fdiv+0xb0>
 8000bd2:	4646      	mov	r6, r8
 8000bd4:	002c      	movs	r4, r5
 8000bd6:	2380      	movs	r3, #128	@ 0x80
 8000bd8:	03db      	lsls	r3, r3, #15
 8000bda:	431c      	orrs	r4, r3
 8000bdc:	0264      	lsls	r4, r4, #9
 8000bde:	0032      	movs	r2, r6
 8000be0:	20ff      	movs	r0, #255	@ 0xff
 8000be2:	0a64      	lsrs	r4, r4, #9
 8000be4:	e78c      	b.n	8000b00 <__aeabi_fdiv+0xb0>
 8000be6:	016d      	lsls	r5, r5, #5
 8000be8:	0160      	lsls	r0, r4, #5
 8000bea:	4285      	cmp	r5, r0
 8000bec:	d22d      	bcs.n	8000c4a <__aeabi_fdiv+0x1fa>
 8000bee:	231b      	movs	r3, #27
 8000bf0:	2400      	movs	r4, #0
 8000bf2:	3f01      	subs	r7, #1
 8000bf4:	2601      	movs	r6, #1
 8000bf6:	0029      	movs	r1, r5
 8000bf8:	0064      	lsls	r4, r4, #1
 8000bfa:	006d      	lsls	r5, r5, #1
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	db01      	blt.n	8000c04 <__aeabi_fdiv+0x1b4>
 8000c00:	4285      	cmp	r5, r0
 8000c02:	d301      	bcc.n	8000c08 <__aeabi_fdiv+0x1b8>
 8000c04:	1a2d      	subs	r5, r5, r0
 8000c06:	4334      	orrs	r4, r6
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f3      	bne.n	8000bf6 <__aeabi_fdiv+0x1a6>
 8000c0e:	1e6b      	subs	r3, r5, #1
 8000c10:	419d      	sbcs	r5, r3
 8000c12:	432c      	orrs	r4, r5
 8000c14:	e7b3      	b.n	8000b7e <__aeabi_fdiv+0x12e>
 8000c16:	2301      	movs	r3, #1
 8000c18:	1a1b      	subs	r3, r3, r0
 8000c1a:	2b1b      	cmp	r3, #27
 8000c1c:	dd00      	ble.n	8000c20 <__aeabi_fdiv+0x1d0>
 8000c1e:	e76d      	b.n	8000afc <__aeabi_fdiv+0xac>
 8000c20:	0021      	movs	r1, r4
 8000c22:	379e      	adds	r7, #158	@ 0x9e
 8000c24:	40d9      	lsrs	r1, r3
 8000c26:	40bc      	lsls	r4, r7
 8000c28:	000b      	movs	r3, r1
 8000c2a:	1e61      	subs	r1, r4, #1
 8000c2c:	418c      	sbcs	r4, r1
 8000c2e:	4323      	orrs	r3, r4
 8000c30:	0759      	lsls	r1, r3, #29
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fdiv+0x1ee>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fdiv+0x1ee>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d413      	bmi.n	8000c6a <__aeabi_fdiv+0x21a>
 8000c42:	019b      	lsls	r3, r3, #6
 8000c44:	2000      	movs	r0, #0
 8000c46:	0a5c      	lsrs	r4, r3, #9
 8000c48:	e75a      	b.n	8000b00 <__aeabi_fdiv+0xb0>
 8000c4a:	231a      	movs	r3, #26
 8000c4c:	2401      	movs	r4, #1
 8000c4e:	1a2d      	subs	r5, r5, r0
 8000c50:	e7d0      	b.n	8000bf4 <__aeabi_fdiv+0x1a4>
 8000c52:	1e98      	subs	r0, r3, #2
 8000c54:	4243      	negs	r3, r0
 8000c56:	4158      	adcs	r0, r3
 8000c58:	4240      	negs	r0, r0
 8000c5a:	0032      	movs	r2, r6
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	b2c0      	uxtb	r0, r0
 8000c60:	e74e      	b.n	8000b00 <__aeabi_fdiv+0xb0>
 8000c62:	4642      	mov	r2, r8
 8000c64:	20ff      	movs	r0, #255	@ 0xff
 8000c66:	2400      	movs	r4, #0
 8000c68:	e74a      	b.n	8000b00 <__aeabi_fdiv+0xb0>
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	2400      	movs	r4, #0
 8000c6e:	e747      	b.n	8000b00 <__aeabi_fdiv+0xb0>
 8000c70:	08006a94 	.word	0x08006a94
 8000c74:	08006ad4 	.word	0x08006ad4
 8000c78:	f7ffffff 	.word	0xf7ffffff

08000c7c <__eqsf2>:
 8000c7c:	b570      	push	{r4, r5, r6, lr}
 8000c7e:	0042      	lsls	r2, r0, #1
 8000c80:	024e      	lsls	r6, r1, #9
 8000c82:	004c      	lsls	r4, r1, #1
 8000c84:	0245      	lsls	r5, r0, #9
 8000c86:	0a6d      	lsrs	r5, r5, #9
 8000c88:	0e12      	lsrs	r2, r2, #24
 8000c8a:	0fc3      	lsrs	r3, r0, #31
 8000c8c:	0a76      	lsrs	r6, r6, #9
 8000c8e:	0e24      	lsrs	r4, r4, #24
 8000c90:	0fc9      	lsrs	r1, r1, #31
 8000c92:	2aff      	cmp	r2, #255	@ 0xff
 8000c94:	d010      	beq.n	8000cb8 <__eqsf2+0x3c>
 8000c96:	2cff      	cmp	r4, #255	@ 0xff
 8000c98:	d00c      	beq.n	8000cb4 <__eqsf2+0x38>
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	42a2      	cmp	r2, r4
 8000c9e:	d10a      	bne.n	8000cb6 <__eqsf2+0x3a>
 8000ca0:	42b5      	cmp	r5, r6
 8000ca2:	d108      	bne.n	8000cb6 <__eqsf2+0x3a>
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	d00f      	beq.n	8000cc8 <__eqsf2+0x4c>
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	d104      	bne.n	8000cb6 <__eqsf2+0x3a>
 8000cac:	0028      	movs	r0, r5
 8000cae:	1e43      	subs	r3, r0, #1
 8000cb0:	4198      	sbcs	r0, r3
 8000cb2:	e000      	b.n	8000cb6 <__eqsf2+0x3a>
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	bd70      	pop	{r4, r5, r6, pc}
 8000cb8:	2001      	movs	r0, #1
 8000cba:	2cff      	cmp	r4, #255	@ 0xff
 8000cbc:	d1fb      	bne.n	8000cb6 <__eqsf2+0x3a>
 8000cbe:	4335      	orrs	r5, r6
 8000cc0:	d1f9      	bne.n	8000cb6 <__eqsf2+0x3a>
 8000cc2:	404b      	eors	r3, r1
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	e7f6      	b.n	8000cb6 <__eqsf2+0x3a>
 8000cc8:	2000      	movs	r0, #0
 8000cca:	e7f4      	b.n	8000cb6 <__eqsf2+0x3a>

08000ccc <__gesf2>:
 8000ccc:	b530      	push	{r4, r5, lr}
 8000cce:	0042      	lsls	r2, r0, #1
 8000cd0:	0244      	lsls	r4, r0, #9
 8000cd2:	024d      	lsls	r5, r1, #9
 8000cd4:	0fc3      	lsrs	r3, r0, #31
 8000cd6:	0048      	lsls	r0, r1, #1
 8000cd8:	0a64      	lsrs	r4, r4, #9
 8000cda:	0e12      	lsrs	r2, r2, #24
 8000cdc:	0a6d      	lsrs	r5, r5, #9
 8000cde:	0e00      	lsrs	r0, r0, #24
 8000ce0:	0fc9      	lsrs	r1, r1, #31
 8000ce2:	2aff      	cmp	r2, #255	@ 0xff
 8000ce4:	d018      	beq.n	8000d18 <__gesf2+0x4c>
 8000ce6:	28ff      	cmp	r0, #255	@ 0xff
 8000ce8:	d00a      	beq.n	8000d00 <__gesf2+0x34>
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	d11e      	bne.n	8000d2c <__gesf2+0x60>
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	d10a      	bne.n	8000d08 <__gesf2+0x3c>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	d029      	beq.n	8000d4a <__gesf2+0x7e>
 8000cf6:	2c00      	cmp	r4, #0
 8000cf8:	d12d      	bne.n	8000d56 <__gesf2+0x8a>
 8000cfa:	0048      	lsls	r0, r1, #1
 8000cfc:	3801      	subs	r0, #1
 8000cfe:	bd30      	pop	{r4, r5, pc}
 8000d00:	2d00      	cmp	r5, #0
 8000d02:	d125      	bne.n	8000d50 <__gesf2+0x84>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	d101      	bne.n	8000d0c <__gesf2+0x40>
 8000d08:	2c00      	cmp	r4, #0
 8000d0a:	d0f6      	beq.n	8000cfa <__gesf2+0x2e>
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d019      	beq.n	8000d44 <__gesf2+0x78>
 8000d10:	2001      	movs	r0, #1
 8000d12:	425b      	negs	r3, r3
 8000d14:	4318      	orrs	r0, r3
 8000d16:	e7f2      	b.n	8000cfe <__gesf2+0x32>
 8000d18:	2c00      	cmp	r4, #0
 8000d1a:	d119      	bne.n	8000d50 <__gesf2+0x84>
 8000d1c:	28ff      	cmp	r0, #255	@ 0xff
 8000d1e:	d1f7      	bne.n	8000d10 <__gesf2+0x44>
 8000d20:	2d00      	cmp	r5, #0
 8000d22:	d115      	bne.n	8000d50 <__gesf2+0x84>
 8000d24:	2000      	movs	r0, #0
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d1f2      	bne.n	8000d10 <__gesf2+0x44>
 8000d2a:	e7e8      	b.n	8000cfe <__gesf2+0x32>
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	d0ef      	beq.n	8000d10 <__gesf2+0x44>
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d1ed      	bne.n	8000d10 <__gesf2+0x44>
 8000d34:	4282      	cmp	r2, r0
 8000d36:	dceb      	bgt.n	8000d10 <__gesf2+0x44>
 8000d38:	db04      	blt.n	8000d44 <__gesf2+0x78>
 8000d3a:	42ac      	cmp	r4, r5
 8000d3c:	d8e8      	bhi.n	8000d10 <__gesf2+0x44>
 8000d3e:	2000      	movs	r0, #0
 8000d40:	42ac      	cmp	r4, r5
 8000d42:	d2dc      	bcs.n	8000cfe <__gesf2+0x32>
 8000d44:	0058      	lsls	r0, r3, #1
 8000d46:	3801      	subs	r0, #1
 8000d48:	e7d9      	b.n	8000cfe <__gesf2+0x32>
 8000d4a:	2c00      	cmp	r4, #0
 8000d4c:	d0d7      	beq.n	8000cfe <__gesf2+0x32>
 8000d4e:	e7df      	b.n	8000d10 <__gesf2+0x44>
 8000d50:	2002      	movs	r0, #2
 8000d52:	4240      	negs	r0, r0
 8000d54:	e7d3      	b.n	8000cfe <__gesf2+0x32>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d1da      	bne.n	8000d10 <__gesf2+0x44>
 8000d5a:	e7ee      	b.n	8000d3a <__gesf2+0x6e>

08000d5c <__lesf2>:
 8000d5c:	b530      	push	{r4, r5, lr}
 8000d5e:	0042      	lsls	r2, r0, #1
 8000d60:	0244      	lsls	r4, r0, #9
 8000d62:	024d      	lsls	r5, r1, #9
 8000d64:	0fc3      	lsrs	r3, r0, #31
 8000d66:	0048      	lsls	r0, r1, #1
 8000d68:	0a64      	lsrs	r4, r4, #9
 8000d6a:	0e12      	lsrs	r2, r2, #24
 8000d6c:	0a6d      	lsrs	r5, r5, #9
 8000d6e:	0e00      	lsrs	r0, r0, #24
 8000d70:	0fc9      	lsrs	r1, r1, #31
 8000d72:	2aff      	cmp	r2, #255	@ 0xff
 8000d74:	d017      	beq.n	8000da6 <__lesf2+0x4a>
 8000d76:	28ff      	cmp	r0, #255	@ 0xff
 8000d78:	d00a      	beq.n	8000d90 <__lesf2+0x34>
 8000d7a:	2a00      	cmp	r2, #0
 8000d7c:	d11b      	bne.n	8000db6 <__lesf2+0x5a>
 8000d7e:	2800      	cmp	r0, #0
 8000d80:	d10a      	bne.n	8000d98 <__lesf2+0x3c>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d01d      	beq.n	8000dc2 <__lesf2+0x66>
 8000d86:	2c00      	cmp	r4, #0
 8000d88:	d12d      	bne.n	8000de6 <__lesf2+0x8a>
 8000d8a:	0048      	lsls	r0, r1, #1
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	e011      	b.n	8000db4 <__lesf2+0x58>
 8000d90:	2d00      	cmp	r5, #0
 8000d92:	d10e      	bne.n	8000db2 <__lesf2+0x56>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	d101      	bne.n	8000d9c <__lesf2+0x40>
 8000d98:	2c00      	cmp	r4, #0
 8000d9a:	d0f6      	beq.n	8000d8a <__lesf2+0x2e>
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	d10c      	bne.n	8000dba <__lesf2+0x5e>
 8000da0:	0058      	lsls	r0, r3, #1
 8000da2:	3801      	subs	r0, #1
 8000da4:	e006      	b.n	8000db4 <__lesf2+0x58>
 8000da6:	2c00      	cmp	r4, #0
 8000da8:	d103      	bne.n	8000db2 <__lesf2+0x56>
 8000daa:	28ff      	cmp	r0, #255	@ 0xff
 8000dac:	d105      	bne.n	8000dba <__lesf2+0x5e>
 8000dae:	2d00      	cmp	r5, #0
 8000db0:	d015      	beq.n	8000dde <__lesf2+0x82>
 8000db2:	2002      	movs	r0, #2
 8000db4:	bd30      	pop	{r4, r5, pc}
 8000db6:	2800      	cmp	r0, #0
 8000db8:	d106      	bne.n	8000dc8 <__lesf2+0x6c>
 8000dba:	2001      	movs	r0, #1
 8000dbc:	425b      	negs	r3, r3
 8000dbe:	4318      	orrs	r0, r3
 8000dc0:	e7f8      	b.n	8000db4 <__lesf2+0x58>
 8000dc2:	2c00      	cmp	r4, #0
 8000dc4:	d0f6      	beq.n	8000db4 <__lesf2+0x58>
 8000dc6:	e7f8      	b.n	8000dba <__lesf2+0x5e>
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d1f6      	bne.n	8000dba <__lesf2+0x5e>
 8000dcc:	4282      	cmp	r2, r0
 8000dce:	dcf4      	bgt.n	8000dba <__lesf2+0x5e>
 8000dd0:	dbe6      	blt.n	8000da0 <__lesf2+0x44>
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	d8f1      	bhi.n	8000dba <__lesf2+0x5e>
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	42ac      	cmp	r4, r5
 8000dda:	d2eb      	bcs.n	8000db4 <__lesf2+0x58>
 8000ddc:	e7e0      	b.n	8000da0 <__lesf2+0x44>
 8000dde:	2000      	movs	r0, #0
 8000de0:	428b      	cmp	r3, r1
 8000de2:	d1ea      	bne.n	8000dba <__lesf2+0x5e>
 8000de4:	e7e6      	b.n	8000db4 <__lesf2+0x58>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d1e7      	bne.n	8000dba <__lesf2+0x5e>
 8000dea:	e7f2      	b.n	8000dd2 <__lesf2+0x76>

08000dec <__aeabi_fmul>:
 8000dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dee:	464f      	mov	r7, r9
 8000df0:	4646      	mov	r6, r8
 8000df2:	46d6      	mov	lr, sl
 8000df4:	0044      	lsls	r4, r0, #1
 8000df6:	b5c0      	push	{r6, r7, lr}
 8000df8:	0246      	lsls	r6, r0, #9
 8000dfa:	1c0f      	adds	r7, r1, #0
 8000dfc:	0a76      	lsrs	r6, r6, #9
 8000dfe:	0e24      	lsrs	r4, r4, #24
 8000e00:	0fc5      	lsrs	r5, r0, #31
 8000e02:	2c00      	cmp	r4, #0
 8000e04:	d100      	bne.n	8000e08 <__aeabi_fmul+0x1c>
 8000e06:	e0da      	b.n	8000fbe <__aeabi_fmul+0x1d2>
 8000e08:	2cff      	cmp	r4, #255	@ 0xff
 8000e0a:	d074      	beq.n	8000ef6 <__aeabi_fmul+0x10a>
 8000e0c:	2380      	movs	r3, #128	@ 0x80
 8000e0e:	00f6      	lsls	r6, r6, #3
 8000e10:	04db      	lsls	r3, r3, #19
 8000e12:	431e      	orrs	r6, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	4699      	mov	r9, r3
 8000e18:	469a      	mov	sl, r3
 8000e1a:	3c7f      	subs	r4, #127	@ 0x7f
 8000e1c:	027b      	lsls	r3, r7, #9
 8000e1e:	0a5b      	lsrs	r3, r3, #9
 8000e20:	4698      	mov	r8, r3
 8000e22:	007b      	lsls	r3, r7, #1
 8000e24:	0e1b      	lsrs	r3, r3, #24
 8000e26:	0fff      	lsrs	r7, r7, #31
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d074      	beq.n	8000f16 <__aeabi_fmul+0x12a>
 8000e2c:	2bff      	cmp	r3, #255	@ 0xff
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_fmul+0x46>
 8000e30:	e08e      	b.n	8000f50 <__aeabi_fmul+0x164>
 8000e32:	4642      	mov	r2, r8
 8000e34:	2180      	movs	r1, #128	@ 0x80
 8000e36:	00d2      	lsls	r2, r2, #3
 8000e38:	04c9      	lsls	r1, r1, #19
 8000e3a:	4311      	orrs	r1, r2
 8000e3c:	3b7f      	subs	r3, #127	@ 0x7f
 8000e3e:	002a      	movs	r2, r5
 8000e40:	18e4      	adds	r4, r4, r3
 8000e42:	464b      	mov	r3, r9
 8000e44:	407a      	eors	r2, r7
 8000e46:	4688      	mov	r8, r1
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	2b0a      	cmp	r3, #10
 8000e4c:	dc75      	bgt.n	8000f3a <__aeabi_fmul+0x14e>
 8000e4e:	464b      	mov	r3, r9
 8000e50:	2000      	movs	r0, #0
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	dd0f      	ble.n	8000e76 <__aeabi_fmul+0x8a>
 8000e56:	4649      	mov	r1, r9
 8000e58:	2301      	movs	r3, #1
 8000e5a:	408b      	lsls	r3, r1
 8000e5c:	21a6      	movs	r1, #166	@ 0xa6
 8000e5e:	00c9      	lsls	r1, r1, #3
 8000e60:	420b      	tst	r3, r1
 8000e62:	d169      	bne.n	8000f38 <__aeabi_fmul+0x14c>
 8000e64:	2190      	movs	r1, #144	@ 0x90
 8000e66:	0089      	lsls	r1, r1, #2
 8000e68:	420b      	tst	r3, r1
 8000e6a:	d000      	beq.n	8000e6e <__aeabi_fmul+0x82>
 8000e6c:	e100      	b.n	8001070 <__aeabi_fmul+0x284>
 8000e6e:	2188      	movs	r1, #136	@ 0x88
 8000e70:	4219      	tst	r1, r3
 8000e72:	d000      	beq.n	8000e76 <__aeabi_fmul+0x8a>
 8000e74:	e0f5      	b.n	8001062 <__aeabi_fmul+0x276>
 8000e76:	4641      	mov	r1, r8
 8000e78:	0409      	lsls	r1, r1, #16
 8000e7a:	0c09      	lsrs	r1, r1, #16
 8000e7c:	4643      	mov	r3, r8
 8000e7e:	0008      	movs	r0, r1
 8000e80:	0c35      	lsrs	r5, r6, #16
 8000e82:	0436      	lsls	r6, r6, #16
 8000e84:	0c1b      	lsrs	r3, r3, #16
 8000e86:	0c36      	lsrs	r6, r6, #16
 8000e88:	4370      	muls	r0, r6
 8000e8a:	4369      	muls	r1, r5
 8000e8c:	435e      	muls	r6, r3
 8000e8e:	435d      	muls	r5, r3
 8000e90:	1876      	adds	r6, r6, r1
 8000e92:	0c03      	lsrs	r3, r0, #16
 8000e94:	199b      	adds	r3, r3, r6
 8000e96:	4299      	cmp	r1, r3
 8000e98:	d903      	bls.n	8000ea2 <__aeabi_fmul+0xb6>
 8000e9a:	2180      	movs	r1, #128	@ 0x80
 8000e9c:	0249      	lsls	r1, r1, #9
 8000e9e:	468c      	mov	ip, r1
 8000ea0:	4465      	add	r5, ip
 8000ea2:	0400      	lsls	r0, r0, #16
 8000ea4:	0419      	lsls	r1, r3, #16
 8000ea6:	0c00      	lsrs	r0, r0, #16
 8000ea8:	1809      	adds	r1, r1, r0
 8000eaa:	018e      	lsls	r6, r1, #6
 8000eac:	1e70      	subs	r0, r6, #1
 8000eae:	4186      	sbcs	r6, r0
 8000eb0:	0c1b      	lsrs	r3, r3, #16
 8000eb2:	0e89      	lsrs	r1, r1, #26
 8000eb4:	195b      	adds	r3, r3, r5
 8000eb6:	430e      	orrs	r6, r1
 8000eb8:	019b      	lsls	r3, r3, #6
 8000eba:	431e      	orrs	r6, r3
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	d46c      	bmi.n	8000f9a <__aeabi_fmul+0x1ae>
 8000ec0:	0023      	movs	r3, r4
 8000ec2:	337f      	adds	r3, #127	@ 0x7f
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	dc00      	bgt.n	8000eca <__aeabi_fmul+0xde>
 8000ec8:	e0b1      	b.n	800102e <__aeabi_fmul+0x242>
 8000eca:	0015      	movs	r5, r2
 8000ecc:	0771      	lsls	r1, r6, #29
 8000ece:	d00b      	beq.n	8000ee8 <__aeabi_fmul+0xfc>
 8000ed0:	200f      	movs	r0, #15
 8000ed2:	0021      	movs	r1, r4
 8000ed4:	4030      	ands	r0, r6
 8000ed6:	2804      	cmp	r0, #4
 8000ed8:	d006      	beq.n	8000ee8 <__aeabi_fmul+0xfc>
 8000eda:	3604      	adds	r6, #4
 8000edc:	0132      	lsls	r2, r6, #4
 8000ede:	d503      	bpl.n	8000ee8 <__aeabi_fmul+0xfc>
 8000ee0:	4b6e      	ldr	r3, [pc, #440]	@ (800109c <__aeabi_fmul+0x2b0>)
 8000ee2:	401e      	ands	r6, r3
 8000ee4:	000b      	movs	r3, r1
 8000ee6:	3380      	adds	r3, #128	@ 0x80
 8000ee8:	2bfe      	cmp	r3, #254	@ 0xfe
 8000eea:	dd00      	ble.n	8000eee <__aeabi_fmul+0x102>
 8000eec:	e0bd      	b.n	800106a <__aeabi_fmul+0x27e>
 8000eee:	01b2      	lsls	r2, r6, #6
 8000ef0:	0a52      	lsrs	r2, r2, #9
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	e048      	b.n	8000f88 <__aeabi_fmul+0x19c>
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	d000      	beq.n	8000efc <__aeabi_fmul+0x110>
 8000efa:	e092      	b.n	8001022 <__aeabi_fmul+0x236>
 8000efc:	2308      	movs	r3, #8
 8000efe:	4699      	mov	r9, r3
 8000f00:	3b06      	subs	r3, #6
 8000f02:	469a      	mov	sl, r3
 8000f04:	027b      	lsls	r3, r7, #9
 8000f06:	0a5b      	lsrs	r3, r3, #9
 8000f08:	4698      	mov	r8, r3
 8000f0a:	007b      	lsls	r3, r7, #1
 8000f0c:	24ff      	movs	r4, #255	@ 0xff
 8000f0e:	0e1b      	lsrs	r3, r3, #24
 8000f10:	0fff      	lsrs	r7, r7, #31
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d18a      	bne.n	8000e2c <__aeabi_fmul+0x40>
 8000f16:	4642      	mov	r2, r8
 8000f18:	2a00      	cmp	r2, #0
 8000f1a:	d164      	bne.n	8000fe6 <__aeabi_fmul+0x1fa>
 8000f1c:	4649      	mov	r1, r9
 8000f1e:	3201      	adds	r2, #1
 8000f20:	4311      	orrs	r1, r2
 8000f22:	4689      	mov	r9, r1
 8000f24:	290a      	cmp	r1, #10
 8000f26:	dc08      	bgt.n	8000f3a <__aeabi_fmul+0x14e>
 8000f28:	407d      	eors	r5, r7
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	b2ea      	uxtb	r2, r5
 8000f2e:	2902      	cmp	r1, #2
 8000f30:	dc91      	bgt.n	8000e56 <__aeabi_fmul+0x6a>
 8000f32:	0015      	movs	r5, r2
 8000f34:	2200      	movs	r2, #0
 8000f36:	e027      	b.n	8000f88 <__aeabi_fmul+0x19c>
 8000f38:	0015      	movs	r5, r2
 8000f3a:	4653      	mov	r3, sl
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_fmul+0x156>
 8000f40:	e093      	b.n	800106a <__aeabi_fmul+0x27e>
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d01a      	beq.n	8000f7c <__aeabi_fmul+0x190>
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d12c      	bne.n	8000fa4 <__aeabi_fmul+0x1b8>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	e01b      	b.n	8000f88 <__aeabi_fmul+0x19c>
 8000f50:	4643      	mov	r3, r8
 8000f52:	34ff      	adds	r4, #255	@ 0xff
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d055      	beq.n	8001004 <__aeabi_fmul+0x218>
 8000f58:	2103      	movs	r1, #3
 8000f5a:	464b      	mov	r3, r9
 8000f5c:	430b      	orrs	r3, r1
 8000f5e:	0019      	movs	r1, r3
 8000f60:	2b0a      	cmp	r3, #10
 8000f62:	dc00      	bgt.n	8000f66 <__aeabi_fmul+0x17a>
 8000f64:	e092      	b.n	800108c <__aeabi_fmul+0x2a0>
 8000f66:	2b0f      	cmp	r3, #15
 8000f68:	d000      	beq.n	8000f6c <__aeabi_fmul+0x180>
 8000f6a:	e08c      	b.n	8001086 <__aeabi_fmul+0x29a>
 8000f6c:	2280      	movs	r2, #128	@ 0x80
 8000f6e:	03d2      	lsls	r2, r2, #15
 8000f70:	4216      	tst	r6, r2
 8000f72:	d003      	beq.n	8000f7c <__aeabi_fmul+0x190>
 8000f74:	4643      	mov	r3, r8
 8000f76:	4213      	tst	r3, r2
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fmul+0x190>
 8000f7a:	e07d      	b.n	8001078 <__aeabi_fmul+0x28c>
 8000f7c:	2280      	movs	r2, #128	@ 0x80
 8000f7e:	03d2      	lsls	r2, r2, #15
 8000f80:	4332      	orrs	r2, r6
 8000f82:	0252      	lsls	r2, r2, #9
 8000f84:	0a52      	lsrs	r2, r2, #9
 8000f86:	23ff      	movs	r3, #255	@ 0xff
 8000f88:	05d8      	lsls	r0, r3, #23
 8000f8a:	07ed      	lsls	r5, r5, #31
 8000f8c:	4310      	orrs	r0, r2
 8000f8e:	4328      	orrs	r0, r5
 8000f90:	bce0      	pop	{r5, r6, r7}
 8000f92:	46ba      	mov	sl, r7
 8000f94:	46b1      	mov	r9, r6
 8000f96:	46a8      	mov	r8, r5
 8000f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	0015      	movs	r5, r2
 8000f9e:	0871      	lsrs	r1, r6, #1
 8000fa0:	401e      	ands	r6, r3
 8000fa2:	430e      	orrs	r6, r1
 8000fa4:	0023      	movs	r3, r4
 8000fa6:	3380      	adds	r3, #128	@ 0x80
 8000fa8:	1c61      	adds	r1, r4, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	dd41      	ble.n	8001032 <__aeabi_fmul+0x246>
 8000fae:	0772      	lsls	r2, r6, #29
 8000fb0:	d094      	beq.n	8000edc <__aeabi_fmul+0xf0>
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	4032      	ands	r2, r6
 8000fb6:	2a04      	cmp	r2, #4
 8000fb8:	d000      	beq.n	8000fbc <__aeabi_fmul+0x1d0>
 8000fba:	e78e      	b.n	8000eda <__aeabi_fmul+0xee>
 8000fbc:	e78e      	b.n	8000edc <__aeabi_fmul+0xf0>
 8000fbe:	2e00      	cmp	r6, #0
 8000fc0:	d105      	bne.n	8000fce <__aeabi_fmul+0x1e2>
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	4699      	mov	r9, r3
 8000fc6:	3b03      	subs	r3, #3
 8000fc8:	2400      	movs	r4, #0
 8000fca:	469a      	mov	sl, r3
 8000fcc:	e726      	b.n	8000e1c <__aeabi_fmul+0x30>
 8000fce:	0030      	movs	r0, r6
 8000fd0:	f000 fb3a 	bl	8001648 <__clzsi2>
 8000fd4:	2476      	movs	r4, #118	@ 0x76
 8000fd6:	1f43      	subs	r3, r0, #5
 8000fd8:	409e      	lsls	r6, r3
 8000fda:	2300      	movs	r3, #0
 8000fdc:	4264      	negs	r4, r4
 8000fde:	4699      	mov	r9, r3
 8000fe0:	469a      	mov	sl, r3
 8000fe2:	1a24      	subs	r4, r4, r0
 8000fe4:	e71a      	b.n	8000e1c <__aeabi_fmul+0x30>
 8000fe6:	4640      	mov	r0, r8
 8000fe8:	f000 fb2e 	bl	8001648 <__clzsi2>
 8000fec:	464b      	mov	r3, r9
 8000fee:	1a24      	subs	r4, r4, r0
 8000ff0:	3c76      	subs	r4, #118	@ 0x76
 8000ff2:	2b0a      	cmp	r3, #10
 8000ff4:	dca1      	bgt.n	8000f3a <__aeabi_fmul+0x14e>
 8000ff6:	4643      	mov	r3, r8
 8000ff8:	3805      	subs	r0, #5
 8000ffa:	4083      	lsls	r3, r0
 8000ffc:	407d      	eors	r5, r7
 8000ffe:	4698      	mov	r8, r3
 8001000:	b2ea      	uxtb	r2, r5
 8001002:	e724      	b.n	8000e4e <__aeabi_fmul+0x62>
 8001004:	464a      	mov	r2, r9
 8001006:	3302      	adds	r3, #2
 8001008:	4313      	orrs	r3, r2
 800100a:	002a      	movs	r2, r5
 800100c:	407a      	eors	r2, r7
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	2b0a      	cmp	r3, #10
 8001012:	dc92      	bgt.n	8000f3a <__aeabi_fmul+0x14e>
 8001014:	4649      	mov	r1, r9
 8001016:	0015      	movs	r5, r2
 8001018:	2900      	cmp	r1, #0
 800101a:	d026      	beq.n	800106a <__aeabi_fmul+0x27e>
 800101c:	4699      	mov	r9, r3
 800101e:	2002      	movs	r0, #2
 8001020:	e719      	b.n	8000e56 <__aeabi_fmul+0x6a>
 8001022:	230c      	movs	r3, #12
 8001024:	4699      	mov	r9, r3
 8001026:	3b09      	subs	r3, #9
 8001028:	24ff      	movs	r4, #255	@ 0xff
 800102a:	469a      	mov	sl, r3
 800102c:	e6f6      	b.n	8000e1c <__aeabi_fmul+0x30>
 800102e:	0015      	movs	r5, r2
 8001030:	0021      	movs	r1, r4
 8001032:	2201      	movs	r2, #1
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b1b      	cmp	r3, #27
 8001038:	dd00      	ble.n	800103c <__aeabi_fmul+0x250>
 800103a:	e786      	b.n	8000f4a <__aeabi_fmul+0x15e>
 800103c:	319e      	adds	r1, #158	@ 0x9e
 800103e:	0032      	movs	r2, r6
 8001040:	408e      	lsls	r6, r1
 8001042:	40da      	lsrs	r2, r3
 8001044:	1e73      	subs	r3, r6, #1
 8001046:	419e      	sbcs	r6, r3
 8001048:	4332      	orrs	r2, r6
 800104a:	0753      	lsls	r3, r2, #29
 800104c:	d004      	beq.n	8001058 <__aeabi_fmul+0x26c>
 800104e:	230f      	movs	r3, #15
 8001050:	4013      	ands	r3, r2
 8001052:	2b04      	cmp	r3, #4
 8001054:	d000      	beq.n	8001058 <__aeabi_fmul+0x26c>
 8001056:	3204      	adds	r2, #4
 8001058:	0153      	lsls	r3, r2, #5
 800105a:	d510      	bpl.n	800107e <__aeabi_fmul+0x292>
 800105c:	2301      	movs	r3, #1
 800105e:	2200      	movs	r2, #0
 8001060:	e792      	b.n	8000f88 <__aeabi_fmul+0x19c>
 8001062:	003d      	movs	r5, r7
 8001064:	4646      	mov	r6, r8
 8001066:	4682      	mov	sl, r0
 8001068:	e767      	b.n	8000f3a <__aeabi_fmul+0x14e>
 800106a:	23ff      	movs	r3, #255	@ 0xff
 800106c:	2200      	movs	r2, #0
 800106e:	e78b      	b.n	8000f88 <__aeabi_fmul+0x19c>
 8001070:	2280      	movs	r2, #128	@ 0x80
 8001072:	2500      	movs	r5, #0
 8001074:	03d2      	lsls	r2, r2, #15
 8001076:	e786      	b.n	8000f86 <__aeabi_fmul+0x19a>
 8001078:	003d      	movs	r5, r7
 800107a:	431a      	orrs	r2, r3
 800107c:	e783      	b.n	8000f86 <__aeabi_fmul+0x19a>
 800107e:	0192      	lsls	r2, r2, #6
 8001080:	2300      	movs	r3, #0
 8001082:	0a52      	lsrs	r2, r2, #9
 8001084:	e780      	b.n	8000f88 <__aeabi_fmul+0x19c>
 8001086:	003d      	movs	r5, r7
 8001088:	4646      	mov	r6, r8
 800108a:	e777      	b.n	8000f7c <__aeabi_fmul+0x190>
 800108c:	002a      	movs	r2, r5
 800108e:	2301      	movs	r3, #1
 8001090:	407a      	eors	r2, r7
 8001092:	408b      	lsls	r3, r1
 8001094:	2003      	movs	r0, #3
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	e6e9      	b.n	8000e6e <__aeabi_fmul+0x82>
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	f7ffffff 	.word	0xf7ffffff

080010a0 <__aeabi_fsub>:
 80010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a2:	4647      	mov	r7, r8
 80010a4:	46ce      	mov	lr, r9
 80010a6:	0243      	lsls	r3, r0, #9
 80010a8:	b580      	push	{r7, lr}
 80010aa:	0a5f      	lsrs	r7, r3, #9
 80010ac:	099b      	lsrs	r3, r3, #6
 80010ae:	0045      	lsls	r5, r0, #1
 80010b0:	004a      	lsls	r2, r1, #1
 80010b2:	469c      	mov	ip, r3
 80010b4:	024b      	lsls	r3, r1, #9
 80010b6:	0fc4      	lsrs	r4, r0, #31
 80010b8:	0fce      	lsrs	r6, r1, #31
 80010ba:	0e2d      	lsrs	r5, r5, #24
 80010bc:	0a58      	lsrs	r0, r3, #9
 80010be:	0e12      	lsrs	r2, r2, #24
 80010c0:	0999      	lsrs	r1, r3, #6
 80010c2:	2aff      	cmp	r2, #255	@ 0xff
 80010c4:	d06b      	beq.n	800119e <__aeabi_fsub+0xfe>
 80010c6:	2301      	movs	r3, #1
 80010c8:	405e      	eors	r6, r3
 80010ca:	1aab      	subs	r3, r5, r2
 80010cc:	42b4      	cmp	r4, r6
 80010ce:	d04b      	beq.n	8001168 <__aeabi_fsub+0xc8>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_fsub+0x36>
 80010d4:	e0ff      	b.n	80012d6 <__aeabi_fsub+0x236>
 80010d6:	2a00      	cmp	r2, #0
 80010d8:	d100      	bne.n	80010dc <__aeabi_fsub+0x3c>
 80010da:	e088      	b.n	80011ee <__aeabi_fsub+0x14e>
 80010dc:	2dff      	cmp	r5, #255	@ 0xff
 80010de:	d100      	bne.n	80010e2 <__aeabi_fsub+0x42>
 80010e0:	e0ef      	b.n	80012c2 <__aeabi_fsub+0x222>
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	04d2      	lsls	r2, r2, #19
 80010e6:	4311      	orrs	r1, r2
 80010e8:	2001      	movs	r0, #1
 80010ea:	2b1b      	cmp	r3, #27
 80010ec:	dc08      	bgt.n	8001100 <__aeabi_fsub+0x60>
 80010ee:	0008      	movs	r0, r1
 80010f0:	2220      	movs	r2, #32
 80010f2:	40d8      	lsrs	r0, r3
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	4099      	lsls	r1, r3
 80010f8:	000b      	movs	r3, r1
 80010fa:	1e5a      	subs	r2, r3, #1
 80010fc:	4193      	sbcs	r3, r2
 80010fe:	4318      	orrs	r0, r3
 8001100:	4663      	mov	r3, ip
 8001102:	1a1b      	subs	r3, r3, r0
 8001104:	469c      	mov	ip, r3
 8001106:	4663      	mov	r3, ip
 8001108:	015b      	lsls	r3, r3, #5
 800110a:	d400      	bmi.n	800110e <__aeabi_fsub+0x6e>
 800110c:	e0cd      	b.n	80012aa <__aeabi_fsub+0x20a>
 800110e:	4663      	mov	r3, ip
 8001110:	019f      	lsls	r7, r3, #6
 8001112:	09bf      	lsrs	r7, r7, #6
 8001114:	0038      	movs	r0, r7
 8001116:	f000 fa97 	bl	8001648 <__clzsi2>
 800111a:	003b      	movs	r3, r7
 800111c:	3805      	subs	r0, #5
 800111e:	4083      	lsls	r3, r0
 8001120:	4285      	cmp	r5, r0
 8001122:	dc00      	bgt.n	8001126 <__aeabi_fsub+0x86>
 8001124:	e0a2      	b.n	800126c <__aeabi_fsub+0x1cc>
 8001126:	4ab7      	ldr	r2, [pc, #732]	@ (8001404 <__aeabi_fsub+0x364>)
 8001128:	1a2d      	subs	r5, r5, r0
 800112a:	401a      	ands	r2, r3
 800112c:	4694      	mov	ip, r2
 800112e:	075a      	lsls	r2, r3, #29
 8001130:	d100      	bne.n	8001134 <__aeabi_fsub+0x94>
 8001132:	e0c3      	b.n	80012bc <__aeabi_fsub+0x21c>
 8001134:	220f      	movs	r2, #15
 8001136:	4013      	ands	r3, r2
 8001138:	2b04      	cmp	r3, #4
 800113a:	d100      	bne.n	800113e <__aeabi_fsub+0x9e>
 800113c:	e0be      	b.n	80012bc <__aeabi_fsub+0x21c>
 800113e:	2304      	movs	r3, #4
 8001140:	4698      	mov	r8, r3
 8001142:	44c4      	add	ip, r8
 8001144:	4663      	mov	r3, ip
 8001146:	015b      	lsls	r3, r3, #5
 8001148:	d400      	bmi.n	800114c <__aeabi_fsub+0xac>
 800114a:	e0b7      	b.n	80012bc <__aeabi_fsub+0x21c>
 800114c:	1c68      	adds	r0, r5, #1
 800114e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001150:	d000      	beq.n	8001154 <__aeabi_fsub+0xb4>
 8001152:	e0a5      	b.n	80012a0 <__aeabi_fsub+0x200>
 8001154:	20ff      	movs	r0, #255	@ 0xff
 8001156:	2200      	movs	r2, #0
 8001158:	05c0      	lsls	r0, r0, #23
 800115a:	4310      	orrs	r0, r2
 800115c:	07e4      	lsls	r4, r4, #31
 800115e:	4320      	orrs	r0, r4
 8001160:	bcc0      	pop	{r6, r7}
 8001162:	46b9      	mov	r9, r7
 8001164:	46b0      	mov	r8, r6
 8001166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001168:	2b00      	cmp	r3, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0xce>
 800116c:	e1eb      	b.n	8001546 <__aeabi_fsub+0x4a6>
 800116e:	2a00      	cmp	r2, #0
 8001170:	d046      	beq.n	8001200 <__aeabi_fsub+0x160>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d100      	bne.n	8001178 <__aeabi_fsub+0xd8>
 8001176:	e0a4      	b.n	80012c2 <__aeabi_fsub+0x222>
 8001178:	2280      	movs	r2, #128	@ 0x80
 800117a:	04d2      	lsls	r2, r2, #19
 800117c:	4311      	orrs	r1, r2
 800117e:	2b1b      	cmp	r3, #27
 8001180:	dc00      	bgt.n	8001184 <__aeabi_fsub+0xe4>
 8001182:	e0fb      	b.n	800137c <__aeabi_fsub+0x2dc>
 8001184:	2305      	movs	r3, #5
 8001186:	4698      	mov	r8, r3
 8001188:	002b      	movs	r3, r5
 800118a:	44c4      	add	ip, r8
 800118c:	4662      	mov	r2, ip
 800118e:	08d7      	lsrs	r7, r2, #3
 8001190:	2bff      	cmp	r3, #255	@ 0xff
 8001192:	d100      	bne.n	8001196 <__aeabi_fsub+0xf6>
 8001194:	e095      	b.n	80012c2 <__aeabi_fsub+0x222>
 8001196:	027a      	lsls	r2, r7, #9
 8001198:	0a52      	lsrs	r2, r2, #9
 800119a:	b2d8      	uxtb	r0, r3
 800119c:	e7dc      	b.n	8001158 <__aeabi_fsub+0xb8>
 800119e:	002b      	movs	r3, r5
 80011a0:	3bff      	subs	r3, #255	@ 0xff
 80011a2:	4699      	mov	r9, r3
 80011a4:	2900      	cmp	r1, #0
 80011a6:	d118      	bne.n	80011da <__aeabi_fsub+0x13a>
 80011a8:	2301      	movs	r3, #1
 80011aa:	405e      	eors	r6, r3
 80011ac:	42b4      	cmp	r4, r6
 80011ae:	d100      	bne.n	80011b2 <__aeabi_fsub+0x112>
 80011b0:	e0ca      	b.n	8001348 <__aeabi_fsub+0x2a8>
 80011b2:	464b      	mov	r3, r9
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d02d      	beq.n	8001214 <__aeabi_fsub+0x174>
 80011b8:	2d00      	cmp	r5, #0
 80011ba:	d000      	beq.n	80011be <__aeabi_fsub+0x11e>
 80011bc:	e13c      	b.n	8001438 <__aeabi_fsub+0x398>
 80011be:	23ff      	movs	r3, #255	@ 0xff
 80011c0:	4664      	mov	r4, ip
 80011c2:	2c00      	cmp	r4, #0
 80011c4:	d100      	bne.n	80011c8 <__aeabi_fsub+0x128>
 80011c6:	e15f      	b.n	8001488 <__aeabi_fsub+0x3e8>
 80011c8:	1e5d      	subs	r5, r3, #1
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fsub+0x130>
 80011ce:	e174      	b.n	80014ba <__aeabi_fsub+0x41a>
 80011d0:	0034      	movs	r4, r6
 80011d2:	2bff      	cmp	r3, #255	@ 0xff
 80011d4:	d074      	beq.n	80012c0 <__aeabi_fsub+0x220>
 80011d6:	002b      	movs	r3, r5
 80011d8:	e103      	b.n	80013e2 <__aeabi_fsub+0x342>
 80011da:	42b4      	cmp	r4, r6
 80011dc:	d100      	bne.n	80011e0 <__aeabi_fsub+0x140>
 80011de:	e09c      	b.n	800131a <__aeabi_fsub+0x27a>
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d017      	beq.n	8001214 <__aeabi_fsub+0x174>
 80011e4:	2d00      	cmp	r5, #0
 80011e6:	d0ea      	beq.n	80011be <__aeabi_fsub+0x11e>
 80011e8:	0007      	movs	r7, r0
 80011ea:	0034      	movs	r4, r6
 80011ec:	e06c      	b.n	80012c8 <__aeabi_fsub+0x228>
 80011ee:	2900      	cmp	r1, #0
 80011f0:	d0cc      	beq.n	800118c <__aeabi_fsub+0xec>
 80011f2:	1e5a      	subs	r2, r3, #1
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d02b      	beq.n	8001250 <__aeabi_fsub+0x1b0>
 80011f8:	2bff      	cmp	r3, #255	@ 0xff
 80011fa:	d062      	beq.n	80012c2 <__aeabi_fsub+0x222>
 80011fc:	0013      	movs	r3, r2
 80011fe:	e773      	b.n	80010e8 <__aeabi_fsub+0x48>
 8001200:	2900      	cmp	r1, #0
 8001202:	d0c3      	beq.n	800118c <__aeabi_fsub+0xec>
 8001204:	1e5a      	subs	r2, r3, #1
 8001206:	2b01      	cmp	r3, #1
 8001208:	d100      	bne.n	800120c <__aeabi_fsub+0x16c>
 800120a:	e11e      	b.n	800144a <__aeabi_fsub+0x3aa>
 800120c:	2bff      	cmp	r3, #255	@ 0xff
 800120e:	d058      	beq.n	80012c2 <__aeabi_fsub+0x222>
 8001210:	0013      	movs	r3, r2
 8001212:	e7b4      	b.n	800117e <__aeabi_fsub+0xde>
 8001214:	22fe      	movs	r2, #254	@ 0xfe
 8001216:	1c6b      	adds	r3, r5, #1
 8001218:	421a      	tst	r2, r3
 800121a:	d10d      	bne.n	8001238 <__aeabi_fsub+0x198>
 800121c:	2d00      	cmp	r5, #0
 800121e:	d060      	beq.n	80012e2 <__aeabi_fsub+0x242>
 8001220:	4663      	mov	r3, ip
 8001222:	2b00      	cmp	r3, #0
 8001224:	d000      	beq.n	8001228 <__aeabi_fsub+0x188>
 8001226:	e120      	b.n	800146a <__aeabi_fsub+0x3ca>
 8001228:	2900      	cmp	r1, #0
 800122a:	d000      	beq.n	800122e <__aeabi_fsub+0x18e>
 800122c:	e128      	b.n	8001480 <__aeabi_fsub+0x3e0>
 800122e:	2280      	movs	r2, #128	@ 0x80
 8001230:	2400      	movs	r4, #0
 8001232:	20ff      	movs	r0, #255	@ 0xff
 8001234:	03d2      	lsls	r2, r2, #15
 8001236:	e78f      	b.n	8001158 <__aeabi_fsub+0xb8>
 8001238:	4663      	mov	r3, ip
 800123a:	1a5f      	subs	r7, r3, r1
 800123c:	017b      	lsls	r3, r7, #5
 800123e:	d500      	bpl.n	8001242 <__aeabi_fsub+0x1a2>
 8001240:	e0fe      	b.n	8001440 <__aeabi_fsub+0x3a0>
 8001242:	2f00      	cmp	r7, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x1a8>
 8001246:	e765      	b.n	8001114 <__aeabi_fsub+0x74>
 8001248:	2400      	movs	r4, #0
 800124a:	2000      	movs	r0, #0
 800124c:	2200      	movs	r2, #0
 800124e:	e783      	b.n	8001158 <__aeabi_fsub+0xb8>
 8001250:	4663      	mov	r3, ip
 8001252:	1a59      	subs	r1, r3, r1
 8001254:	014b      	lsls	r3, r1, #5
 8001256:	d400      	bmi.n	800125a <__aeabi_fsub+0x1ba>
 8001258:	e119      	b.n	800148e <__aeabi_fsub+0x3ee>
 800125a:	018f      	lsls	r7, r1, #6
 800125c:	09bf      	lsrs	r7, r7, #6
 800125e:	0038      	movs	r0, r7
 8001260:	f000 f9f2 	bl	8001648 <__clzsi2>
 8001264:	003b      	movs	r3, r7
 8001266:	3805      	subs	r0, #5
 8001268:	4083      	lsls	r3, r0
 800126a:	2501      	movs	r5, #1
 800126c:	2220      	movs	r2, #32
 800126e:	1b40      	subs	r0, r0, r5
 8001270:	3001      	adds	r0, #1
 8001272:	1a12      	subs	r2, r2, r0
 8001274:	0019      	movs	r1, r3
 8001276:	4093      	lsls	r3, r2
 8001278:	40c1      	lsrs	r1, r0
 800127a:	1e5a      	subs	r2, r3, #1
 800127c:	4193      	sbcs	r3, r2
 800127e:	4319      	orrs	r1, r3
 8001280:	468c      	mov	ip, r1
 8001282:	1e0b      	subs	r3, r1, #0
 8001284:	d0e1      	beq.n	800124a <__aeabi_fsub+0x1aa>
 8001286:	075b      	lsls	r3, r3, #29
 8001288:	d100      	bne.n	800128c <__aeabi_fsub+0x1ec>
 800128a:	e152      	b.n	8001532 <__aeabi_fsub+0x492>
 800128c:	230f      	movs	r3, #15
 800128e:	2500      	movs	r5, #0
 8001290:	400b      	ands	r3, r1
 8001292:	2b04      	cmp	r3, #4
 8001294:	d000      	beq.n	8001298 <__aeabi_fsub+0x1f8>
 8001296:	e752      	b.n	800113e <__aeabi_fsub+0x9e>
 8001298:	2001      	movs	r0, #1
 800129a:	014a      	lsls	r2, r1, #5
 800129c:	d400      	bmi.n	80012a0 <__aeabi_fsub+0x200>
 800129e:	e092      	b.n	80013c6 <__aeabi_fsub+0x326>
 80012a0:	b2c0      	uxtb	r0, r0
 80012a2:	4663      	mov	r3, ip
 80012a4:	019a      	lsls	r2, r3, #6
 80012a6:	0a52      	lsrs	r2, r2, #9
 80012a8:	e756      	b.n	8001158 <__aeabi_fsub+0xb8>
 80012aa:	4663      	mov	r3, ip
 80012ac:	075b      	lsls	r3, r3, #29
 80012ae:	d005      	beq.n	80012bc <__aeabi_fsub+0x21c>
 80012b0:	230f      	movs	r3, #15
 80012b2:	4662      	mov	r2, ip
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d000      	beq.n	80012bc <__aeabi_fsub+0x21c>
 80012ba:	e740      	b.n	800113e <__aeabi_fsub+0x9e>
 80012bc:	002b      	movs	r3, r5
 80012be:	e765      	b.n	800118c <__aeabi_fsub+0xec>
 80012c0:	0007      	movs	r7, r0
 80012c2:	2f00      	cmp	r7, #0
 80012c4:	d100      	bne.n	80012c8 <__aeabi_fsub+0x228>
 80012c6:	e745      	b.n	8001154 <__aeabi_fsub+0xb4>
 80012c8:	2280      	movs	r2, #128	@ 0x80
 80012ca:	03d2      	lsls	r2, r2, #15
 80012cc:	433a      	orrs	r2, r7
 80012ce:	0252      	lsls	r2, r2, #9
 80012d0:	20ff      	movs	r0, #255	@ 0xff
 80012d2:	0a52      	lsrs	r2, r2, #9
 80012d4:	e740      	b.n	8001158 <__aeabi_fsub+0xb8>
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d179      	bne.n	80013ce <__aeabi_fsub+0x32e>
 80012da:	22fe      	movs	r2, #254	@ 0xfe
 80012dc:	1c6b      	adds	r3, r5, #1
 80012de:	421a      	tst	r2, r3
 80012e0:	d1aa      	bne.n	8001238 <__aeabi_fsub+0x198>
 80012e2:	4663      	mov	r3, ip
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d100      	bne.n	80012ea <__aeabi_fsub+0x24a>
 80012e8:	e0f5      	b.n	80014d6 <__aeabi_fsub+0x436>
 80012ea:	2900      	cmp	r1, #0
 80012ec:	d100      	bne.n	80012f0 <__aeabi_fsub+0x250>
 80012ee:	e0d1      	b.n	8001494 <__aeabi_fsub+0x3f4>
 80012f0:	1a5f      	subs	r7, r3, r1
 80012f2:	2380      	movs	r3, #128	@ 0x80
 80012f4:	04db      	lsls	r3, r3, #19
 80012f6:	421f      	tst	r7, r3
 80012f8:	d100      	bne.n	80012fc <__aeabi_fsub+0x25c>
 80012fa:	e10e      	b.n	800151a <__aeabi_fsub+0x47a>
 80012fc:	4662      	mov	r2, ip
 80012fe:	2401      	movs	r4, #1
 8001300:	1a8a      	subs	r2, r1, r2
 8001302:	4694      	mov	ip, r2
 8001304:	2000      	movs	r0, #0
 8001306:	4034      	ands	r4, r6
 8001308:	2a00      	cmp	r2, #0
 800130a:	d100      	bne.n	800130e <__aeabi_fsub+0x26e>
 800130c:	e724      	b.n	8001158 <__aeabi_fsub+0xb8>
 800130e:	2001      	movs	r0, #1
 8001310:	421a      	tst	r2, r3
 8001312:	d1c6      	bne.n	80012a2 <__aeabi_fsub+0x202>
 8001314:	2300      	movs	r3, #0
 8001316:	08d7      	lsrs	r7, r2, #3
 8001318:	e73d      	b.n	8001196 <__aeabi_fsub+0xf6>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d017      	beq.n	800134e <__aeabi_fsub+0x2ae>
 800131e:	2d00      	cmp	r5, #0
 8001320:	d000      	beq.n	8001324 <__aeabi_fsub+0x284>
 8001322:	e0af      	b.n	8001484 <__aeabi_fsub+0x3e4>
 8001324:	23ff      	movs	r3, #255	@ 0xff
 8001326:	4665      	mov	r5, ip
 8001328:	2d00      	cmp	r5, #0
 800132a:	d100      	bne.n	800132e <__aeabi_fsub+0x28e>
 800132c:	e0ad      	b.n	800148a <__aeabi_fsub+0x3ea>
 800132e:	1e5e      	subs	r6, r3, #1
 8001330:	2b01      	cmp	r3, #1
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x296>
 8001334:	e089      	b.n	800144a <__aeabi_fsub+0x3aa>
 8001336:	2bff      	cmp	r3, #255	@ 0xff
 8001338:	d0c2      	beq.n	80012c0 <__aeabi_fsub+0x220>
 800133a:	2e1b      	cmp	r6, #27
 800133c:	dc00      	bgt.n	8001340 <__aeabi_fsub+0x2a0>
 800133e:	e0ab      	b.n	8001498 <__aeabi_fsub+0x3f8>
 8001340:	1d4b      	adds	r3, r1, #5
 8001342:	469c      	mov	ip, r3
 8001344:	0013      	movs	r3, r2
 8001346:	e721      	b.n	800118c <__aeabi_fsub+0xec>
 8001348:	464b      	mov	r3, r9
 800134a:	2b00      	cmp	r3, #0
 800134c:	d170      	bne.n	8001430 <__aeabi_fsub+0x390>
 800134e:	22fe      	movs	r2, #254	@ 0xfe
 8001350:	1c6b      	adds	r3, r5, #1
 8001352:	421a      	tst	r2, r3
 8001354:	d15e      	bne.n	8001414 <__aeabi_fsub+0x374>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x2bc>
 800135a:	e0c3      	b.n	80014e4 <__aeabi_fsub+0x444>
 800135c:	4663      	mov	r3, ip
 800135e:	2b00      	cmp	r3, #0
 8001360:	d100      	bne.n	8001364 <__aeabi_fsub+0x2c4>
 8001362:	e0d0      	b.n	8001506 <__aeabi_fsub+0x466>
 8001364:	2900      	cmp	r1, #0
 8001366:	d100      	bne.n	800136a <__aeabi_fsub+0x2ca>
 8001368:	e094      	b.n	8001494 <__aeabi_fsub+0x3f4>
 800136a:	000a      	movs	r2, r1
 800136c:	4462      	add	r2, ip
 800136e:	0153      	lsls	r3, r2, #5
 8001370:	d400      	bmi.n	8001374 <__aeabi_fsub+0x2d4>
 8001372:	e0d8      	b.n	8001526 <__aeabi_fsub+0x486>
 8001374:	0192      	lsls	r2, r2, #6
 8001376:	2001      	movs	r0, #1
 8001378:	0a52      	lsrs	r2, r2, #9
 800137a:	e6ed      	b.n	8001158 <__aeabi_fsub+0xb8>
 800137c:	0008      	movs	r0, r1
 800137e:	2220      	movs	r2, #32
 8001380:	40d8      	lsrs	r0, r3
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	4099      	lsls	r1, r3
 8001386:	000b      	movs	r3, r1
 8001388:	1e5a      	subs	r2, r3, #1
 800138a:	4193      	sbcs	r3, r2
 800138c:	4303      	orrs	r3, r0
 800138e:	449c      	add	ip, r3
 8001390:	4663      	mov	r3, ip
 8001392:	015b      	lsls	r3, r3, #5
 8001394:	d589      	bpl.n	80012aa <__aeabi_fsub+0x20a>
 8001396:	3501      	adds	r5, #1
 8001398:	2dff      	cmp	r5, #255	@ 0xff
 800139a:	d100      	bne.n	800139e <__aeabi_fsub+0x2fe>
 800139c:	e6da      	b.n	8001154 <__aeabi_fsub+0xb4>
 800139e:	4662      	mov	r2, ip
 80013a0:	2301      	movs	r3, #1
 80013a2:	4919      	ldr	r1, [pc, #100]	@ (8001408 <__aeabi_fsub+0x368>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	0852      	lsrs	r2, r2, #1
 80013a8:	400a      	ands	r2, r1
 80013aa:	431a      	orrs	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	4694      	mov	ip, r2
 80013b0:	075b      	lsls	r3, r3, #29
 80013b2:	d004      	beq.n	80013be <__aeabi_fsub+0x31e>
 80013b4:	230f      	movs	r3, #15
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d000      	beq.n	80013be <__aeabi_fsub+0x31e>
 80013bc:	e6bf      	b.n	800113e <__aeabi_fsub+0x9e>
 80013be:	4663      	mov	r3, ip
 80013c0:	015b      	lsls	r3, r3, #5
 80013c2:	d500      	bpl.n	80013c6 <__aeabi_fsub+0x326>
 80013c4:	e6c2      	b.n	800114c <__aeabi_fsub+0xac>
 80013c6:	4663      	mov	r3, ip
 80013c8:	08df      	lsrs	r7, r3, #3
 80013ca:	002b      	movs	r3, r5
 80013cc:	e6e3      	b.n	8001196 <__aeabi_fsub+0xf6>
 80013ce:	1b53      	subs	r3, r2, r5
 80013d0:	2d00      	cmp	r5, #0
 80013d2:	d100      	bne.n	80013d6 <__aeabi_fsub+0x336>
 80013d4:	e6f4      	b.n	80011c0 <__aeabi_fsub+0x120>
 80013d6:	2080      	movs	r0, #128	@ 0x80
 80013d8:	4664      	mov	r4, ip
 80013da:	04c0      	lsls	r0, r0, #19
 80013dc:	4304      	orrs	r4, r0
 80013de:	46a4      	mov	ip, r4
 80013e0:	0034      	movs	r4, r6
 80013e2:	2001      	movs	r0, #1
 80013e4:	2b1b      	cmp	r3, #27
 80013e6:	dc09      	bgt.n	80013fc <__aeabi_fsub+0x35c>
 80013e8:	2520      	movs	r5, #32
 80013ea:	4660      	mov	r0, ip
 80013ec:	40d8      	lsrs	r0, r3
 80013ee:	1aeb      	subs	r3, r5, r3
 80013f0:	4665      	mov	r5, ip
 80013f2:	409d      	lsls	r5, r3
 80013f4:	002b      	movs	r3, r5
 80013f6:	1e5d      	subs	r5, r3, #1
 80013f8:	41ab      	sbcs	r3, r5
 80013fa:	4318      	orrs	r0, r3
 80013fc:	1a0b      	subs	r3, r1, r0
 80013fe:	469c      	mov	ip, r3
 8001400:	0015      	movs	r5, r2
 8001402:	e680      	b.n	8001106 <__aeabi_fsub+0x66>
 8001404:	fbffffff 	.word	0xfbffffff
 8001408:	7dffffff 	.word	0x7dffffff
 800140c:	22fe      	movs	r2, #254	@ 0xfe
 800140e:	1c6b      	adds	r3, r5, #1
 8001410:	4213      	tst	r3, r2
 8001412:	d0a3      	beq.n	800135c <__aeabi_fsub+0x2bc>
 8001414:	2bff      	cmp	r3, #255	@ 0xff
 8001416:	d100      	bne.n	800141a <__aeabi_fsub+0x37a>
 8001418:	e69c      	b.n	8001154 <__aeabi_fsub+0xb4>
 800141a:	4461      	add	r1, ip
 800141c:	0849      	lsrs	r1, r1, #1
 800141e:	074a      	lsls	r2, r1, #29
 8001420:	d049      	beq.n	80014b6 <__aeabi_fsub+0x416>
 8001422:	220f      	movs	r2, #15
 8001424:	400a      	ands	r2, r1
 8001426:	2a04      	cmp	r2, #4
 8001428:	d045      	beq.n	80014b6 <__aeabi_fsub+0x416>
 800142a:	1d0a      	adds	r2, r1, #4
 800142c:	4694      	mov	ip, r2
 800142e:	e6ad      	b.n	800118c <__aeabi_fsub+0xec>
 8001430:	2d00      	cmp	r5, #0
 8001432:	d100      	bne.n	8001436 <__aeabi_fsub+0x396>
 8001434:	e776      	b.n	8001324 <__aeabi_fsub+0x284>
 8001436:	e68d      	b.n	8001154 <__aeabi_fsub+0xb4>
 8001438:	0034      	movs	r4, r6
 800143a:	20ff      	movs	r0, #255	@ 0xff
 800143c:	2200      	movs	r2, #0
 800143e:	e68b      	b.n	8001158 <__aeabi_fsub+0xb8>
 8001440:	4663      	mov	r3, ip
 8001442:	2401      	movs	r4, #1
 8001444:	1acf      	subs	r7, r1, r3
 8001446:	4034      	ands	r4, r6
 8001448:	e664      	b.n	8001114 <__aeabi_fsub+0x74>
 800144a:	4461      	add	r1, ip
 800144c:	014b      	lsls	r3, r1, #5
 800144e:	d56d      	bpl.n	800152c <__aeabi_fsub+0x48c>
 8001450:	0848      	lsrs	r0, r1, #1
 8001452:	4944      	ldr	r1, [pc, #272]	@ (8001564 <__aeabi_fsub+0x4c4>)
 8001454:	4001      	ands	r1, r0
 8001456:	0743      	lsls	r3, r0, #29
 8001458:	d02c      	beq.n	80014b4 <__aeabi_fsub+0x414>
 800145a:	230f      	movs	r3, #15
 800145c:	4003      	ands	r3, r0
 800145e:	2b04      	cmp	r3, #4
 8001460:	d028      	beq.n	80014b4 <__aeabi_fsub+0x414>
 8001462:	1d0b      	adds	r3, r1, #4
 8001464:	469c      	mov	ip, r3
 8001466:	2302      	movs	r3, #2
 8001468:	e690      	b.n	800118c <__aeabi_fsub+0xec>
 800146a:	2900      	cmp	r1, #0
 800146c:	d100      	bne.n	8001470 <__aeabi_fsub+0x3d0>
 800146e:	e72b      	b.n	80012c8 <__aeabi_fsub+0x228>
 8001470:	2380      	movs	r3, #128	@ 0x80
 8001472:	03db      	lsls	r3, r3, #15
 8001474:	429f      	cmp	r7, r3
 8001476:	d200      	bcs.n	800147a <__aeabi_fsub+0x3da>
 8001478:	e726      	b.n	80012c8 <__aeabi_fsub+0x228>
 800147a:	4298      	cmp	r0, r3
 800147c:	d300      	bcc.n	8001480 <__aeabi_fsub+0x3e0>
 800147e:	e723      	b.n	80012c8 <__aeabi_fsub+0x228>
 8001480:	2401      	movs	r4, #1
 8001482:	4034      	ands	r4, r6
 8001484:	0007      	movs	r7, r0
 8001486:	e71f      	b.n	80012c8 <__aeabi_fsub+0x228>
 8001488:	0034      	movs	r4, r6
 800148a:	468c      	mov	ip, r1
 800148c:	e67e      	b.n	800118c <__aeabi_fsub+0xec>
 800148e:	2301      	movs	r3, #1
 8001490:	08cf      	lsrs	r7, r1, #3
 8001492:	e680      	b.n	8001196 <__aeabi_fsub+0xf6>
 8001494:	2300      	movs	r3, #0
 8001496:	e67e      	b.n	8001196 <__aeabi_fsub+0xf6>
 8001498:	2020      	movs	r0, #32
 800149a:	4665      	mov	r5, ip
 800149c:	1b80      	subs	r0, r0, r6
 800149e:	4085      	lsls	r5, r0
 80014a0:	4663      	mov	r3, ip
 80014a2:	0028      	movs	r0, r5
 80014a4:	40f3      	lsrs	r3, r6
 80014a6:	1e45      	subs	r5, r0, #1
 80014a8:	41a8      	sbcs	r0, r5
 80014aa:	4303      	orrs	r3, r0
 80014ac:	469c      	mov	ip, r3
 80014ae:	0015      	movs	r5, r2
 80014b0:	448c      	add	ip, r1
 80014b2:	e76d      	b.n	8001390 <__aeabi_fsub+0x2f0>
 80014b4:	2302      	movs	r3, #2
 80014b6:	08cf      	lsrs	r7, r1, #3
 80014b8:	e66d      	b.n	8001196 <__aeabi_fsub+0xf6>
 80014ba:	1b0f      	subs	r7, r1, r4
 80014bc:	017b      	lsls	r3, r7, #5
 80014be:	d528      	bpl.n	8001512 <__aeabi_fsub+0x472>
 80014c0:	01bf      	lsls	r7, r7, #6
 80014c2:	09bf      	lsrs	r7, r7, #6
 80014c4:	0038      	movs	r0, r7
 80014c6:	f000 f8bf 	bl	8001648 <__clzsi2>
 80014ca:	003b      	movs	r3, r7
 80014cc:	3805      	subs	r0, #5
 80014ce:	4083      	lsls	r3, r0
 80014d0:	0034      	movs	r4, r6
 80014d2:	2501      	movs	r5, #1
 80014d4:	e6ca      	b.n	800126c <__aeabi_fsub+0x1cc>
 80014d6:	2900      	cmp	r1, #0
 80014d8:	d100      	bne.n	80014dc <__aeabi_fsub+0x43c>
 80014da:	e6b5      	b.n	8001248 <__aeabi_fsub+0x1a8>
 80014dc:	2401      	movs	r4, #1
 80014de:	0007      	movs	r7, r0
 80014e0:	4034      	ands	r4, r6
 80014e2:	e658      	b.n	8001196 <__aeabi_fsub+0xf6>
 80014e4:	4663      	mov	r3, ip
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d100      	bne.n	80014ec <__aeabi_fsub+0x44c>
 80014ea:	e6e9      	b.n	80012c0 <__aeabi_fsub+0x220>
 80014ec:	2900      	cmp	r1, #0
 80014ee:	d100      	bne.n	80014f2 <__aeabi_fsub+0x452>
 80014f0:	e6ea      	b.n	80012c8 <__aeabi_fsub+0x228>
 80014f2:	2380      	movs	r3, #128	@ 0x80
 80014f4:	03db      	lsls	r3, r3, #15
 80014f6:	429f      	cmp	r7, r3
 80014f8:	d200      	bcs.n	80014fc <__aeabi_fsub+0x45c>
 80014fa:	e6e5      	b.n	80012c8 <__aeabi_fsub+0x228>
 80014fc:	4298      	cmp	r0, r3
 80014fe:	d300      	bcc.n	8001502 <__aeabi_fsub+0x462>
 8001500:	e6e2      	b.n	80012c8 <__aeabi_fsub+0x228>
 8001502:	0007      	movs	r7, r0
 8001504:	e6e0      	b.n	80012c8 <__aeabi_fsub+0x228>
 8001506:	2900      	cmp	r1, #0
 8001508:	d100      	bne.n	800150c <__aeabi_fsub+0x46c>
 800150a:	e69e      	b.n	800124a <__aeabi_fsub+0x1aa>
 800150c:	2300      	movs	r3, #0
 800150e:	08cf      	lsrs	r7, r1, #3
 8001510:	e641      	b.n	8001196 <__aeabi_fsub+0xf6>
 8001512:	0034      	movs	r4, r6
 8001514:	2301      	movs	r3, #1
 8001516:	08ff      	lsrs	r7, r7, #3
 8001518:	e63d      	b.n	8001196 <__aeabi_fsub+0xf6>
 800151a:	2f00      	cmp	r7, #0
 800151c:	d100      	bne.n	8001520 <__aeabi_fsub+0x480>
 800151e:	e693      	b.n	8001248 <__aeabi_fsub+0x1a8>
 8001520:	2300      	movs	r3, #0
 8001522:	08ff      	lsrs	r7, r7, #3
 8001524:	e637      	b.n	8001196 <__aeabi_fsub+0xf6>
 8001526:	2300      	movs	r3, #0
 8001528:	08d7      	lsrs	r7, r2, #3
 800152a:	e634      	b.n	8001196 <__aeabi_fsub+0xf6>
 800152c:	2301      	movs	r3, #1
 800152e:	08cf      	lsrs	r7, r1, #3
 8001530:	e631      	b.n	8001196 <__aeabi_fsub+0xf6>
 8001532:	2280      	movs	r2, #128	@ 0x80
 8001534:	000b      	movs	r3, r1
 8001536:	04d2      	lsls	r2, r2, #19
 8001538:	2001      	movs	r0, #1
 800153a:	4013      	ands	r3, r2
 800153c:	4211      	tst	r1, r2
 800153e:	d000      	beq.n	8001542 <__aeabi_fsub+0x4a2>
 8001540:	e6ae      	b.n	80012a0 <__aeabi_fsub+0x200>
 8001542:	08cf      	lsrs	r7, r1, #3
 8001544:	e627      	b.n	8001196 <__aeabi_fsub+0xf6>
 8001546:	2b00      	cmp	r3, #0
 8001548:	d100      	bne.n	800154c <__aeabi_fsub+0x4ac>
 800154a:	e75f      	b.n	800140c <__aeabi_fsub+0x36c>
 800154c:	1b56      	subs	r6, r2, r5
 800154e:	2d00      	cmp	r5, #0
 8001550:	d101      	bne.n	8001556 <__aeabi_fsub+0x4b6>
 8001552:	0033      	movs	r3, r6
 8001554:	e6e7      	b.n	8001326 <__aeabi_fsub+0x286>
 8001556:	2380      	movs	r3, #128	@ 0x80
 8001558:	4660      	mov	r0, ip
 800155a:	04db      	lsls	r3, r3, #19
 800155c:	4318      	orrs	r0, r3
 800155e:	4684      	mov	ip, r0
 8001560:	e6eb      	b.n	800133a <__aeabi_fsub+0x29a>
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	7dffffff 	.word	0x7dffffff

08001568 <__aeabi_f2iz>:
 8001568:	0241      	lsls	r1, r0, #9
 800156a:	0042      	lsls	r2, r0, #1
 800156c:	0fc3      	lsrs	r3, r0, #31
 800156e:	0a49      	lsrs	r1, r1, #9
 8001570:	2000      	movs	r0, #0
 8001572:	0e12      	lsrs	r2, r2, #24
 8001574:	2a7e      	cmp	r2, #126	@ 0x7e
 8001576:	dd03      	ble.n	8001580 <__aeabi_f2iz+0x18>
 8001578:	2a9d      	cmp	r2, #157	@ 0x9d
 800157a:	dd02      	ble.n	8001582 <__aeabi_f2iz+0x1a>
 800157c:	4a09      	ldr	r2, [pc, #36]	@ (80015a4 <__aeabi_f2iz+0x3c>)
 800157e:	1898      	adds	r0, r3, r2
 8001580:	4770      	bx	lr
 8001582:	2080      	movs	r0, #128	@ 0x80
 8001584:	0400      	lsls	r0, r0, #16
 8001586:	4301      	orrs	r1, r0
 8001588:	2a95      	cmp	r2, #149	@ 0x95
 800158a:	dc07      	bgt.n	800159c <__aeabi_f2iz+0x34>
 800158c:	2096      	movs	r0, #150	@ 0x96
 800158e:	1a82      	subs	r2, r0, r2
 8001590:	40d1      	lsrs	r1, r2
 8001592:	4248      	negs	r0, r1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f3      	bne.n	8001580 <__aeabi_f2iz+0x18>
 8001598:	0008      	movs	r0, r1
 800159a:	e7f1      	b.n	8001580 <__aeabi_f2iz+0x18>
 800159c:	3a96      	subs	r2, #150	@ 0x96
 800159e:	4091      	lsls	r1, r2
 80015a0:	e7f7      	b.n	8001592 <__aeabi_f2iz+0x2a>
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	7fffffff 	.word	0x7fffffff

080015a8 <__aeabi_i2f>:
 80015a8:	b570      	push	{r4, r5, r6, lr}
 80015aa:	2800      	cmp	r0, #0
 80015ac:	d012      	beq.n	80015d4 <__aeabi_i2f+0x2c>
 80015ae:	17c3      	asrs	r3, r0, #31
 80015b0:	18c5      	adds	r5, r0, r3
 80015b2:	405d      	eors	r5, r3
 80015b4:	0fc4      	lsrs	r4, r0, #31
 80015b6:	0028      	movs	r0, r5
 80015b8:	f000 f846 	bl	8001648 <__clzsi2>
 80015bc:	239e      	movs	r3, #158	@ 0x9e
 80015be:	1a1b      	subs	r3, r3, r0
 80015c0:	2b96      	cmp	r3, #150	@ 0x96
 80015c2:	dc0f      	bgt.n	80015e4 <__aeabi_i2f+0x3c>
 80015c4:	2808      	cmp	r0, #8
 80015c6:	d038      	beq.n	800163a <__aeabi_i2f+0x92>
 80015c8:	3808      	subs	r0, #8
 80015ca:	4085      	lsls	r5, r0
 80015cc:	026d      	lsls	r5, r5, #9
 80015ce:	0a6d      	lsrs	r5, r5, #9
 80015d0:	b2d8      	uxtb	r0, r3
 80015d2:	e002      	b.n	80015da <__aeabi_i2f+0x32>
 80015d4:	2400      	movs	r4, #0
 80015d6:	2000      	movs	r0, #0
 80015d8:	2500      	movs	r5, #0
 80015da:	05c0      	lsls	r0, r0, #23
 80015dc:	4328      	orrs	r0, r5
 80015de:	07e4      	lsls	r4, r4, #31
 80015e0:	4320      	orrs	r0, r4
 80015e2:	bd70      	pop	{r4, r5, r6, pc}
 80015e4:	2b99      	cmp	r3, #153	@ 0x99
 80015e6:	dc14      	bgt.n	8001612 <__aeabi_i2f+0x6a>
 80015e8:	1f42      	subs	r2, r0, #5
 80015ea:	4095      	lsls	r5, r2
 80015ec:	002a      	movs	r2, r5
 80015ee:	4915      	ldr	r1, [pc, #84]	@ (8001644 <__aeabi_i2f+0x9c>)
 80015f0:	4011      	ands	r1, r2
 80015f2:	0755      	lsls	r5, r2, #29
 80015f4:	d01c      	beq.n	8001630 <__aeabi_i2f+0x88>
 80015f6:	250f      	movs	r5, #15
 80015f8:	402a      	ands	r2, r5
 80015fa:	2a04      	cmp	r2, #4
 80015fc:	d018      	beq.n	8001630 <__aeabi_i2f+0x88>
 80015fe:	3104      	adds	r1, #4
 8001600:	08ca      	lsrs	r2, r1, #3
 8001602:	0149      	lsls	r1, r1, #5
 8001604:	d515      	bpl.n	8001632 <__aeabi_i2f+0x8a>
 8001606:	239f      	movs	r3, #159	@ 0x9f
 8001608:	0252      	lsls	r2, r2, #9
 800160a:	1a18      	subs	r0, r3, r0
 800160c:	0a55      	lsrs	r5, r2, #9
 800160e:	b2c0      	uxtb	r0, r0
 8001610:	e7e3      	b.n	80015da <__aeabi_i2f+0x32>
 8001612:	2205      	movs	r2, #5
 8001614:	0029      	movs	r1, r5
 8001616:	1a12      	subs	r2, r2, r0
 8001618:	40d1      	lsrs	r1, r2
 800161a:	0002      	movs	r2, r0
 800161c:	321b      	adds	r2, #27
 800161e:	4095      	lsls	r5, r2
 8001620:	002a      	movs	r2, r5
 8001622:	1e55      	subs	r5, r2, #1
 8001624:	41aa      	sbcs	r2, r5
 8001626:	430a      	orrs	r2, r1
 8001628:	4906      	ldr	r1, [pc, #24]	@ (8001644 <__aeabi_i2f+0x9c>)
 800162a:	4011      	ands	r1, r2
 800162c:	0755      	lsls	r5, r2, #29
 800162e:	d1e2      	bne.n	80015f6 <__aeabi_i2f+0x4e>
 8001630:	08ca      	lsrs	r2, r1, #3
 8001632:	0252      	lsls	r2, r2, #9
 8001634:	0a55      	lsrs	r5, r2, #9
 8001636:	b2d8      	uxtb	r0, r3
 8001638:	e7cf      	b.n	80015da <__aeabi_i2f+0x32>
 800163a:	026d      	lsls	r5, r5, #9
 800163c:	0a6d      	lsrs	r5, r5, #9
 800163e:	308e      	adds	r0, #142	@ 0x8e
 8001640:	e7cb      	b.n	80015da <__aeabi_i2f+0x32>
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	fbffffff 	.word	0xfbffffff

08001648 <__clzsi2>:
 8001648:	211c      	movs	r1, #28
 800164a:	2301      	movs	r3, #1
 800164c:	041b      	lsls	r3, r3, #16
 800164e:	4298      	cmp	r0, r3
 8001650:	d301      	bcc.n	8001656 <__clzsi2+0xe>
 8001652:	0c00      	lsrs	r0, r0, #16
 8001654:	3910      	subs	r1, #16
 8001656:	0a1b      	lsrs	r3, r3, #8
 8001658:	4298      	cmp	r0, r3
 800165a:	d301      	bcc.n	8001660 <__clzsi2+0x18>
 800165c:	0a00      	lsrs	r0, r0, #8
 800165e:	3908      	subs	r1, #8
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	4298      	cmp	r0, r3
 8001664:	d301      	bcc.n	800166a <__clzsi2+0x22>
 8001666:	0900      	lsrs	r0, r0, #4
 8001668:	3904      	subs	r1, #4
 800166a:	a202      	add	r2, pc, #8	@ (adr r2, 8001674 <__clzsi2+0x2c>)
 800166c:	5c10      	ldrb	r0, [r2, r0]
 800166e:	1840      	adds	r0, r0, r1
 8001670:	4770      	bx	lr
 8001672:	46c0      	nop			@ (mov r8, r8)
 8001674:	02020304 	.word	0x02020304
 8001678:	01010101 	.word	0x01010101
	...

08001684 <__clzdi2>:
 8001684:	b510      	push	{r4, lr}
 8001686:	2900      	cmp	r1, #0
 8001688:	d103      	bne.n	8001692 <__clzdi2+0xe>
 800168a:	f7ff ffdd 	bl	8001648 <__clzsi2>
 800168e:	3020      	adds	r0, #32
 8001690:	e002      	b.n	8001698 <__clzdi2+0x14>
 8001692:	0008      	movs	r0, r1
 8001694:	f7ff ffd8 	bl	8001648 <__clzsi2>
 8001698:	bd10      	pop	{r4, pc}
 800169a:	46c0      	nop			@ (mov r8, r8)

0800169c <PA4_PA5_SetInput>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PA4_PA5_SetInput(void) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	0018      	movs	r0, r3
 80016a6:	2314      	movs	r3, #20
 80016a8:	001a      	movs	r2, r3
 80016aa:	2100      	movs	r1, #0
 80016ac:	f005 f804 	bl	80066b8 <memset>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <PA4_PA5_SetInput+0x54>)
 80016b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <PA4_PA5_SetInput+0x54>)
 80016b6:	2101      	movs	r1, #1
 80016b8:	430a      	orrs	r2, r1
 80016ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <PA4_PA5_SetInput+0x54>)
 80016be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016c0:	2201      	movs	r2, #1
 80016c2:	4013      	ands	r3, r2
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	683b      	ldr	r3, [r7, #0]


    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2230      	movs	r2, #48	@ 0x30
 80016cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	2200      	movs	r2, #0
 80016d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	1d3a      	adds	r2, r7, #4
 80016dc:	23a0      	movs	r3, #160	@ 0xa0
 80016de:	05db      	lsls	r3, r3, #23
 80016e0:	0011      	movs	r1, r2
 80016e2:	0018      	movs	r0, r3
 80016e4:	f002 fe70 	bl	80043c8 <HAL_GPIO_Init>

}
 80016e8:	46c0      	nop			@ (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b006      	add	sp, #24
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000

080016f4 <PA4_PA5_SetOutput>:

void PA4_PA5_SetOutput(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	0018      	movs	r0, r3
 80016fe:	2314      	movs	r3, #20
 8001700:	001a      	movs	r2, r3
 8001702:	2100      	movs	r1, #0
 8001704:	f004 ffd8 	bl	80066b8 <memset>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <PA4_PA5_SetOutput+0x5c>)
 800170a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800170c:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <PA4_PA5_SetOutput+0x5c>)
 800170e:	2101      	movs	r1, #1
 8001710:	430a      	orrs	r2, r1
 8001712:	635a      	str	r2, [r3, #52]	@ 0x34
 8001714:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <PA4_PA5_SetOutput+0x5c>)
 8001716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001718:	2201      	movs	r2, #1
 800171a:	4013      	ands	r3, r2
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	683b      	ldr	r3, [r7, #0]


    GPIO_InitStruct.Pin = GPIO_PIN_4| GPIO_PIN_5;
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2230      	movs	r2, #48	@ 0x30
 8001724:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2211      	movs	r2, #17
 800172a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2201      	movs	r2, #1
 8001736:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	1d3a      	adds	r2, r7, #4
 800173a:	23a0      	movs	r3, #160	@ 0xa0
 800173c:	05db      	lsls	r3, r3, #23
 800173e:	0011      	movs	r1, r2
 8001740:	0018      	movs	r0, r3
 8001742:	f002 fe41 	bl	80043c8 <HAL_GPIO_Init>

}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	b006      	add	sp, #24
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	40021000 	.word	0x40021000

08001754 <PA4_PA5_SetDAC>:

void PA4_PA5_SetDAC(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
    MX_DAC1_Init();
 8001758:	f000 fac6 	bl	8001ce8 <MX_DAC1_Init>
}
 800175c:	46c0      	nop			@ (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <Quad_Update>:

void Quad_Update(float delta)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
    total_angle += delta;
 800176c:	4b46      	ldr	r3, [pc, #280]	@ (8001888 <Quad_Update+0x124>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	1c18      	adds	r0, r3, #0
 8001774:	f7fe ff7a 	bl	800066c <__aeabi_fadd>
 8001778:	1c03      	adds	r3, r0, #0
 800177a:	1c1a      	adds	r2, r3, #0
 800177c:	4b42      	ldr	r3, [pc, #264]	@ (8001888 <Quad_Update+0x124>)
 800177e:	601a      	str	r2, [r3, #0]

    // Wrap total_angle to [-180, 180]
    if (total_angle > 180.0f) total_angle -= 360.0f;
 8001780:	4b41      	ldr	r3, [pc, #260]	@ (8001888 <Quad_Update+0x124>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4941      	ldr	r1, [pc, #260]	@ (800188c <Quad_Update+0x128>)
 8001786:	1c18      	adds	r0, r3, #0
 8001788:	f7fe fe58 	bl	800043c <__aeabi_fcmpgt>
 800178c:	1e03      	subs	r3, r0, #0
 800178e:	d009      	beq.n	80017a4 <Quad_Update+0x40>
 8001790:	4b3d      	ldr	r3, [pc, #244]	@ (8001888 <Quad_Update+0x124>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	493e      	ldr	r1, [pc, #248]	@ (8001890 <Quad_Update+0x12c>)
 8001796:	1c18      	adds	r0, r3, #0
 8001798:	f7ff fc82 	bl	80010a0 <__aeabi_fsub>
 800179c:	1c03      	adds	r3, r0, #0
 800179e:	1c1a      	adds	r2, r3, #0
 80017a0:	4b39      	ldr	r3, [pc, #228]	@ (8001888 <Quad_Update+0x124>)
 80017a2:	601a      	str	r2, [r3, #0]
    if (total_angle < -180.0f) total_angle += 360.0f;
 80017a4:	4b38      	ldr	r3, [pc, #224]	@ (8001888 <Quad_Update+0x124>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	493a      	ldr	r1, [pc, #232]	@ (8001894 <Quad_Update+0x130>)
 80017aa:	1c18      	adds	r0, r3, #0
 80017ac:	f7fe fe32 	bl	8000414 <__aeabi_fcmplt>
 80017b0:	1e03      	subs	r3, r0, #0
 80017b2:	d009      	beq.n	80017c8 <Quad_Update+0x64>
 80017b4:	4b34      	ldr	r3, [pc, #208]	@ (8001888 <Quad_Update+0x124>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4935      	ldr	r1, [pc, #212]	@ (8001890 <Quad_Update+0x12c>)
 80017ba:	1c18      	adds	r0, r3, #0
 80017bc:	f7fe ff56 	bl	800066c <__aeabi_fadd>
 80017c0:	1c03      	adds	r3, r0, #0
 80017c2:	1c1a      	adds	r2, r3, #0
 80017c4:	4b30      	ldr	r3, [pc, #192]	@ (8001888 <Quad_Update+0x124>)
 80017c6:	601a      	str	r2, [r3, #0]

    target_edge_index = (int32_t)roundf((total_angle / 360.0f) * EDGES_PER_CYCLE);
 80017c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001888 <Quad_Update+0x124>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4930      	ldr	r1, [pc, #192]	@ (8001890 <Quad_Update+0x12c>)
 80017ce:	1c18      	adds	r0, r3, #0
 80017d0:	f7ff f93e 	bl	8000a50 <__aeabi_fdiv>
 80017d4:	1c03      	adds	r3, r0, #0
 80017d6:	492e      	ldr	r1, [pc, #184]	@ (8001890 <Quad_Update+0x12c>)
 80017d8:	1c18      	adds	r0, r3, #0
 80017da:	f7ff fb07 	bl	8000dec <__aeabi_fmul>
 80017de:	1c03      	adds	r3, r0, #0
 80017e0:	1c18      	adds	r0, r3, #0
 80017e2:	f004 ff99 	bl	8006718 <roundf>
 80017e6:	1c03      	adds	r3, r0, #0
 80017e8:	1c18      	adds	r0, r3, #0
 80017ea:	f7ff febd 	bl	8001568 <__aeabi_f2iz>
 80017ee:	0002      	movs	r2, r0
 80017f0:	4b29      	ldr	r3, [pc, #164]	@ (8001898 <Quad_Update+0x134>)
 80017f2:	601a      	str	r2, [r3, #0]
    int32_t diff = target_edge_index - current_edge_index;
 80017f4:	4b28      	ldr	r3, [pc, #160]	@ (8001898 <Quad_Update+0x134>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b28      	ldr	r3, [pc, #160]	@ (800189c <Quad_Update+0x138>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	613b      	str	r3, [r7, #16]
    if (diff == 0) return;
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d03b      	beq.n	800187e <Quad_Update+0x11a>

    dir = (diff > 0) ? +1 : -1;
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	2b00      	cmp	r3, #0
 800180a:	dd01      	ble.n	8001810 <Quad_Update+0xac>
 800180c:	2201      	movs	r2, #1
 800180e:	e001      	b.n	8001814 <Quad_Update+0xb0>
 8001810:	2301      	movs	r3, #1
 8001812:	425a      	negs	r2, r3
 8001814:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <Quad_Update+0x13c>)
 8001816:	601a      	str	r2, [r3, #0]
    edges_remaining = abs(diff);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	17d9      	asrs	r1, r3, #31
 800181c:	185a      	adds	r2, r3, r1
 800181e:	404a      	eors	r2, r1
 8001820:	4b20      	ldr	r3, [pc, #128]	@ (80018a4 <Quad_Update+0x140>)
 8001822:	601a      	str	r2, [r3, #0]

    float sample_period_us = 2500.0f;
 8001824:	4b20      	ldr	r3, [pc, #128]	@ (80018a8 <Quad_Update+0x144>)
 8001826:	60fb      	str	r3, [r7, #12]
    uint32_t ticks_per_edge_us = edges_remaining > 0 ? (uint32_t)(sample_period_us / edges_remaining) : 10;
 8001828:	4b1e      	ldr	r3, [pc, #120]	@ (80018a4 <Quad_Update+0x140>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	dd0f      	ble.n	8001850 <Quad_Update+0xec>
 8001830:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <Quad_Update+0x140>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0018      	movs	r0, r3
 8001836:	f7ff feb7 	bl	80015a8 <__aeabi_i2f>
 800183a:	1c03      	adds	r3, r0, #0
 800183c:	1c19      	adds	r1, r3, #0
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f7ff f906 	bl	8000a50 <__aeabi_fdiv>
 8001844:	1c03      	adds	r3, r0, #0
 8001846:	1c18      	adds	r0, r3, #0
 8001848:	f7fe fe2c 	bl	80004a4 <__aeabi_f2uiz>
 800184c:	0003      	movs	r3, r0
 800184e:	e000      	b.n	8001852 <Quad_Update+0xee>
 8001850:	230a      	movs	r3, #10
 8001852:	617b      	str	r3, [r7, #20]
    if (ticks_per_edge_us < 10) ticks_per_edge_us = 10;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b09      	cmp	r3, #9
 8001858:	d801      	bhi.n	800185e <Quad_Update+0xfa>
 800185a:	230a      	movs	r3, #10
 800185c:	617b      	str	r3, [r7, #20]

    __HAL_TIM_SET_AUTORELOAD(&htim14, ticks_per_edge_us);
 800185e:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <Quad_Update+0x148>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001866:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <Quad_Update+0x148>)
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COUNTER(&htim14, 0);
 800186c:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <Quad_Update+0x148>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start_IT(&htim14);
 8001874:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <Quad_Update+0x148>)
 8001876:	0018      	movs	r0, r3
 8001878:	f003 fe64 	bl	8005544 <HAL_TIM_Base_Start_IT>
 800187c:	e000      	b.n	8001880 <Quad_Update+0x11c>
    if (diff == 0) return;
 800187e:	46c0      	nop			@ (mov r8, r8)
}
 8001880:	46bd      	mov	sp, r7
 8001882:	b006      	add	sp, #24
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			@ (mov r8, r8)
 8001888:	2000032c 	.word	0x2000032c
 800188c:	43340000 	.word	0x43340000
 8001890:	43b40000 	.word	0x43b40000
 8001894:	c3340000 	.word	0xc3340000
 8001898:	20000328 	.word	0x20000328
 800189c:	20000324 	.word	0x20000324
 80018a0:	20000000 	.word	0x20000000
 80018a4:	2000031c 	.word	0x2000031c
 80018a8:	451c4000 	.word	0x451c4000
 80018ac:	200001bc 	.word	0x200001bc

080018b0 <Quad_OutputStep>:

void Quad_OutputStep(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
    if (edges_remaining == 0) return;
 80018b4:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <Quad_OutputStep+0xbc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d053      	beq.n	8001964 <Quad_OutputStep+0xb4>

    // Advance state
    if (dir > 0) quad_state = (quad_state + 1) & 0x03;
 80018bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001970 <Quad_OutputStep+0xc0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	dd09      	ble.n	80018d8 <Quad_OutputStep+0x28>
 80018c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001974 <Quad_OutputStep+0xc4>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2203      	movs	r2, #3
 80018ce:	4013      	ands	r3, r2
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b28      	ldr	r3, [pc, #160]	@ (8001974 <Quad_OutputStep+0xc4>)
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e008      	b.n	80018ea <Quad_OutputStep+0x3a>
    else         quad_state = (quad_state - 1) & 0x03;
 80018d8:	4b26      	ldr	r3, [pc, #152]	@ (8001974 <Quad_OutputStep+0xc4>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	3b01      	subs	r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2203      	movs	r2, #3
 80018e2:	4013      	ands	r3, r2
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <Quad_OutputStep+0xc4>)
 80018e8:	701a      	strb	r2, [r3, #0]

    // Write pins
    pa4_state = states[quad_state][0];
 80018ea:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <Quad_OutputStep+0xc4>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	001a      	movs	r2, r3
 80018f0:	4b21      	ldr	r3, [pc, #132]	@ (8001978 <Quad_OutputStep+0xc8>)
 80018f2:	0052      	lsls	r2, r2, #1
 80018f4:	5cd2      	ldrb	r2, [r2, r3]
 80018f6:	4b21      	ldr	r3, [pc, #132]	@ (800197c <Quad_OutputStep+0xcc>)
 80018f8:	701a      	strb	r2, [r3, #0]
    pa5_state = states[quad_state][1];
 80018fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001974 <Quad_OutputStep+0xc4>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001978 <Quad_OutputStep+0xc8>)
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	18d3      	adds	r3, r2, r3
 8001904:	3301      	adds	r3, #1
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <Quad_OutputStep+0xd0>)
 800190a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(QUAD_PORT, QUAD_A_PIN, pa4_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800190c:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <Quad_OutputStep+0xcc>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	1e5a      	subs	r2, r3, #1
 8001914:	4193      	sbcs	r3, r2
 8001916:	b2db      	uxtb	r3, r3
 8001918:	001a      	movs	r2, r3
 800191a:	23a0      	movs	r3, #160	@ 0xa0
 800191c:	05db      	lsls	r3, r3, #23
 800191e:	2110      	movs	r1, #16
 8001920:	0018      	movs	r0, r3
 8001922:	f002 fed2 	bl	80046ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(QUAD_PORT, QUAD_B_PIN, pa5_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001926:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <Quad_OutputStep+0xd0>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	1e5a      	subs	r2, r3, #1
 800192e:	4193      	sbcs	r3, r2
 8001930:	b2db      	uxtb	r3, r3
 8001932:	001a      	movs	r2, r3
 8001934:	23a0      	movs	r3, #160	@ 0xa0
 8001936:	05db      	lsls	r3, r3, #23
 8001938:	2120      	movs	r1, #32
 800193a:	0018      	movs	r0, r3
 800193c:	f002 fec5 	bl	80046ca <HAL_GPIO_WritePin>

    edges_remaining--;
 8001940:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <Quad_OutputStep+0xbc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <Quad_OutputStep+0xbc>)
 8001948:	601a      	str	r2, [r3, #0]
    if (edges_remaining == 0) {
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <Quad_OutputStep+0xbc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <Quad_OutputStep+0xb6>
        current_edge_index = target_edge_index; // update only after all steps
 8001952:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <Quad_OutputStep+0xd4>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <Quad_OutputStep+0xd8>)
 8001958:	601a      	str	r2, [r3, #0]
        HAL_TIM_Base_Stop_IT(&htim14);
 800195a:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <Quad_OutputStep+0xdc>)
 800195c:	0018      	movs	r0, r3
 800195e:	f003 fe4d 	bl	80055fc <HAL_TIM_Base_Stop_IT>
 8001962:	e000      	b.n	8001966 <Quad_OutputStep+0xb6>
    if (edges_remaining == 0) return;
 8001964:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	2000031c 	.word	0x2000031c
 8001970:	20000000 	.word	0x20000000
 8001974:	2000031a 	.word	0x2000031a
 8001978:	08006b10 	.word	0x08006b10
 800197c:	20000318 	.word	0x20000318
 8001980:	20000319 	.word	0x20000319
 8001984:	20000328 	.word	0x20000328
 8001988:	20000324 	.word	0x20000324
 800198c:	200001bc 	.word	0x200001bc

08001990 <Quad_Init>:



// Init GPIO
void Quad_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0


    HAL_GPIO_WritePin(QUAD_PORT, QUAD_A_PIN | QUAD_B_PIN, GPIO_PIN_RESET);
 8001994:	23a0      	movs	r3, #160	@ 0xa0
 8001996:	05db      	lsls	r3, r3, #23
 8001998:	2200      	movs	r2, #0
 800199a:	2130      	movs	r1, #48	@ 0x30
 800199c:	0018      	movs	r0, r3
 800199e:	f002 fe94 	bl	80046ca <HAL_GPIO_WritePin>
    quad_state = 0;
 80019a2:	4b04      	ldr	r3, [pc, #16]	@ (80019b4 <Quad_Init+0x24>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
    edges_remaining = 0;
 80019a8:	4b03      	ldr	r3, [pc, #12]	@ (80019b8 <Quad_Init+0x28>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	2000031a 	.word	0x2000031a
 80019b8:	2000031c 	.word	0x2000031c

080019bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c2:	f000 fedb 	bl	800277c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c6:	f000 f88f 	bl	8001ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ca:	f000 fa8d 	bl	8001ee8 <MX_GPIO_Init>
  MX_DMA_Init();
 80019ce:	f000 fa65 	bl	8001e9c <MX_DMA_Init>
  MX_ADC1_Init();
 80019d2:	f000 f8e7 	bl	8001ba4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80019d6:	f000 f987 	bl	8001ce8 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 80019da:	f000 fa11 	bl	8001e00 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80019de:	f000 f9e7 	bl	8001db0 <MX_TIM16_Init>
  MX_TIM14_Init();
 80019e2:	f000 f9c1 	bl	8001d68 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 80019e6:	4b38      	ldr	r3, [pc, #224]	@ (8001ac8 <main+0x10c>)
 80019e8:	0018      	movs	r0, r3
 80019ea:	f001 fef1 	bl	80037d0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AD_RES_BUFFER, 4);
 80019ee:	4937      	ldr	r1, [pc, #220]	@ (8001acc <main+0x110>)
 80019f0:	4b35      	ldr	r3, [pc, #212]	@ (8001ac8 <main+0x10c>)
 80019f2:	2204      	movs	r2, #4
 80019f4:	0018      	movs	r0, r3
 80019f6:	f001 fa6b 	bl	8002ed0 <HAL_ADC_Start_DMA>

  // Set PA4/PA5 as input for first 0.5s
  PA4_PA5_SetInput();
 80019fa:	f7ff fe4f 	bl	800169c <PA4_PA5_SetInput>

  HAL_Delay(10);
 80019fe:	200a      	movs	r0, #10
 8001a00:	f000 ff42 	bl	8002888 <HAL_Delay>

  // Read PA4 and PA5 input states and save to byte
  for (int i = 0; i < 20; i++) {
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	e027      	b.n	8001a5a <main+0x9e>
	  mode1 += ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) ? 1 : 0));
 8001a0a:	23a0      	movs	r3, #160	@ 0xa0
 8001a0c:	05db      	lsls	r3, r3, #23
 8001a0e:	2110      	movs	r1, #16
 8001a10:	0018      	movs	r0, r3
 8001a12:	f002 fe3d 	bl	8004690 <HAL_GPIO_ReadPin>
 8001a16:	0003      	movs	r3, r0
 8001a18:	1e5a      	subs	r2, r3, #1
 8001a1a:	4193      	sbcs	r3, r2
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad0 <main+0x114>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	18d3      	adds	r3, r2, r3
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b29      	ldr	r3, [pc, #164]	@ (8001ad0 <main+0x114>)
 8001a2a:	701a      	strb	r2, [r3, #0]
	  mode2 += ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) ? 1 : 0));
 8001a2c:	23a0      	movs	r3, #160	@ 0xa0
 8001a2e:	05db      	lsls	r3, r3, #23
 8001a30:	2120      	movs	r1, #32
 8001a32:	0018      	movs	r0, r3
 8001a34:	f002 fe2c 	bl	8004690 <HAL_GPIO_ReadPin>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	1e5a      	subs	r2, r3, #1
 8001a3c:	4193      	sbcs	r3, r2
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <main+0x118>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	18d3      	adds	r3, r2, r3
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <main+0x118>)
 8001a4c:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f000 ff1a 	bl	8002888 <HAL_Delay>
  for (int i = 0; i < 20; i++) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3301      	adds	r3, #1
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b13      	cmp	r3, #19
 8001a5e:	ddd4      	ble.n	8001a0a <main+0x4e>
  }
  if (mode1 > 17 && mode2 > 17) {
 8001a60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <main+0x114>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b11      	cmp	r3, #17
 8001a66:	d907      	bls.n	8001a78 <main+0xbc>
 8001a68:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <main+0x118>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b11      	cmp	r3, #17
 8001a6e:	d903      	bls.n	8001a78 <main+0xbc>
	  // Both pins high, enter quadrature mode
	  mode = 1;
 8001a70:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <main+0x11c>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
 8001a76:	e002      	b.n	8001a7e <main+0xc2>
  }
  else {
	  mode = 0;
 8001a78:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <main+0x11c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
  }



  // Set PA4/PA5 back to DAC mode
  if (mode == 0) {
 8001a7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ad8 <main+0x11c>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10d      	bne.n	8001aa2 <main+0xe6>
	  MX_DAC1_Init();
 8001a86:	f000 f92f 	bl	8001ce8 <MX_DAC1_Init>
	  PA4_PA5_SetDAC();
 8001a8a:	f7ff fe63 	bl	8001754 <PA4_PA5_SetDAC>

	  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001a8e:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <main+0x120>)
 8001a90:	2100      	movs	r1, #0
 8001a92:	0018      	movs	r0, r3
 8001a94:	f002 f899 	bl	8003bca <HAL_DAC_Start>
	  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8001a98:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <main+0x120>)
 8001a9a:	2110      	movs	r1, #16
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f002 f894 	bl	8003bca <HAL_DAC_Start>
  }

  if (mode == 1) {
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <main+0x11c>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d107      	bne.n	8001aba <main+0xfe>
	  PA4_PA5_SetOutput();
 8001aaa:	f7ff fe23 	bl	80016f4 <PA4_PA5_SetOutput>
	  Quad_Init();
 8001aae:	f7ff ff6f 	bl	8001990 <Quad_Init>
	  HAL_TIM_Base_Start_IT(&htim14);
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <main+0x124>)
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f003 fd45 	bl	8005544 <HAL_TIM_Base_Start_IT>

  }

  HAL_TIM_Base_Start_IT(&htim16);
 8001aba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <main+0x128>)
 8001abc:	0018      	movs	r0, r3
 8001abe:	f003 fd41 	bl	8005544 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	e7fd      	b.n	8001ac2 <main+0x106>
 8001ac6:	46c0      	nop			@ (mov r8, r8)
 8001ac8:	20000030 	.word	0x20000030
 8001acc:	200002fc 	.word	0x200002fc
 8001ad0:	20000315 	.word	0x20000315
 8001ad4:	20000316 	.word	0x20000316
 8001ad8:	20000317 	.word	0x20000317
 8001adc:	200000f0 	.word	0x200000f0
 8001ae0:	200001bc 	.word	0x200001bc
 8001ae4:	20000208 	.word	0x20000208

08001ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b093      	sub	sp, #76	@ 0x4c
 8001aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aee:	2410      	movs	r4, #16
 8001af0:	193b      	adds	r3, r7, r4
 8001af2:	0018      	movs	r0, r3
 8001af4:	2338      	movs	r3, #56	@ 0x38
 8001af6:	001a      	movs	r2, r3
 8001af8:	2100      	movs	r1, #0
 8001afa:	f004 fddd 	bl	80066b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001afe:	003b      	movs	r3, r7
 8001b00:	0018      	movs	r0, r3
 8001b02:	2310      	movs	r3, #16
 8001b04:	001a      	movs	r2, r3
 8001b06:	2100      	movs	r1, #0
 8001b08:	f004 fdd6 	bl	80066b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	0018      	movs	r0, r3
 8001b12:	f002 fdf7 	bl	8004704 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b16:	193b      	adds	r3, r7, r4
 8001b18:	2202      	movs	r2, #2
 8001b1a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b1c:	193b      	adds	r3, r7, r4
 8001b1e:	2280      	movs	r2, #128	@ 0x80
 8001b20:	0052      	lsls	r2, r2, #1
 8001b22:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001b24:	0021      	movs	r1, r4
 8001b26:	187b      	adds	r3, r7, r1
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	2240      	movs	r2, #64	@ 0x40
 8001b30:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	2202      	movs	r2, #2
 8001b36:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	2200      	movs	r2, #0
 8001b42:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001b44:	187b      	adds	r3, r7, r1
 8001b46:	2208      	movs	r2, #8
 8001b48:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b4a:	187b      	adds	r3, r7, r1
 8001b4c:	22c0      	movs	r2, #192	@ 0xc0
 8001b4e:	02d2      	lsls	r2, r2, #11
 8001b50:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b52:	187b      	adds	r3, r7, r1
 8001b54:	2280      	movs	r2, #128	@ 0x80
 8001b56:	0492      	lsls	r2, r2, #18
 8001b58:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b5a:	187b      	adds	r3, r7, r1
 8001b5c:	2280      	movs	r2, #128	@ 0x80
 8001b5e:	0592      	lsls	r2, r2, #22
 8001b60:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b62:	187b      	adds	r3, r7, r1
 8001b64:	0018      	movs	r0, r3
 8001b66:	f002 fe19 	bl	800479c <HAL_RCC_OscConfig>
 8001b6a:	1e03      	subs	r3, r0, #0
 8001b6c:	d001      	beq.n	8001b72 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001b6e:	f000 fb87 	bl	8002280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b72:	003b      	movs	r3, r7
 8001b74:	2207      	movs	r2, #7
 8001b76:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b78:	003b      	movs	r3, r7
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b7e:	003b      	movs	r3, r7
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b84:	003b      	movs	r3, r7
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b8a:	003b      	movs	r3, r7
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f003 f91e 	bl	8004dd0 <HAL_RCC_ClockConfig>
 8001b94:	1e03      	subs	r3, r0, #0
 8001b96:	d001      	beq.n	8001b9c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b98:	f000 fb72 	bl	8002280 <Error_Handler>
  }
}
 8001b9c:	46c0      	nop			@ (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b013      	add	sp, #76	@ 0x4c
 8001ba2:	bd90      	pop	{r4, r7, pc}

08001ba4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	0018      	movs	r0, r3
 8001bae:	230c      	movs	r3, #12
 8001bb0:	001a      	movs	r2, r3
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	f004 fd80 	bl	80066b8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bb8:	4b46      	ldr	r3, [pc, #280]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001bba:	4a47      	ldr	r2, [pc, #284]	@ (8001cd8 <MX_ADC1_Init+0x134>)
 8001bbc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001bbe:	4b45      	ldr	r3, [pc, #276]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001bc0:	2280      	movs	r2, #128	@ 0x80
 8001bc2:	0392      	lsls	r2, r2, #14
 8001bc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bc6:	4b43      	ldr	r3, [pc, #268]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bcc:	4b41      	ldr	r3, [pc, #260]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001bd2:	4b40      	ldr	r3, [pc, #256]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001bd4:	2280      	movs	r2, #128	@ 0x80
 8001bd6:	0392      	lsls	r2, r2, #14
 8001bd8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001bda:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001bdc:	2208      	movs	r2, #8
 8001bde:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001be0:	4b3c      	ldr	r3, [pc, #240]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001be6:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001bec:	4b39      	ldr	r3, [pc, #228]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8001bf2:	4b38      	ldr	r3, [pc, #224]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bf8:	4b36      	ldr	r3, [pc, #216]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c00:	4b34      	ldr	r3, [pc, #208]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c06:	4b33      	ldr	r3, [pc, #204]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c0c:	4b31      	ldr	r3, [pc, #196]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001c0e:	222c      	movs	r2, #44	@ 0x2c
 8001c10:	2101      	movs	r1, #1
 8001c12:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c14:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001c20:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001c22:	2207      	movs	r2, #7
 8001c24:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001c26:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001c28:	223c      	movs	r2, #60	@ 0x3c
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001c2e:	4b29      	ldr	r3, [pc, #164]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c34:	4b27      	ldr	r3, [pc, #156]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001c36:	0018      	movs	r0, r3
 8001c38:	f000 ffa2 	bl	8002b80 <HAL_ADC_Init>
 8001c3c:	1e03      	subs	r3, r0, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001c40:	f000 fb1e 	bl	8002280 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c56:	1d3a      	adds	r2, r7, #4
 8001c58:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001c5a:	0011      	movs	r1, r2
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f001 f9d5 	bl	800300c <HAL_ADC_ConfigChannel>
 8001c62:	1e03      	subs	r3, r0, #0
 8001c64:	d001      	beq.n	8001c6a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001c66:	f000 fb0b 	bl	8002280 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cdc <MX_ADC1_Init+0x138>)
 8001c6e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	2204      	movs	r2, #4
 8001c74:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c76:	1d3a      	adds	r2, r7, #4
 8001c78:	4b16      	ldr	r3, [pc, #88]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001c7a:	0011      	movs	r1, r2
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f001 f9c5 	bl	800300c <HAL_ADC_ConfigChannel>
 8001c82:	1e03      	subs	r3, r0, #0
 8001c84:	d001      	beq.n	8001c8a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001c86:	f000 fafb 	bl	8002280 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ce0 <MX_ADC1_Init+0x13c>)
 8001c8e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	2208      	movs	r2, #8
 8001c94:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c96:	1d3a      	adds	r2, r7, #4
 8001c98:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001c9a:	0011      	movs	r1, r2
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f001 f9b5 	bl	800300c <HAL_ADC_ConfigChannel>
 8001ca2:	1e03      	subs	r3, r0, #0
 8001ca4:	d001      	beq.n	8001caa <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8001ca6:	f000 faeb 	bl	8002280 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <MX_ADC1_Init+0x140>)
 8001cae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb6:	1d3a      	adds	r2, r7, #4
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <MX_ADC1_Init+0x130>)
 8001cba:	0011      	movs	r1, r2
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f001 f9a5 	bl	800300c <HAL_ADC_ConfigChannel>
 8001cc2:	1e03      	subs	r3, r0, #0
 8001cc4:	d001      	beq.n	8001cca <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8001cc6:	f000 fadb 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b004      	add	sp, #16
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	20000030 	.word	0x20000030
 8001cd8:	40012400 	.word	0x40012400
 8001cdc:	04000002 	.word	0x04000002
 8001ce0:	08000004 	.word	0x08000004
 8001ce4:	0c000008 	.word	0x0c000008

08001ce8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	@ 0x28
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	2324      	movs	r3, #36	@ 0x24
 8001cf4:	001a      	movs	r2, r3
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	f004 fcde 	bl	80066b8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001cfc:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <MX_DAC1_Init+0x78>)
 8001cfe:	4a19      	ldr	r2, [pc, #100]	@ (8001d64 <MX_DAC1_Init+0x7c>)
 8001d00:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001d02:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <MX_DAC1_Init+0x78>)
 8001d04:	0018      	movs	r0, r3
 8001d06:	f001 ff3d 	bl	8003b84 <HAL_DAC_Init>
 8001d0a:	1e03      	subs	r3, r0, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 8001d0e:	f000 fab7 	bl	8002280 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d30:	1d39      	adds	r1, r7, #4
 8001d32:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <MX_DAC1_Init+0x78>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	0018      	movs	r0, r3
 8001d38:	f001 ffc4 	bl	8003cc4 <HAL_DAC_ConfigChannel>
 8001d3c:	1e03      	subs	r3, r0, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8001d40:	f000 fa9e 	bl	8002280 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001d44:	1d39      	adds	r1, r7, #4
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <MX_DAC1_Init+0x78>)
 8001d48:	2210      	movs	r2, #16
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f001 ffba 	bl	8003cc4 <HAL_DAC_ConfigChannel>
 8001d50:	1e03      	subs	r3, r0, #0
 8001d52:	d001      	beq.n	8001d58 <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 8001d54:	f000 fa94 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001d58:	46c0      	nop			@ (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b00a      	add	sp, #40	@ 0x28
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	200000f0 	.word	0x200000f0
 8001d64:	40007400 	.word	0x40007400

08001d68 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <MX_TIM14_Init+0x40>)
 8001d6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001dac <MX_TIM14_Init+0x44>)
 8001d70:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 8001d72:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <MX_TIM14_Init+0x40>)
 8001d74:	223f      	movs	r2, #63	@ 0x3f
 8001d76:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d78:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <MX_TIM14_Init+0x40>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10-1;
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <MX_TIM14_Init+0x40>)
 8001d80:	2209      	movs	r2, #9
 8001d82:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d84:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <MX_TIM14_Init+0x40>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8a:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <MX_TIM14_Init+0x40>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001d90:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <MX_TIM14_Init+0x40>)
 8001d92:	0018      	movs	r0, r3
 8001d94:	f003 fb7e 	bl	8005494 <HAL_TIM_Base_Init>
 8001d98:	1e03      	subs	r3, r0, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001d9c:	f000 fa70 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001da0:	46c0      	nop			@ (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	200001bc 	.word	0x200001bc
 8001dac:	40002000 	.word	0x40002000

08001db0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <MX_TIM16_Init+0x44>)
 8001db6:	4a10      	ldr	r2, [pc, #64]	@ (8001df8 <MX_TIM16_Init+0x48>)
 8001db8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 640-1;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <MX_TIM16_Init+0x44>)
 8001dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8001dfc <MX_TIM16_Init+0x4c>)
 8001dbe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <MX_TIM16_Init+0x44>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 250-1;
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <MX_TIM16_Init+0x44>)
 8001dc8:	22f9      	movs	r2, #249	@ 0xf9
 8001dca:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dcc:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <MX_TIM16_Init+0x44>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <MX_TIM16_Init+0x44>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <MX_TIM16_Init+0x44>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001dde:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <MX_TIM16_Init+0x44>)
 8001de0:	0018      	movs	r0, r3
 8001de2:	f003 fb57 	bl	8005494 <HAL_TIM_Base_Init>
 8001de6:	1e03      	subs	r3, r0, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001dea:	f000 fa49 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000208 	.word	0x20000208
 8001df8:	40014400 	.word	0x40014400
 8001dfc:	0000027f 	.word	0x0000027f

08001e00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e04:	4b23      	ldr	r3, [pc, #140]	@ (8001e94 <MX_USART1_UART_Init+0x94>)
 8001e06:	4a24      	ldr	r2, [pc, #144]	@ (8001e98 <MX_USART1_UART_Init+0x98>)
 8001e08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e0a:	4b22      	ldr	r3, [pc, #136]	@ (8001e94 <MX_USART1_UART_Init+0x94>)
 8001e0c:	22e1      	movs	r2, #225	@ 0xe1
 8001e0e:	0252      	lsls	r2, r2, #9
 8001e10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e12:	4b20      	ldr	r3, [pc, #128]	@ (8001e94 <MX_USART1_UART_Init+0x94>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e18:	4b1e      	ldr	r3, [pc, #120]	@ (8001e94 <MX_USART1_UART_Init+0x94>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <MX_USART1_UART_Init+0x94>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	@ (8001e94 <MX_USART1_UART_Init+0x94>)
 8001e26:	220c      	movs	r2, #12
 8001e28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <MX_USART1_UART_Init+0x94>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e30:	4b18      	ldr	r3, [pc, #96]	@ (8001e94 <MX_USART1_UART_Init+0x94>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e36:	4b17      	ldr	r3, [pc, #92]	@ (8001e94 <MX_USART1_UART_Init+0x94>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e3c:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <MX_USART1_UART_Init+0x94>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e42:	4b14      	ldr	r3, [pc, #80]	@ (8001e94 <MX_USART1_UART_Init+0x94>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e48:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <MX_USART1_UART_Init+0x94>)
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f003 fdd2 	bl	80059f4 <HAL_UART_Init>
 8001e50:	1e03      	subs	r3, r0, #0
 8001e52:	d001      	beq.n	8001e58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e54:	f000 fa14 	bl	8002280 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e58:	4b0e      	ldr	r3, [pc, #56]	@ (8001e94 <MX_USART1_UART_Init+0x94>)
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f004 fb4b 	bl	80064f8 <HAL_UARTEx_SetTxFifoThreshold>
 8001e62:	1e03      	subs	r3, r0, #0
 8001e64:	d001      	beq.n	8001e6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e66:	f000 fa0b 	bl	8002280 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <MX_USART1_UART_Init+0x94>)
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f004 fb82 	bl	8006578 <HAL_UARTEx_SetRxFifoThreshold>
 8001e74:	1e03      	subs	r3, r0, #0
 8001e76:	d001      	beq.n	8001e7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e78:	f000 fa02 	bl	8002280 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <MX_USART1_UART_Init+0x94>)
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f004 fb00 	bl	8006484 <HAL_UARTEx_DisableFifoMode>
 8001e84:	1e03      	subs	r3, r0, #0
 8001e86:	d001      	beq.n	8001e8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e88:	f000 f9fa 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e8c:	46c0      	nop			@ (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	20000254 	.word	0x20000254
 8001e98:	40013800 	.word	0x40013800

08001e9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ea2:	4b10      	ldr	r3, [pc, #64]	@ (8001ee4 <MX_DMA_Init+0x48>)
 8001ea4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <MX_DMA_Init+0x48>)
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	639a      	str	r2, [r3, #56]	@ 0x38
 8001eae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee4 <MX_DMA_Init+0x48>)
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2009      	movs	r0, #9
 8001ec0:	f001 fe2e 	bl	8003b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ec4:	2009      	movs	r0, #9
 8001ec6:	f001 fe40 	bl	8003b4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	200a      	movs	r0, #10
 8001ed0:	f001 fe26 	bl	8003b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001ed4:	200a      	movs	r0, #10
 8001ed6:	f001 fe38 	bl	8003b4a <HAL_NVIC_EnableIRQ>

}
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b002      	add	sp, #8
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			@ (mov r8, r8)
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b089      	sub	sp, #36	@ 0x24
 8001eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eee:	240c      	movs	r4, #12
 8001ef0:	193b      	adds	r3, r7, r4
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	2314      	movs	r3, #20
 8001ef6:	001a      	movs	r2, r3
 8001ef8:	2100      	movs	r1, #0
 8001efa:	f004 fbdd 	bl	80066b8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <MX_GPIO_Init+0x70>)
 8001f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f02:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <MX_GPIO_Init+0x70>)
 8001f04:	2101      	movs	r1, #1
 8001f06:	430a      	orrs	r2, r1
 8001f08:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f0a:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <MX_GPIO_Init+0x70>)
 8001f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f0e:	2201      	movs	r2, #1
 8001f10:	4013      	ands	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <MX_GPIO_Init+0x70>)
 8001f18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <MX_GPIO_Init+0x70>)
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f22:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <MX_GPIO_Init+0x70>)
 8001f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f26:	2202      	movs	r2, #2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f2e:	193b      	adds	r3, r7, r4
 8001f30:	22c0      	movs	r2, #192	@ 0xc0
 8001f32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f34:	193b      	adds	r3, r7, r4
 8001f36:	2200      	movs	r2, #0
 8001f38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	193b      	adds	r3, r7, r4
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	193a      	adds	r2, r7, r4
 8001f42:	23a0      	movs	r3, #160	@ 0xa0
 8001f44:	05db      	lsls	r3, r3, #23
 8001f46:	0011      	movs	r1, r2
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f002 fa3d 	bl	80043c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b009      	add	sp, #36	@ 0x24
 8001f54:	bd90      	pop	{r4, r7, pc}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	40021000 	.word	0x40021000

08001f5c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	  value_adc0 = AD_RES_BUFFER[0] - 2048;
 8001f64:	4b21      	ldr	r3, [pc, #132]	@ (8001fec <HAL_ADC_ConvCpltCallback+0x90>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	4a21      	ldr	r2, [pc, #132]	@ (8001ff0 <HAL_ADC_ConvCpltCallback+0x94>)
 8001f6a:	4694      	mov	ip, r2
 8001f6c:	4463      	add	r3, ip
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	b21a      	sxth	r2, r3
 8001f72:	4b20      	ldr	r3, [pc, #128]	@ (8001ff4 <HAL_ADC_ConvCpltCallback+0x98>)
 8001f74:	801a      	strh	r2, [r3, #0]
	  value_adc1 = AD_RES_BUFFER[1] - 2048;
 8001f76:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <HAL_ADC_ConvCpltCallback+0x90>)
 8001f78:	885b      	ldrh	r3, [r3, #2]
 8001f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff0 <HAL_ADC_ConvCpltCallback+0x94>)
 8001f7c:	4694      	mov	ip, r2
 8001f7e:	4463      	add	r3, ip
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	b21a      	sxth	r2, r3
 8001f84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001f86:	801a      	strh	r2, [r3, #0]
	  value_adc2 = AD_RES_BUFFER[2] - 2048;
 8001f88:	4b18      	ldr	r3, [pc, #96]	@ (8001fec <HAL_ADC_ConvCpltCallback+0x90>)
 8001f8a:	889b      	ldrh	r3, [r3, #4]
 8001f8c:	4a18      	ldr	r2, [pc, #96]	@ (8001ff0 <HAL_ADC_ConvCpltCallback+0x94>)
 8001f8e:	4694      	mov	ip, r2
 8001f90:	4463      	add	r3, ip
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <HAL_ADC_ConvCpltCallback+0xa0>)
 8001f98:	801a      	strh	r2, [r3, #0]
	  value_adc3 = AD_RES_BUFFER[3] - 2048;
 8001f9a:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <HAL_ADC_ConvCpltCallback+0x90>)
 8001f9c:	88db      	ldrh	r3, [r3, #6]
 8001f9e:	4a14      	ldr	r2, [pc, #80]	@ (8001ff0 <HAL_ADC_ConvCpltCallback+0x94>)
 8001fa0:	4694      	mov	ip, r2
 8001fa2:	4463      	add	r3, ip
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001faa:	801a      	strh	r2, [r3, #0]

	  diff_x += AD_RES_BUFFER[0] - AD_RES_BUFFER[3];
 8001fac:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <HAL_ADC_ConvCpltCallback+0x90>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	001a      	movs	r2, r3
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <HAL_ADC_ConvCpltCallback+0x90>)
 8001fb4:	88db      	ldrh	r3, [r3, #6]
 8001fb6:	1ad2      	subs	r2, r2, r3
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	18d2      	adds	r2, r2, r3
 8001fbe:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001fc0:	601a      	str	r2, [r3, #0]
	  diff_y += AD_RES_BUFFER[1] - AD_RES_BUFFER[2];
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <HAL_ADC_ConvCpltCallback+0x90>)
 8001fc4:	885b      	ldrh	r3, [r3, #2]
 8001fc6:	001a      	movs	r2, r3
 8001fc8:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <HAL_ADC_ConvCpltCallback+0x90>)
 8001fca:	889b      	ldrh	r3, [r3, #4]
 8001fcc:	1ad2      	subs	r2, r2, r3
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <HAL_ADC_ConvCpltCallback+0xac>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	18d2      	adds	r2, r2, r3
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <HAL_ADC_ConvCpltCallback+0xac>)
 8001fd6:	601a      	str	r2, [r3, #0]

	  counter++;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <HAL_ADC_ConvCpltCallback+0xb0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <HAL_ADC_ConvCpltCallback+0xb0>)
 8001fe0:	601a      	str	r2, [r3, #0]
}
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b002      	add	sp, #8
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	200002fc 	.word	0x200002fc
 8001ff0:	fffff800 	.word	0xfffff800
 8001ff4:	200002e8 	.word	0x200002e8
 8001ff8:	200002ea 	.word	0x200002ea
 8001ffc:	200002ec 	.word	0x200002ec
 8002000:	200002ee 	.word	0x200002ee
 8002004:	200002f0 	.word	0x200002f0
 8002008:	200002f4 	.word	0x200002f4
 800200c:	20000310 	.word	0x20000310

08002010 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    if (htim == &htim14) {
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	4b80      	ldr	r3, [pc, #512]	@ (800221c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800201c:	429a      	cmp	r2, r3
 800201e:	d101      	bne.n	8002024 <HAL_TIM_PeriodElapsedCallback+0x14>
        Quad_OutputStep();
 8002020:	f7ff fc46 	bl	80018b0 <Quad_OutputStep>
    }
    if (htim == &htim16) {
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	4b7e      	ldr	r3, [pc, #504]	@ (8002220 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002028:	429a      	cmp	r2, r3
 800202a:	d000      	beq.n	800202e <HAL_TIM_PeriodElapsedCallback+0x1e>
 800202c:	e0f2      	b.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x204>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800202e:	b672      	cpsid	i
}
 8002030:	46c0      	nop			@ (mov r8, r8)
        int32_t local_diff_x, local_diff_y;
        uint32_t local_counter;

        __disable_irq();
        local_diff_x = diff_x;
 8002032:	4b7c      	ldr	r3, [pc, #496]	@ (8002224 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	613b      	str	r3, [r7, #16]
        local_diff_y = diff_y;
 8002038:	4b7b      	ldr	r3, [pc, #492]	@ (8002228 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
        local_counter = counter;
 800203e:	4b7b      	ldr	r3, [pc, #492]	@ (800222c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60bb      	str	r3, [r7, #8]
        diff_x = 0;
 8002044:	4b77      	ldr	r3, [pc, #476]	@ (8002224 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
        diff_y = 0;
 800204a:	4b77      	ldr	r3, [pc, #476]	@ (8002228 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
        counter = 0;
 8002050:	4b76      	ldr	r3, [pc, #472]	@ (800222c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002056:	b662      	cpsie	i
}
 8002058:	46c0      	nop			@ (mov r8, r8)
        __enable_irq();

        if (local_counter == 0) {
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d11a      	bne.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x86>
            avg_x = value_adc0 - value_adc2;
 8002060:	4b73      	ldr	r3, [pc, #460]	@ (8002230 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002062:	2200      	movs	r2, #0
 8002064:	5e9b      	ldrsh	r3, [r3, r2]
 8002066:	b29a      	uxth	r2, r3
 8002068:	4b72      	ldr	r3, [pc, #456]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800206a:	2100      	movs	r1, #0
 800206c:	5e5b      	ldrsh	r3, [r3, r1]
 800206e:	b29b      	uxth	r3, r3
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	b29b      	uxth	r3, r3
 8002074:	b21a      	sxth	r2, r3
 8002076:	4b70      	ldr	r3, [pc, #448]	@ (8002238 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002078:	801a      	strh	r2, [r3, #0]
            avg_y = value_adc1 - value_adc3;
 800207a:	4b70      	ldr	r3, [pc, #448]	@ (800223c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800207c:	2200      	movs	r2, #0
 800207e:	5e9b      	ldrsh	r3, [r3, r2]
 8002080:	b29a      	uxth	r2, r3
 8002082:	4b6f      	ldr	r3, [pc, #444]	@ (8002240 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002084:	2100      	movs	r1, #0
 8002086:	5e5b      	ldrsh	r3, [r3, r1]
 8002088:	b29b      	uxth	r3, r3
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	b29b      	uxth	r3, r3
 800208e:	b21a      	sxth	r2, r3
 8002090:	4b6c      	ldr	r3, [pc, #432]	@ (8002244 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002092:	801a      	strh	r2, [r3, #0]
 8002094:	e011      	b.n	80020ba <HAL_TIM_PeriodElapsedCallback+0xaa>
        } else {
            avg_x = local_diff_x / (int32_t)local_counter;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	0019      	movs	r1, r3
 800209a:	6938      	ldr	r0, [r7, #16]
 800209c:	f7fe f8bc 	bl	8000218 <__divsi3>
 80020a0:	0003      	movs	r3, r0
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	4b64      	ldr	r3, [pc, #400]	@ (8002238 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80020a6:	801a      	strh	r2, [r3, #0]
            avg_y = local_diff_y / (int32_t)local_counter;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	0019      	movs	r1, r3
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f7fe f8b3 	bl	8000218 <__divsi3>
 80020b2:	0003      	movs	r3, r0
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b63      	ldr	r3, [pc, #396]	@ (8002244 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80020b8:	801a      	strh	r2, [r3, #0]
        }

        angle = atan2f(avg_y, avg_x) * 57.2958f;
 80020ba:	4b62      	ldr	r3, [pc, #392]	@ (8002244 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80020bc:	2200      	movs	r2, #0
 80020be:	5e9b      	ldrsh	r3, [r3, r2]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7ff fa71 	bl	80015a8 <__aeabi_i2f>
 80020c6:	1c04      	adds	r4, r0, #0
 80020c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002238 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	5e9b      	ldrsh	r3, [r3, r2]
 80020ce:	0018      	movs	r0, r3
 80020d0:	f7ff fa6a 	bl	80015a8 <__aeabi_i2f>
 80020d4:	1c03      	adds	r3, r0, #0
 80020d6:	1c19      	adds	r1, r3, #0
 80020d8:	1c20      	adds	r0, r4, #0
 80020da:	f004 fb19 	bl	8006710 <atan2f>
 80020de:	1c03      	adds	r3, r0, #0
 80020e0:	4959      	ldr	r1, [pc, #356]	@ (8002248 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80020e2:	1c18      	adds	r0, r3, #0
 80020e4:	f7fe fe82 	bl	8000dec <__aeabi_fmul>
 80020e8:	1c03      	adds	r3, r0, #0
 80020ea:	1c1a      	adds	r2, r3, #0
 80020ec:	4b57      	ldr	r3, [pc, #348]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80020ee:	601a      	str	r2, [r3, #0]

        if (mode == 1) {
 80020f0:	4b57      	ldr	r3, [pc, #348]	@ (8002250 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d13c      	bne.n	8002172 <HAL_TIM_PeriodElapsedCallback+0x162>
                if (first_sample) {
 80020f8:	4b56      	ldr	r3, [pc, #344]	@ (8002254 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00d      	beq.n	800211c <HAL_TIM_PeriodElapsedCallback+0x10c>
                    // Seed angle so no huge delta on startup
                    last_angle = angle;
 8002100:	4b52      	ldr	r3, [pc, #328]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b54      	ldr	r3, [pc, #336]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002106:	601a      	str	r2, [r3, #0]
                    edge_accum = 0.0f;
 8002108:	4b54      	ldr	r3, [pc, #336]	@ (800225c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
                    edges_remaining = 0;
 800210e:	4b54      	ldr	r3, [pc, #336]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
                    first_sample = 0;
 8002114:	4b4f      	ldr	r3, [pc, #316]	@ (8002254 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
				output_counter = 0;
				angle_scaled = 0;
            }
        }
    }
}
 800211a:	e07b      	b.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x204>
                    float delta = angle - last_angle;
 800211c:	4b4b      	ldr	r3, [pc, #300]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b4d      	ldr	r3, [pc, #308]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	1c19      	adds	r1, r3, #0
 8002126:	1c10      	adds	r0, r2, #0
 8002128:	f7fe ffba 	bl	80010a0 <__aeabi_fsub>
 800212c:	1c03      	adds	r3, r0, #0
 800212e:	617b      	str	r3, [r7, #20]
                    if (delta > 180.0f) delta -= 360.0f;
 8002130:	494c      	ldr	r1, [pc, #304]	@ (8002264 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f7fe f982 	bl	800043c <__aeabi_fcmpgt>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d005      	beq.n	8002148 <HAL_TIM_PeriodElapsedCallback+0x138>
 800213c:	494a      	ldr	r1, [pc, #296]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800213e:	6978      	ldr	r0, [r7, #20]
 8002140:	f7fe ffae 	bl	80010a0 <__aeabi_fsub>
 8002144:	1c03      	adds	r3, r0, #0
 8002146:	617b      	str	r3, [r7, #20]
                    if (delta < -180.0f) delta += 360.0f;
 8002148:	4948      	ldr	r1, [pc, #288]	@ (800226c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7fe f962 	bl	8000414 <__aeabi_fcmplt>
 8002150:	1e03      	subs	r3, r0, #0
 8002152:	d005      	beq.n	8002160 <HAL_TIM_PeriodElapsedCallback+0x150>
 8002154:	4944      	ldr	r1, [pc, #272]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002156:	6978      	ldr	r0, [r7, #20]
 8002158:	f7fe fa88 	bl	800066c <__aeabi_fadd>
 800215c:	1c03      	adds	r3, r0, #0
 800215e:	617b      	str	r3, [r7, #20]
                    Quad_Update(delta);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	1c18      	adds	r0, r3, #0
 8002164:	f7ff fafe 	bl	8001764 <Quad_Update>
                    last_angle = angle;
 8002168:	4b38      	ldr	r3, [pc, #224]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b3a      	ldr	r3, [pc, #232]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800216e:	601a      	str	r2, [r3, #0]
}
 8002170:	e050      	b.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x204>
            angle_scaled += (angle + 180.0f) * 3848.0f / 360.0f;
 8002172:	4b36      	ldr	r3, [pc, #216]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	493b      	ldr	r1, [pc, #236]	@ (8002264 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002178:	1c18      	adds	r0, r3, #0
 800217a:	f7fe fa77 	bl	800066c <__aeabi_fadd>
 800217e:	1c03      	adds	r3, r0, #0
 8002180:	493b      	ldr	r1, [pc, #236]	@ (8002270 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002182:	1c18      	adds	r0, r3, #0
 8002184:	f7fe fe32 	bl	8000dec <__aeabi_fmul>
 8002188:	1c03      	adds	r3, r0, #0
 800218a:	4937      	ldr	r1, [pc, #220]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800218c:	1c18      	adds	r0, r3, #0
 800218e:	f7fe fc5f 	bl	8000a50 <__aeabi_fdiv>
 8002192:	1c03      	adds	r3, r0, #0
 8002194:	1c1c      	adds	r4, r3, #0
 8002196:	4b37      	ldr	r3, [pc, #220]	@ (8002274 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b21b      	sxth	r3, r3
 800219c:	0018      	movs	r0, r3
 800219e:	f7ff fa03 	bl	80015a8 <__aeabi_i2f>
 80021a2:	1c03      	adds	r3, r0, #0
 80021a4:	1c19      	adds	r1, r3, #0
 80021a6:	1c20      	adds	r0, r4, #0
 80021a8:	f7fe fa60 	bl	800066c <__aeabi_fadd>
 80021ac:	1c03      	adds	r3, r0, #0
 80021ae:	1c18      	adds	r0, r3, #0
 80021b0:	f7ff f9da 	bl	8001568 <__aeabi_f2iz>
 80021b4:	0003      	movs	r3, r0
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002274 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80021ba:	801a      	strh	r2, [r3, #0]
            output_counter++;
 80021bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002278 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	3301      	adds	r3, #1
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80021c8:	701a      	strb	r2, [r3, #0]
            if (output_counter >= 4) { // 100 Hz update
 80021ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002278 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d91f      	bls.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x204>
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, angle_scaled/4);
 80021d4:	4b27      	ldr	r3, [pc, #156]	@ (8002274 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	b21b      	sxth	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	da00      	bge.n	80021e0 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 80021de:	3303      	adds	r3, #3
 80021e0:	109b      	asrs	r3, r3, #2
 80021e2:	b21b      	sxth	r3, r3
 80021e4:	4825      	ldr	r0, [pc, #148]	@ (800227c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	f001 fd44 	bl	8003c76 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, angle_scaled/4);
 80021ee:	4b21      	ldr	r3, [pc, #132]	@ (8002274 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	da00      	bge.n	80021fa <HAL_TIM_PeriodElapsedCallback+0x1ea>
 80021f8:	3303      	adds	r3, #3
 80021fa:	109b      	asrs	r3, r3, #2
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	481f      	ldr	r0, [pc, #124]	@ (800227c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002200:	2200      	movs	r2, #0
 8002202:	2110      	movs	r1, #16
 8002204:	f001 fd37 	bl	8003c76 <HAL_DAC_SetValue>
				output_counter = 0;
 8002208:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
				angle_scaled = 0;
 800220e:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002210:	2200      	movs	r2, #0
 8002212:	801a      	strh	r2, [r3, #0]
}
 8002214:	46c0      	nop			@ (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	b007      	add	sp, #28
 800221a:	bd90      	pop	{r4, r7, pc}
 800221c:	200001bc 	.word	0x200001bc
 8002220:	20000208 	.word	0x20000208
 8002224:	200002f0 	.word	0x200002f0
 8002228:	200002f4 	.word	0x200002f4
 800222c:	20000310 	.word	0x20000310
 8002230:	200002e8 	.word	0x200002e8
 8002234:	200002ec 	.word	0x200002ec
 8002238:	200002f8 	.word	0x200002f8
 800223c:	200002ea 	.word	0x200002ea
 8002240:	200002ee 	.word	0x200002ee
 8002244:	200002fa 	.word	0x200002fa
 8002248:	42652ee6 	.word	0x42652ee6
 800224c:	20000304 	.word	0x20000304
 8002250:	20000317 	.word	0x20000317
 8002254:	20000004 	.word	0x20000004
 8002258:	20000308 	.word	0x20000308
 800225c:	20000320 	.word	0x20000320
 8002260:	2000031c 	.word	0x2000031c
 8002264:	43340000 	.word	0x43340000
 8002268:	43b40000 	.word	0x43b40000
 800226c:	c3340000 	.word	0xc3340000
 8002270:	45708000 	.word	0x45708000
 8002274:	2000030c 	.word	0x2000030c
 8002278:	20000314 	.word	0x20000314
 800227c:	200000f0 	.word	0x200000f0

08002280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
}
 8002286:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002288:	46c0      	nop			@ (mov r8, r8)
 800228a:	e7fd      	b.n	8002288 <Error_Handler+0x8>

0800228c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002292:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <HAL_MspInit+0x44>)
 8002294:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002296:	4b0e      	ldr	r3, [pc, #56]	@ (80022d0 <HAL_MspInit+0x44>)
 8002298:	2101      	movs	r1, #1
 800229a:	430a      	orrs	r2, r1
 800229c:	641a      	str	r2, [r3, #64]	@ 0x40
 800229e:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <HAL_MspInit+0x44>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	2201      	movs	r2, #1
 80022a4:	4013      	ands	r3, r2
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <HAL_MspInit+0x44>)
 80022ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022ae:	4b08      	ldr	r3, [pc, #32]	@ (80022d0 <HAL_MspInit+0x44>)
 80022b0:	2180      	movs	r1, #128	@ 0x80
 80022b2:	0549      	lsls	r1, r1, #21
 80022b4:	430a      	orrs	r2, r1
 80022b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <HAL_MspInit+0x44>)
 80022ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022bc:	2380      	movs	r3, #128	@ 0x80
 80022be:	055b      	lsls	r3, r3, #21
 80022c0:	4013      	ands	r3, r2
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b002      	add	sp, #8
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	40021000 	.word	0x40021000

080022d4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b097      	sub	sp, #92	@ 0x5c
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	2344      	movs	r3, #68	@ 0x44
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	0018      	movs	r0, r3
 80022e2:	2314      	movs	r3, #20
 80022e4:	001a      	movs	r2, r3
 80022e6:	2100      	movs	r1, #0
 80022e8:	f004 f9e6 	bl	80066b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022ec:	2410      	movs	r4, #16
 80022ee:	193b      	adds	r3, r7, r4
 80022f0:	0018      	movs	r0, r3
 80022f2:	2334      	movs	r3, #52	@ 0x34
 80022f4:	001a      	movs	r2, r3
 80022f6:	2100      	movs	r1, #0
 80022f8:	f004 f9de 	bl	80066b8 <memset>
  if(hadc->Instance==ADC1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a35      	ldr	r2, [pc, #212]	@ (80023d8 <HAL_ADC_MspInit+0x104>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d164      	bne.n	80023d0 <HAL_ADC_MspInit+0xfc>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002306:	193b      	adds	r3, r7, r4
 8002308:	2280      	movs	r2, #128	@ 0x80
 800230a:	01d2      	lsls	r2, r2, #7
 800230c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800230e:	193b      	adds	r3, r7, r4
 8002310:	2200      	movs	r2, #0
 8002312:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002314:	193b      	adds	r3, r7, r4
 8002316:	0018      	movs	r0, r3
 8002318:	f002 ff04 	bl	8005124 <HAL_RCCEx_PeriphCLKConfig>
 800231c:	1e03      	subs	r3, r0, #0
 800231e:	d001      	beq.n	8002324 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002320:	f7ff ffae 	bl	8002280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002324:	4b2d      	ldr	r3, [pc, #180]	@ (80023dc <HAL_ADC_MspInit+0x108>)
 8002326:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002328:	4b2c      	ldr	r3, [pc, #176]	@ (80023dc <HAL_ADC_MspInit+0x108>)
 800232a:	2180      	movs	r1, #128	@ 0x80
 800232c:	0349      	lsls	r1, r1, #13
 800232e:	430a      	orrs	r2, r1
 8002330:	641a      	str	r2, [r3, #64]	@ 0x40
 8002332:	4b2a      	ldr	r3, [pc, #168]	@ (80023dc <HAL_ADC_MspInit+0x108>)
 8002334:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002336:	2380      	movs	r3, #128	@ 0x80
 8002338:	035b      	lsls	r3, r3, #13
 800233a:	4013      	ands	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002340:	4b26      	ldr	r3, [pc, #152]	@ (80023dc <HAL_ADC_MspInit+0x108>)
 8002342:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002344:	4b25      	ldr	r3, [pc, #148]	@ (80023dc <HAL_ADC_MspInit+0x108>)
 8002346:	2101      	movs	r1, #1
 8002348:	430a      	orrs	r2, r1
 800234a:	635a      	str	r2, [r3, #52]	@ 0x34
 800234c:	4b23      	ldr	r3, [pc, #140]	@ (80023dc <HAL_ADC_MspInit+0x108>)
 800234e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002350:	2201      	movs	r2, #1
 8002352:	4013      	ands	r3, r2
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002358:	2144      	movs	r1, #68	@ 0x44
 800235a:	187b      	adds	r3, r7, r1
 800235c:	220f      	movs	r2, #15
 800235e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002360:	187b      	adds	r3, r7, r1
 8002362:	2203      	movs	r2, #3
 8002364:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	187b      	adds	r3, r7, r1
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	187a      	adds	r2, r7, r1
 800236e:	23a0      	movs	r3, #160	@ 0xa0
 8002370:	05db      	lsls	r3, r3, #23
 8002372:	0011      	movs	r1, r2
 8002374:	0018      	movs	r0, r3
 8002376:	f002 f827 	bl	80043c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800237a:	4b19      	ldr	r3, [pc, #100]	@ (80023e0 <HAL_ADC_MspInit+0x10c>)
 800237c:	4a19      	ldr	r2, [pc, #100]	@ (80023e4 <HAL_ADC_MspInit+0x110>)
 800237e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002380:	4b17      	ldr	r3, [pc, #92]	@ (80023e0 <HAL_ADC_MspInit+0x10c>)
 8002382:	2205      	movs	r2, #5
 8002384:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002386:	4b16      	ldr	r3, [pc, #88]	@ (80023e0 <HAL_ADC_MspInit+0x10c>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800238c:	4b14      	ldr	r3, [pc, #80]	@ (80023e0 <HAL_ADC_MspInit+0x10c>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002392:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <HAL_ADC_MspInit+0x10c>)
 8002394:	2280      	movs	r2, #128	@ 0x80
 8002396:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002398:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <HAL_ADC_MspInit+0x10c>)
 800239a:	2280      	movs	r2, #128	@ 0x80
 800239c:	0052      	lsls	r2, r2, #1
 800239e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023a0:	4b0f      	ldr	r3, [pc, #60]	@ (80023e0 <HAL_ADC_MspInit+0x10c>)
 80023a2:	2280      	movs	r2, #128	@ 0x80
 80023a4:	00d2      	lsls	r2, r2, #3
 80023a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023a8:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <HAL_ADC_MspInit+0x10c>)
 80023aa:	2220      	movs	r2, #32
 80023ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023ae:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <HAL_ADC_MspInit+0x10c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023b4:	4b0a      	ldr	r3, [pc, #40]	@ (80023e0 <HAL_ADC_MspInit+0x10c>)
 80023b6:	0018      	movs	r0, r3
 80023b8:	f001 fdb4 	bl	8003f24 <HAL_DMA_Init>
 80023bc:	1e03      	subs	r3, r0, #0
 80023be:	d001      	beq.n	80023c4 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 80023c0:	f7ff ff5e 	bl	8002280 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a06      	ldr	r2, [pc, #24]	@ (80023e0 <HAL_ADC_MspInit+0x10c>)
 80023c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80023ca:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <HAL_ADC_MspInit+0x10c>)
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80023d0:	46c0      	nop			@ (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b017      	add	sp, #92	@ 0x5c
 80023d6:	bd90      	pop	{r4, r7, pc}
 80023d8:	40012400 	.word	0x40012400
 80023dc:	40021000 	.word	0x40021000
 80023e0:	20000094 	.word	0x20000094
 80023e4:	4002001c 	.word	0x4002001c

080023e8 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b08b      	sub	sp, #44	@ 0x2c
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	2414      	movs	r4, #20
 80023f2:	193b      	adds	r3, r7, r4
 80023f4:	0018      	movs	r0, r3
 80023f6:	2314      	movs	r3, #20
 80023f8:	001a      	movs	r2, r3
 80023fa:	2100      	movs	r1, #0
 80023fc:	f004 f95c 	bl	80066b8 <memset>
  if(hdac->Instance==DAC1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a43      	ldr	r2, [pc, #268]	@ (8002514 <HAL_DAC_MspInit+0x12c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d000      	beq.n	800240c <HAL_DAC_MspInit+0x24>
 800240a:	e07f      	b.n	800250c <HAL_DAC_MspInit+0x124>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800240c:	4b42      	ldr	r3, [pc, #264]	@ (8002518 <HAL_DAC_MspInit+0x130>)
 800240e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002410:	4b41      	ldr	r3, [pc, #260]	@ (8002518 <HAL_DAC_MspInit+0x130>)
 8002412:	2180      	movs	r1, #128	@ 0x80
 8002414:	0589      	lsls	r1, r1, #22
 8002416:	430a      	orrs	r2, r1
 8002418:	63da      	str	r2, [r3, #60]	@ 0x3c
 800241a:	4b3f      	ldr	r3, [pc, #252]	@ (8002518 <HAL_DAC_MspInit+0x130>)
 800241c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800241e:	2380      	movs	r3, #128	@ 0x80
 8002420:	059b      	lsls	r3, r3, #22
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002428:	4b3b      	ldr	r3, [pc, #236]	@ (8002518 <HAL_DAC_MspInit+0x130>)
 800242a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800242c:	4b3a      	ldr	r3, [pc, #232]	@ (8002518 <HAL_DAC_MspInit+0x130>)
 800242e:	2101      	movs	r1, #1
 8002430:	430a      	orrs	r2, r1
 8002432:	635a      	str	r2, [r3, #52]	@ 0x34
 8002434:	4b38      	ldr	r3, [pc, #224]	@ (8002518 <HAL_DAC_MspInit+0x130>)
 8002436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002438:	2201      	movs	r2, #1
 800243a:	4013      	ands	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002440:	193b      	adds	r3, r7, r4
 8002442:	2230      	movs	r2, #48	@ 0x30
 8002444:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002446:	193b      	adds	r3, r7, r4
 8002448:	2203      	movs	r2, #3
 800244a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	193b      	adds	r3, r7, r4
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002452:	193a      	adds	r2, r7, r4
 8002454:	23a0      	movs	r3, #160	@ 0xa0
 8002456:	05db      	lsls	r3, r3, #23
 8002458:	0011      	movs	r1, r2
 800245a:	0018      	movs	r0, r3
 800245c:	f001 ffb4 	bl	80043c8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8002460:	4b2e      	ldr	r3, [pc, #184]	@ (800251c <HAL_DAC_MspInit+0x134>)
 8002462:	4a2f      	ldr	r2, [pc, #188]	@ (8002520 <HAL_DAC_MspInit+0x138>)
 8002464:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8002466:	4b2d      	ldr	r3, [pc, #180]	@ (800251c <HAL_DAC_MspInit+0x134>)
 8002468:	2208      	movs	r2, #8
 800246a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800246c:	4b2b      	ldr	r3, [pc, #172]	@ (800251c <HAL_DAC_MspInit+0x134>)
 800246e:	2210      	movs	r2, #16
 8002470:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002472:	4b2a      	ldr	r3, [pc, #168]	@ (800251c <HAL_DAC_MspInit+0x134>)
 8002474:	2200      	movs	r2, #0
 8002476:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002478:	4b28      	ldr	r3, [pc, #160]	@ (800251c <HAL_DAC_MspInit+0x134>)
 800247a:	2280      	movs	r2, #128	@ 0x80
 800247c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800247e:	4b27      	ldr	r3, [pc, #156]	@ (800251c <HAL_DAC_MspInit+0x134>)
 8002480:	2280      	movs	r2, #128	@ 0x80
 8002482:	0052      	lsls	r2, r2, #1
 8002484:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002486:	4b25      	ldr	r3, [pc, #148]	@ (800251c <HAL_DAC_MspInit+0x134>)
 8002488:	2280      	movs	r2, #128	@ 0x80
 800248a:	00d2      	lsls	r2, r2, #3
 800248c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800248e:	4b23      	ldr	r3, [pc, #140]	@ (800251c <HAL_DAC_MspInit+0x134>)
 8002490:	2220      	movs	r2, #32
 8002492:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002494:	4b21      	ldr	r3, [pc, #132]	@ (800251c <HAL_DAC_MspInit+0x134>)
 8002496:	2200      	movs	r2, #0
 8002498:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800249a:	4b20      	ldr	r3, [pc, #128]	@ (800251c <HAL_DAC_MspInit+0x134>)
 800249c:	0018      	movs	r0, r3
 800249e:	f001 fd41 	bl	8003f24 <HAL_DMA_Init>
 80024a2:	1e03      	subs	r3, r0, #0
 80024a4:	d001      	beq.n	80024aa <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 80024a6:	f7ff feeb 	bl	8002280 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a1b      	ldr	r2, [pc, #108]	@ (800251c <HAL_DAC_MspInit+0x134>)
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	4b1a      	ldr	r3, [pc, #104]	@ (800251c <HAL_DAC_MspInit+0x134>)
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel3;
 80024b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <HAL_DAC_MspInit+0x13c>)
 80024b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002528 <HAL_DAC_MspInit+0x140>)
 80024ba:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 80024bc:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <HAL_DAC_MspInit+0x13c>)
 80024be:	2209      	movs	r2, #9
 80024c0:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024c2:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <HAL_DAC_MspInit+0x13c>)
 80024c4:	2210      	movs	r2, #16
 80024c6:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c8:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <HAL_DAC_MspInit+0x13c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80024ce:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <HAL_DAC_MspInit+0x13c>)
 80024d0:	2280      	movs	r2, #128	@ 0x80
 80024d2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024d4:	4b13      	ldr	r3, [pc, #76]	@ (8002524 <HAL_DAC_MspInit+0x13c>)
 80024d6:	2280      	movs	r2, #128	@ 0x80
 80024d8:	0052      	lsls	r2, r2, #1
 80024da:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <HAL_DAC_MspInit+0x13c>)
 80024de:	2280      	movs	r2, #128	@ 0x80
 80024e0:	00d2      	lsls	r2, r2, #3
 80024e2:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80024e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002524 <HAL_DAC_MspInit+0x13c>)
 80024e6:	2220      	movs	r2, #32
 80024e8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80024ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002524 <HAL_DAC_MspInit+0x13c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80024f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <HAL_DAC_MspInit+0x13c>)
 80024f2:	0018      	movs	r0, r3
 80024f4:	f001 fd16 	bl	8003f24 <HAL_DMA_Init>
 80024f8:	1e03      	subs	r3, r0, #0
 80024fa:	d001      	beq.n	8002500 <HAL_DAC_MspInit+0x118>
    {
      Error_Handler();
 80024fc:	f7ff fec0 	bl	8002280 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a08      	ldr	r2, [pc, #32]	@ (8002524 <HAL_DAC_MspInit+0x13c>)
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	4b07      	ldr	r3, [pc, #28]	@ (8002524 <HAL_DAC_MspInit+0x13c>)
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 800250c:	46c0      	nop			@ (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b00b      	add	sp, #44	@ 0x2c
 8002512:	bd90      	pop	{r4, r7, pc}
 8002514:	40007400 	.word	0x40007400
 8002518:	40021000 	.word	0x40021000
 800251c:	20000104 	.word	0x20000104
 8002520:	40020008 	.word	0x40020008
 8002524:	20000160 	.word	0x20000160
 8002528:	40020030 	.word	0x40020030

0800252c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1c      	ldr	r2, [pc, #112]	@ (80025ac <HAL_TIM_Base_MspInit+0x80>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d116      	bne.n	800256c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800253e:	4b1c      	ldr	r3, [pc, #112]	@ (80025b0 <HAL_TIM_Base_MspInit+0x84>)
 8002540:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002542:	4b1b      	ldr	r3, [pc, #108]	@ (80025b0 <HAL_TIM_Base_MspInit+0x84>)
 8002544:	2180      	movs	r1, #128	@ 0x80
 8002546:	0209      	lsls	r1, r1, #8
 8002548:	430a      	orrs	r2, r1
 800254a:	641a      	str	r2, [r3, #64]	@ 0x40
 800254c:	4b18      	ldr	r3, [pc, #96]	@ (80025b0 <HAL_TIM_Base_MspInit+0x84>)
 800254e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002550:	2380      	movs	r3, #128	@ 0x80
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	4013      	ands	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	2013      	movs	r0, #19
 8002560:	f001 fade 	bl	8003b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002564:	2013      	movs	r0, #19
 8002566:	f001 faf0 	bl	8003b4a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 800256a:	e01a      	b.n	80025a2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM16)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a10      	ldr	r2, [pc, #64]	@ (80025b4 <HAL_TIM_Base_MspInit+0x88>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d115      	bne.n	80025a2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002576:	4b0e      	ldr	r3, [pc, #56]	@ (80025b0 <HAL_TIM_Base_MspInit+0x84>)
 8002578:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800257a:	4b0d      	ldr	r3, [pc, #52]	@ (80025b0 <HAL_TIM_Base_MspInit+0x84>)
 800257c:	2180      	movs	r1, #128	@ 0x80
 800257e:	0289      	lsls	r1, r1, #10
 8002580:	430a      	orrs	r2, r1
 8002582:	641a      	str	r2, [r3, #64]	@ 0x40
 8002584:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <HAL_TIM_Base_MspInit+0x84>)
 8002586:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002588:	2380      	movs	r3, #128	@ 0x80
 800258a:	029b      	lsls	r3, r3, #10
 800258c:	4013      	ands	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	2015      	movs	r0, #21
 8002598:	f001 fac2 	bl	8003b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800259c:	2015      	movs	r0, #21
 800259e:	f001 fad4 	bl	8003b4a <HAL_NVIC_EnableIRQ>
}
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b004      	add	sp, #16
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	40002000 	.word	0x40002000
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40014400 	.word	0x40014400

080025b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b097      	sub	sp, #92	@ 0x5c
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	2344      	movs	r3, #68	@ 0x44
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	0018      	movs	r0, r3
 80025c6:	2314      	movs	r3, #20
 80025c8:	001a      	movs	r2, r3
 80025ca:	2100      	movs	r1, #0
 80025cc:	f004 f874 	bl	80066b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025d0:	2410      	movs	r4, #16
 80025d2:	193b      	adds	r3, r7, r4
 80025d4:	0018      	movs	r0, r3
 80025d6:	2334      	movs	r3, #52	@ 0x34
 80025d8:	001a      	movs	r2, r3
 80025da:	2100      	movs	r1, #0
 80025dc:	f004 f86c 	bl	80066b8 <memset>
  if(huart->Instance==USART1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a22      	ldr	r2, [pc, #136]	@ (8002670 <HAL_UART_MspInit+0xb8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d13d      	bne.n	8002666 <HAL_UART_MspInit+0xae>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80025f0:	193b      	adds	r3, r7, r4
 80025f2:	2200      	movs	r2, #0
 80025f4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f6:	193b      	adds	r3, r7, r4
 80025f8:	0018      	movs	r0, r3
 80025fa:	f002 fd93 	bl	8005124 <HAL_RCCEx_PeriphCLKConfig>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d001      	beq.n	8002606 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002602:	f7ff fe3d 	bl	8002280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002606:	4b1b      	ldr	r3, [pc, #108]	@ (8002674 <HAL_UART_MspInit+0xbc>)
 8002608:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800260a:	4b1a      	ldr	r3, [pc, #104]	@ (8002674 <HAL_UART_MspInit+0xbc>)
 800260c:	2180      	movs	r1, #128	@ 0x80
 800260e:	01c9      	lsls	r1, r1, #7
 8002610:	430a      	orrs	r2, r1
 8002612:	641a      	str	r2, [r3, #64]	@ 0x40
 8002614:	4b17      	ldr	r3, [pc, #92]	@ (8002674 <HAL_UART_MspInit+0xbc>)
 8002616:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002618:	2380      	movs	r3, #128	@ 0x80
 800261a:	01db      	lsls	r3, r3, #7
 800261c:	4013      	ands	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002622:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <HAL_UART_MspInit+0xbc>)
 8002624:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002626:	4b13      	ldr	r3, [pc, #76]	@ (8002674 <HAL_UART_MspInit+0xbc>)
 8002628:	2102      	movs	r1, #2
 800262a:	430a      	orrs	r2, r1
 800262c:	635a      	str	r2, [r3, #52]	@ 0x34
 800262e:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <HAL_UART_MspInit+0xbc>)
 8002630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002632:	2202      	movs	r2, #2
 8002634:	4013      	ands	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800263a:	2144      	movs	r1, #68	@ 0x44
 800263c:	187b      	adds	r3, r7, r1
 800263e:	22c0      	movs	r2, #192	@ 0xc0
 8002640:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	187b      	adds	r3, r7, r1
 8002644:	2202      	movs	r2, #2
 8002646:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	187b      	adds	r3, r7, r1
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	187b      	adds	r3, r7, r1
 8002650:	2200      	movs	r2, #0
 8002652:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002654:	187b      	adds	r3, r7, r1
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265a:	187b      	adds	r3, r7, r1
 800265c:	4a06      	ldr	r2, [pc, #24]	@ (8002678 <HAL_UART_MspInit+0xc0>)
 800265e:	0019      	movs	r1, r3
 8002660:	0010      	movs	r0, r2
 8002662:	f001 feb1 	bl	80043c8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002666:	46c0      	nop			@ (mov r8, r8)
 8002668:	46bd      	mov	sp, r7
 800266a:	b017      	add	sp, #92	@ 0x5c
 800266c:	bd90      	pop	{r4, r7, pc}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	40013800 	.word	0x40013800
 8002674:	40021000 	.word	0x40021000
 8002678:	50000400 	.word	0x50000400

0800267c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002680:	46c0      	nop			@ (mov r8, r8)
 8002682:	e7fd      	b.n	8002680 <NMI_Handler+0x4>

08002684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002688:	46c0      	nop			@ (mov r8, r8)
 800268a:	e7fd      	b.n	8002688 <HardFault_Handler+0x4>

0800268c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002690:	46c0      	nop			@ (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a4:	f000 f8d4 	bl	8002850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a8:	46c0      	nop			@ (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80026b4:	4b03      	ldr	r3, [pc, #12]	@ (80026c4 <DMA1_Channel1_IRQHandler+0x14>)
 80026b6:	0018      	movs	r0, r3
 80026b8:	f001 fd44 	bl	8004144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026bc:	46c0      	nop			@ (mov r8, r8)
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	46c0      	nop			@ (mov r8, r8)
 80026c4:	20000104 	.word	0x20000104

080026c8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026cc:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80026ce:	0018      	movs	r0, r3
 80026d0:	f001 fd38 	bl	8004144 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80026d4:	4b04      	ldr	r3, [pc, #16]	@ (80026e8 <DMA1_Channel2_3_IRQHandler+0x20>)
 80026d6:	0018      	movs	r0, r3
 80026d8:	f001 fd34 	bl	8004144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80026dc:	46c0      	nop			@ (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	20000094 	.word	0x20000094
 80026e8:	20000160 	.word	0x20000160

080026ec <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80026f0:	4b03      	ldr	r3, [pc, #12]	@ (8002700 <TIM14_IRQHandler+0x14>)
 80026f2:	0018      	movs	r0, r3
 80026f4:	f002 ffb0 	bl	8005658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80026f8:	46c0      	nop			@ (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			@ (mov r8, r8)
 8002700:	200001bc 	.word	0x200001bc

08002704 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <TIM16_IRQHandler+0x14>)
 800270a:	0018      	movs	r0, r3
 800270c:	f002 ffa4 	bl	8005658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002710:	46c0      	nop			@ (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	20000208 	.word	0x20000208

0800271c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002720:	46c0      	nop			@ (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002728:	480d      	ldr	r0, [pc, #52]	@ (8002760 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800272a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800272c:	f7ff fff6 	bl	800271c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002730:	480c      	ldr	r0, [pc, #48]	@ (8002764 <LoopForever+0x6>)
  ldr r1, =_edata
 8002732:	490d      	ldr	r1, [pc, #52]	@ (8002768 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002734:	4a0d      	ldr	r2, [pc, #52]	@ (800276c <LoopForever+0xe>)
  movs r3, #0
 8002736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002738:	e002      	b.n	8002740 <LoopCopyDataInit>

0800273a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800273c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273e:	3304      	adds	r3, #4

08002740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002744:	d3f9      	bcc.n	800273a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002746:	4a0a      	ldr	r2, [pc, #40]	@ (8002770 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002748:	4c0a      	ldr	r4, [pc, #40]	@ (8002774 <LoopForever+0x16>)
  movs r3, #0
 800274a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800274c:	e001      	b.n	8002752 <LoopFillZerobss>

0800274e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002750:	3204      	adds	r2, #4

08002752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002754:	d3fb      	bcc.n	800274e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002756:	f003 ffb7 	bl	80066c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800275a:	f7ff f92f 	bl	80019bc <main>

0800275e <LoopForever>:

LoopForever:
  b LoopForever
 800275e:	e7fe      	b.n	800275e <LoopForever>
  ldr   r0, =_estack
 8002760:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002768:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800276c:	08006be8 	.word	0x08006be8
  ldr r2, =_sbss
 8002770:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002774:	20000334 	.word	0x20000334

08002778 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002778:	e7fe      	b.n	8002778 <ADC1_COMP_IRQHandler>
	...

0800277c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002782:	1dfb      	adds	r3, r7, #7
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002788:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <HAL_Init+0x3c>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <HAL_Init+0x3c>)
 800278e:	2180      	movs	r1, #128	@ 0x80
 8002790:	0049      	lsls	r1, r1, #1
 8002792:	430a      	orrs	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002796:	2003      	movs	r0, #3
 8002798:	f000 f810 	bl	80027bc <HAL_InitTick>
 800279c:	1e03      	subs	r3, r0, #0
 800279e:	d003      	beq.n	80027a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80027a0:	1dfb      	adds	r3, r7, #7
 80027a2:	2201      	movs	r2, #1
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	e001      	b.n	80027ac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80027a8:	f7ff fd70 	bl	800228c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027ac:	1dfb      	adds	r3, r7, #7
 80027ae:	781b      	ldrb	r3, [r3, #0]
}
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40022000 	.word	0x40022000

080027bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027bc:	b590      	push	{r4, r7, lr}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027c4:	230f      	movs	r3, #15
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80027cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002844 <HAL_InitTick+0x88>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d02b      	beq.n	800282c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80027d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002848 <HAL_InitTick+0x8c>)
 80027d6:	681c      	ldr	r4, [r3, #0]
 80027d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <HAL_InitTick+0x88>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	0019      	movs	r1, r3
 80027de:	23fa      	movs	r3, #250	@ 0xfa
 80027e0:	0098      	lsls	r0, r3, #2
 80027e2:	f7fd fc8f 	bl	8000104 <__udivsi3>
 80027e6:	0003      	movs	r3, r0
 80027e8:	0019      	movs	r1, r3
 80027ea:	0020      	movs	r0, r4
 80027ec:	f7fd fc8a 	bl	8000104 <__udivsi3>
 80027f0:	0003      	movs	r3, r0
 80027f2:	0018      	movs	r0, r3
 80027f4:	f001 f9b9 	bl	8003b6a <HAL_SYSTICK_Config>
 80027f8:	1e03      	subs	r3, r0, #0
 80027fa:	d112      	bne.n	8002822 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d80a      	bhi.n	8002818 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	2301      	movs	r3, #1
 8002806:	425b      	negs	r3, r3
 8002808:	2200      	movs	r2, #0
 800280a:	0018      	movs	r0, r3
 800280c:	f001 f988 	bl	8003b20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002810:	4b0e      	ldr	r3, [pc, #56]	@ (800284c <HAL_InitTick+0x90>)
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	e00d      	b.n	8002834 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002818:	230f      	movs	r3, #15
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e008      	b.n	8002834 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002822:	230f      	movs	r3, #15
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e003      	b.n	8002834 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800282c:	230f      	movs	r3, #15
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002834:	230f      	movs	r3, #15
 8002836:	18fb      	adds	r3, r7, r3
 8002838:	781b      	ldrb	r3, [r3, #0]
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b005      	add	sp, #20
 8002840:	bd90      	pop	{r4, r7, pc}
 8002842:	46c0      	nop			@ (mov r8, r8)
 8002844:	20000010 	.word	0x20000010
 8002848:	20000008 	.word	0x20000008
 800284c:	2000000c 	.word	0x2000000c

08002850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002854:	4b05      	ldr	r3, [pc, #20]	@ (800286c <HAL_IncTick+0x1c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	001a      	movs	r2, r3
 800285a:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <HAL_IncTick+0x20>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	18d2      	adds	r2, r2, r3
 8002860:	4b03      	ldr	r3, [pc, #12]	@ (8002870 <HAL_IncTick+0x20>)
 8002862:	601a      	str	r2, [r3, #0]
}
 8002864:	46c0      	nop			@ (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	20000010 	.word	0x20000010
 8002870:	20000330 	.word	0x20000330

08002874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  return uwTick;
 8002878:	4b02      	ldr	r3, [pc, #8]	@ (8002884 <HAL_GetTick+0x10>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			@ (mov r8, r8)
 8002884:	20000330 	.word	0x20000330

08002888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff fff0 	bl	8002874 <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3301      	adds	r3, #1
 80028a0:	d005      	beq.n	80028ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a2:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <HAL_Delay+0x44>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	001a      	movs	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	189b      	adds	r3, r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	f7ff ffe0 	bl	8002874 <HAL_GetTick>
 80028b4:	0002      	movs	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d8f7      	bhi.n	80028b0 <HAL_Delay+0x28>
  {
  }
}
 80028c0:	46c0      	nop			@ (mov r8, r8)
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b004      	add	sp, #16
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	20000010 	.word	0x20000010

080028d0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a05      	ldr	r2, [pc, #20]	@ (80028f4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80028e0:	401a      	ands	r2, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]
}
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b002      	add	sp, #8
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			@ (mov r8, r8)
 80028f4:	fe3fffff 	.word	0xfe3fffff

080028f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	23e0      	movs	r3, #224	@ 0xe0
 8002906:	045b      	lsls	r3, r3, #17
 8002908:	4013      	ands	r3, r2
}
 800290a:	0018      	movs	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	b002      	add	sp, #8
 8002910:	bd80      	pop	{r7, pc}

08002912 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	2104      	movs	r1, #4
 8002926:	400a      	ands	r2, r1
 8002928:	2107      	movs	r1, #7
 800292a:	4091      	lsls	r1, r2
 800292c:	000a      	movs	r2, r1
 800292e:	43d2      	mvns	r2, r2
 8002930:	401a      	ands	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2104      	movs	r1, #4
 8002936:	400b      	ands	r3, r1
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4099      	lsls	r1, r3
 800293c:	000b      	movs	r3, r1
 800293e:	431a      	orrs	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002944:	46c0      	nop			@ (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	b004      	add	sp, #16
 800294a:	bd80      	pop	{r7, pc}

0800294c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	2104      	movs	r1, #4
 800295e:	400a      	ands	r2, r1
 8002960:	2107      	movs	r1, #7
 8002962:	4091      	lsls	r1, r2
 8002964:	000a      	movs	r2, r1
 8002966:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	2104      	movs	r1, #4
 800296c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800296e:	40da      	lsrs	r2, r3
 8002970:	0013      	movs	r3, r2
}
 8002972:	0018      	movs	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	b002      	add	sp, #8
 8002978:	bd80      	pop	{r7, pc}

0800297a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	23c0      	movs	r3, #192	@ 0xc0
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	4013      	ands	r3, r2
 800298c:	d101      	bne.n	8002992 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002992:	2300      	movs	r3, #0
}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	b002      	add	sp, #8
 800299a:	bd80      	pop	{r7, pc}

0800299c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	211f      	movs	r1, #31
 80029b0:	400a      	ands	r2, r1
 80029b2:	210f      	movs	r1, #15
 80029b4:	4091      	lsls	r1, r2
 80029b6:	000a      	movs	r2, r1
 80029b8:	43d2      	mvns	r2, r2
 80029ba:	401a      	ands	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	0e9b      	lsrs	r3, r3, #26
 80029c0:	210f      	movs	r1, #15
 80029c2:	4019      	ands	r1, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	201f      	movs	r0, #31
 80029c8:	4003      	ands	r3, r0
 80029ca:	4099      	lsls	r1, r3
 80029cc:	000b      	movs	r3, r1
 80029ce:	431a      	orrs	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029d4:	46c0      	nop			@ (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b004      	add	sp, #16
 80029da:	bd80      	pop	{r7, pc}

080029dc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	035b      	lsls	r3, r3, #13
 80029ee:	0b5b      	lsrs	r3, r3, #13
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029f6:	46c0      	nop			@ (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b002      	add	sp, #8
 80029fc:	bd80      	pop	{r7, pc}

080029fe <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	0352      	lsls	r2, r2, #13
 8002a10:	0b52      	lsrs	r2, r2, #13
 8002a12:	43d2      	mvns	r2, r2
 8002a14:	401a      	ands	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a1a:	46c0      	nop			@ (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b002      	add	sp, #8
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	0212      	lsls	r2, r2, #8
 8002a38:	43d2      	mvns	r2, r2
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	400b      	ands	r3, r1
 8002a44:	4904      	ldr	r1, [pc, #16]	@ (8002a58 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002a46:	400b      	ands	r3, r1
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b004      	add	sp, #16
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	07ffff00 	.word	0x07ffff00

08002a5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a05      	ldr	r2, [pc, #20]	@ (8002a80 <LL_ADC_EnableInternalRegulator+0x24>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2280      	movs	r2, #128	@ 0x80
 8002a6e:	0552      	lsls	r2, r2, #21
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a76:	46c0      	nop			@ (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b002      	add	sp, #8
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	6fffffe8 	.word	0x6fffffe8

08002a84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	2380      	movs	r3, #128	@ 0x80
 8002a92:	055b      	lsls	r3, r3, #21
 8002a94:	401a      	ands	r2, r3
 8002a96:	2380      	movs	r3, #128	@ 0x80
 8002a98:	055b      	lsls	r3, r3, #21
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d101      	bne.n	8002aa2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a04      	ldr	r2, [pc, #16]	@ (8002acc <LL_ADC_Enable+0x20>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	2201      	movs	r2, #1
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ac4:	46c0      	nop			@ (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b002      	add	sp, #8
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	7fffffe8 	.word	0x7fffffe8

08002ad0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a04      	ldr	r2, [pc, #16]	@ (8002af0 <LL_ADC_Disable+0x20>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ae8:	46c0      	nop			@ (mov r8, r8)
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b002      	add	sp, #8
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	7fffffe8 	.word	0x7fffffe8

08002af4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2201      	movs	r2, #1
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <LL_ADC_IsEnabled+0x18>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <LL_ADC_IsEnabled+0x1a>
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	0018      	movs	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b002      	add	sp, #8
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2202      	movs	r2, #2
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d101      	bne.n	8002b2e <LL_ADC_IsDisableOngoing+0x18>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <LL_ADC_IsDisableOngoing+0x1a>
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	0018      	movs	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b002      	add	sp, #8
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4a04      	ldr	r2, [pc, #16]	@ (8002b58 <LL_ADC_REG_StartConversion+0x20>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	2204      	movs	r2, #4
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b50:	46c0      	nop			@ (mov r8, r8)
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b002      	add	sp, #8
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	7fffffe8 	.word	0x7fffffe8

08002b5c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d101      	bne.n	8002b74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	0018      	movs	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b002      	add	sp, #8
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b88:	231f      	movs	r3, #31
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e17f      	b.n	8002ea6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7ff fb8f 	bl	80022d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2254      	movs	r2, #84	@ 0x54
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff ff5b 	bl	8002a84 <LL_ADC_IsInternalRegulatorEnabled>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d115      	bne.n	8002bfe <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f7ff ff40 	bl	8002a5c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bdc:	4bb4      	ldr	r3, [pc, #720]	@ (8002eb0 <HAL_ADC_Init+0x330>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	49b4      	ldr	r1, [pc, #720]	@ (8002eb4 <HAL_ADC_Init+0x334>)
 8002be2:	0018      	movs	r0, r3
 8002be4:	f7fd fa8e 	bl	8000104 <__udivsi3>
 8002be8:	0003      	movs	r3, r0
 8002bea:	3301      	adds	r3, #1
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bf0:	e002      	b.n	8002bf8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f9      	bne.n	8002bf2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	0018      	movs	r0, r3
 8002c04:	f7ff ff3e 	bl	8002a84 <LL_ADC_IsInternalRegulatorEnabled>
 8002c08:	1e03      	subs	r3, r0, #0
 8002c0a:	d10f      	bne.n	8002c2c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c10:	2210      	movs	r2, #16
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c24:	231f      	movs	r3, #31
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	0018      	movs	r0, r3
 8002c32:	f7ff ff93 	bl	8002b5c <LL_ADC_REG_IsConversionOngoing>
 8002c36:	0003      	movs	r3, r0
 8002c38:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3e:	2210      	movs	r2, #16
 8002c40:	4013      	ands	r3, r2
 8002c42:	d000      	beq.n	8002c46 <HAL_ADC_Init+0xc6>
 8002c44:	e122      	b.n	8002e8c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d000      	beq.n	8002c4e <HAL_ADC_Init+0xce>
 8002c4c:	e11e      	b.n	8002e8c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c52:	4a99      	ldr	r2, [pc, #612]	@ (8002eb8 <HAL_ADC_Init+0x338>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	2202      	movs	r2, #2
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	0018      	movs	r0, r3
 8002c64:	f7ff ff46 	bl	8002af4 <LL_ADC_IsEnabled>
 8002c68:	1e03      	subs	r3, r0, #0
 8002c6a:	d000      	beq.n	8002c6e <HAL_ADC_Init+0xee>
 8002c6c:	e0ad      	b.n	8002dca <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	7e1b      	ldrb	r3, [r3, #24]
 8002c76:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002c78:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	7e5b      	ldrb	r3, [r3, #25]
 8002c7e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002c80:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7e9b      	ldrb	r3, [r3, #26]
 8002c86:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002c88:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_ADC_Init+0x118>
 8002c92:	2380      	movs	r3, #128	@ 0x80
 8002c94:	015b      	lsls	r3, r3, #5
 8002c96:	e000      	b.n	8002c9a <HAL_ADC_Init+0x11a>
 8002c98:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c9a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002ca0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	da04      	bge.n	8002cb4 <HAL_ADC_Init+0x134>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	e001      	b.n	8002cb8 <HAL_ADC_Init+0x138>
 8002cb4:	2380      	movs	r3, #128	@ 0x80
 8002cb6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002cb8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	212c      	movs	r1, #44	@ 0x2c
 8002cbe:	5c5b      	ldrb	r3, [r3, r1]
 8002cc0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002cc2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	5c9b      	ldrb	r3, [r3, r2]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d115      	bne.n	8002d00 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7e9b      	ldrb	r3, [r3, #26]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2280      	movs	r2, #128	@ 0x80
 8002ce0:	0252      	lsls	r2, r2, #9
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	e00b      	b.n	8002d00 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cec:	2220      	movs	r2, #32
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d0c:	23e0      	movs	r3, #224	@ 0xe0
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d16:	4313      	orrs	r3, r2
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a65      	ldr	r2, [pc, #404]	@ (8002ebc <HAL_ADC_Init+0x33c>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	0019      	movs	r1, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	0f9b      	lsrs	r3, r3, #30
 8002d3a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d40:	4313      	orrs	r3, r2
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	223c      	movs	r2, #60	@ 0x3c
 8002d4c:	5c9b      	ldrb	r3, [r3, r2]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d111      	bne.n	8002d76 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	0f9b      	lsrs	r3, r3, #30
 8002d58:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d5e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002d64:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8002d6a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	2201      	movs	r2, #1
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	4a50      	ldr	r2, [pc, #320]	@ (8002ec0 <HAL_ADC_Init+0x340>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	0019      	movs	r1, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	23c0      	movs	r3, #192	@ 0xc0
 8002d92:	061b      	lsls	r3, r3, #24
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d018      	beq.n	8002dca <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	05db      	lsls	r3, r3, #23
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d012      	beq.n	8002dca <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002da8:	2380      	movs	r3, #128	@ 0x80
 8002daa:	061b      	lsls	r3, r3, #24
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d00c      	beq.n	8002dca <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002db0:	4b44      	ldr	r3, [pc, #272]	@ (8002ec4 <HAL_ADC_Init+0x344>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a44      	ldr	r2, [pc, #272]	@ (8002ec8 <HAL_ADC_Init+0x348>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	0019      	movs	r1, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	23f0      	movs	r3, #240	@ 0xf0
 8002dc0:	039b      	lsls	r3, r3, #14
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec4 <HAL_ADC_Init+0x344>)
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd2:	001a      	movs	r2, r3
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	f7ff fd9c 	bl	8002912 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de2:	493a      	ldr	r1, [pc, #232]	@ (8002ecc <HAL_ADC_Init+0x34c>)
 8002de4:	001a      	movs	r2, r3
 8002de6:	f7ff fd94 	bl	8002912 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2110      	movs	r1, #16
 8002dfe:	4249      	negs	r1, r1
 8002e00:	430a      	orrs	r2, r1
 8002e02:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e04:	e018      	b.n	8002e38 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	2380      	movs	r3, #128	@ 0x80
 8002e0c:	039b      	lsls	r3, r3, #14
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d112      	bne.n	8002e38 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	221c      	movs	r2, #28
 8002e22:	4013      	ands	r3, r2
 8002e24:	2210      	movs	r2, #16
 8002e26:	4252      	negs	r2, r2
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	0011      	movs	r1, r2
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f7ff fd84 	bl	800294c <LL_ADC_GetSamplingTimeCommonChannels>
 8002e44:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d10b      	bne.n	8002e66 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e58:	2203      	movs	r2, #3
 8002e5a:	4393      	bics	r3, r2
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002e64:	e01c      	b.n	8002ea0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6a:	2212      	movs	r2, #18
 8002e6c:	4393      	bics	r3, r2
 8002e6e:	2210      	movs	r2, #16
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002e82:	231f      	movs	r3, #31
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002e8a:	e009      	b.n	8002ea0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e90:	2210      	movs	r2, #16
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e98:	231f      	movs	r3, #31
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002ea0:	231f      	movs	r3, #31
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	781b      	ldrb	r3, [r3, #0]
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b008      	add	sp, #32
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	20000008 	.word	0x20000008
 8002eb4:	00030d40 	.word	0x00030d40
 8002eb8:	fffffefd 	.word	0xfffffefd
 8002ebc:	ffde0201 	.word	0xffde0201
 8002ec0:	1ffffc02 	.word	0x1ffffc02
 8002ec4:	40012708 	.word	0x40012708
 8002ec8:	ffc3ffff 	.word	0xffc3ffff
 8002ecc:	07ffff04 	.word	0x07ffff04

08002ed0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ed0:	b5b0      	push	{r4, r5, r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7ff fe3b 	bl	8002b5c <LL_ADC_REG_IsConversionOngoing>
 8002ee6:	1e03      	subs	r3, r0, #0
 8002ee8:	d16c      	bne.n	8002fc4 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2254      	movs	r2, #84	@ 0x54
 8002eee:	5c9b      	ldrb	r3, [r3, r2]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_ADC_Start_DMA+0x28>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e06c      	b.n	8002fd2 <HAL_ADC_Start_DMA+0x102>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2254      	movs	r2, #84	@ 0x54
 8002efc:	2101      	movs	r1, #1
 8002efe:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d113      	bne.n	8002f34 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7ff fdef 	bl	8002af4 <LL_ADC_IsEnabled>
 8002f16:	1e03      	subs	r3, r0, #0
 8002f18:	d004      	beq.n	8002f24 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f7ff fdd6 	bl	8002ad0 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2101      	movs	r1, #1
 8002f30:	430a      	orrs	r2, r1
 8002f32:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f34:	2517      	movs	r5, #23
 8002f36:	197c      	adds	r4, r7, r5
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f000 fa3e 	bl	80033bc <ADC_Enable>
 8002f40:	0003      	movs	r3, r0
 8002f42:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f44:	002c      	movs	r4, r5
 8002f46:	193b      	adds	r3, r7, r4
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d13e      	bne.n	8002fcc <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f52:	4a22      	ldr	r2, [pc, #136]	@ (8002fdc <HAL_ADC_Start_DMA+0x10c>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	2280      	movs	r2, #128	@ 0x80
 8002f58:	0052      	lsls	r2, r2, #1
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe0 <HAL_ADC_Start_DMA+0x110>)
 8002f6c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f72:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe4 <HAL_ADC_Start_DMA+0x114>)
 8002f74:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe8 <HAL_ADC_Start_DMA+0x118>)
 8002f7c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	221c      	movs	r2, #28
 8002f84:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2254      	movs	r2, #84	@ 0x54
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2110      	movs	r1, #16
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3340      	adds	r3, #64	@ 0x40
 8002fa8:	0019      	movs	r1, r3
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	193c      	adds	r4, r7, r4
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f001 f842 	bl	8004038 <HAL_DMA_Start_IT>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7ff fdbb 	bl	8002b38 <LL_ADC_REG_StartConversion>
 8002fc2:	e003      	b.n	8002fcc <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002fc4:	2317      	movs	r3, #23
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	2202      	movs	r2, #2
 8002fca:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002fcc:	2317      	movs	r3, #23
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	781b      	ldrb	r3, [r3, #0]
}
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b006      	add	sp, #24
 8002fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	fffff0fe 	.word	0xfffff0fe
 8002fe0:	08003585 	.word	0x08003585
 8002fe4:	0800364d 	.word	0x0800364d
 8002fe8:	0800366b 	.word	0x0800366b

08002fec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002ff4:	46c0      	nop			@ (mov r8, r8)
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b002      	add	sp, #8
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003004:	46c0      	nop			@ (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b002      	add	sp, #8
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003016:	2317      	movs	r3, #23
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2254      	movs	r2, #84	@ 0x54
 8003026:	5c9b      	ldrb	r3, [r3, r2]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x24>
 800302c:	2302      	movs	r3, #2
 800302e:	e1c0      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x3a6>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2254      	movs	r2, #84	@ 0x54
 8003034:	2101      	movs	r1, #1
 8003036:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0018      	movs	r0, r3
 800303e:	f7ff fd8d 	bl	8002b5c <LL_ADC_REG_IsConversionOngoing>
 8003042:	1e03      	subs	r3, r0, #0
 8003044:	d000      	beq.n	8003048 <HAL_ADC_ConfigChannel+0x3c>
 8003046:	e1a3      	b.n	8003390 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d100      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x46>
 8003050:	e143      	b.n	80032da <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	2380      	movs	r3, #128	@ 0x80
 8003058:	061b      	lsls	r3, r3, #24
 800305a:	429a      	cmp	r2, r3
 800305c:	d004      	beq.n	8003068 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003062:	4ac1      	ldr	r2, [pc, #772]	@ (8003368 <HAL_ADC_ConfigChannel+0x35c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d108      	bne.n	800307a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	0019      	movs	r1, r3
 8003072:	0010      	movs	r0, r2
 8003074:	f7ff fcb2 	bl	80029dc <LL_ADC_REG_SetSequencerChAdd>
 8003078:	e0c9      	b.n	800320e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	211f      	movs	r1, #31
 8003084:	400b      	ands	r3, r1
 8003086:	210f      	movs	r1, #15
 8003088:	4099      	lsls	r1, r3
 800308a:	000b      	movs	r3, r1
 800308c:	43db      	mvns	r3, r3
 800308e:	4013      	ands	r3, r2
 8003090:	0019      	movs	r1, r3
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	035b      	lsls	r3, r3, #13
 8003098:	0b5b      	lsrs	r3, r3, #13
 800309a:	d105      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x9c>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	0e9b      	lsrs	r3, r3, #26
 80030a2:	221f      	movs	r2, #31
 80030a4:	4013      	ands	r3, r2
 80030a6:	e098      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2201      	movs	r2, #1
 80030ae:	4013      	ands	r3, r2
 80030b0:	d000      	beq.n	80030b4 <HAL_ADC_ConfigChannel+0xa8>
 80030b2:	e091      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x1cc>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2202      	movs	r2, #2
 80030ba:	4013      	ands	r3, r2
 80030bc:	d000      	beq.n	80030c0 <HAL_ADC_ConfigChannel+0xb4>
 80030be:	e089      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x1c8>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2204      	movs	r2, #4
 80030c6:	4013      	ands	r3, r2
 80030c8:	d000      	beq.n	80030cc <HAL_ADC_ConfigChannel+0xc0>
 80030ca:	e081      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x1c4>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2208      	movs	r2, #8
 80030d2:	4013      	ands	r3, r2
 80030d4:	d000      	beq.n	80030d8 <HAL_ADC_ConfigChannel+0xcc>
 80030d6:	e079      	b.n	80031cc <HAL_ADC_ConfigChannel+0x1c0>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2210      	movs	r2, #16
 80030de:	4013      	ands	r3, r2
 80030e0:	d000      	beq.n	80030e4 <HAL_ADC_ConfigChannel+0xd8>
 80030e2:	e071      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x1bc>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2220      	movs	r2, #32
 80030ea:	4013      	ands	r3, r2
 80030ec:	d000      	beq.n	80030f0 <HAL_ADC_ConfigChannel+0xe4>
 80030ee:	e069      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x1b8>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2240      	movs	r2, #64	@ 0x40
 80030f6:	4013      	ands	r3, r2
 80030f8:	d000      	beq.n	80030fc <HAL_ADC_ConfigChannel+0xf0>
 80030fa:	e061      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x1b4>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2280      	movs	r2, #128	@ 0x80
 8003102:	4013      	ands	r3, r2
 8003104:	d000      	beq.n	8003108 <HAL_ADC_ConfigChannel+0xfc>
 8003106:	e059      	b.n	80031bc <HAL_ADC_ConfigChannel+0x1b0>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	2380      	movs	r3, #128	@ 0x80
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4013      	ands	r3, r2
 8003112:	d151      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x1ac>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	2380      	movs	r3, #128	@ 0x80
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4013      	ands	r3, r2
 800311e:	d149      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x1a8>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	2380      	movs	r3, #128	@ 0x80
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4013      	ands	r3, r2
 800312a:	d141      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x1a4>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	2380      	movs	r3, #128	@ 0x80
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	4013      	ands	r3, r2
 8003136:	d139      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x1a0>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	2380      	movs	r3, #128	@ 0x80
 800313e:	015b      	lsls	r3, r3, #5
 8003140:	4013      	ands	r3, r2
 8003142:	d131      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x19c>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	2380      	movs	r3, #128	@ 0x80
 800314a:	019b      	lsls	r3, r3, #6
 800314c:	4013      	ands	r3, r2
 800314e:	d129      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x198>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2380      	movs	r3, #128	@ 0x80
 8003156:	01db      	lsls	r3, r3, #7
 8003158:	4013      	ands	r3, r2
 800315a:	d121      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x194>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	2380      	movs	r3, #128	@ 0x80
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	4013      	ands	r3, r2
 8003166:	d119      	bne.n	800319c <HAL_ADC_ConfigChannel+0x190>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	2380      	movs	r3, #128	@ 0x80
 800316e:	025b      	lsls	r3, r3, #9
 8003170:	4013      	ands	r3, r2
 8003172:	d111      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x18c>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	2380      	movs	r3, #128	@ 0x80
 800317a:	029b      	lsls	r3, r3, #10
 800317c:	4013      	ands	r3, r2
 800317e:	d109      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x188>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	2380      	movs	r3, #128	@ 0x80
 8003186:	02db      	lsls	r3, r3, #11
 8003188:	4013      	ands	r3, r2
 800318a:	d001      	beq.n	8003190 <HAL_ADC_ConfigChannel+0x184>
 800318c:	2312      	movs	r3, #18
 800318e:	e024      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 8003190:	2300      	movs	r3, #0
 8003192:	e022      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 8003194:	2311      	movs	r3, #17
 8003196:	e020      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 8003198:	2310      	movs	r3, #16
 800319a:	e01e      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 800319c:	230f      	movs	r3, #15
 800319e:	e01c      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 80031a0:	230e      	movs	r3, #14
 80031a2:	e01a      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 80031a4:	230d      	movs	r3, #13
 80031a6:	e018      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 80031a8:	230c      	movs	r3, #12
 80031aa:	e016      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 80031ac:	230b      	movs	r3, #11
 80031ae:	e014      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 80031b0:	230a      	movs	r3, #10
 80031b2:	e012      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 80031b4:	2309      	movs	r3, #9
 80031b6:	e010      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 80031b8:	2308      	movs	r3, #8
 80031ba:	e00e      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 80031bc:	2307      	movs	r3, #7
 80031be:	e00c      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 80031c0:	2306      	movs	r3, #6
 80031c2:	e00a      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 80031c4:	2305      	movs	r3, #5
 80031c6:	e008      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 80031c8:	2304      	movs	r3, #4
 80031ca:	e006      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 80031cc:	2303      	movs	r3, #3
 80031ce:	e004      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e002      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <HAL_ADC_ConfigChannel+0x1ce>
 80031d8:	2300      	movs	r3, #0
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	6852      	ldr	r2, [r2, #4]
 80031de:	201f      	movs	r0, #31
 80031e0:	4002      	ands	r2, r0
 80031e2:	4093      	lsls	r3, r2
 80031e4:	000a      	movs	r2, r1
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d808      	bhi.n	800320e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	001a      	movs	r2, r3
 800320a:	f7ff fbc7 	bl	800299c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	6819      	ldr	r1, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	001a      	movs	r2, r3
 800321c:	f7ff fc02 	bl	8002a24 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	db00      	blt.n	800322a <HAL_ADC_ConfigChannel+0x21e>
 8003228:	e0bc      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800322a:	4b50      	ldr	r3, [pc, #320]	@ (800336c <HAL_ADC_ConfigChannel+0x360>)
 800322c:	0018      	movs	r0, r3
 800322e:	f7ff fb63 	bl	80028f8 <LL_ADC_GetCommonPathInternalCh>
 8003232:	0003      	movs	r3, r0
 8003234:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a4d      	ldr	r2, [pc, #308]	@ (8003370 <HAL_ADC_ConfigChannel+0x364>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d122      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	2380      	movs	r3, #128	@ 0x80
 8003244:	041b      	lsls	r3, r3, #16
 8003246:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003248:	d11d      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2280      	movs	r2, #128	@ 0x80
 800324e:	0412      	lsls	r2, r2, #16
 8003250:	4313      	orrs	r3, r2
 8003252:	4a46      	ldr	r2, [pc, #280]	@ (800336c <HAL_ADC_ConfigChannel+0x360>)
 8003254:	0019      	movs	r1, r3
 8003256:	0010      	movs	r0, r2
 8003258:	f7ff fb3a 	bl	80028d0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800325c:	4b45      	ldr	r3, [pc, #276]	@ (8003374 <HAL_ADC_ConfigChannel+0x368>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4945      	ldr	r1, [pc, #276]	@ (8003378 <HAL_ADC_ConfigChannel+0x36c>)
 8003262:	0018      	movs	r0, r3
 8003264:	f7fc ff4e 	bl	8000104 <__udivsi3>
 8003268:	0003      	movs	r3, r0
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	0013      	movs	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	189b      	adds	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003276:	e002      	b.n	800327e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3b01      	subs	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f9      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003284:	e08e      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a3c      	ldr	r2, [pc, #240]	@ (800337c <HAL_ADC_ConfigChannel+0x370>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d10e      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	2380      	movs	r3, #128	@ 0x80
 8003294:	045b      	lsls	r3, r3, #17
 8003296:	4013      	ands	r3, r2
 8003298:	d109      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2280      	movs	r2, #128	@ 0x80
 800329e:	0452      	lsls	r2, r2, #17
 80032a0:	4313      	orrs	r3, r2
 80032a2:	4a32      	ldr	r2, [pc, #200]	@ (800336c <HAL_ADC_ConfigChannel+0x360>)
 80032a4:	0019      	movs	r1, r3
 80032a6:	0010      	movs	r0, r2
 80032a8:	f7ff fb12 	bl	80028d0 <LL_ADC_SetCommonPathInternalCh>
 80032ac:	e07a      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a33      	ldr	r2, [pc, #204]	@ (8003380 <HAL_ADC_ConfigChannel+0x374>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d000      	beq.n	80032ba <HAL_ADC_ConfigChannel+0x2ae>
 80032b8:	e074      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	2380      	movs	r3, #128	@ 0x80
 80032be:	03db      	lsls	r3, r3, #15
 80032c0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80032c2:	d000      	beq.n	80032c6 <HAL_ADC_ConfigChannel+0x2ba>
 80032c4:	e06e      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2280      	movs	r2, #128	@ 0x80
 80032ca:	03d2      	lsls	r2, r2, #15
 80032cc:	4313      	orrs	r3, r2
 80032ce:	4a27      	ldr	r2, [pc, #156]	@ (800336c <HAL_ADC_ConfigChannel+0x360>)
 80032d0:	0019      	movs	r1, r3
 80032d2:	0010      	movs	r0, r2
 80032d4:	f7ff fafc 	bl	80028d0 <LL_ADC_SetCommonPathInternalCh>
 80032d8:	e064      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	2380      	movs	r3, #128	@ 0x80
 80032e0:	061b      	lsls	r3, r3, #24
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d004      	beq.n	80032f0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80032ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003368 <HAL_ADC_ConfigChannel+0x35c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d107      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	0019      	movs	r1, r3
 80032fa:	0010      	movs	r0, r2
 80032fc:	f7ff fb7f 	bl	80029fe <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	da4d      	bge.n	80033a4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003308:	4b18      	ldr	r3, [pc, #96]	@ (800336c <HAL_ADC_ConfigChannel+0x360>)
 800330a:	0018      	movs	r0, r3
 800330c:	f7ff faf4 	bl	80028f8 <LL_ADC_GetCommonPathInternalCh>
 8003310:	0003      	movs	r3, r0
 8003312:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a15      	ldr	r2, [pc, #84]	@ (8003370 <HAL_ADC_ConfigChannel+0x364>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d108      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4a18      	ldr	r2, [pc, #96]	@ (8003384 <HAL_ADC_ConfigChannel+0x378>)
 8003322:	4013      	ands	r3, r2
 8003324:	4a11      	ldr	r2, [pc, #68]	@ (800336c <HAL_ADC_ConfigChannel+0x360>)
 8003326:	0019      	movs	r1, r3
 8003328:	0010      	movs	r0, r2
 800332a:	f7ff fad1 	bl	80028d0 <LL_ADC_SetCommonPathInternalCh>
 800332e:	e039      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a11      	ldr	r2, [pc, #68]	@ (800337c <HAL_ADC_ConfigChannel+0x370>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d108      	bne.n	800334c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4a12      	ldr	r2, [pc, #72]	@ (8003388 <HAL_ADC_ConfigChannel+0x37c>)
 800333e:	4013      	ands	r3, r2
 8003340:	4a0a      	ldr	r2, [pc, #40]	@ (800336c <HAL_ADC_ConfigChannel+0x360>)
 8003342:	0019      	movs	r1, r3
 8003344:	0010      	movs	r0, r2
 8003346:	f7ff fac3 	bl	80028d0 <LL_ADC_SetCommonPathInternalCh>
 800334a:	e02b      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0b      	ldr	r2, [pc, #44]	@ (8003380 <HAL_ADC_ConfigChannel+0x374>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d126      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4a0c      	ldr	r2, [pc, #48]	@ (800338c <HAL_ADC_ConfigChannel+0x380>)
 800335a:	4013      	ands	r3, r2
 800335c:	4a03      	ldr	r2, [pc, #12]	@ (800336c <HAL_ADC_ConfigChannel+0x360>)
 800335e:	0019      	movs	r1, r3
 8003360:	0010      	movs	r0, r2
 8003362:	f7ff fab5 	bl	80028d0 <LL_ADC_SetCommonPathInternalCh>
 8003366:	e01d      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x398>
 8003368:	80000004 	.word	0x80000004
 800336c:	40012708 	.word	0x40012708
 8003370:	b0001000 	.word	0xb0001000
 8003374:	20000008 	.word	0x20000008
 8003378:	00030d40 	.word	0x00030d40
 800337c:	b8004000 	.word	0xb8004000
 8003380:	b4002000 	.word	0xb4002000
 8003384:	ff7fffff 	.word	0xff7fffff
 8003388:	feffffff 	.word	0xfeffffff
 800338c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003394:	2220      	movs	r2, #32
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800339c:	2317      	movs	r3, #23
 800339e:	18fb      	adds	r3, r7, r3
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2254      	movs	r2, #84	@ 0x54
 80033a8:	2100      	movs	r1, #0
 80033aa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80033ac:	2317      	movs	r3, #23
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	781b      	ldrb	r3, [r3, #0]
}
 80033b2:	0018      	movs	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b006      	add	sp, #24
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	46c0      	nop			@ (mov r8, r8)

080033bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7ff fb91 	bl	8002af4 <LL_ADC_IsEnabled>
 80033d2:	1e03      	subs	r3, r0, #0
 80033d4:	d000      	beq.n	80033d8 <ADC_Enable+0x1c>
 80033d6:	e069      	b.n	80034ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	4a36      	ldr	r2, [pc, #216]	@ (80034b8 <ADC_Enable+0xfc>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	d00d      	beq.n	8003400 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e8:	2210      	movs	r2, #16
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	2201      	movs	r2, #1
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e056      	b.n	80034ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	0018      	movs	r0, r3
 8003406:	f7ff fb51 	bl	8002aac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800340a:	4b2c      	ldr	r3, [pc, #176]	@ (80034bc <ADC_Enable+0x100>)
 800340c:	0018      	movs	r0, r3
 800340e:	f7ff fa73 	bl	80028f8 <LL_ADC_GetCommonPathInternalCh>
 8003412:	0002      	movs	r2, r0
 8003414:	2380      	movs	r3, #128	@ 0x80
 8003416:	041b      	lsls	r3, r3, #16
 8003418:	4013      	ands	r3, r2
 800341a:	d00f      	beq.n	800343c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800341c:	4b28      	ldr	r3, [pc, #160]	@ (80034c0 <ADC_Enable+0x104>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4928      	ldr	r1, [pc, #160]	@ (80034c4 <ADC_Enable+0x108>)
 8003422:	0018      	movs	r0, r3
 8003424:	f7fc fe6e 	bl	8000104 <__udivsi3>
 8003428:	0003      	movs	r3, r0
 800342a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800342c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800342e:	e002      	b.n	8003436 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	3b01      	subs	r3, #1
 8003434:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f9      	bne.n	8003430 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7e5b      	ldrb	r3, [r3, #25]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d033      	beq.n	80034ac <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003444:	f7ff fa16 	bl	8002874 <HAL_GetTick>
 8003448:	0003      	movs	r3, r0
 800344a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800344c:	e027      	b.n	800349e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	0018      	movs	r0, r3
 8003454:	f7ff fb4e 	bl	8002af4 <LL_ADC_IsEnabled>
 8003458:	1e03      	subs	r3, r0, #0
 800345a:	d104      	bne.n	8003466 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0018      	movs	r0, r3
 8003462:	f7ff fb23 	bl	8002aac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003466:	f7ff fa05 	bl	8002874 <HAL_GetTick>
 800346a:	0002      	movs	r2, r0
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d914      	bls.n	800349e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2201      	movs	r2, #1
 800347c:	4013      	ands	r3, r2
 800347e:	2b01      	cmp	r3, #1
 8003480:	d00d      	beq.n	800349e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003486:	2210      	movs	r2, #16
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003492:	2201      	movs	r2, #1
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e007      	b.n	80034ae <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2201      	movs	r2, #1
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d1d0      	bne.n	800344e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b004      	add	sp, #16
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	80000017 	.word	0x80000017
 80034bc:	40012708 	.word	0x40012708
 80034c0:	20000008 	.word	0x20000008
 80034c4:	00030d40 	.word	0x00030d40

080034c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	0018      	movs	r0, r3
 80034d6:	f7ff fb1e 	bl	8002b16 <LL_ADC_IsDisableOngoing>
 80034da:	0003      	movs	r3, r0
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7ff fb06 	bl	8002af4 <LL_ADC_IsEnabled>
 80034e8:	1e03      	subs	r3, r0, #0
 80034ea:	d046      	beq.n	800357a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d143      	bne.n	800357a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2205      	movs	r2, #5
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d10d      	bne.n	800351c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	0018      	movs	r0, r3
 8003506:	f7ff fae3 	bl	8002ad0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2203      	movs	r2, #3
 8003510:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003512:	f7ff f9af 	bl	8002874 <HAL_GetTick>
 8003516:	0003      	movs	r3, r0
 8003518:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800351a:	e028      	b.n	800356e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003520:	2210      	movs	r2, #16
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352c:	2201      	movs	r2, #1
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e021      	b.n	800357c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003538:	f7ff f99c 	bl	8002874 <HAL_GetTick>
 800353c:	0002      	movs	r2, r0
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d913      	bls.n	800356e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2201      	movs	r2, #1
 800354e:	4013      	ands	r3, r2
 8003550:	d00d      	beq.n	800356e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003556:	2210      	movs	r2, #16
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003562:	2201      	movs	r2, #1
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e006      	b.n	800357c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2201      	movs	r2, #1
 8003576:	4013      	ands	r3, r2
 8003578:	d1de      	bne.n	8003538 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	b004      	add	sp, #16
 8003582:	bd80      	pop	{r7, pc}

08003584 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003590:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003596:	2250      	movs	r2, #80	@ 0x50
 8003598:	4013      	ands	r3, r2
 800359a:	d141      	bne.n	8003620 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a0:	2280      	movs	r2, #128	@ 0x80
 80035a2:	0092      	lsls	r2, r2, #2
 80035a4:	431a      	orrs	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	0018      	movs	r0, r3
 80035b0:	f7ff f9e3 	bl	800297a <LL_ADC_REG_IsTriggerSourceSWStart>
 80035b4:	1e03      	subs	r3, r0, #0
 80035b6:	d02e      	beq.n	8003616 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	7e9b      	ldrb	r3, [r3, #26]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d12a      	bne.n	8003616 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2208      	movs	r2, #8
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d123      	bne.n	8003616 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	0018      	movs	r0, r3
 80035d4:	f7ff fac2 	bl	8002b5c <LL_ADC_REG_IsConversionOngoing>
 80035d8:	1e03      	subs	r3, r0, #0
 80035da:	d110      	bne.n	80035fe <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	210c      	movs	r1, #12
 80035e8:	438a      	bics	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f0:	4a15      	ldr	r2, [pc, #84]	@ (8003648 <ADC_DMAConvCplt+0xc4>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	2201      	movs	r2, #1
 80035f6:	431a      	orrs	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80035fc:	e00b      	b.n	8003616 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003602:	2220      	movs	r2, #32
 8003604:	431a      	orrs	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360e:	2201      	movs	r2, #1
 8003610:	431a      	orrs	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	0018      	movs	r0, r3
 800361a:	f7fe fc9f 	bl	8001f5c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800361e:	e00f      	b.n	8003640 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003624:	2210      	movs	r2, #16
 8003626:	4013      	ands	r3, r2
 8003628:	d004      	beq.n	8003634 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	0018      	movs	r0, r3
 800362e:	f7ff fce5 	bl	8002ffc <HAL_ADC_ErrorCallback>
}
 8003632:	e005      	b.n	8003640 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	0010      	movs	r0, r2
 800363e:	4798      	blx	r3
}
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b004      	add	sp, #16
 8003646:	bd80      	pop	{r7, pc}
 8003648:	fffffefe 	.word	0xfffffefe

0800364c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003658:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	0018      	movs	r0, r3
 800365e:	f7ff fcc5 	bl	8002fec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	46bd      	mov	sp, r7
 8003666:	b004      	add	sp, #16
 8003668:	bd80      	pop	{r7, pc}

0800366a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003676:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367c:	2240      	movs	r2, #64	@ 0x40
 800367e:	431a      	orrs	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003688:	2204      	movs	r2, #4
 800368a:	431a      	orrs	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	0018      	movs	r0, r3
 8003694:	f7ff fcb2 	bl	8002ffc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003698:	46c0      	nop			@ (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	b004      	add	sp, #16
 800369e:	bd80      	pop	{r7, pc}

080036a0 <LL_ADC_GetCommonClock>:
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	23f0      	movs	r3, #240	@ 0xf0
 80036ae:	039b      	lsls	r3, r3, #14
 80036b0:	4013      	ands	r3, r2
}
 80036b2:	0018      	movs	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b002      	add	sp, #8
 80036b8:	bd80      	pop	{r7, pc}

080036ba <LL_ADC_GetClock>:
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	0f9b      	lsrs	r3, r3, #30
 80036c8:	079b      	lsls	r3, r3, #30
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b002      	add	sp, #8
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <LL_ADC_SetCalibrationFactor>:
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	22b4      	movs	r2, #180	@ 0xb4
 80036e0:	589b      	ldr	r3, [r3, r2]
 80036e2:	227f      	movs	r2, #127	@ 0x7f
 80036e4:	4393      	bics	r3, r2
 80036e6:	001a      	movs	r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	21b4      	movs	r1, #180	@ 0xb4
 80036f0:	505a      	str	r2, [r3, r1]
}
 80036f2:	46c0      	nop			@ (mov r8, r8)
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b002      	add	sp, #8
 80036f8:	bd80      	pop	{r7, pc}

080036fa <LL_ADC_GetCalibrationFactor>:
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	22b4      	movs	r2, #180	@ 0xb4
 8003706:	589b      	ldr	r3, [r3, r2]
 8003708:	227f      	movs	r2, #127	@ 0x7f
 800370a:	4013      	ands	r3, r2
}
 800370c:	0018      	movs	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	b002      	add	sp, #8
 8003712:	bd80      	pop	{r7, pc}

08003714 <LL_ADC_Enable>:
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	4a04      	ldr	r2, [pc, #16]	@ (8003734 <LL_ADC_Enable+0x20>)
 8003722:	4013      	ands	r3, r2
 8003724:	2201      	movs	r2, #1
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	609a      	str	r2, [r3, #8]
}
 800372c:	46c0      	nop			@ (mov r8, r8)
 800372e:	46bd      	mov	sp, r7
 8003730:	b002      	add	sp, #8
 8003732:	bd80      	pop	{r7, pc}
 8003734:	7fffffe8 	.word	0x7fffffe8

08003738 <LL_ADC_Disable>:
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4a04      	ldr	r2, [pc, #16]	@ (8003758 <LL_ADC_Disable+0x20>)
 8003746:	4013      	ands	r3, r2
 8003748:	2202      	movs	r2, #2
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	609a      	str	r2, [r3, #8]
}
 8003750:	46c0      	nop			@ (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	b002      	add	sp, #8
 8003756:	bd80      	pop	{r7, pc}
 8003758:	7fffffe8 	.word	0x7fffffe8

0800375c <LL_ADC_IsEnabled>:
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2201      	movs	r2, #1
 800376a:	4013      	ands	r3, r2
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <LL_ADC_IsEnabled+0x18>
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <LL_ADC_IsEnabled+0x1a>
 8003774:	2300      	movs	r3, #0
}
 8003776:	0018      	movs	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	b002      	add	sp, #8
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <LL_ADC_StartCalibration>:
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a05      	ldr	r2, [pc, #20]	@ (80037a4 <LL_ADC_StartCalibration+0x24>)
 800378e:	4013      	ands	r3, r2
 8003790:	2280      	movs	r2, #128	@ 0x80
 8003792:	0612      	lsls	r2, r2, #24
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	609a      	str	r2, [r3, #8]
}
 800379a:	46c0      	nop			@ (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	b002      	add	sp, #8
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			@ (mov r8, r8)
 80037a4:	7fffffe8 	.word	0x7fffffe8

080037a8 <LL_ADC_IsCalibrationOnGoing>:
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	0fdb      	lsrs	r3, r3, #31
 80037b6:	07da      	lsls	r2, r3, #31
 80037b8:	2380      	movs	r3, #128	@ 0x80
 80037ba:	061b      	lsls	r3, r3, #24
 80037bc:	429a      	cmp	r2, r3
 80037be:	d101      	bne.n	80037c4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	0018      	movs	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b08b      	sub	sp, #44	@ 0x2c
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2254      	movs	r2, #84	@ 0x54
 80037e4:	5c9b      	ldrb	r3, [r3, r2]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_ADCEx_Calibration_Start+0x1e>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e0dd      	b.n	80039aa <HAL_ADCEx_Calibration_Start+0x1da>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2254      	movs	r2, #84	@ 0x54
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80037f6:	231f      	movs	r3, #31
 80037f8:	18fc      	adds	r4, r7, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7ff fe63 	bl	80034c8 <ADC_Disable>
 8003802:	0003      	movs	r3, r0
 8003804:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	0018      	movs	r0, r3
 800380c:	f7ff ffa6 	bl	800375c <LL_ADC_IsEnabled>
 8003810:	1e03      	subs	r3, r0, #0
 8003812:	d000      	beq.n	8003816 <HAL_ADCEx_Calibration_Start+0x46>
 8003814:	e0bc      	b.n	8003990 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381a:	4a66      	ldr	r2, [pc, #408]	@ (80039b4 <HAL_ADCEx_Calibration_Start+0x1e4>)
 800381c:	4013      	ands	r3, r2
 800381e:	2202      	movs	r2, #2
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4a62      	ldr	r2, [pc, #392]	@ (80039b8 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	495f      	ldr	r1, [pc, #380]	@ (80039bc <HAL_ADCEx_Calibration_Start+0x1ec>)
 800383e:	400a      	ands	r2, r1
 8003840:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003842:	2300      	movs	r3, #0
 8003844:	627b      	str	r3, [r7, #36]	@ 0x24
 8003846:	e02d      	b.n	80038a4 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0018      	movs	r0, r3
 800384e:	f7ff ff97 	bl	8003780 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003852:	e014      	b.n	800387e <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3301      	adds	r3, #1
 8003858:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4a58      	ldr	r2, [pc, #352]	@ (80039c0 <HAL_ADCEx_Calibration_Start+0x1f0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d90d      	bls.n	800387e <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003866:	2212      	movs	r2, #18
 8003868:	4393      	bics	r3, r2
 800386a:	2210      	movs	r2, #16
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2254      	movs	r2, #84	@ 0x54
 8003876:	2100      	movs	r1, #0
 8003878:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e095      	b.n	80039aa <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	0018      	movs	r0, r3
 8003884:	f7ff ff90 	bl	80037a8 <LL_ADC_IsCalibrationOnGoing>
 8003888:	1e03      	subs	r3, r0, #0
 800388a:	d1e3      	bne.n	8003854 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	0018      	movs	r0, r3
 8003892:	f7ff ff32 	bl	80036fa <LL_ADC_GetCalibrationFactor>
 8003896:	0002      	movs	r2, r0
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	189b      	adds	r3, r3, r2
 800389c:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	3301      	adds	r3, #1
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	2b07      	cmp	r3, #7
 80038a8:	d9ce      	bls.n	8003848 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80038aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038ac:	6a38      	ldr	r0, [r7, #32]
 80038ae:	f7fc fc29 	bl	8000104 <__udivsi3>
 80038b2:	0003      	movs	r3, r0
 80038b4:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	0018      	movs	r0, r3
 80038bc:	f7ff ff2a 	bl	8003714 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7ff fef8 	bl	80036ba <LL_ADC_GetClock>
 80038ca:	1e03      	subs	r3, r0, #0
 80038cc:	d11b      	bne.n	8003906 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038ce:	4b3d      	ldr	r3, [pc, #244]	@ (80039c4 <HAL_ADCEx_Calibration_Start+0x1f4>)
 80038d0:	0018      	movs	r0, r3
 80038d2:	f7ff fee5 	bl	80036a0 <LL_ADC_GetCommonClock>
 80038d6:	0003      	movs	r3, r0
 80038d8:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	23e0      	movs	r3, #224	@ 0xe0
 80038de:	035b      	lsls	r3, r3, #13
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d310      	bcc.n	8003906 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	0c9b      	lsrs	r3, r3, #18
 80038e8:	3b03      	subs	r3, #3
 80038ea:	2201      	movs	r2, #1
 80038ec:	409a      	lsls	r2, r3
 80038ee:	0013      	movs	r3, r2
 80038f0:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 80038f8:	e002      	b.n	8003900 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f9      	bne.n	80038fa <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a3a      	ldr	r2, [r7, #32]
 800390c:	0011      	movs	r1, r2
 800390e:	0018      	movs	r0, r3
 8003910:	f7ff fedf 	bl	80036d2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	0018      	movs	r0, r3
 800391a:	f7ff ff0d 	bl	8003738 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800391e:	f7fe ffa9 	bl	8002874 <HAL_GetTick>
 8003922:	0003      	movs	r3, r0
 8003924:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003926:	e01b      	b.n	8003960 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003928:	f7fe ffa4 	bl	8002874 <HAL_GetTick>
 800392c:	0002      	movs	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d914      	bls.n	8003960 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	0018      	movs	r0, r3
 800393c:	f7ff ff0e 	bl	800375c <LL_ADC_IsEnabled>
 8003940:	1e03      	subs	r3, r0, #0
 8003942:	d00d      	beq.n	8003960 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003948:	2210      	movs	r2, #16
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003954:	2201      	movs	r2, #1
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e024      	b.n	80039aa <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	0018      	movs	r0, r3
 8003966:	f7ff fef9 	bl	800375c <LL_ADC_IsEnabled>
 800396a:	1e03      	subs	r3, r0, #0
 800396c:	d1dc      	bne.n	8003928 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68d9      	ldr	r1, [r3, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	430a      	orrs	r2, r1
 800397c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003982:	2203      	movs	r2, #3
 8003984:	4393      	bics	r3, r2
 8003986:	2201      	movs	r2, #1
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	659a      	str	r2, [r3, #88]	@ 0x58
 800398e:	e005      	b.n	800399c <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003994:	2210      	movs	r2, #16
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2254      	movs	r2, #84	@ 0x54
 80039a0:	2100      	movs	r1, #0
 80039a2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80039a4:	231f      	movs	r3, #31
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	781b      	ldrb	r3, [r3, #0]
}
 80039aa:	0018      	movs	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b00b      	add	sp, #44	@ 0x2c
 80039b0:	bd90      	pop	{r4, r7, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	fffffefd 	.word	0xfffffefd
 80039b8:	00008003 	.word	0x00008003
 80039bc:	ffff7ffc 	.word	0xffff7ffc
 80039c0:	0002f1ff 	.word	0x0002f1ff
 80039c4:	40012708 	.word	0x40012708

080039c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	0002      	movs	r2, r0
 80039d0:	1dfb      	adds	r3, r7, #7
 80039d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039d4:	1dfb      	adds	r3, r7, #7
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80039da:	d809      	bhi.n	80039f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039dc:	1dfb      	adds	r3, r7, #7
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	001a      	movs	r2, r3
 80039e2:	231f      	movs	r3, #31
 80039e4:	401a      	ands	r2, r3
 80039e6:	4b04      	ldr	r3, [pc, #16]	@ (80039f8 <__NVIC_EnableIRQ+0x30>)
 80039e8:	2101      	movs	r1, #1
 80039ea:	4091      	lsls	r1, r2
 80039ec:	000a      	movs	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80039f0:	46c0      	nop			@ (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	e000e100 	.word	0xe000e100

080039fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	0002      	movs	r2, r0
 8003a04:	6039      	str	r1, [r7, #0]
 8003a06:	1dfb      	adds	r3, r7, #7
 8003a08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a0a:	1dfb      	adds	r3, r7, #7
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a10:	d828      	bhi.n	8003a64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a12:	4a2f      	ldr	r2, [pc, #188]	@ (8003ad0 <__NVIC_SetPriority+0xd4>)
 8003a14:	1dfb      	adds	r3, r7, #7
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	b25b      	sxtb	r3, r3
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	33c0      	adds	r3, #192	@ 0xc0
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	589b      	ldr	r3, [r3, r2]
 8003a22:	1dfa      	adds	r2, r7, #7
 8003a24:	7812      	ldrb	r2, [r2, #0]
 8003a26:	0011      	movs	r1, r2
 8003a28:	2203      	movs	r2, #3
 8003a2a:	400a      	ands	r2, r1
 8003a2c:	00d2      	lsls	r2, r2, #3
 8003a2e:	21ff      	movs	r1, #255	@ 0xff
 8003a30:	4091      	lsls	r1, r2
 8003a32:	000a      	movs	r2, r1
 8003a34:	43d2      	mvns	r2, r2
 8003a36:	401a      	ands	r2, r3
 8003a38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	019b      	lsls	r3, r3, #6
 8003a3e:	22ff      	movs	r2, #255	@ 0xff
 8003a40:	401a      	ands	r2, r3
 8003a42:	1dfb      	adds	r3, r7, #7
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	0018      	movs	r0, r3
 8003a48:	2303      	movs	r3, #3
 8003a4a:	4003      	ands	r3, r0
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a50:	481f      	ldr	r0, [pc, #124]	@ (8003ad0 <__NVIC_SetPriority+0xd4>)
 8003a52:	1dfb      	adds	r3, r7, #7
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b25b      	sxtb	r3, r3
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	33c0      	adds	r3, #192	@ 0xc0
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a62:	e031      	b.n	8003ac8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a64:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad4 <__NVIC_SetPriority+0xd8>)
 8003a66:	1dfb      	adds	r3, r7, #7
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	230f      	movs	r3, #15
 8003a6e:	400b      	ands	r3, r1
 8003a70:	3b08      	subs	r3, #8
 8003a72:	089b      	lsrs	r3, r3, #2
 8003a74:	3306      	adds	r3, #6
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	18d3      	adds	r3, r2, r3
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	1dfa      	adds	r2, r7, #7
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	0011      	movs	r1, r2
 8003a84:	2203      	movs	r2, #3
 8003a86:	400a      	ands	r2, r1
 8003a88:	00d2      	lsls	r2, r2, #3
 8003a8a:	21ff      	movs	r1, #255	@ 0xff
 8003a8c:	4091      	lsls	r1, r2
 8003a8e:	000a      	movs	r2, r1
 8003a90:	43d2      	mvns	r2, r2
 8003a92:	401a      	ands	r2, r3
 8003a94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	019b      	lsls	r3, r3, #6
 8003a9a:	22ff      	movs	r2, #255	@ 0xff
 8003a9c:	401a      	ands	r2, r3
 8003a9e:	1dfb      	adds	r3, r7, #7
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	4003      	ands	r3, r0
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003aac:	4809      	ldr	r0, [pc, #36]	@ (8003ad4 <__NVIC_SetPriority+0xd8>)
 8003aae:	1dfb      	adds	r3, r7, #7
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	001c      	movs	r4, r3
 8003ab4:	230f      	movs	r3, #15
 8003ab6:	4023      	ands	r3, r4
 8003ab8:	3b08      	subs	r3, #8
 8003aba:	089b      	lsrs	r3, r3, #2
 8003abc:	430a      	orrs	r2, r1
 8003abe:	3306      	adds	r3, #6
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	18c3      	adds	r3, r0, r3
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	601a      	str	r2, [r3, #0]
}
 8003ac8:	46c0      	nop			@ (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b003      	add	sp, #12
 8003ace:	bd90      	pop	{r4, r7, pc}
 8003ad0:	e000e100 	.word	0xe000e100
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	1e5a      	subs	r2, r3, #1
 8003ae4:	2380      	movs	r3, #128	@ 0x80
 8003ae6:	045b      	lsls	r3, r3, #17
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d301      	bcc.n	8003af0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aec:	2301      	movs	r3, #1
 8003aee:	e010      	b.n	8003b12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003af0:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <SysTick_Config+0x44>)
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	3a01      	subs	r2, #1
 8003af6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003af8:	2301      	movs	r3, #1
 8003afa:	425b      	negs	r3, r3
 8003afc:	2103      	movs	r1, #3
 8003afe:	0018      	movs	r0, r3
 8003b00:	f7ff ff7c 	bl	80039fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b04:	4b05      	ldr	r3, [pc, #20]	@ (8003b1c <SysTick_Config+0x44>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b0a:	4b04      	ldr	r3, [pc, #16]	@ (8003b1c <SysTick_Config+0x44>)
 8003b0c:	2207      	movs	r2, #7
 8003b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	0018      	movs	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b002      	add	sp, #8
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	46c0      	nop			@ (mov r8, r8)
 8003b1c:	e000e010 	.word	0xe000e010

08003b20 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	210f      	movs	r1, #15
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	1c02      	adds	r2, r0, #0
 8003b30:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	187b      	adds	r3, r7, r1
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	b25b      	sxtb	r3, r3
 8003b3a:	0011      	movs	r1, r2
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7ff ff5d 	bl	80039fc <__NVIC_SetPriority>
}
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b004      	add	sp, #16
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	0002      	movs	r2, r0
 8003b52:	1dfb      	adds	r3, r7, #7
 8003b54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b56:	1dfb      	adds	r3, r7, #7
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	b25b      	sxtb	r3, r3
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f7ff ff33 	bl	80039c8 <__NVIC_EnableIRQ>
}
 8003b62:	46c0      	nop			@ (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b002      	add	sp, #8
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	0018      	movs	r0, r3
 8003b76:	f7ff ffaf 	bl	8003ad8 <SysTick_Config>
 8003b7a:	0003      	movs	r3, r0
}
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b002      	add	sp, #8
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e015      	b.n	8003bc2 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	791b      	ldrb	r3, [r3, #4]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f7fe fc1d 	bl	80023e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b002      	add	sp, #8
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e047      	b.n	8003c6e <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	795b      	ldrb	r3, [r3, #5]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_DAC_Start+0x20>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e041      	b.n	8003c6e <HAL_DAC_Start+0xa4>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6819      	ldr	r1, [r3, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2210      	movs	r2, #16
 8003c00:	4013      	ands	r3, r2
 8003c02:	2201      	movs	r2, #1
 8003c04:	409a      	lsls	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10f      	bne.n	8003c34 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	223e      	movs	r2, #62	@ 0x3e
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d11e      	bne.n	8003c60 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	e015      	b.n	8003c60 <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	23f8      	movs	r3, #248	@ 0xf8
 8003c3c:	039b      	lsls	r3, r3, #14
 8003c3e:	401a      	ands	r2, r3
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2110      	movs	r1, #16
 8003c44:	400b      	ands	r3, r1
 8003c46:	2102      	movs	r1, #2
 8003c48:	4099      	lsls	r1, r3
 8003c4a:	000b      	movs	r3, r1
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d107      	bne.n	8003c60 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	0018      	movs	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b002      	add	sp, #8
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e014      	b.n	8003cbc <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d105      	bne.n	8003caa <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	18d3      	adds	r3, r2, r3
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	e004      	b.n	8003cb4 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	18d3      	adds	r3, r2, r3
 8003cb0:	3314      	adds	r3, #20
 8003cb2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b006      	add	sp, #24
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd0:	231f      	movs	r3, #31
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_DAC_ConfigChannel+0x20>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e115      	b.n	8003f14 <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	795b      	ldrb	r3, [r3, #5]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_DAC_ConfigChannel+0x30>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e10f      	b.n	8003f14 <HAL_DAC_ConfigChannel+0x250>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d000      	beq.n	8003d0a <HAL_DAC_ConfigChannel+0x46>
 8003d08:	e07a      	b.n	8003e00 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003d0a:	f7fe fdb3 	bl	8002874 <HAL_GetTick>
 8003d0e:	0003      	movs	r3, r0
 8003d10:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d13d      	bne.n	8003d94 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d18:	e018      	b.n	8003d4c <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d1a:	f7fe fdab 	bl	8002874 <HAL_GetTick>
 8003d1e:	0002      	movs	r2, r0
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d911      	bls.n	8003d4c <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d2e:	2380      	movs	r3, #128	@ 0x80
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	4013      	ands	r3, r2
 8003d34:	d00a      	beq.n	8003d4c <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2208      	movs	r2, #8
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2203      	movs	r2, #3
 8003d46:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e0e3      	b.n	8003f14 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d52:	2380      	movs	r3, #128	@ 0x80
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	4013      	ands	r3, r2
 8003d58:	d1df      	bne.n	8003d1a <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	6992      	ldr	r2, [r2, #24]
 8003d62:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d64:	e020      	b.n	8003da8 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d66:	f7fe fd85 	bl	8002874 <HAL_GetTick>
 8003d6a:	0002      	movs	r2, r0
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d90f      	bls.n	8003d94 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	da0a      	bge.n	8003d94 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2208      	movs	r2, #8
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e0bf      	b.n	8003f14 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	dbe3      	blt.n	8003d66 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	6992      	ldr	r2, [r2, #24]
 8003da6:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	2110      	movs	r1, #16
 8003db2:	400a      	ands	r2, r1
 8003db4:	4959      	ldr	r1, [pc, #356]	@ (8003f1c <HAL_DAC_ConfigChannel+0x258>)
 8003db6:	4091      	lsls	r1, r2
 8003db8:	000a      	movs	r2, r1
 8003dba:	43d2      	mvns	r2, r2
 8003dbc:	401a      	ands	r2, r3
 8003dbe:	0011      	movs	r1, r2
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2010      	movs	r0, #16
 8003dc8:	4003      	ands	r3, r0
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	2110      	movs	r1, #16
 8003dde:	400a      	ands	r2, r1
 8003de0:	21ff      	movs	r1, #255	@ 0xff
 8003de2:	4091      	lsls	r1, r2
 8003de4:	000a      	movs	r2, r1
 8003de6:	43d2      	mvns	r2, r2
 8003de8:	401a      	ands	r2, r3
 8003dea:	0011      	movs	r1, r2
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	6a1a      	ldr	r2, [r3, #32]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2010      	movs	r0, #16
 8003df4:	4003      	ands	r3, r0
 8003df6:	409a      	lsls	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d11d      	bne.n	8003e44 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0e:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2210      	movs	r2, #16
 8003e14:	4013      	ands	r3, r2
 8003e16:	221f      	movs	r2, #31
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	0013      	movs	r3, r2
 8003e1c:	43da      	mvns	r2, r3
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	4013      	ands	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2210      	movs	r2, #16
 8003e2e:	4013      	ands	r3, r2
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	409a      	lsls	r2, r3
 8003e34:	0013      	movs	r3, r2
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2210      	movs	r2, #16
 8003e50:	4013      	ands	r3, r2
 8003e52:	2207      	movs	r2, #7
 8003e54:	409a      	lsls	r2, r3
 8003e56:	0013      	movs	r3, r2
 8003e58:	43da      	mvns	r2, r3
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2210      	movs	r2, #16
 8003e76:	4013      	ands	r3, r2
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	0013      	movs	r3, r2
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2110      	movs	r1, #16
 8003e96:	400b      	ands	r3, r1
 8003e98:	2180      	movs	r1, #128	@ 0x80
 8003e9a:	01c9      	lsls	r1, r1, #7
 8003e9c:	4099      	lsls	r1, r3
 8003e9e:	000b      	movs	r3, r1
 8003ea0:	43d9      	mvns	r1, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	400a      	ands	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	4a19      	ldr	r2, [pc, #100]	@ (8003f20 <HAL_DAC_ConfigChannel+0x25c>)
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	0013      	movs	r3, r2
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2210      	movs	r2, #16
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	0013      	movs	r3, r2
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2110      	movs	r1, #16
 8003ef0:	400b      	ands	r3, r1
 8003ef2:	21c0      	movs	r1, #192	@ 0xc0
 8003ef4:	4099      	lsls	r1, r3
 8003ef6:	000b      	movs	r3, r1
 8003ef8:	43d9      	mvns	r1, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	400a      	ands	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003f0e:	231f      	movs	r3, #31
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	781b      	ldrb	r3, [r3, #0]
}
 8003f14:	0018      	movs	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b008      	add	sp, #32
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	000003ff 	.word	0x000003ff
 8003f20:	00000ffe 	.word	0x00000ffe

08003f24 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e077      	b.n	8004026 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	@ (8004030 <HAL_DMA_Init+0x10c>)
 8003f3c:	4694      	mov	ip, r2
 8003f3e:	4463      	add	r3, ip
 8003f40:	2114      	movs	r1, #20
 8003f42:	0018      	movs	r0, r3
 8003f44:	f7fc f8de 	bl	8000104 <__udivsi3>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	009a      	lsls	r2, r3, #2
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2225      	movs	r2, #37	@ 0x25
 8003f54:	2102      	movs	r1, #2
 8003f56:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4934      	ldr	r1, [pc, #208]	@ (8004034 <HAL_DMA_Init+0x110>)
 8003f64:	400a      	ands	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6819      	ldr	r1, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f000 f9c1 	bl	8004328 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	2380      	movs	r3, #128	@ 0x80
 8003fac:	01db      	lsls	r3, r3, #7
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d102      	bne.n	8003fb8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc0:	213f      	movs	r1, #63	@ 0x3f
 8003fc2:	400a      	ands	r2, r1
 8003fc4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003fce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d011      	beq.n	8003ffc <HAL_DMA_Init+0xd8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d80d      	bhi.n	8003ffc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f000 f9cc 	bl	8004380 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	e008      	b.n	800400e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2225      	movs	r2, #37	@ 0x25
 8004018:	2101      	movs	r1, #1
 800401a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2224      	movs	r2, #36	@ 0x24
 8004020:	2100      	movs	r1, #0
 8004022:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	0018      	movs	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	b002      	add	sp, #8
 800402c:	bd80      	pop	{r7, pc}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	bffdfff8 	.word	0xbffdfff8
 8004034:	ffff800f 	.word	0xffff800f

08004038 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004046:	2317      	movs	r3, #23
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2224      	movs	r2, #36	@ 0x24
 8004052:	5c9b      	ldrb	r3, [r3, r2]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_DMA_Start_IT+0x24>
 8004058:	2302      	movs	r3, #2
 800405a:	e06f      	b.n	800413c <HAL_DMA_Start_IT+0x104>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2224      	movs	r2, #36	@ 0x24
 8004060:	2101      	movs	r1, #1
 8004062:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2225      	movs	r2, #37	@ 0x25
 8004068:	5c9b      	ldrb	r3, [r3, r2]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d157      	bne.n	8004120 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2225      	movs	r2, #37	@ 0x25
 8004074:	2102      	movs	r1, #2
 8004076:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2101      	movs	r1, #1
 800408a:	438a      	bics	r2, r1
 800408c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f907 	bl	80042a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d008      	beq.n	80040b4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	210e      	movs	r1, #14
 80040ae:	430a      	orrs	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	e00f      	b.n	80040d4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2104      	movs	r1, #4
 80040c0:	438a      	bics	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	210a      	movs	r1, #10
 80040d0:	430a      	orrs	r2, r1
 80040d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	2380      	movs	r3, #128	@ 0x80
 80040dc:	025b      	lsls	r3, r3, #9
 80040de:	4013      	ands	r3, r2
 80040e0:	d008      	beq.n	80040f4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ec:	2180      	movs	r1, #128	@ 0x80
 80040ee:	0049      	lsls	r1, r1, #1
 80040f0:	430a      	orrs	r2, r1
 80040f2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004106:	2180      	movs	r1, #128	@ 0x80
 8004108:	0049      	lsls	r1, r1, #1
 800410a:	430a      	orrs	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2101      	movs	r1, #1
 800411a:	430a      	orrs	r2, r1
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	e00a      	b.n	8004136 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2280      	movs	r2, #128	@ 0x80
 8004124:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2224      	movs	r2, #36	@ 0x24
 800412a:	2100      	movs	r1, #0
 800412c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800412e:	2317      	movs	r3, #23
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	2201      	movs	r2, #1
 8004134:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004136:	2317      	movs	r3, #23
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	781b      	ldrb	r3, [r3, #0]
}
 800413c:	0018      	movs	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	b006      	add	sp, #24
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800414c:	4b55      	ldr	r3, [pc, #340]	@ (80042a4 <HAL_DMA_IRQHandler+0x160>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	221c      	movs	r2, #28
 8004160:	4013      	ands	r3, r2
 8004162:	2204      	movs	r2, #4
 8004164:	409a      	lsls	r2, r3
 8004166:	0013      	movs	r3, r2
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4013      	ands	r3, r2
 800416c:	d027      	beq.n	80041be <HAL_DMA_IRQHandler+0x7a>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2204      	movs	r2, #4
 8004172:	4013      	ands	r3, r2
 8004174:	d023      	beq.n	80041be <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2220      	movs	r2, #32
 800417e:	4013      	ands	r3, r2
 8004180:	d107      	bne.n	8004192 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2104      	movs	r1, #4
 800418e:	438a      	bics	r2, r1
 8004190:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004192:	4b44      	ldr	r3, [pc, #272]	@ (80042a4 <HAL_DMA_IRQHandler+0x160>)
 8004194:	6859      	ldr	r1, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419a:	221c      	movs	r2, #28
 800419c:	4013      	ands	r3, r2
 800419e:	2204      	movs	r2, #4
 80041a0:	409a      	lsls	r2, r3
 80041a2:	4b40      	ldr	r3, [pc, #256]	@ (80042a4 <HAL_DMA_IRQHandler+0x160>)
 80041a4:	430a      	orrs	r2, r1
 80041a6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d100      	bne.n	80041b2 <HAL_DMA_IRQHandler+0x6e>
 80041b0:	e073      	b.n	800429a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	0010      	movs	r0, r2
 80041ba:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80041bc:	e06d      	b.n	800429a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c2:	221c      	movs	r2, #28
 80041c4:	4013      	ands	r3, r2
 80041c6:	2202      	movs	r2, #2
 80041c8:	409a      	lsls	r2, r3
 80041ca:	0013      	movs	r3, r2
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4013      	ands	r3, r2
 80041d0:	d02e      	beq.n	8004230 <HAL_DMA_IRQHandler+0xec>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2202      	movs	r2, #2
 80041d6:	4013      	ands	r3, r2
 80041d8:	d02a      	beq.n	8004230 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2220      	movs	r2, #32
 80041e2:	4013      	ands	r3, r2
 80041e4:	d10b      	bne.n	80041fe <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	210a      	movs	r1, #10
 80041f2:	438a      	bics	r2, r1
 80041f4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2225      	movs	r2, #37	@ 0x25
 80041fa:	2101      	movs	r1, #1
 80041fc:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80041fe:	4b29      	ldr	r3, [pc, #164]	@ (80042a4 <HAL_DMA_IRQHandler+0x160>)
 8004200:	6859      	ldr	r1, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	221c      	movs	r2, #28
 8004208:	4013      	ands	r3, r2
 800420a:	2202      	movs	r2, #2
 800420c:	409a      	lsls	r2, r3
 800420e:	4b25      	ldr	r3, [pc, #148]	@ (80042a4 <HAL_DMA_IRQHandler+0x160>)
 8004210:	430a      	orrs	r2, r1
 8004212:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2224      	movs	r2, #36	@ 0x24
 8004218:	2100      	movs	r1, #0
 800421a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d03a      	beq.n	800429a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	0010      	movs	r0, r2
 800422c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800422e:	e034      	b.n	800429a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004234:	221c      	movs	r2, #28
 8004236:	4013      	ands	r3, r2
 8004238:	2208      	movs	r2, #8
 800423a:	409a      	lsls	r2, r3
 800423c:	0013      	movs	r3, r2
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4013      	ands	r3, r2
 8004242:	d02b      	beq.n	800429c <HAL_DMA_IRQHandler+0x158>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2208      	movs	r2, #8
 8004248:	4013      	ands	r3, r2
 800424a:	d027      	beq.n	800429c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	210e      	movs	r1, #14
 8004258:	438a      	bics	r2, r1
 800425a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800425c:	4b11      	ldr	r3, [pc, #68]	@ (80042a4 <HAL_DMA_IRQHandler+0x160>)
 800425e:	6859      	ldr	r1, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004264:	221c      	movs	r2, #28
 8004266:	4013      	ands	r3, r2
 8004268:	2201      	movs	r2, #1
 800426a:	409a      	lsls	r2, r3
 800426c:	4b0d      	ldr	r3, [pc, #52]	@ (80042a4 <HAL_DMA_IRQHandler+0x160>)
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2225      	movs	r2, #37	@ 0x25
 800427c:	2101      	movs	r1, #1
 800427e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2224      	movs	r2, #36	@ 0x24
 8004284:	2100      	movs	r1, #0
 8004286:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	0010      	movs	r0, r2
 8004298:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800429a:	46c0      	nop			@ (mov r8, r8)
 800429c:	46c0      	nop			@ (mov r8, r8)
}
 800429e:	46bd      	mov	sp, r7
 80042a0:	b004      	add	sp, #16
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40020000 	.word	0x40020000

080042a8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80042be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80042d0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80042d2:	4b14      	ldr	r3, [pc, #80]	@ (8004324 <DMA_SetConfig+0x7c>)
 80042d4:	6859      	ldr	r1, [r3, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	221c      	movs	r2, #28
 80042dc:	4013      	ands	r3, r2
 80042de:	2201      	movs	r2, #1
 80042e0:	409a      	lsls	r2, r3
 80042e2:	4b10      	ldr	r3, [pc, #64]	@ (8004324 <DMA_SetConfig+0x7c>)
 80042e4:	430a      	orrs	r2, r1
 80042e6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d108      	bne.n	800430a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004308:	e007      	b.n	800431a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	60da      	str	r2, [r3, #12]
}
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	46bd      	mov	sp, r7
 800431e:	b004      	add	sp, #16
 8004320:	bd80      	pop	{r7, pc}
 8004322:	46c0      	nop			@ (mov r8, r8)
 8004324:	40020000 	.word	0x40020000

08004328 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004334:	089b      	lsrs	r3, r3, #2
 8004336:	4a10      	ldr	r2, [pc, #64]	@ (8004378 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004338:	4694      	mov	ip, r2
 800433a:	4463      	add	r3, ip
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	001a      	movs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	001a      	movs	r2, r3
 800434a:	23ff      	movs	r3, #255	@ 0xff
 800434c:	4013      	ands	r3, r2
 800434e:	3b08      	subs	r3, #8
 8004350:	2114      	movs	r1, #20
 8004352:	0018      	movs	r0, r3
 8004354:	f7fb fed6 	bl	8000104 <__udivsi3>
 8004358:	0003      	movs	r3, r0
 800435a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a07      	ldr	r2, [pc, #28]	@ (800437c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004360:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	221f      	movs	r2, #31
 8004366:	4013      	ands	r3, r2
 8004368:	2201      	movs	r2, #1
 800436a:	409a      	lsls	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8004370:	46c0      	nop			@ (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	b004      	add	sp, #16
 8004376:	bd80      	pop	{r7, pc}
 8004378:	10008200 	.word	0x10008200
 800437c:	40020880 	.word	0x40020880

08004380 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	223f      	movs	r2, #63	@ 0x3f
 800438e:	4013      	ands	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4a0a      	ldr	r2, [pc, #40]	@ (80043c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004396:	4694      	mov	ip, r2
 8004398:	4463      	add	r3, ip
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	001a      	movs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a07      	ldr	r2, [pc, #28]	@ (80043c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80043a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	2203      	movs	r2, #3
 80043ae:	4013      	ands	r3, r2
 80043b0:	2201      	movs	r2, #1
 80043b2:	409a      	lsls	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80043b8:	46c0      	nop			@ (mov r8, r8)
 80043ba:	46bd      	mov	sp, r7
 80043bc:	b004      	add	sp, #16
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	1000823f 	.word	0x1000823f
 80043c4:	40020940 	.word	0x40020940

080043c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043d6:	e147      	b.n	8004668 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2101      	movs	r1, #1
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4091      	lsls	r1, r2
 80043e2:	000a      	movs	r2, r1
 80043e4:	4013      	ands	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d100      	bne.n	80043f0 <HAL_GPIO_Init+0x28>
 80043ee:	e138      	b.n	8004662 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2203      	movs	r2, #3
 80043f6:	4013      	ands	r3, r2
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d005      	beq.n	8004408 <HAL_GPIO_Init+0x40>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2203      	movs	r2, #3
 8004402:	4013      	ands	r3, r2
 8004404:	2b02      	cmp	r3, #2
 8004406:	d130      	bne.n	800446a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	2203      	movs	r2, #3
 8004414:	409a      	lsls	r2, r3
 8004416:	0013      	movs	r3, r2
 8004418:	43da      	mvns	r2, r3
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4013      	ands	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	409a      	lsls	r2, r3
 800442a:	0013      	movs	r3, r2
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800443e:	2201      	movs	r2, #1
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	409a      	lsls	r2, r3
 8004444:	0013      	movs	r3, r2
 8004446:	43da      	mvns	r2, r3
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4013      	ands	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	091b      	lsrs	r3, r3, #4
 8004454:	2201      	movs	r2, #1
 8004456:	401a      	ands	r2, r3
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	409a      	lsls	r2, r3
 800445c:	0013      	movs	r3, r2
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2203      	movs	r2, #3
 8004470:	4013      	ands	r3, r2
 8004472:	2b03      	cmp	r3, #3
 8004474:	d017      	beq.n	80044a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	2203      	movs	r2, #3
 8004482:	409a      	lsls	r2, r3
 8004484:	0013      	movs	r3, r2
 8004486:	43da      	mvns	r2, r3
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4013      	ands	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	409a      	lsls	r2, r3
 8004498:	0013      	movs	r3, r2
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2203      	movs	r2, #3
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d123      	bne.n	80044fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	08da      	lsrs	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3208      	adds	r2, #8
 80044ba:	0092      	lsls	r2, r2, #2
 80044bc:	58d3      	ldr	r3, [r2, r3]
 80044be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2207      	movs	r2, #7
 80044c4:	4013      	ands	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	220f      	movs	r2, #15
 80044ca:	409a      	lsls	r2, r3
 80044cc:	0013      	movs	r3, r2
 80044ce:	43da      	mvns	r2, r3
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4013      	ands	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2107      	movs	r1, #7
 80044de:	400b      	ands	r3, r1
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	409a      	lsls	r2, r3
 80044e4:	0013      	movs	r3, r2
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	08da      	lsrs	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3208      	adds	r2, #8
 80044f4:	0092      	lsls	r2, r2, #2
 80044f6:	6939      	ldr	r1, [r7, #16]
 80044f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	2203      	movs	r2, #3
 8004506:	409a      	lsls	r2, r3
 8004508:	0013      	movs	r3, r2
 800450a:	43da      	mvns	r2, r3
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2203      	movs	r2, #3
 8004518:	401a      	ands	r2, r3
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	409a      	lsls	r2, r3
 8004520:	0013      	movs	r3, r2
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	23c0      	movs	r3, #192	@ 0xc0
 8004534:	029b      	lsls	r3, r3, #10
 8004536:	4013      	ands	r3, r2
 8004538:	d100      	bne.n	800453c <HAL_GPIO_Init+0x174>
 800453a:	e092      	b.n	8004662 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800453c:	4a50      	ldr	r2, [pc, #320]	@ (8004680 <HAL_GPIO_Init+0x2b8>)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	089b      	lsrs	r3, r3, #2
 8004542:	3318      	adds	r3, #24
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	589b      	ldr	r3, [r3, r2]
 8004548:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2203      	movs	r2, #3
 800454e:	4013      	ands	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	220f      	movs	r2, #15
 8004554:	409a      	lsls	r2, r3
 8004556:	0013      	movs	r3, r2
 8004558:	43da      	mvns	r2, r3
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4013      	ands	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	23a0      	movs	r3, #160	@ 0xa0
 8004564:	05db      	lsls	r3, r3, #23
 8004566:	429a      	cmp	r2, r3
 8004568:	d013      	beq.n	8004592 <HAL_GPIO_Init+0x1ca>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a45      	ldr	r2, [pc, #276]	@ (8004684 <HAL_GPIO_Init+0x2bc>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00d      	beq.n	800458e <HAL_GPIO_Init+0x1c6>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a44      	ldr	r2, [pc, #272]	@ (8004688 <HAL_GPIO_Init+0x2c0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d007      	beq.n	800458a <HAL_GPIO_Init+0x1c2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a43      	ldr	r2, [pc, #268]	@ (800468c <HAL_GPIO_Init+0x2c4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d101      	bne.n	8004586 <HAL_GPIO_Init+0x1be>
 8004582:	2303      	movs	r3, #3
 8004584:	e006      	b.n	8004594 <HAL_GPIO_Init+0x1cc>
 8004586:	2305      	movs	r3, #5
 8004588:	e004      	b.n	8004594 <HAL_GPIO_Init+0x1cc>
 800458a:	2302      	movs	r3, #2
 800458c:	e002      	b.n	8004594 <HAL_GPIO_Init+0x1cc>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <HAL_GPIO_Init+0x1cc>
 8004592:	2300      	movs	r3, #0
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	2103      	movs	r1, #3
 8004598:	400a      	ands	r2, r1
 800459a:	00d2      	lsls	r2, r2, #3
 800459c:	4093      	lsls	r3, r2
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80045a4:	4936      	ldr	r1, [pc, #216]	@ (8004680 <HAL_GPIO_Init+0x2b8>)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	089b      	lsrs	r3, r3, #2
 80045aa:	3318      	adds	r3, #24
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045b2:	4b33      	ldr	r3, [pc, #204]	@ (8004680 <HAL_GPIO_Init+0x2b8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	43da      	mvns	r2, r3
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4013      	ands	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	2380      	movs	r3, #128	@ 0x80
 80045c8:	035b      	lsls	r3, r3, #13
 80045ca:	4013      	ands	r3, r2
 80045cc:	d003      	beq.n	80045d6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004680 <HAL_GPIO_Init+0x2b8>)
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80045dc:	4b28      	ldr	r3, [pc, #160]	@ (8004680 <HAL_GPIO_Init+0x2b8>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	43da      	mvns	r2, r3
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4013      	ands	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	2380      	movs	r3, #128	@ 0x80
 80045f2:	039b      	lsls	r3, r3, #14
 80045f4:	4013      	ands	r3, r2
 80045f6:	d003      	beq.n	8004600 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004600:	4b1f      	ldr	r3, [pc, #124]	@ (8004680 <HAL_GPIO_Init+0x2b8>)
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004606:	4a1e      	ldr	r2, [pc, #120]	@ (8004680 <HAL_GPIO_Init+0x2b8>)
 8004608:	2384      	movs	r3, #132	@ 0x84
 800460a:	58d3      	ldr	r3, [r2, r3]
 800460c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	43da      	mvns	r2, r3
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	4013      	ands	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	2380      	movs	r3, #128	@ 0x80
 800461e:	029b      	lsls	r3, r3, #10
 8004620:	4013      	ands	r3, r2
 8004622:	d003      	beq.n	800462c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800462c:	4914      	ldr	r1, [pc, #80]	@ (8004680 <HAL_GPIO_Init+0x2b8>)
 800462e:	2284      	movs	r2, #132	@ 0x84
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004634:	4a12      	ldr	r2, [pc, #72]	@ (8004680 <HAL_GPIO_Init+0x2b8>)
 8004636:	2380      	movs	r3, #128	@ 0x80
 8004638:	58d3      	ldr	r3, [r2, r3]
 800463a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	43da      	mvns	r2, r3
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4013      	ands	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	2380      	movs	r3, #128	@ 0x80
 800464c:	025b      	lsls	r3, r3, #9
 800464e:	4013      	ands	r3, r2
 8004650:	d003      	beq.n	800465a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800465a:	4909      	ldr	r1, [pc, #36]	@ (8004680 <HAL_GPIO_Init+0x2b8>)
 800465c:	2280      	movs	r2, #128	@ 0x80
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	3301      	adds	r3, #1
 8004666:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	40da      	lsrs	r2, r3
 8004670:	1e13      	subs	r3, r2, #0
 8004672:	d000      	beq.n	8004676 <HAL_GPIO_Init+0x2ae>
 8004674:	e6b0      	b.n	80043d8 <HAL_GPIO_Init+0x10>
  }
}
 8004676:	46c0      	nop			@ (mov r8, r8)
 8004678:	46c0      	nop			@ (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	b006      	add	sp, #24
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021800 	.word	0x40021800
 8004684:	50000400 	.word	0x50000400
 8004688:	50000800 	.word	0x50000800
 800468c:	50000c00 	.word	0x50000c00

08004690 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	000a      	movs	r2, r1
 800469a:	1cbb      	adds	r3, r7, #2
 800469c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	1cba      	adds	r2, r7, #2
 80046a4:	8812      	ldrh	r2, [r2, #0]
 80046a6:	4013      	ands	r3, r2
 80046a8:	d004      	beq.n	80046b4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80046aa:	230f      	movs	r3, #15
 80046ac:	18fb      	adds	r3, r7, r3
 80046ae:	2201      	movs	r2, #1
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	e003      	b.n	80046bc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046b4:	230f      	movs	r3, #15
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80046bc:	230f      	movs	r3, #15
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	781b      	ldrb	r3, [r3, #0]
}
 80046c2:	0018      	movs	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	b004      	add	sp, #16
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	0008      	movs	r0, r1
 80046d4:	0011      	movs	r1, r2
 80046d6:	1cbb      	adds	r3, r7, #2
 80046d8:	1c02      	adds	r2, r0, #0
 80046da:	801a      	strh	r2, [r3, #0]
 80046dc:	1c7b      	adds	r3, r7, #1
 80046de:	1c0a      	adds	r2, r1, #0
 80046e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046e2:	1c7b      	adds	r3, r7, #1
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d004      	beq.n	80046f4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046ea:	1cbb      	adds	r3, r7, #2
 80046ec:	881a      	ldrh	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046f2:	e003      	b.n	80046fc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046f4:	1cbb      	adds	r3, r7, #2
 80046f6:	881a      	ldrh	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046fc:	46c0      	nop			@ (mov r8, r8)
 80046fe:	46bd      	mov	sp, r7
 8004700:	b002      	add	sp, #8
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800470c:	4b19      	ldr	r3, [pc, #100]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a19      	ldr	r2, [pc, #100]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004712:	4013      	ands	r3, r2
 8004714:	0019      	movs	r1, r3
 8004716:	4b17      	ldr	r3, [pc, #92]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	430a      	orrs	r2, r1
 800471c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	2380      	movs	r3, #128	@ 0x80
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	429a      	cmp	r2, r3
 8004726:	d11f      	bne.n	8004768 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004728:	4b14      	ldr	r3, [pc, #80]	@ (800477c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	0013      	movs	r3, r2
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	189b      	adds	r3, r3, r2
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	4912      	ldr	r1, [pc, #72]	@ (8004780 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004736:	0018      	movs	r0, r3
 8004738:	f7fb fce4 	bl	8000104 <__udivsi3>
 800473c:	0003      	movs	r3, r0
 800473e:	3301      	adds	r3, #1
 8004740:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004742:	e008      	b.n	8004756 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3b01      	subs	r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e001      	b.n	8004756 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e009      	b.n	800476a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004756:	4b07      	ldr	r3, [pc, #28]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004758:	695a      	ldr	r2, [r3, #20]
 800475a:	2380      	movs	r3, #128	@ 0x80
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	401a      	ands	r2, r3
 8004760:	2380      	movs	r3, #128	@ 0x80
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	429a      	cmp	r2, r3
 8004766:	d0ed      	beq.n	8004744 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	0018      	movs	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	b004      	add	sp, #16
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	40007000 	.word	0x40007000
 8004778:	fffff9ff 	.word	0xfffff9ff
 800477c:	20000008 	.word	0x20000008
 8004780:	000f4240 	.word	0x000f4240

08004784 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004788:	4b03      	ldr	r3, [pc, #12]	@ (8004798 <LL_RCC_GetAPB1Prescaler+0x14>)
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	23e0      	movs	r3, #224	@ 0xe0
 800478e:	01db      	lsls	r3, r3, #7
 8004790:	4013      	ands	r3, r2
}
 8004792:	0018      	movs	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40021000 	.word	0x40021000

0800479c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e2fe      	b.n	8004dac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2201      	movs	r2, #1
 80047b4:	4013      	ands	r3, r2
 80047b6:	d100      	bne.n	80047ba <HAL_RCC_OscConfig+0x1e>
 80047b8:	e07c      	b.n	80048b4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ba:	4bc3      	ldr	r3, [pc, #780]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2238      	movs	r2, #56	@ 0x38
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047c4:	4bc0      	ldr	r3, [pc, #768]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	2203      	movs	r2, #3
 80047ca:	4013      	ands	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d102      	bne.n	80047da <HAL_RCC_OscConfig+0x3e>
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d002      	beq.n	80047e0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d10b      	bne.n	80047f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e0:	4bb9      	ldr	r3, [pc, #740]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	2380      	movs	r3, #128	@ 0x80
 80047e6:	029b      	lsls	r3, r3, #10
 80047e8:	4013      	ands	r3, r2
 80047ea:	d062      	beq.n	80048b2 <HAL_RCC_OscConfig+0x116>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d15e      	bne.n	80048b2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e2d9      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	2380      	movs	r3, #128	@ 0x80
 80047fe:	025b      	lsls	r3, r3, #9
 8004800:	429a      	cmp	r2, r3
 8004802:	d107      	bne.n	8004814 <HAL_RCC_OscConfig+0x78>
 8004804:	4bb0      	ldr	r3, [pc, #704]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	4baf      	ldr	r3, [pc, #700]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 800480a:	2180      	movs	r1, #128	@ 0x80
 800480c:	0249      	lsls	r1, r1, #9
 800480e:	430a      	orrs	r2, r1
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e020      	b.n	8004856 <HAL_RCC_OscConfig+0xba>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	23a0      	movs	r3, #160	@ 0xa0
 800481a:	02db      	lsls	r3, r3, #11
 800481c:	429a      	cmp	r2, r3
 800481e:	d10e      	bne.n	800483e <HAL_RCC_OscConfig+0xa2>
 8004820:	4ba9      	ldr	r3, [pc, #676]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4ba8      	ldr	r3, [pc, #672]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004826:	2180      	movs	r1, #128	@ 0x80
 8004828:	02c9      	lsls	r1, r1, #11
 800482a:	430a      	orrs	r2, r1
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	4ba6      	ldr	r3, [pc, #664]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4ba5      	ldr	r3, [pc, #660]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004834:	2180      	movs	r1, #128	@ 0x80
 8004836:	0249      	lsls	r1, r1, #9
 8004838:	430a      	orrs	r2, r1
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e00b      	b.n	8004856 <HAL_RCC_OscConfig+0xba>
 800483e:	4ba2      	ldr	r3, [pc, #648]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	4ba1      	ldr	r3, [pc, #644]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004844:	49a1      	ldr	r1, [pc, #644]	@ (8004acc <HAL_RCC_OscConfig+0x330>)
 8004846:	400a      	ands	r2, r1
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	4b9f      	ldr	r3, [pc, #636]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b9e      	ldr	r3, [pc, #632]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004850:	499f      	ldr	r1, [pc, #636]	@ (8004ad0 <HAL_RCC_OscConfig+0x334>)
 8004852:	400a      	ands	r2, r1
 8004854:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d014      	beq.n	8004888 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7fe f809 	bl	8002874 <HAL_GetTick>
 8004862:	0003      	movs	r3, r0
 8004864:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004868:	f7fe f804 	bl	8002874 <HAL_GetTick>
 800486c:	0002      	movs	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	@ 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e298      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800487a:	4b93      	ldr	r3, [pc, #588]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	2380      	movs	r3, #128	@ 0x80
 8004880:	029b      	lsls	r3, r3, #10
 8004882:	4013      	ands	r3, r2
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0xcc>
 8004886:	e015      	b.n	80048b4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004888:	f7fd fff4 	bl	8002874 <HAL_GetTick>
 800488c:	0003      	movs	r3, r0
 800488e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004892:	f7fd ffef 	bl	8002874 <HAL_GetTick>
 8004896:	0002      	movs	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b64      	cmp	r3, #100	@ 0x64
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e283      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048a4:	4b88      	ldr	r3, [pc, #544]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	2380      	movs	r3, #128	@ 0x80
 80048aa:	029b      	lsls	r3, r3, #10
 80048ac:	4013      	ands	r3, r2
 80048ae:	d1f0      	bne.n	8004892 <HAL_RCC_OscConfig+0xf6>
 80048b0:	e000      	b.n	80048b4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2202      	movs	r2, #2
 80048ba:	4013      	ands	r3, r2
 80048bc:	d100      	bne.n	80048c0 <HAL_RCC_OscConfig+0x124>
 80048be:	e099      	b.n	80049f4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c0:	4b81      	ldr	r3, [pc, #516]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2238      	movs	r2, #56	@ 0x38
 80048c6:	4013      	ands	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048ca:	4b7f      	ldr	r3, [pc, #508]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	2203      	movs	r2, #3
 80048d0:	4013      	ands	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b10      	cmp	r3, #16
 80048d8:	d102      	bne.n	80048e0 <HAL_RCC_OscConfig+0x144>
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d002      	beq.n	80048e6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d135      	bne.n	8004952 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048e6:	4b78      	ldr	r3, [pc, #480]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	2380      	movs	r3, #128	@ 0x80
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	4013      	ands	r3, r2
 80048f0:	d005      	beq.n	80048fe <HAL_RCC_OscConfig+0x162>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e256      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fe:	4b72      	ldr	r3, [pc, #456]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	4a74      	ldr	r2, [pc, #464]	@ (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004904:	4013      	ands	r3, r2
 8004906:	0019      	movs	r1, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	021a      	lsls	r2, r3, #8
 800490e:	4b6e      	ldr	r3, [pc, #440]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004910:	430a      	orrs	r2, r1
 8004912:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d112      	bne.n	8004940 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800491a:	4b6b      	ldr	r3, [pc, #428]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a6e      	ldr	r2, [pc, #440]	@ (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004920:	4013      	ands	r3, r2
 8004922:	0019      	movs	r1, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	4b67      	ldr	r3, [pc, #412]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 800492a:	430a      	orrs	r2, r1
 800492c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800492e:	4b66      	ldr	r3, [pc, #408]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	0adb      	lsrs	r3, r3, #11
 8004934:	2207      	movs	r2, #7
 8004936:	4013      	ands	r3, r2
 8004938:	4a68      	ldr	r2, [pc, #416]	@ (8004adc <HAL_RCC_OscConfig+0x340>)
 800493a:	40da      	lsrs	r2, r3
 800493c:	4b68      	ldr	r3, [pc, #416]	@ (8004ae0 <HAL_RCC_OscConfig+0x344>)
 800493e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004940:	4b68      	ldr	r3, [pc, #416]	@ (8004ae4 <HAL_RCC_OscConfig+0x348>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	0018      	movs	r0, r3
 8004946:	f7fd ff39 	bl	80027bc <HAL_InitTick>
 800494a:	1e03      	subs	r3, r0, #0
 800494c:	d051      	beq.n	80049f2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e22c      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d030      	beq.n	80049bc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800495a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004960:	4013      	ands	r3, r2
 8004962:	0019      	movs	r1, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	4b57      	ldr	r3, [pc, #348]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 800496a:	430a      	orrs	r2, r1
 800496c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800496e:	4b56      	ldr	r3, [pc, #344]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b55      	ldr	r3, [pc, #340]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004974:	2180      	movs	r1, #128	@ 0x80
 8004976:	0049      	lsls	r1, r1, #1
 8004978:	430a      	orrs	r2, r1
 800497a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fd ff7a 	bl	8002874 <HAL_GetTick>
 8004980:	0003      	movs	r3, r0
 8004982:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004986:	f7fd ff75 	bl	8002874 <HAL_GetTick>
 800498a:	0002      	movs	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e209      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004998:	4b4b      	ldr	r3, [pc, #300]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	2380      	movs	r3, #128	@ 0x80
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	4013      	ands	r3, r2
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a4:	4b48      	ldr	r3, [pc, #288]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	4a4a      	ldr	r2, [pc, #296]	@ (8004ad4 <HAL_RCC_OscConfig+0x338>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	0019      	movs	r1, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	021a      	lsls	r2, r3, #8
 80049b4:	4b44      	ldr	r3, [pc, #272]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	e01b      	b.n	80049f4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80049bc:	4b42      	ldr	r3, [pc, #264]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	4b41      	ldr	r3, [pc, #260]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 80049c2:	4949      	ldr	r1, [pc, #292]	@ (8004ae8 <HAL_RCC_OscConfig+0x34c>)
 80049c4:	400a      	ands	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fd ff54 	bl	8002874 <HAL_GetTick>
 80049cc:	0003      	movs	r3, r0
 80049ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049d2:	f7fd ff4f 	bl	8002874 <HAL_GetTick>
 80049d6:	0002      	movs	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e1e3      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049e4:	4b38      	ldr	r3, [pc, #224]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	2380      	movs	r3, #128	@ 0x80
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4013      	ands	r3, r2
 80049ee:	d1f0      	bne.n	80049d2 <HAL_RCC_OscConfig+0x236>
 80049f0:	e000      	b.n	80049f4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049f2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2208      	movs	r2, #8
 80049fa:	4013      	ands	r3, r2
 80049fc:	d047      	beq.n	8004a8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80049fe:	4b32      	ldr	r3, [pc, #200]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2238      	movs	r2, #56	@ 0x38
 8004a04:	4013      	ands	r3, r2
 8004a06:	2b18      	cmp	r3, #24
 8004a08:	d10a      	bne.n	8004a20 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a0e:	2202      	movs	r2, #2
 8004a10:	4013      	ands	r3, r2
 8004a12:	d03c      	beq.n	8004a8e <HAL_RCC_OscConfig+0x2f2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d138      	bne.n	8004a8e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e1c5      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d019      	beq.n	8004a5c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004a28:	4b27      	ldr	r3, [pc, #156]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004a2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a2c:	4b26      	ldr	r3, [pc, #152]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004a2e:	2101      	movs	r1, #1
 8004a30:	430a      	orrs	r2, r1
 8004a32:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fd ff1e 	bl	8002874 <HAL_GetTick>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a3e:	f7fd ff19 	bl	8002874 <HAL_GetTick>
 8004a42:	0002      	movs	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e1ad      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a50:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a54:	2202      	movs	r2, #2
 8004a56:	4013      	ands	r3, r2
 8004a58:	d0f1      	beq.n	8004a3e <HAL_RCC_OscConfig+0x2a2>
 8004a5a:	e018      	b.n	8004a8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004a5e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a60:	4b19      	ldr	r3, [pc, #100]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004a62:	2101      	movs	r1, #1
 8004a64:	438a      	bics	r2, r1
 8004a66:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a68:	f7fd ff04 	bl	8002874 <HAL_GetTick>
 8004a6c:	0003      	movs	r3, r0
 8004a6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a72:	f7fd feff 	bl	8002874 <HAL_GetTick>
 8004a76:	0002      	movs	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e193      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a84:	4b10      	ldr	r3, [pc, #64]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a88:	2202      	movs	r2, #2
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d1f1      	bne.n	8004a72 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2204      	movs	r2, #4
 8004a94:	4013      	ands	r3, r2
 8004a96:	d100      	bne.n	8004a9a <HAL_RCC_OscConfig+0x2fe>
 8004a98:	e0c6      	b.n	8004c28 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a9a:	231f      	movs	r3, #31
 8004a9c:	18fb      	adds	r3, r7, r3
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004aa2:	4b09      	ldr	r3, [pc, #36]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2238      	movs	r2, #56	@ 0x38
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d11e      	bne.n	8004aec <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004aae:	4b06      	ldr	r3, [pc, #24]	@ (8004ac8 <HAL_RCC_OscConfig+0x32c>)
 8004ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	d100      	bne.n	8004aba <HAL_RCC_OscConfig+0x31e>
 8004ab8:	e0b6      	b.n	8004c28 <HAL_RCC_OscConfig+0x48c>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d000      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x328>
 8004ac2:	e0b1      	b.n	8004c28 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e171      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	fffeffff 	.word	0xfffeffff
 8004ad0:	fffbffff 	.word	0xfffbffff
 8004ad4:	ffff80ff 	.word	0xffff80ff
 8004ad8:	ffffc7ff 	.word	0xffffc7ff
 8004adc:	00f42400 	.word	0x00f42400
 8004ae0:	20000008 	.word	0x20000008
 8004ae4:	2000000c 	.word	0x2000000c
 8004ae8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004aec:	4bb1      	ldr	r3, [pc, #708]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004aee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004af0:	2380      	movs	r3, #128	@ 0x80
 8004af2:	055b      	lsls	r3, r3, #21
 8004af4:	4013      	ands	r3, r2
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_OscConfig+0x360>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <HAL_RCC_OscConfig+0x362>
 8004afc:	2300      	movs	r3, #0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d011      	beq.n	8004b26 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004b02:	4bac      	ldr	r3, [pc, #688]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004b04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b06:	4bab      	ldr	r3, [pc, #684]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004b08:	2180      	movs	r1, #128	@ 0x80
 8004b0a:	0549      	lsls	r1, r1, #21
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b10:	4ba8      	ldr	r3, [pc, #672]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004b12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b14:	2380      	movs	r3, #128	@ 0x80
 8004b16:	055b      	lsls	r3, r3, #21
 8004b18:	4013      	ands	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004b1e:	231f      	movs	r3, #31
 8004b20:	18fb      	adds	r3, r7, r3
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b26:	4ba4      	ldr	r3, [pc, #656]	@ (8004db8 <HAL_RCC_OscConfig+0x61c>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	2380      	movs	r3, #128	@ 0x80
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d11a      	bne.n	8004b68 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b32:	4ba1      	ldr	r3, [pc, #644]	@ (8004db8 <HAL_RCC_OscConfig+0x61c>)
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	4ba0      	ldr	r3, [pc, #640]	@ (8004db8 <HAL_RCC_OscConfig+0x61c>)
 8004b38:	2180      	movs	r1, #128	@ 0x80
 8004b3a:	0049      	lsls	r1, r1, #1
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004b40:	f7fd fe98 	bl	8002874 <HAL_GetTick>
 8004b44:	0003      	movs	r3, r0
 8004b46:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4a:	f7fd fe93 	bl	8002874 <HAL_GetTick>
 8004b4e:	0002      	movs	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e127      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b5c:	4b96      	ldr	r3, [pc, #600]	@ (8004db8 <HAL_RCC_OscConfig+0x61c>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	2380      	movs	r3, #128	@ 0x80
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	4013      	ands	r3, r2
 8004b66:	d0f0      	beq.n	8004b4a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d106      	bne.n	8004b7e <HAL_RCC_OscConfig+0x3e2>
 8004b70:	4b90      	ldr	r3, [pc, #576]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004b72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b74:	4b8f      	ldr	r3, [pc, #572]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004b76:	2101      	movs	r1, #1
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b7c:	e01c      	b.n	8004bb8 <HAL_RCC_OscConfig+0x41c>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b05      	cmp	r3, #5
 8004b84:	d10c      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x404>
 8004b86:	4b8b      	ldr	r3, [pc, #556]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004b88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b8a:	4b8a      	ldr	r3, [pc, #552]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004b8c:	2104      	movs	r1, #4
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b92:	4b88      	ldr	r3, [pc, #544]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004b94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b96:	4b87      	ldr	r3, [pc, #540]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004b98:	2101      	movs	r1, #1
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b9e:	e00b      	b.n	8004bb8 <HAL_RCC_OscConfig+0x41c>
 8004ba0:	4b84      	ldr	r3, [pc, #528]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004ba2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ba4:	4b83      	ldr	r3, [pc, #524]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	438a      	bics	r2, r1
 8004baa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bac:	4b81      	ldr	r3, [pc, #516]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004bae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bb0:	4b80      	ldr	r3, [pc, #512]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004bb2:	2104      	movs	r1, #4
 8004bb4:	438a      	bics	r2, r1
 8004bb6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d014      	beq.n	8004bea <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7fd fe58 	bl	8002874 <HAL_GetTick>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bc8:	e009      	b.n	8004bde <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bca:	f7fd fe53 	bl	8002874 <HAL_GetTick>
 8004bce:	0002      	movs	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	4a79      	ldr	r2, [pc, #484]	@ (8004dbc <HAL_RCC_OscConfig+0x620>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e0e6      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bde:	4b75      	ldr	r3, [pc, #468]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be2:	2202      	movs	r2, #2
 8004be4:	4013      	ands	r3, r2
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCC_OscConfig+0x42e>
 8004be8:	e013      	b.n	8004c12 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bea:	f7fd fe43 	bl	8002874 <HAL_GetTick>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bf2:	e009      	b.n	8004c08 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf4:	f7fd fe3e 	bl	8002874 <HAL_GetTick>
 8004bf8:	0002      	movs	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	4a6f      	ldr	r2, [pc, #444]	@ (8004dbc <HAL_RCC_OscConfig+0x620>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e0d1      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c08:	4b6a      	ldr	r3, [pc, #424]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004c12:	231f      	movs	r3, #31
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d105      	bne.n	8004c28 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004c1c:	4b65      	ldr	r3, [pc, #404]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004c1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c20:	4b64      	ldr	r3, [pc, #400]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004c22:	4967      	ldr	r1, [pc, #412]	@ (8004dc0 <HAL_RCC_OscConfig+0x624>)
 8004c24:	400a      	ands	r2, r1
 8004c26:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d100      	bne.n	8004c32 <HAL_RCC_OscConfig+0x496>
 8004c30:	e0bb      	b.n	8004daa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c32:	4b60      	ldr	r3, [pc, #384]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2238      	movs	r2, #56	@ 0x38
 8004c38:	4013      	ands	r3, r2
 8004c3a:	2b10      	cmp	r3, #16
 8004c3c:	d100      	bne.n	8004c40 <HAL_RCC_OscConfig+0x4a4>
 8004c3e:	e07b      	b.n	8004d38 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d156      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c48:	4b5a      	ldr	r3, [pc, #360]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4b59      	ldr	r3, [pc, #356]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004c4e:	495d      	ldr	r1, [pc, #372]	@ (8004dc4 <HAL_RCC_OscConfig+0x628>)
 8004c50:	400a      	ands	r2, r1
 8004c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fd fe0e 	bl	8002874 <HAL_GetTick>
 8004c58:	0003      	movs	r3, r0
 8004c5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5e:	f7fd fe09 	bl	8002874 <HAL_GetTick>
 8004c62:	0002      	movs	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e09d      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c70:	4b50      	ldr	r3, [pc, #320]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	2380      	movs	r3, #128	@ 0x80
 8004c76:	049b      	lsls	r3, r3, #18
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d1f0      	bne.n	8004c5e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c7c:	4b4d      	ldr	r3, [pc, #308]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4a51      	ldr	r2, [pc, #324]	@ (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	0019      	movs	r1, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1a      	ldr	r2, [r3, #32]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c94:	021b      	lsls	r3, r3, #8
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	4b42      	ldr	r3, [pc, #264]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cac:	430a      	orrs	r2, r1
 8004cae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb0:	4b40      	ldr	r3, [pc, #256]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	4b3f      	ldr	r3, [pc, #252]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cb6:	2180      	movs	r1, #128	@ 0x80
 8004cb8:	0449      	lsls	r1, r1, #17
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	4b3c      	ldr	r3, [pc, #240]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cc4:	2180      	movs	r1, #128	@ 0x80
 8004cc6:	0549      	lsls	r1, r1, #21
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fd fdd2 	bl	8002874 <HAL_GetTick>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd6:	f7fd fdcd 	bl	8002874 <HAL_GetTick>
 8004cda:	0002      	movs	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e061      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce8:	4b32      	ldr	r3, [pc, #200]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	2380      	movs	r3, #128	@ 0x80
 8004cee:	049b      	lsls	r3, r3, #18
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x53a>
 8004cf4:	e059      	b.n	8004daa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	4b2e      	ldr	r3, [pc, #184]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cfc:	4931      	ldr	r1, [pc, #196]	@ (8004dc4 <HAL_RCC_OscConfig+0x628>)
 8004cfe:	400a      	ands	r2, r1
 8004d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d02:	f7fd fdb7 	bl	8002874 <HAL_GetTick>
 8004d06:	0003      	movs	r3, r0
 8004d08:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fd fdb2 	bl	8002874 <HAL_GetTick>
 8004d10:	0002      	movs	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e046      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d1e:	4b25      	ldr	r3, [pc, #148]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	2380      	movs	r3, #128	@ 0x80
 8004d24:	049b      	lsls	r3, r3, #18
 8004d26:	4013      	ands	r3, r2
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004d2a:	4b22      	ldr	r3, [pc, #136]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	4b21      	ldr	r3, [pc, #132]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004d30:	4926      	ldr	r1, [pc, #152]	@ (8004dcc <HAL_RCC_OscConfig+0x630>)
 8004d32:	400a      	ands	r2, r1
 8004d34:	60da      	str	r2, [r3, #12]
 8004d36:	e038      	b.n	8004daa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e033      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004d44:	4b1b      	ldr	r3, [pc, #108]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	401a      	ands	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d126      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2270      	movs	r2, #112	@ 0x70
 8004d5c:	401a      	ands	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d11f      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	23fe      	movs	r3, #254	@ 0xfe
 8004d6a:	01db      	lsls	r3, r3, #7
 8004d6c:	401a      	ands	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d72:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d116      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	23f8      	movs	r3, #248	@ 0xf8
 8004d7c:	039b      	lsls	r3, r3, #14
 8004d7e:	401a      	ands	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d10e      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	23e0      	movs	r3, #224	@ 0xe0
 8004d8c:	051b      	lsls	r3, r3, #20
 8004d8e:	401a      	ands	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d106      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	0f5b      	lsrs	r3, r3, #29
 8004d9c:	075a      	lsls	r2, r3, #29
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d001      	beq.n	8004daa <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	0018      	movs	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	b008      	add	sp, #32
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40007000 	.word	0x40007000
 8004dbc:	00001388 	.word	0x00001388
 8004dc0:	efffffff 	.word	0xefffffff
 8004dc4:	feffffff 	.word	0xfeffffff
 8004dc8:	11c1808c 	.word	0x11c1808c
 8004dcc:	eefefffc 	.word	0xeefefffc

08004dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0e9      	b.n	8004fb8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004de4:	4b76      	ldr	r3, [pc, #472]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2207      	movs	r2, #7
 8004dea:	4013      	ands	r3, r2
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d91e      	bls.n	8004e30 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df2:	4b73      	ldr	r3, [pc, #460]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2207      	movs	r2, #7
 8004df8:	4393      	bics	r3, r2
 8004dfa:	0019      	movs	r1, r3
 8004dfc:	4b70      	ldr	r3, [pc, #448]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e04:	f7fd fd36 	bl	8002874 <HAL_GetTick>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e0c:	e009      	b.n	8004e22 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e0e:	f7fd fd31 	bl	8002874 <HAL_GetTick>
 8004e12:	0002      	movs	r2, r0
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	4a6a      	ldr	r2, [pc, #424]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1f4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e0ca      	b.n	8004fb8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e22:	4b67      	ldr	r3, [pc, #412]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2207      	movs	r2, #7
 8004e28:	4013      	ands	r3, r2
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d1ee      	bne.n	8004e0e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2202      	movs	r2, #2
 8004e36:	4013      	ands	r3, r2
 8004e38:	d015      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2204      	movs	r2, #4
 8004e40:	4013      	ands	r3, r2
 8004e42:	d006      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004e44:	4b60      	ldr	r3, [pc, #384]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	4b5f      	ldr	r3, [pc, #380]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8004e4a:	21e0      	movs	r1, #224	@ 0xe0
 8004e4c:	01c9      	lsls	r1, r1, #7
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e52:	4b5d      	ldr	r3, [pc, #372]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	4a5d      	ldr	r2, [pc, #372]	@ (8004fcc <HAL_RCC_ClockConfig+0x1fc>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	0019      	movs	r1, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	4b59      	ldr	r3, [pc, #356]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8004e62:	430a      	orrs	r2, r1
 8004e64:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d057      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d107      	bne.n	8004e88 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e78:	4b53      	ldr	r3, [pc, #332]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	2380      	movs	r3, #128	@ 0x80
 8004e7e:	029b      	lsls	r3, r3, #10
 8004e80:	4013      	ands	r3, r2
 8004e82:	d12b      	bne.n	8004edc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e097      	b.n	8004fb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d107      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e90:	4b4d      	ldr	r3, [pc, #308]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	2380      	movs	r3, #128	@ 0x80
 8004e96:	049b      	lsls	r3, r3, #18
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d11f      	bne.n	8004edc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e08b      	b.n	8004fb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d107      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ea8:	4b47      	ldr	r3, [pc, #284]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	2380      	movs	r3, #128	@ 0x80
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d113      	bne.n	8004edc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e07f      	b.n	8004fb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d106      	bne.n	8004ece <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ec0:	4b41      	ldr	r3, [pc, #260]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8004ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	d108      	bne.n	8004edc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e074      	b.n	8004fb8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ece:	4b3e      	ldr	r3, [pc, #248]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d101      	bne.n	8004edc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e06d      	b.n	8004fb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004edc:	4b3a      	ldr	r3, [pc, #232]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	2207      	movs	r2, #7
 8004ee2:	4393      	bics	r3, r2
 8004ee4:	0019      	movs	r1, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	4b37      	ldr	r3, [pc, #220]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8004eec:	430a      	orrs	r2, r1
 8004eee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef0:	f7fd fcc0 	bl	8002874 <HAL_GetTick>
 8004ef4:	0003      	movs	r3, r0
 8004ef6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef8:	e009      	b.n	8004f0e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004efa:	f7fd fcbb 	bl	8002874 <HAL_GetTick>
 8004efe:	0002      	movs	r2, r0
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	4a2f      	ldr	r2, [pc, #188]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1f4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e054      	b.n	8004fb8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2238      	movs	r2, #56	@ 0x38
 8004f14:	401a      	ands	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d1ec      	bne.n	8004efa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f20:	4b27      	ldr	r3, [pc, #156]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2207      	movs	r2, #7
 8004f26:	4013      	ands	r3, r2
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d21e      	bcs.n	8004f6c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2e:	4b24      	ldr	r3, [pc, #144]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2207      	movs	r2, #7
 8004f34:	4393      	bics	r3, r2
 8004f36:	0019      	movs	r1, r3
 8004f38:	4b21      	ldr	r3, [pc, #132]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f40:	f7fd fc98 	bl	8002874 <HAL_GetTick>
 8004f44:	0003      	movs	r3, r0
 8004f46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f48:	e009      	b.n	8004f5e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f4a:	f7fd fc93 	bl	8002874 <HAL_GetTick>
 8004f4e:	0002      	movs	r2, r0
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1f4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e02c      	b.n	8004fb8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f5e:	4b18      	ldr	r3, [pc, #96]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2207      	movs	r2, #7
 8004f64:	4013      	ands	r3, r2
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d1ee      	bne.n	8004f4a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2204      	movs	r2, #4
 8004f72:	4013      	ands	r3, r2
 8004f74:	d009      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004f76:	4b14      	ldr	r3, [pc, #80]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	4a15      	ldr	r2, [pc, #84]	@ (8004fd0 <HAL_RCC_ClockConfig+0x200>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	0019      	movs	r1, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	4b10      	ldr	r3, [pc, #64]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f86:	430a      	orrs	r2, r1
 8004f88:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004f8a:	f000 f829 	bl	8004fe0 <HAL_RCC_GetSysClockFreq>
 8004f8e:	0001      	movs	r1, r0
 8004f90:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	0a1b      	lsrs	r3, r3, #8
 8004f96:	220f      	movs	r2, #15
 8004f98:	401a      	ands	r2, r3
 8004f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd4 <HAL_RCC_ClockConfig+0x204>)
 8004f9c:	0092      	lsls	r2, r2, #2
 8004f9e:	58d3      	ldr	r3, [r2, r3]
 8004fa0:	221f      	movs	r2, #31
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	000a      	movs	r2, r1
 8004fa6:	40da      	lsrs	r2, r3
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd8 <HAL_RCC_ClockConfig+0x208>)
 8004faa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004fac:	4b0b      	ldr	r3, [pc, #44]	@ (8004fdc <HAL_RCC_ClockConfig+0x20c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f7fd fc03 	bl	80027bc <HAL_InitTick>
 8004fb6:	0003      	movs	r3, r0
}
 8004fb8:	0018      	movs	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b004      	add	sp, #16
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40022000 	.word	0x40022000
 8004fc4:	00001388 	.word	0x00001388
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	fffff0ff 	.word	0xfffff0ff
 8004fd0:	ffff8fff 	.word	0xffff8fff
 8004fd4:	08006b18 	.word	0x08006b18
 8004fd8:	20000008 	.word	0x20000008
 8004fdc:	2000000c 	.word	0x2000000c

08004fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fe6:	4b3c      	ldr	r3, [pc, #240]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2238      	movs	r2, #56	@ 0x38
 8004fec:	4013      	ands	r3, r2
 8004fee:	d10f      	bne.n	8005010 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004ff0:	4b39      	ldr	r3, [pc, #228]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	0adb      	lsrs	r3, r3, #11
 8004ff6:	2207      	movs	r2, #7
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	0013      	movs	r3, r2
 8005000:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	4835      	ldr	r0, [pc, #212]	@ (80050dc <HAL_RCC_GetSysClockFreq+0xfc>)
 8005006:	f7fb f87d 	bl	8000104 <__udivsi3>
 800500a:	0003      	movs	r3, r0
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	e05d      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005010:	4b31      	ldr	r3, [pc, #196]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2238      	movs	r2, #56	@ 0x38
 8005016:	4013      	ands	r3, r2
 8005018:	2b08      	cmp	r3, #8
 800501a:	d102      	bne.n	8005022 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800501c:	4b30      	ldr	r3, [pc, #192]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x100>)
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	e054      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005022:	4b2d      	ldr	r3, [pc, #180]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2238      	movs	r2, #56	@ 0x38
 8005028:	4013      	ands	r3, r2
 800502a:	2b10      	cmp	r3, #16
 800502c:	d138      	bne.n	80050a0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800502e:	4b2a      	ldr	r3, [pc, #168]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2203      	movs	r2, #3
 8005034:	4013      	ands	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005038:	4b27      	ldr	r3, [pc, #156]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	091b      	lsrs	r3, r3, #4
 800503e:	2207      	movs	r2, #7
 8005040:	4013      	ands	r3, r2
 8005042:	3301      	adds	r3, #1
 8005044:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b03      	cmp	r3, #3
 800504a:	d10d      	bne.n	8005068 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	4824      	ldr	r0, [pc, #144]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005050:	f7fb f858 	bl	8000104 <__udivsi3>
 8005054:	0003      	movs	r3, r0
 8005056:	0019      	movs	r1, r3
 8005058:	4b1f      	ldr	r3, [pc, #124]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	227f      	movs	r2, #127	@ 0x7f
 8005060:	4013      	ands	r3, r2
 8005062:	434b      	muls	r3, r1
 8005064:	617b      	str	r3, [r7, #20]
        break;
 8005066:	e00d      	b.n	8005084 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	481c      	ldr	r0, [pc, #112]	@ (80050dc <HAL_RCC_GetSysClockFreq+0xfc>)
 800506c:	f7fb f84a 	bl	8000104 <__udivsi3>
 8005070:	0003      	movs	r3, r0
 8005072:	0019      	movs	r1, r3
 8005074:	4b18      	ldr	r3, [pc, #96]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	0a1b      	lsrs	r3, r3, #8
 800507a:	227f      	movs	r2, #127	@ 0x7f
 800507c:	4013      	ands	r3, r2
 800507e:	434b      	muls	r3, r1
 8005080:	617b      	str	r3, [r7, #20]
        break;
 8005082:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005084:	4b14      	ldr	r3, [pc, #80]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	0f5b      	lsrs	r3, r3, #29
 800508a:	2207      	movs	r2, #7
 800508c:	4013      	ands	r3, r2
 800508e:	3301      	adds	r3, #1
 8005090:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	6978      	ldr	r0, [r7, #20]
 8005096:	f7fb f835 	bl	8000104 <__udivsi3>
 800509a:	0003      	movs	r3, r0
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	e015      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80050a0:	4b0d      	ldr	r3, [pc, #52]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2238      	movs	r2, #56	@ 0x38
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d103      	bne.n	80050b4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80050ac:	2380      	movs	r3, #128	@ 0x80
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	e00b      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80050b4:	4b08      	ldr	r3, [pc, #32]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2238      	movs	r2, #56	@ 0x38
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b18      	cmp	r3, #24
 80050be:	d103      	bne.n	80050c8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80050c0:	23fa      	movs	r3, #250	@ 0xfa
 80050c2:	01db      	lsls	r3, r3, #7
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	e001      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050cc:	693b      	ldr	r3, [r7, #16]
}
 80050ce:	0018      	movs	r0, r3
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b006      	add	sp, #24
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	46c0      	nop			@ (mov r8, r8)
 80050d8:	40021000 	.word	0x40021000
 80050dc:	00f42400 	.word	0x00f42400
 80050e0:	007a1200 	.word	0x007a1200

080050e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050e8:	4b02      	ldr	r3, [pc, #8]	@ (80050f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80050ea:	681b      	ldr	r3, [r3, #0]
}
 80050ec:	0018      	movs	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	46c0      	nop			@ (mov r8, r8)
 80050f4:	20000008 	.word	0x20000008

080050f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050f8:	b5b0      	push	{r4, r5, r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80050fc:	f7ff fff2 	bl	80050e4 <HAL_RCC_GetHCLKFreq>
 8005100:	0004      	movs	r4, r0
 8005102:	f7ff fb3f 	bl	8004784 <LL_RCC_GetAPB1Prescaler>
 8005106:	0003      	movs	r3, r0
 8005108:	0b1a      	lsrs	r2, r3, #12
 800510a:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <HAL_RCC_GetPCLK1Freq+0x28>)
 800510c:	0092      	lsls	r2, r2, #2
 800510e:	58d3      	ldr	r3, [r2, r3]
 8005110:	221f      	movs	r2, #31
 8005112:	4013      	ands	r3, r2
 8005114:	40dc      	lsrs	r4, r3
 8005116:	0023      	movs	r3, r4
}
 8005118:	0018      	movs	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	bdb0      	pop	{r4, r5, r7, pc}
 800511e:	46c0      	nop			@ (mov r8, r8)
 8005120:	08006b58 	.word	0x08006b58

08005124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800512c:	2313      	movs	r3, #19
 800512e:	18fb      	adds	r3, r7, r3
 8005130:	2200      	movs	r2, #0
 8005132:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005134:	2312      	movs	r3, #18
 8005136:	18fb      	adds	r3, r7, r3
 8005138:	2200      	movs	r2, #0
 800513a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	2380      	movs	r3, #128	@ 0x80
 8005142:	029b      	lsls	r3, r3, #10
 8005144:	4013      	ands	r3, r2
 8005146:	d100      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005148:	e0a3      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800514a:	2011      	movs	r0, #17
 800514c:	183b      	adds	r3, r7, r0
 800514e:	2200      	movs	r2, #0
 8005150:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005152:	4bc3      	ldr	r3, [pc, #780]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005154:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005156:	2380      	movs	r3, #128	@ 0x80
 8005158:	055b      	lsls	r3, r3, #21
 800515a:	4013      	ands	r3, r2
 800515c:	d110      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800515e:	4bc0      	ldr	r3, [pc, #768]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005162:	4bbf      	ldr	r3, [pc, #764]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005164:	2180      	movs	r1, #128	@ 0x80
 8005166:	0549      	lsls	r1, r1, #21
 8005168:	430a      	orrs	r2, r1
 800516a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800516c:	4bbc      	ldr	r3, [pc, #752]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800516e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005170:	2380      	movs	r3, #128	@ 0x80
 8005172:	055b      	lsls	r3, r3, #21
 8005174:	4013      	ands	r3, r2
 8005176:	60bb      	str	r3, [r7, #8]
 8005178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800517a:	183b      	adds	r3, r7, r0
 800517c:	2201      	movs	r2, #1
 800517e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005180:	4bb8      	ldr	r3, [pc, #736]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4bb7      	ldr	r3, [pc, #732]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005186:	2180      	movs	r1, #128	@ 0x80
 8005188:	0049      	lsls	r1, r1, #1
 800518a:	430a      	orrs	r2, r1
 800518c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800518e:	f7fd fb71 	bl	8002874 <HAL_GetTick>
 8005192:	0003      	movs	r3, r0
 8005194:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005196:	e00b      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005198:	f7fd fb6c 	bl	8002874 <HAL_GetTick>
 800519c:	0002      	movs	r2, r0
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d904      	bls.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80051a6:	2313      	movs	r3, #19
 80051a8:	18fb      	adds	r3, r7, r3
 80051aa:	2203      	movs	r2, #3
 80051ac:	701a      	strb	r2, [r3, #0]
        break;
 80051ae:	e005      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051b0:	4bac      	ldr	r3, [pc, #688]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	2380      	movs	r3, #128	@ 0x80
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	4013      	ands	r3, r2
 80051ba:	d0ed      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80051bc:	2313      	movs	r3, #19
 80051be:	18fb      	adds	r3, r7, r3
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d154      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051c6:	4ba6      	ldr	r3, [pc, #664]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051ca:	23c0      	movs	r3, #192	@ 0xc0
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4013      	ands	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d019      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d014      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051e2:	4b9f      	ldr	r3, [pc, #636]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e6:	4aa0      	ldr	r2, [pc, #640]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051ec:	4b9c      	ldr	r3, [pc, #624]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051f0:	4b9b      	ldr	r3, [pc, #620]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051f2:	2180      	movs	r1, #128	@ 0x80
 80051f4:	0249      	lsls	r1, r1, #9
 80051f6:	430a      	orrs	r2, r1
 80051f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051fa:	4b99      	ldr	r3, [pc, #612]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051fe:	4b98      	ldr	r3, [pc, #608]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005200:	499a      	ldr	r1, [pc, #616]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005202:	400a      	ands	r2, r1
 8005204:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005206:	4b96      	ldr	r3, [pc, #600]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2201      	movs	r2, #1
 8005210:	4013      	ands	r3, r2
 8005212:	d016      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005214:	f7fd fb2e 	bl	8002874 <HAL_GetTick>
 8005218:	0003      	movs	r3, r0
 800521a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800521c:	e00c      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800521e:	f7fd fb29 	bl	8002874 <HAL_GetTick>
 8005222:	0002      	movs	r2, r0
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	4a91      	ldr	r2, [pc, #580]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d904      	bls.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800522e:	2313      	movs	r3, #19
 8005230:	18fb      	adds	r3, r7, r3
 8005232:	2203      	movs	r2, #3
 8005234:	701a      	strb	r2, [r3, #0]
            break;
 8005236:	e004      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005238:	4b89      	ldr	r3, [pc, #548]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800523a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800523c:	2202      	movs	r2, #2
 800523e:	4013      	ands	r3, r2
 8005240:	d0ed      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005242:	2313      	movs	r3, #19
 8005244:	18fb      	adds	r3, r7, r3
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800524c:	4b84      	ldr	r3, [pc, #528]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800524e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005250:	4a85      	ldr	r2, [pc, #532]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005252:	4013      	ands	r3, r2
 8005254:	0019      	movs	r1, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800525a:	4b81      	ldr	r3, [pc, #516]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800525c:	430a      	orrs	r2, r1
 800525e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005260:	e00c      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005262:	2312      	movs	r3, #18
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	2213      	movs	r2, #19
 8005268:	18ba      	adds	r2, r7, r2
 800526a:	7812      	ldrb	r2, [r2, #0]
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e005      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005270:	2312      	movs	r3, #18
 8005272:	18fb      	adds	r3, r7, r3
 8005274:	2213      	movs	r2, #19
 8005276:	18ba      	adds	r2, r7, r2
 8005278:	7812      	ldrb	r2, [r2, #0]
 800527a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800527c:	2311      	movs	r3, #17
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d105      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005286:	4b76      	ldr	r3, [pc, #472]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005288:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800528a:	4b75      	ldr	r3, [pc, #468]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800528c:	4979      	ldr	r1, [pc, #484]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800528e:	400a      	ands	r2, r1
 8005290:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2201      	movs	r2, #1
 8005298:	4013      	ands	r3, r2
 800529a:	d009      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800529c:	4b70      	ldr	r3, [pc, #448]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800529e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a0:	2203      	movs	r2, #3
 80052a2:	4393      	bics	r3, r2
 80052a4:	0019      	movs	r1, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052ac:	430a      	orrs	r2, r1
 80052ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2202      	movs	r2, #2
 80052b6:	4013      	ands	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052ba:	4b69      	ldr	r3, [pc, #420]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052be:	220c      	movs	r2, #12
 80052c0:	4393      	bics	r3, r2
 80052c2:	0019      	movs	r1, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	4b65      	ldr	r3, [pc, #404]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052ca:	430a      	orrs	r2, r1
 80052cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2210      	movs	r2, #16
 80052d4:	4013      	ands	r3, r2
 80052d6:	d009      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052d8:	4b61      	ldr	r3, [pc, #388]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052dc:	4a66      	ldr	r2, [pc, #408]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80052de:	4013      	ands	r3, r2
 80052e0:	0019      	movs	r1, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	4b5e      	ldr	r3, [pc, #376]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052e8:	430a      	orrs	r2, r1
 80052ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	2380      	movs	r3, #128	@ 0x80
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4013      	ands	r3, r2
 80052f6:	d009      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052f8:	4b59      	ldr	r3, [pc, #356]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052fc:	4a5f      	ldr	r2, [pc, #380]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80052fe:	4013      	ands	r3, r2
 8005300:	0019      	movs	r1, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	4b56      	ldr	r3, [pc, #344]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005308:	430a      	orrs	r2, r1
 800530a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	2380      	movs	r3, #128	@ 0x80
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4013      	ands	r3, r2
 8005316:	d009      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005318:	4b51      	ldr	r3, [pc, #324]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800531a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800531c:	4a58      	ldr	r2, [pc, #352]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800531e:	4013      	ands	r3, r2
 8005320:	0019      	movs	r1, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69da      	ldr	r2, [r3, #28]
 8005326:	4b4e      	ldr	r3, [pc, #312]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005328:	430a      	orrs	r2, r1
 800532a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2220      	movs	r2, #32
 8005332:	4013      	ands	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005336:	4b4a      	ldr	r3, [pc, #296]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533a:	4a52      	ldr	r2, [pc, #328]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800533c:	4013      	ands	r3, r2
 800533e:	0019      	movs	r1, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	4b46      	ldr	r3, [pc, #280]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005346:	430a      	orrs	r2, r1
 8005348:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	2380      	movs	r3, #128	@ 0x80
 8005350:	01db      	lsls	r3, r3, #7
 8005352:	4013      	ands	r3, r2
 8005354:	d015      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005356:	4b42      	ldr	r3, [pc, #264]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	0899      	lsrs	r1, r3, #2
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1a      	ldr	r2, [r3, #32]
 8005362:	4b3f      	ldr	r3, [pc, #252]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005364:	430a      	orrs	r2, r1
 8005366:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1a      	ldr	r2, [r3, #32]
 800536c:	2380      	movs	r3, #128	@ 0x80
 800536e:	05db      	lsls	r3, r3, #23
 8005370:	429a      	cmp	r2, r3
 8005372:	d106      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005374:	4b3a      	ldr	r3, [pc, #232]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	4b39      	ldr	r3, [pc, #228]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800537a:	2180      	movs	r1, #128	@ 0x80
 800537c:	0249      	lsls	r1, r1, #9
 800537e:	430a      	orrs	r2, r1
 8005380:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	2380      	movs	r3, #128	@ 0x80
 8005388:	031b      	lsls	r3, r3, #12
 800538a:	4013      	ands	r3, r2
 800538c:	d009      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800538e:	4b34      	ldr	r3, [pc, #208]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005392:	2240      	movs	r2, #64	@ 0x40
 8005394:	4393      	bics	r3, r2
 8005396:	0019      	movs	r1, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800539c:	4b30      	ldr	r3, [pc, #192]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800539e:	430a      	orrs	r2, r1
 80053a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	2380      	movs	r3, #128	@ 0x80
 80053a8:	039b      	lsls	r3, r3, #14
 80053aa:	4013      	ands	r3, r2
 80053ac:	d016      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80053ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b2:	4a35      	ldr	r2, [pc, #212]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	0019      	movs	r1, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053bc:	4b28      	ldr	r3, [pc, #160]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053be:	430a      	orrs	r2, r1
 80053c0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053c6:	2380      	movs	r3, #128	@ 0x80
 80053c8:	03db      	lsls	r3, r3, #15
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d106      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80053ce:	4b24      	ldr	r3, [pc, #144]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	4b23      	ldr	r3, [pc, #140]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053d4:	2180      	movs	r1, #128	@ 0x80
 80053d6:	0449      	lsls	r1, r1, #17
 80053d8:	430a      	orrs	r2, r1
 80053da:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	2380      	movs	r3, #128	@ 0x80
 80053e2:	03db      	lsls	r3, r3, #15
 80053e4:	4013      	ands	r3, r2
 80053e6:	d016      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80053e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ec:	4a27      	ldr	r2, [pc, #156]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	0019      	movs	r1, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053f8:	430a      	orrs	r2, r1
 80053fa:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005400:	2380      	movs	r3, #128	@ 0x80
 8005402:	045b      	lsls	r3, r3, #17
 8005404:	429a      	cmp	r2, r3
 8005406:	d106      	bne.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005408:	4b15      	ldr	r3, [pc, #84]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	4b14      	ldr	r3, [pc, #80]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800540e:	2180      	movs	r1, #128	@ 0x80
 8005410:	0449      	lsls	r1, r1, #17
 8005412:	430a      	orrs	r2, r1
 8005414:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	2380      	movs	r3, #128	@ 0x80
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	4013      	ands	r3, r2
 8005420:	d016      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005422:	4b0f      	ldr	r3, [pc, #60]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005426:	4a1a      	ldr	r2, [pc, #104]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005428:	4013      	ands	r3, r2
 800542a:	0019      	movs	r1, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	695a      	ldr	r2, [r3, #20]
 8005430:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005432:	430a      	orrs	r2, r1
 8005434:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695a      	ldr	r2, [r3, #20]
 800543a:	2380      	movs	r3, #128	@ 0x80
 800543c:	01db      	lsls	r3, r3, #7
 800543e:	429a      	cmp	r2, r3
 8005440:	d106      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005442:	4b07      	ldr	r3, [pc, #28]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	4b06      	ldr	r3, [pc, #24]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005448:	2180      	movs	r1, #128	@ 0x80
 800544a:	0249      	lsls	r1, r1, #9
 800544c:	430a      	orrs	r2, r1
 800544e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005450:	2312      	movs	r3, #18
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	781b      	ldrb	r3, [r3, #0]
}
 8005456:	0018      	movs	r0, r3
 8005458:	46bd      	mov	sp, r7
 800545a:	b006      	add	sp, #24
 800545c:	bd80      	pop	{r7, pc}
 800545e:	46c0      	nop			@ (mov r8, r8)
 8005460:	40021000 	.word	0x40021000
 8005464:	40007000 	.word	0x40007000
 8005468:	fffffcff 	.word	0xfffffcff
 800546c:	fffeffff 	.word	0xfffeffff
 8005470:	00001388 	.word	0x00001388
 8005474:	efffffff 	.word	0xefffffff
 8005478:	fffff3ff 	.word	0xfffff3ff
 800547c:	fff3ffff 	.word	0xfff3ffff
 8005480:	ffcfffff 	.word	0xffcfffff
 8005484:	ffffcfff 	.word	0xffffcfff
 8005488:	ffbfffff 	.word	0xffbfffff
 800548c:	feffffff 	.word	0xfeffffff
 8005490:	ffff3fff 	.word	0xffff3fff

08005494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e04a      	b.n	800553c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	223d      	movs	r2, #61	@ 0x3d
 80054aa:	5c9b      	ldrb	r3, [r3, r2]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d107      	bne.n	80054c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	223c      	movs	r2, #60	@ 0x3c
 80054b6:	2100      	movs	r1, #0
 80054b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	0018      	movs	r0, r3
 80054be:	f7fd f835 	bl	800252c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	223d      	movs	r2, #61	@ 0x3d
 80054c6:	2102      	movs	r1, #2
 80054c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3304      	adds	r3, #4
 80054d2:	0019      	movs	r1, r3
 80054d4:	0010      	movs	r0, r2
 80054d6:	f000 f9e7 	bl	80058a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2248      	movs	r2, #72	@ 0x48
 80054de:	2101      	movs	r1, #1
 80054e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	223e      	movs	r2, #62	@ 0x3e
 80054e6:	2101      	movs	r1, #1
 80054e8:	5499      	strb	r1, [r3, r2]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	223f      	movs	r2, #63	@ 0x3f
 80054ee:	2101      	movs	r1, #1
 80054f0:	5499      	strb	r1, [r3, r2]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2240      	movs	r2, #64	@ 0x40
 80054f6:	2101      	movs	r1, #1
 80054f8:	5499      	strb	r1, [r3, r2]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2241      	movs	r2, #65	@ 0x41
 80054fe:	2101      	movs	r1, #1
 8005500:	5499      	strb	r1, [r3, r2]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2242      	movs	r2, #66	@ 0x42
 8005506:	2101      	movs	r1, #1
 8005508:	5499      	strb	r1, [r3, r2]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2243      	movs	r2, #67	@ 0x43
 800550e:	2101      	movs	r1, #1
 8005510:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2244      	movs	r2, #68	@ 0x44
 8005516:	2101      	movs	r1, #1
 8005518:	5499      	strb	r1, [r3, r2]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2245      	movs	r2, #69	@ 0x45
 800551e:	2101      	movs	r1, #1
 8005520:	5499      	strb	r1, [r3, r2]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2246      	movs	r2, #70	@ 0x46
 8005526:	2101      	movs	r1, #1
 8005528:	5499      	strb	r1, [r3, r2]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2247      	movs	r2, #71	@ 0x47
 800552e:	2101      	movs	r1, #1
 8005530:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	223d      	movs	r2, #61	@ 0x3d
 8005536:	2101      	movs	r1, #1
 8005538:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	0018      	movs	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	b002      	add	sp, #8
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	223d      	movs	r2, #61	@ 0x3d
 8005550:	5c9b      	ldrb	r3, [r3, r2]
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b01      	cmp	r3, #1
 8005556:	d001      	beq.n	800555c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e042      	b.n	80055e2 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	223d      	movs	r2, #61	@ 0x3d
 8005560:	2102      	movs	r1, #2
 8005562:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2101      	movs	r1, #1
 8005570:	430a      	orrs	r2, r1
 8005572:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a1c      	ldr	r2, [pc, #112]	@ (80055ec <HAL_TIM_Base_Start_IT+0xa8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00f      	beq.n	800559e <HAL_TIM_Base_Start_IT+0x5a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	2380      	movs	r3, #128	@ 0x80
 8005584:	05db      	lsls	r3, r3, #23
 8005586:	429a      	cmp	r2, r3
 8005588:	d009      	beq.n	800559e <HAL_TIM_Base_Start_IT+0x5a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a18      	ldr	r2, [pc, #96]	@ (80055f0 <HAL_TIM_Base_Start_IT+0xac>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d004      	beq.n	800559e <HAL_TIM_Base_Start_IT+0x5a>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a16      	ldr	r2, [pc, #88]	@ (80055f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d116      	bne.n	80055cc <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	4a14      	ldr	r2, [pc, #80]	@ (80055f8 <HAL_TIM_Base_Start_IT+0xb4>)
 80055a6:	4013      	ands	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b06      	cmp	r3, #6
 80055ae:	d016      	beq.n	80055de <HAL_TIM_Base_Start_IT+0x9a>
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	2380      	movs	r3, #128	@ 0x80
 80055b4:	025b      	lsls	r3, r3, #9
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d011      	beq.n	80055de <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2101      	movs	r1, #1
 80055c6:	430a      	orrs	r2, r1
 80055c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ca:	e008      	b.n	80055de <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2101      	movs	r1, #1
 80055d8:	430a      	orrs	r2, r1
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	e000      	b.n	80055e0 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055de:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	0018      	movs	r0, r3
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b004      	add	sp, #16
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			@ (mov r8, r8)
 80055ec:	40012c00 	.word	0x40012c00
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40014000 	.word	0x40014000
 80055f8:	00010007 	.word	0x00010007

080055fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2101      	movs	r1, #1
 8005610:	438a      	bics	r2, r1
 8005612:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	4a0d      	ldr	r2, [pc, #52]	@ (8005650 <HAL_TIM_Base_Stop_IT+0x54>)
 800561c:	4013      	ands	r3, r2
 800561e:	d10d      	bne.n	800563c <HAL_TIM_Base_Stop_IT+0x40>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	4a0b      	ldr	r2, [pc, #44]	@ (8005654 <HAL_TIM_Base_Stop_IT+0x58>)
 8005628:	4013      	ands	r3, r2
 800562a:	d107      	bne.n	800563c <HAL_TIM_Base_Stop_IT+0x40>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2101      	movs	r1, #1
 8005638:	438a      	bics	r2, r1
 800563a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	223d      	movs	r2, #61	@ 0x3d
 8005640:	2101      	movs	r1, #1
 8005642:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	0018      	movs	r0, r3
 8005648:	46bd      	mov	sp, r7
 800564a:	b002      	add	sp, #8
 800564c:	bd80      	pop	{r7, pc}
 800564e:	46c0      	nop			@ (mov r8, r8)
 8005650:	00001111 	.word	0x00001111
 8005654:	00000444 	.word	0x00000444

08005658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2202      	movs	r2, #2
 8005674:	4013      	ands	r3, r2
 8005676:	d021      	beq.n	80056bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2202      	movs	r2, #2
 800567c:	4013      	ands	r3, r2
 800567e:	d01d      	beq.n	80056bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2203      	movs	r2, #3
 8005686:	4252      	negs	r2, r2
 8005688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2203      	movs	r2, #3
 8005698:	4013      	ands	r3, r2
 800569a:	d004      	beq.n	80056a6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	0018      	movs	r0, r3
 80056a0:	f000 f8ea 	bl	8005878 <HAL_TIM_IC_CaptureCallback>
 80056a4:	e007      	b.n	80056b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	0018      	movs	r0, r3
 80056aa:	f000 f8dd 	bl	8005868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	0018      	movs	r0, r3
 80056b2:	f000 f8e9 	bl	8005888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2204      	movs	r2, #4
 80056c0:	4013      	ands	r3, r2
 80056c2:	d022      	beq.n	800570a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2204      	movs	r2, #4
 80056c8:	4013      	ands	r3, r2
 80056ca:	d01e      	beq.n	800570a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2205      	movs	r2, #5
 80056d2:	4252      	negs	r2, r2
 80056d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699a      	ldr	r2, [r3, #24]
 80056e2:	23c0      	movs	r3, #192	@ 0xc0
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4013      	ands	r3, r2
 80056e8:	d004      	beq.n	80056f4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	0018      	movs	r0, r3
 80056ee:	f000 f8c3 	bl	8005878 <HAL_TIM_IC_CaptureCallback>
 80056f2:	e007      	b.n	8005704 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	0018      	movs	r0, r3
 80056f8:	f000 f8b6 	bl	8005868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	0018      	movs	r0, r3
 8005700:	f000 f8c2 	bl	8005888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2208      	movs	r2, #8
 800570e:	4013      	ands	r3, r2
 8005710:	d021      	beq.n	8005756 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2208      	movs	r2, #8
 8005716:	4013      	ands	r3, r2
 8005718:	d01d      	beq.n	8005756 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2209      	movs	r2, #9
 8005720:	4252      	negs	r2, r2
 8005722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2204      	movs	r2, #4
 8005728:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	2203      	movs	r2, #3
 8005732:	4013      	ands	r3, r2
 8005734:	d004      	beq.n	8005740 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	0018      	movs	r0, r3
 800573a:	f000 f89d 	bl	8005878 <HAL_TIM_IC_CaptureCallback>
 800573e:	e007      	b.n	8005750 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	0018      	movs	r0, r3
 8005744:	f000 f890 	bl	8005868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	0018      	movs	r0, r3
 800574c:	f000 f89c 	bl	8005888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2210      	movs	r2, #16
 800575a:	4013      	ands	r3, r2
 800575c:	d022      	beq.n	80057a4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2210      	movs	r2, #16
 8005762:	4013      	ands	r3, r2
 8005764:	d01e      	beq.n	80057a4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2211      	movs	r2, #17
 800576c:	4252      	negs	r2, r2
 800576e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2208      	movs	r2, #8
 8005774:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69da      	ldr	r2, [r3, #28]
 800577c:	23c0      	movs	r3, #192	@ 0xc0
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4013      	ands	r3, r2
 8005782:	d004      	beq.n	800578e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	0018      	movs	r0, r3
 8005788:	f000 f876 	bl	8005878 <HAL_TIM_IC_CaptureCallback>
 800578c:	e007      	b.n	800579e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	0018      	movs	r0, r3
 8005792:	f000 f869 	bl	8005868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	0018      	movs	r0, r3
 800579a:	f000 f875 	bl	8005888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2201      	movs	r2, #1
 80057a8:	4013      	ands	r3, r2
 80057aa:	d00c      	beq.n	80057c6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	4013      	ands	r3, r2
 80057b2:	d008      	beq.n	80057c6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2202      	movs	r2, #2
 80057ba:	4252      	negs	r2, r2
 80057bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	0018      	movs	r0, r3
 80057c2:	f7fc fc25 	bl	8002010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2280      	movs	r2, #128	@ 0x80
 80057ca:	4013      	ands	r3, r2
 80057cc:	d104      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	2380      	movs	r3, #128	@ 0x80
 80057d2:	019b      	lsls	r3, r3, #6
 80057d4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057d6:	d00b      	beq.n	80057f0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2280      	movs	r2, #128	@ 0x80
 80057dc:	4013      	ands	r3, r2
 80057de:	d007      	beq.n	80057f0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005860 <HAL_TIM_IRQHandler+0x208>)
 80057e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	0018      	movs	r0, r3
 80057ec:	f000 f8f2 	bl	80059d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	2380      	movs	r3, #128	@ 0x80
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	4013      	ands	r3, r2
 80057f8:	d00b      	beq.n	8005812 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2280      	movs	r2, #128	@ 0x80
 80057fe:	4013      	ands	r3, r2
 8005800:	d007      	beq.n	8005812 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a17      	ldr	r2, [pc, #92]	@ (8005864 <HAL_TIM_IRQHandler+0x20c>)
 8005808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	0018      	movs	r0, r3
 800580e:	f000 f8e9 	bl	80059e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2240      	movs	r2, #64	@ 0x40
 8005816:	4013      	ands	r3, r2
 8005818:	d00c      	beq.n	8005834 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2240      	movs	r2, #64	@ 0x40
 800581e:	4013      	ands	r3, r2
 8005820:	d008      	beq.n	8005834 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2241      	movs	r2, #65	@ 0x41
 8005828:	4252      	negs	r2, r2
 800582a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	0018      	movs	r0, r3
 8005830:	f000 f832 	bl	8005898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2220      	movs	r2, #32
 8005838:	4013      	ands	r3, r2
 800583a:	d00c      	beq.n	8005856 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2220      	movs	r2, #32
 8005840:	4013      	ands	r3, r2
 8005842:	d008      	beq.n	8005856 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2221      	movs	r2, #33	@ 0x21
 800584a:	4252      	negs	r2, r2
 800584c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	0018      	movs	r0, r3
 8005852:	f000 f8b7 	bl	80059c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005856:	46c0      	nop			@ (mov r8, r8)
 8005858:	46bd      	mov	sp, r7
 800585a:	b004      	add	sp, #16
 800585c:	bd80      	pop	{r7, pc}
 800585e:	46c0      	nop			@ (mov r8, r8)
 8005860:	ffffdf7f 	.word	0xffffdf7f
 8005864:	fffffeff 	.word	0xfffffeff

08005868 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005870:	46c0      	nop			@ (mov r8, r8)
 8005872:	46bd      	mov	sp, r7
 8005874:	b002      	add	sp, #8
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005880:	46c0      	nop			@ (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	b002      	add	sp, #8
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005890:	46c0      	nop			@ (mov r8, r8)
 8005892:	46bd      	mov	sp, r7
 8005894:	b002      	add	sp, #8
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058a0:	46c0      	nop			@ (mov r8, r8)
 80058a2:	46bd      	mov	sp, r7
 80058a4:	b002      	add	sp, #8
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a3b      	ldr	r2, [pc, #236]	@ (80059a8 <TIM_Base_SetConfig+0x100>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d008      	beq.n	80058d2 <TIM_Base_SetConfig+0x2a>
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	2380      	movs	r3, #128	@ 0x80
 80058c4:	05db      	lsls	r3, r3, #23
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d003      	beq.n	80058d2 <TIM_Base_SetConfig+0x2a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a37      	ldr	r2, [pc, #220]	@ (80059ac <TIM_Base_SetConfig+0x104>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2270      	movs	r2, #112	@ 0x70
 80058d6:	4393      	bics	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a30      	ldr	r2, [pc, #192]	@ (80059a8 <TIM_Base_SetConfig+0x100>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d018      	beq.n	800591e <TIM_Base_SetConfig+0x76>
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	2380      	movs	r3, #128	@ 0x80
 80058f0:	05db      	lsls	r3, r3, #23
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d013      	beq.n	800591e <TIM_Base_SetConfig+0x76>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2c      	ldr	r2, [pc, #176]	@ (80059ac <TIM_Base_SetConfig+0x104>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00f      	beq.n	800591e <TIM_Base_SetConfig+0x76>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2b      	ldr	r2, [pc, #172]	@ (80059b0 <TIM_Base_SetConfig+0x108>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00b      	beq.n	800591e <TIM_Base_SetConfig+0x76>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a2a      	ldr	r2, [pc, #168]	@ (80059b4 <TIM_Base_SetConfig+0x10c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d007      	beq.n	800591e <TIM_Base_SetConfig+0x76>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a29      	ldr	r2, [pc, #164]	@ (80059b8 <TIM_Base_SetConfig+0x110>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_Base_SetConfig+0x76>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a28      	ldr	r2, [pc, #160]	@ (80059bc <TIM_Base_SetConfig+0x114>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d108      	bne.n	8005930 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4a27      	ldr	r2, [pc, #156]	@ (80059c0 <TIM_Base_SetConfig+0x118>)
 8005922:	4013      	ands	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2280      	movs	r2, #128	@ 0x80
 8005934:	4393      	bics	r3, r2
 8005936:	001a      	movs	r2, r3
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a13      	ldr	r2, [pc, #76]	@ (80059a8 <TIM_Base_SetConfig+0x100>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00b      	beq.n	8005976 <TIM_Base_SetConfig+0xce>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a14      	ldr	r2, [pc, #80]	@ (80059b4 <TIM_Base_SetConfig+0x10c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d007      	beq.n	8005976 <TIM_Base_SetConfig+0xce>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a13      	ldr	r2, [pc, #76]	@ (80059b8 <TIM_Base_SetConfig+0x110>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d003      	beq.n	8005976 <TIM_Base_SetConfig+0xce>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a12      	ldr	r2, [pc, #72]	@ (80059bc <TIM_Base_SetConfig+0x114>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d103      	bne.n	800597e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2201      	movs	r2, #1
 800598a:	4013      	ands	r3, r2
 800598c:	2b01      	cmp	r3, #1
 800598e:	d106      	bne.n	800599e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	2201      	movs	r2, #1
 8005996:	4393      	bics	r3, r2
 8005998:	001a      	movs	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	611a      	str	r2, [r3, #16]
  }
}
 800599e:	46c0      	nop			@ (mov r8, r8)
 80059a0:	46bd      	mov	sp, r7
 80059a2:	b004      	add	sp, #16
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	46c0      	nop			@ (mov r8, r8)
 80059a8:	40012c00 	.word	0x40012c00
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40002000 	.word	0x40002000
 80059b4:	40014000 	.word	0x40014000
 80059b8:	40014400 	.word	0x40014400
 80059bc:	40014800 	.word	0x40014800
 80059c0:	fffffcff 	.word	0xfffffcff

080059c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059cc:	46c0      	nop			@ (mov r8, r8)
 80059ce:	46bd      	mov	sp, r7
 80059d0:	b002      	add	sp, #8
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059dc:	46c0      	nop			@ (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	b002      	add	sp, #8
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059ec:	46c0      	nop			@ (mov r8, r8)
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b002      	add	sp, #8
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e046      	b.n	8005a94 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2288      	movs	r2, #136	@ 0x88
 8005a0a:	589b      	ldr	r3, [r3, r2]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d107      	bne.n	8005a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2284      	movs	r2, #132	@ 0x84
 8005a14:	2100      	movs	r1, #0
 8005a16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	f7fc fdcc 	bl	80025b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2288      	movs	r2, #136	@ 0x88
 8005a24:	2124      	movs	r1, #36	@ 0x24
 8005a26:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2101      	movs	r1, #1
 8005a34:	438a      	bics	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	0018      	movs	r0, r3
 8005a44:	f000 faea 	bl	800601c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	f000 f828 	bl	8005aa0 <UART_SetConfig>
 8005a50:	0003      	movs	r3, r0
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e01c      	b.n	8005a94 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	490d      	ldr	r1, [pc, #52]	@ (8005a9c <HAL_UART_Init+0xa8>)
 8005a66:	400a      	ands	r2, r1
 8005a68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	212a      	movs	r1, #42	@ 0x2a
 8005a76:	438a      	bics	r2, r1
 8005a78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2101      	movs	r1, #1
 8005a86:	430a      	orrs	r2, r1
 8005a88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f000 fb79 	bl	8006184 <UART_CheckIdleState>
 8005a92:	0003      	movs	r3, r0
}
 8005a94:	0018      	movs	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	b002      	add	sp, #8
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	ffffb7ff 	.word	0xffffb7ff

08005aa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa0:	b5b0      	push	{r4, r5, r7, lr}
 8005aa2:	b090      	sub	sp, #64	@ 0x40
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005aa8:	231a      	movs	r3, #26
 8005aaa:	2220      	movs	r2, #32
 8005aac:	189b      	adds	r3, r3, r2
 8005aae:	19db      	adds	r3, r3, r7
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	431a      	orrs	r2, r3
 8005abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4aaf      	ldr	r2, [pc, #700]	@ (8005d90 <UART_SetConfig+0x2f0>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	0019      	movs	r1, r3
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	4aaa      	ldr	r2, [pc, #680]	@ (8005d94 <UART_SetConfig+0x2f4>)
 8005aea:	4013      	ands	r3, r2
 8005aec:	0018      	movs	r0, r3
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	68d9      	ldr	r1, [r3, #12]
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	0003      	movs	r3, r0
 8005af8:	430b      	orrs	r3, r1
 8005afa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4aa4      	ldr	r2, [pc, #656]	@ (8005d98 <UART_SetConfig+0x2f8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d004      	beq.n	8005b16 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005b12:	4313      	orrs	r3, r2
 8005b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	4a9f      	ldr	r2, [pc, #636]	@ (8005d9c <UART_SetConfig+0x2fc>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	0019      	movs	r1, r3
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b28:	430b      	orrs	r3, r1
 8005b2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b32:	220f      	movs	r2, #15
 8005b34:	4393      	bics	r3, r2
 8005b36:	0018      	movs	r0, r3
 8005b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	0003      	movs	r3, r0
 8005b42:	430b      	orrs	r3, r1
 8005b44:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a95      	ldr	r2, [pc, #596]	@ (8005da0 <UART_SetConfig+0x300>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d131      	bne.n	8005bb4 <UART_SetConfig+0x114>
 8005b50:	4b94      	ldr	r3, [pc, #592]	@ (8005da4 <UART_SetConfig+0x304>)
 8005b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b54:	2203      	movs	r2, #3
 8005b56:	4013      	ands	r3, r2
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	d01d      	beq.n	8005b98 <UART_SetConfig+0xf8>
 8005b5c:	d823      	bhi.n	8005ba6 <UART_SetConfig+0x106>
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d00c      	beq.n	8005b7c <UART_SetConfig+0xdc>
 8005b62:	d820      	bhi.n	8005ba6 <UART_SetConfig+0x106>
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <UART_SetConfig+0xce>
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d00e      	beq.n	8005b8a <UART_SetConfig+0xea>
 8005b6c:	e01b      	b.n	8005ba6 <UART_SetConfig+0x106>
 8005b6e:	231b      	movs	r3, #27
 8005b70:	2220      	movs	r2, #32
 8005b72:	189b      	adds	r3, r3, r2
 8005b74:	19db      	adds	r3, r3, r7
 8005b76:	2200      	movs	r2, #0
 8005b78:	701a      	strb	r2, [r3, #0]
 8005b7a:	e0b4      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005b7c:	231b      	movs	r3, #27
 8005b7e:	2220      	movs	r2, #32
 8005b80:	189b      	adds	r3, r3, r2
 8005b82:	19db      	adds	r3, r3, r7
 8005b84:	2202      	movs	r2, #2
 8005b86:	701a      	strb	r2, [r3, #0]
 8005b88:	e0ad      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005b8a:	231b      	movs	r3, #27
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	189b      	adds	r3, r3, r2
 8005b90:	19db      	adds	r3, r3, r7
 8005b92:	2204      	movs	r2, #4
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e0a6      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005b98:	231b      	movs	r3, #27
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	189b      	adds	r3, r3, r2
 8005b9e:	19db      	adds	r3, r3, r7
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	701a      	strb	r2, [r3, #0]
 8005ba4:	e09f      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005ba6:	231b      	movs	r3, #27
 8005ba8:	2220      	movs	r2, #32
 8005baa:	189b      	adds	r3, r3, r2
 8005bac:	19db      	adds	r3, r3, r7
 8005bae:	2210      	movs	r2, #16
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	e098      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a7b      	ldr	r2, [pc, #492]	@ (8005da8 <UART_SetConfig+0x308>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d131      	bne.n	8005c22 <UART_SetConfig+0x182>
 8005bbe:	4b79      	ldr	r3, [pc, #484]	@ (8005da4 <UART_SetConfig+0x304>)
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc2:	220c      	movs	r2, #12
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	2b0c      	cmp	r3, #12
 8005bc8:	d01d      	beq.n	8005c06 <UART_SetConfig+0x166>
 8005bca:	d823      	bhi.n	8005c14 <UART_SetConfig+0x174>
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d00c      	beq.n	8005bea <UART_SetConfig+0x14a>
 8005bd0:	d820      	bhi.n	8005c14 <UART_SetConfig+0x174>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <UART_SetConfig+0x13c>
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d00e      	beq.n	8005bf8 <UART_SetConfig+0x158>
 8005bda:	e01b      	b.n	8005c14 <UART_SetConfig+0x174>
 8005bdc:	231b      	movs	r3, #27
 8005bde:	2220      	movs	r2, #32
 8005be0:	189b      	adds	r3, r3, r2
 8005be2:	19db      	adds	r3, r3, r7
 8005be4:	2200      	movs	r2, #0
 8005be6:	701a      	strb	r2, [r3, #0]
 8005be8:	e07d      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005bea:	231b      	movs	r3, #27
 8005bec:	2220      	movs	r2, #32
 8005bee:	189b      	adds	r3, r3, r2
 8005bf0:	19db      	adds	r3, r3, r7
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	701a      	strb	r2, [r3, #0]
 8005bf6:	e076      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005bf8:	231b      	movs	r3, #27
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	189b      	adds	r3, r3, r2
 8005bfe:	19db      	adds	r3, r3, r7
 8005c00:	2204      	movs	r2, #4
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	e06f      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005c06:	231b      	movs	r3, #27
 8005c08:	2220      	movs	r2, #32
 8005c0a:	189b      	adds	r3, r3, r2
 8005c0c:	19db      	adds	r3, r3, r7
 8005c0e:	2208      	movs	r2, #8
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	e068      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005c14:	231b      	movs	r3, #27
 8005c16:	2220      	movs	r2, #32
 8005c18:	189b      	adds	r3, r3, r2
 8005c1a:	19db      	adds	r3, r3, r7
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	e061      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a61      	ldr	r2, [pc, #388]	@ (8005dac <UART_SetConfig+0x30c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d106      	bne.n	8005c3a <UART_SetConfig+0x19a>
 8005c2c:	231b      	movs	r3, #27
 8005c2e:	2220      	movs	r2, #32
 8005c30:	189b      	adds	r3, r3, r2
 8005c32:	19db      	adds	r3, r3, r7
 8005c34:	2200      	movs	r2, #0
 8005c36:	701a      	strb	r2, [r3, #0]
 8005c38:	e055      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a5c      	ldr	r2, [pc, #368]	@ (8005db0 <UART_SetConfig+0x310>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d106      	bne.n	8005c52 <UART_SetConfig+0x1b2>
 8005c44:	231b      	movs	r3, #27
 8005c46:	2220      	movs	r2, #32
 8005c48:	189b      	adds	r3, r3, r2
 8005c4a:	19db      	adds	r3, r3, r7
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	e049      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a50      	ldr	r2, [pc, #320]	@ (8005d98 <UART_SetConfig+0x2f8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d13e      	bne.n	8005cda <UART_SetConfig+0x23a>
 8005c5c:	4b51      	ldr	r3, [pc, #324]	@ (8005da4 <UART_SetConfig+0x304>)
 8005c5e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c60:	23c0      	movs	r3, #192	@ 0xc0
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	4013      	ands	r3, r2
 8005c66:	22c0      	movs	r2, #192	@ 0xc0
 8005c68:	0112      	lsls	r2, r2, #4
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d027      	beq.n	8005cbe <UART_SetConfig+0x21e>
 8005c6e:	22c0      	movs	r2, #192	@ 0xc0
 8005c70:	0112      	lsls	r2, r2, #4
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d82a      	bhi.n	8005ccc <UART_SetConfig+0x22c>
 8005c76:	2280      	movs	r2, #128	@ 0x80
 8005c78:	0112      	lsls	r2, r2, #4
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d011      	beq.n	8005ca2 <UART_SetConfig+0x202>
 8005c7e:	2280      	movs	r2, #128	@ 0x80
 8005c80:	0112      	lsls	r2, r2, #4
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d822      	bhi.n	8005ccc <UART_SetConfig+0x22c>
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <UART_SetConfig+0x1f4>
 8005c8a:	2280      	movs	r2, #128	@ 0x80
 8005c8c:	00d2      	lsls	r2, r2, #3
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00e      	beq.n	8005cb0 <UART_SetConfig+0x210>
 8005c92:	e01b      	b.n	8005ccc <UART_SetConfig+0x22c>
 8005c94:	231b      	movs	r3, #27
 8005c96:	2220      	movs	r2, #32
 8005c98:	189b      	adds	r3, r3, r2
 8005c9a:	19db      	adds	r3, r3, r7
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	701a      	strb	r2, [r3, #0]
 8005ca0:	e021      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005ca2:	231b      	movs	r3, #27
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	189b      	adds	r3, r3, r2
 8005ca8:	19db      	adds	r3, r3, r7
 8005caa:	2202      	movs	r2, #2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	e01a      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005cb0:	231b      	movs	r3, #27
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	189b      	adds	r3, r3, r2
 8005cb6:	19db      	adds	r3, r3, r7
 8005cb8:	2204      	movs	r2, #4
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	e013      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005cbe:	231b      	movs	r3, #27
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	189b      	adds	r3, r3, r2
 8005cc4:	19db      	adds	r3, r3, r7
 8005cc6:	2208      	movs	r2, #8
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	e00c      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005ccc:	231b      	movs	r3, #27
 8005cce:	2220      	movs	r2, #32
 8005cd0:	189b      	adds	r3, r3, r2
 8005cd2:	19db      	adds	r3, r3, r7
 8005cd4:	2210      	movs	r2, #16
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	e005      	b.n	8005ce6 <UART_SetConfig+0x246>
 8005cda:	231b      	movs	r3, #27
 8005cdc:	2220      	movs	r2, #32
 8005cde:	189b      	adds	r3, r3, r2
 8005ce0:	19db      	adds	r3, r3, r7
 8005ce2:	2210      	movs	r2, #16
 8005ce4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a2b      	ldr	r2, [pc, #172]	@ (8005d98 <UART_SetConfig+0x2f8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d000      	beq.n	8005cf2 <UART_SetConfig+0x252>
 8005cf0:	e0a9      	b.n	8005e46 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cf2:	231b      	movs	r3, #27
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	189b      	adds	r3, r3, r2
 8005cf8:	19db      	adds	r3, r3, r7
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d015      	beq.n	8005d2c <UART_SetConfig+0x28c>
 8005d00:	dc18      	bgt.n	8005d34 <UART_SetConfig+0x294>
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d00d      	beq.n	8005d22 <UART_SetConfig+0x282>
 8005d06:	dc15      	bgt.n	8005d34 <UART_SetConfig+0x294>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <UART_SetConfig+0x272>
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d005      	beq.n	8005d1c <UART_SetConfig+0x27c>
 8005d10:	e010      	b.n	8005d34 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d12:	f7ff f9f1 	bl	80050f8 <HAL_RCC_GetPCLK1Freq>
 8005d16:	0003      	movs	r3, r0
 8005d18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d1a:	e014      	b.n	8005d46 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d1c:	4b25      	ldr	r3, [pc, #148]	@ (8005db4 <UART_SetConfig+0x314>)
 8005d1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d20:	e011      	b.n	8005d46 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d22:	f7ff f95d 	bl	8004fe0 <HAL_RCC_GetSysClockFreq>
 8005d26:	0003      	movs	r3, r0
 8005d28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d2a:	e00c      	b.n	8005d46 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d2c:	2380      	movs	r3, #128	@ 0x80
 8005d2e:	021b      	lsls	r3, r3, #8
 8005d30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d32:	e008      	b.n	8005d46 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005d38:	231a      	movs	r3, #26
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	189b      	adds	r3, r3, r2
 8005d3e:	19db      	adds	r3, r3, r7
 8005d40:	2201      	movs	r2, #1
 8005d42:	701a      	strb	r2, [r3, #0]
        break;
 8005d44:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d100      	bne.n	8005d4e <UART_SetConfig+0x2ae>
 8005d4c:	e14b      	b.n	8005fe6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d52:	4b19      	ldr	r3, [pc, #100]	@ (8005db8 <UART_SetConfig+0x318>)
 8005d54:	0052      	lsls	r2, r2, #1
 8005d56:	5ad3      	ldrh	r3, [r2, r3]
 8005d58:	0019      	movs	r1, r3
 8005d5a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005d5c:	f7fa f9d2 	bl	8000104 <__udivsi3>
 8005d60:	0003      	movs	r3, r0
 8005d62:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	0013      	movs	r3, r2
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	189b      	adds	r3, r3, r2
 8005d6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d305      	bcc.n	8005d80 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d91d      	bls.n	8005dbc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005d80:	231a      	movs	r3, #26
 8005d82:	2220      	movs	r2, #32
 8005d84:	189b      	adds	r3, r3, r2
 8005d86:	19db      	adds	r3, r3, r7
 8005d88:	2201      	movs	r2, #1
 8005d8a:	701a      	strb	r2, [r3, #0]
 8005d8c:	e12b      	b.n	8005fe6 <UART_SetConfig+0x546>
 8005d8e:	46c0      	nop			@ (mov r8, r8)
 8005d90:	cfff69f3 	.word	0xcfff69f3
 8005d94:	ffffcfff 	.word	0xffffcfff
 8005d98:	40008000 	.word	0x40008000
 8005d9c:	11fff4ff 	.word	0x11fff4ff
 8005da0:	40013800 	.word	0x40013800
 8005da4:	40021000 	.word	0x40021000
 8005da8:	40004400 	.word	0x40004400
 8005dac:	40004800 	.word	0x40004800
 8005db0:	40004c00 	.word	0x40004c00
 8005db4:	00f42400 	.word	0x00f42400
 8005db8:	08006b78 	.word	0x08006b78
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dbe:	61bb      	str	r3, [r7, #24]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dc8:	4b92      	ldr	r3, [pc, #584]	@ (8006014 <UART_SetConfig+0x574>)
 8005dca:	0052      	lsls	r2, r2, #1
 8005dcc:	5ad3      	ldrh	r3, [r2, r3]
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	69b8      	ldr	r0, [r7, #24]
 8005dda:	69f9      	ldr	r1, [r7, #28]
 8005ddc:	f7fa fb42 	bl	8000464 <__aeabi_uldivmod>
 8005de0:	0002      	movs	r2, r0
 8005de2:	000b      	movs	r3, r1
 8005de4:	0e11      	lsrs	r1, r2, #24
 8005de6:	021d      	lsls	r5, r3, #8
 8005de8:	430d      	orrs	r5, r1
 8005dea:	0214      	lsls	r4, r2, #8
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	085b      	lsrs	r3, r3, #1
 8005df2:	60bb      	str	r3, [r7, #8]
 8005df4:	2300      	movs	r3, #0
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	68b8      	ldr	r0, [r7, #8]
 8005dfa:	68f9      	ldr	r1, [r7, #12]
 8005dfc:	1900      	adds	r0, r0, r4
 8005dfe:	4169      	adcs	r1, r5
 8005e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	603b      	str	r3, [r7, #0]
 8005e06:	2300      	movs	r3, #0
 8005e08:	607b      	str	r3, [r7, #4]
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f7fa fb29 	bl	8000464 <__aeabi_uldivmod>
 8005e12:	0002      	movs	r2, r0
 8005e14:	000b      	movs	r3, r1
 8005e16:	0013      	movs	r3, r2
 8005e18:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e1c:	23c0      	movs	r3, #192	@ 0xc0
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d309      	bcc.n	8005e38 <UART_SetConfig+0x398>
 8005e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e26:	2380      	movs	r3, #128	@ 0x80
 8005e28:	035b      	lsls	r3, r3, #13
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d204      	bcs.n	8005e38 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e34:	60da      	str	r2, [r3, #12]
 8005e36:	e0d6      	b.n	8005fe6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005e38:	231a      	movs	r3, #26
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	189b      	adds	r3, r3, r2
 8005e3e:	19db      	adds	r3, r3, r7
 8005e40:	2201      	movs	r2, #1
 8005e42:	701a      	strb	r2, [r3, #0]
 8005e44:	e0cf      	b.n	8005fe6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e48:	69da      	ldr	r2, [r3, #28]
 8005e4a:	2380      	movs	r3, #128	@ 0x80
 8005e4c:	021b      	lsls	r3, r3, #8
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d000      	beq.n	8005e54 <UART_SetConfig+0x3b4>
 8005e52:	e070      	b.n	8005f36 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005e54:	231b      	movs	r3, #27
 8005e56:	2220      	movs	r2, #32
 8005e58:	189b      	adds	r3, r3, r2
 8005e5a:	19db      	adds	r3, r3, r7
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d015      	beq.n	8005e8e <UART_SetConfig+0x3ee>
 8005e62:	dc18      	bgt.n	8005e96 <UART_SetConfig+0x3f6>
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d00d      	beq.n	8005e84 <UART_SetConfig+0x3e4>
 8005e68:	dc15      	bgt.n	8005e96 <UART_SetConfig+0x3f6>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <UART_SetConfig+0x3d4>
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d005      	beq.n	8005e7e <UART_SetConfig+0x3de>
 8005e72:	e010      	b.n	8005e96 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e74:	f7ff f940 	bl	80050f8 <HAL_RCC_GetPCLK1Freq>
 8005e78:	0003      	movs	r3, r0
 8005e7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e7c:	e014      	b.n	8005ea8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e7e:	4b66      	ldr	r3, [pc, #408]	@ (8006018 <UART_SetConfig+0x578>)
 8005e80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e82:	e011      	b.n	8005ea8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e84:	f7ff f8ac 	bl	8004fe0 <HAL_RCC_GetSysClockFreq>
 8005e88:	0003      	movs	r3, r0
 8005e8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e8c:	e00c      	b.n	8005ea8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e8e:	2380      	movs	r3, #128	@ 0x80
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e94:	e008      	b.n	8005ea8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005e9a:	231a      	movs	r3, #26
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	189b      	adds	r3, r3, r2
 8005ea0:	19db      	adds	r3, r3, r7
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	701a      	strb	r2, [r3, #0]
        break;
 8005ea6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d100      	bne.n	8005eb0 <UART_SetConfig+0x410>
 8005eae:	e09a      	b.n	8005fe6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005eb4:	4b57      	ldr	r3, [pc, #348]	@ (8006014 <UART_SetConfig+0x574>)
 8005eb6:	0052      	lsls	r2, r2, #1
 8005eb8:	5ad3      	ldrh	r3, [r2, r3]
 8005eba:	0019      	movs	r1, r3
 8005ebc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005ebe:	f7fa f921 	bl	8000104 <__udivsi3>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	005a      	lsls	r2, r3, #1
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	085b      	lsrs	r3, r3, #1
 8005ecc:	18d2      	adds	r2, r2, r3
 8005ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	0019      	movs	r1, r3
 8005ed4:	0010      	movs	r0, r2
 8005ed6:	f7fa f915 	bl	8000104 <__udivsi3>
 8005eda:	0003      	movs	r3, r0
 8005edc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee0:	2b0f      	cmp	r3, #15
 8005ee2:	d921      	bls.n	8005f28 <UART_SetConfig+0x488>
 8005ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ee6:	2380      	movs	r3, #128	@ 0x80
 8005ee8:	025b      	lsls	r3, r3, #9
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d21c      	bcs.n	8005f28 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	200e      	movs	r0, #14
 8005ef4:	2420      	movs	r4, #32
 8005ef6:	1903      	adds	r3, r0, r4
 8005ef8:	19db      	adds	r3, r3, r7
 8005efa:	210f      	movs	r1, #15
 8005efc:	438a      	bics	r2, r1
 8005efe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2207      	movs	r2, #7
 8005f08:	4013      	ands	r3, r2
 8005f0a:	b299      	uxth	r1, r3
 8005f0c:	1903      	adds	r3, r0, r4
 8005f0e:	19db      	adds	r3, r3, r7
 8005f10:	1902      	adds	r2, r0, r4
 8005f12:	19d2      	adds	r2, r2, r7
 8005f14:	8812      	ldrh	r2, [r2, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	1902      	adds	r2, r0, r4
 8005f20:	19d2      	adds	r2, r2, r7
 8005f22:	8812      	ldrh	r2, [r2, #0]
 8005f24:	60da      	str	r2, [r3, #12]
 8005f26:	e05e      	b.n	8005fe6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005f28:	231a      	movs	r3, #26
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	189b      	adds	r3, r3, r2
 8005f2e:	19db      	adds	r3, r3, r7
 8005f30:	2201      	movs	r2, #1
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	e057      	b.n	8005fe6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f36:	231b      	movs	r3, #27
 8005f38:	2220      	movs	r2, #32
 8005f3a:	189b      	adds	r3, r3, r2
 8005f3c:	19db      	adds	r3, r3, r7
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d015      	beq.n	8005f70 <UART_SetConfig+0x4d0>
 8005f44:	dc18      	bgt.n	8005f78 <UART_SetConfig+0x4d8>
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d00d      	beq.n	8005f66 <UART_SetConfig+0x4c6>
 8005f4a:	dc15      	bgt.n	8005f78 <UART_SetConfig+0x4d8>
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <UART_SetConfig+0x4b6>
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d005      	beq.n	8005f60 <UART_SetConfig+0x4c0>
 8005f54:	e010      	b.n	8005f78 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f56:	f7ff f8cf 	bl	80050f8 <HAL_RCC_GetPCLK1Freq>
 8005f5a:	0003      	movs	r3, r0
 8005f5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f5e:	e014      	b.n	8005f8a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f60:	4b2d      	ldr	r3, [pc, #180]	@ (8006018 <UART_SetConfig+0x578>)
 8005f62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f64:	e011      	b.n	8005f8a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f66:	f7ff f83b 	bl	8004fe0 <HAL_RCC_GetSysClockFreq>
 8005f6a:	0003      	movs	r3, r0
 8005f6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f6e:	e00c      	b.n	8005f8a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f70:	2380      	movs	r3, #128	@ 0x80
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f76:	e008      	b.n	8005f8a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005f7c:	231a      	movs	r3, #26
 8005f7e:	2220      	movs	r2, #32
 8005f80:	189b      	adds	r3, r3, r2
 8005f82:	19db      	adds	r3, r3, r7
 8005f84:	2201      	movs	r2, #1
 8005f86:	701a      	strb	r2, [r3, #0]
        break;
 8005f88:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d02a      	beq.n	8005fe6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f94:	4b1f      	ldr	r3, [pc, #124]	@ (8006014 <UART_SetConfig+0x574>)
 8005f96:	0052      	lsls	r2, r2, #1
 8005f98:	5ad3      	ldrh	r3, [r2, r3]
 8005f9a:	0019      	movs	r1, r3
 8005f9c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005f9e:	f7fa f8b1 	bl	8000104 <__udivsi3>
 8005fa2:	0003      	movs	r3, r0
 8005fa4:	001a      	movs	r2, r3
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	18d2      	adds	r2, r2, r3
 8005fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	0019      	movs	r1, r3
 8005fb4:	0010      	movs	r0, r2
 8005fb6:	f7fa f8a5 	bl	8000104 <__udivsi3>
 8005fba:	0003      	movs	r3, r0
 8005fbc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc0:	2b0f      	cmp	r3, #15
 8005fc2:	d90a      	bls.n	8005fda <UART_SetConfig+0x53a>
 8005fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fc6:	2380      	movs	r3, #128	@ 0x80
 8005fc8:	025b      	lsls	r3, r3, #9
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d205      	bcs.n	8005fda <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60da      	str	r2, [r3, #12]
 8005fd8:	e005      	b.n	8005fe6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005fda:	231a      	movs	r3, #26
 8005fdc:	2220      	movs	r2, #32
 8005fde:	189b      	adds	r3, r3, r2
 8005fe0:	19db      	adds	r3, r3, r7
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	226a      	movs	r2, #106	@ 0x6a
 8005fea:	2101      	movs	r1, #1
 8005fec:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff0:	2268      	movs	r2, #104	@ 0x68
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffe:	2200      	movs	r2, #0
 8006000:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006002:	231a      	movs	r3, #26
 8006004:	2220      	movs	r2, #32
 8006006:	189b      	adds	r3, r3, r2
 8006008:	19db      	adds	r3, r3, r7
 800600a:	781b      	ldrb	r3, [r3, #0]
}
 800600c:	0018      	movs	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	b010      	add	sp, #64	@ 0x40
 8006012:	bdb0      	pop	{r4, r5, r7, pc}
 8006014:	08006b78 	.word	0x08006b78
 8006018:	00f42400 	.word	0x00f42400

0800601c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006028:	2208      	movs	r2, #8
 800602a:	4013      	ands	r3, r2
 800602c:	d00b      	beq.n	8006046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	4a4a      	ldr	r2, [pc, #296]	@ (8006160 <UART_AdvFeatureConfig+0x144>)
 8006036:	4013      	ands	r3, r2
 8006038:	0019      	movs	r1, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604a:	2201      	movs	r2, #1
 800604c:	4013      	ands	r3, r2
 800604e:	d00b      	beq.n	8006068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4a43      	ldr	r2, [pc, #268]	@ (8006164 <UART_AdvFeatureConfig+0x148>)
 8006058:	4013      	ands	r3, r2
 800605a:	0019      	movs	r1, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606c:	2202      	movs	r2, #2
 800606e:	4013      	ands	r3, r2
 8006070:	d00b      	beq.n	800608a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	4a3b      	ldr	r2, [pc, #236]	@ (8006168 <UART_AdvFeatureConfig+0x14c>)
 800607a:	4013      	ands	r3, r2
 800607c:	0019      	movs	r1, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608e:	2204      	movs	r2, #4
 8006090:	4013      	ands	r3, r2
 8006092:	d00b      	beq.n	80060ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	4a34      	ldr	r2, [pc, #208]	@ (800616c <UART_AdvFeatureConfig+0x150>)
 800609c:	4013      	ands	r3, r2
 800609e:	0019      	movs	r1, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b0:	2210      	movs	r2, #16
 80060b2:	4013      	ands	r3, r2
 80060b4:	d00b      	beq.n	80060ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006170 <UART_AdvFeatureConfig+0x154>)
 80060be:	4013      	ands	r3, r2
 80060c0:	0019      	movs	r1, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d2:	2220      	movs	r2, #32
 80060d4:	4013      	ands	r3, r2
 80060d6:	d00b      	beq.n	80060f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	4a25      	ldr	r2, [pc, #148]	@ (8006174 <UART_AdvFeatureConfig+0x158>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	0019      	movs	r1, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f4:	2240      	movs	r2, #64	@ 0x40
 80060f6:	4013      	ands	r3, r2
 80060f8:	d01d      	beq.n	8006136 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	4a1d      	ldr	r2, [pc, #116]	@ (8006178 <UART_AdvFeatureConfig+0x15c>)
 8006102:	4013      	ands	r3, r2
 8006104:	0019      	movs	r1, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006116:	2380      	movs	r3, #128	@ 0x80
 8006118:	035b      	lsls	r3, r3, #13
 800611a:	429a      	cmp	r2, r3
 800611c:	d10b      	bne.n	8006136 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	4a15      	ldr	r2, [pc, #84]	@ (800617c <UART_AdvFeatureConfig+0x160>)
 8006126:	4013      	ands	r3, r2
 8006128:	0019      	movs	r1, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613a:	2280      	movs	r2, #128	@ 0x80
 800613c:	4013      	ands	r3, r2
 800613e:	d00b      	beq.n	8006158 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	4a0e      	ldr	r2, [pc, #56]	@ (8006180 <UART_AdvFeatureConfig+0x164>)
 8006148:	4013      	ands	r3, r2
 800614a:	0019      	movs	r1, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	605a      	str	r2, [r3, #4]
  }
}
 8006158:	46c0      	nop			@ (mov r8, r8)
 800615a:	46bd      	mov	sp, r7
 800615c:	b002      	add	sp, #8
 800615e:	bd80      	pop	{r7, pc}
 8006160:	ffff7fff 	.word	0xffff7fff
 8006164:	fffdffff 	.word	0xfffdffff
 8006168:	fffeffff 	.word	0xfffeffff
 800616c:	fffbffff 	.word	0xfffbffff
 8006170:	ffffefff 	.word	0xffffefff
 8006174:	ffffdfff 	.word	0xffffdfff
 8006178:	ffefffff 	.word	0xffefffff
 800617c:	ff9fffff 	.word	0xff9fffff
 8006180:	fff7ffff 	.word	0xfff7ffff

08006184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b092      	sub	sp, #72	@ 0x48
 8006188:	af02      	add	r7, sp, #8
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2290      	movs	r2, #144	@ 0x90
 8006190:	2100      	movs	r1, #0
 8006192:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006194:	f7fc fb6e 	bl	8002874 <HAL_GetTick>
 8006198:	0003      	movs	r3, r0
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2208      	movs	r2, #8
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d12d      	bne.n	8006206 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ac:	2280      	movs	r2, #128	@ 0x80
 80061ae:	0391      	lsls	r1, r2, #14
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4a47      	ldr	r2, [pc, #284]	@ (80062d0 <UART_CheckIdleState+0x14c>)
 80061b4:	9200      	str	r2, [sp, #0]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f000 f88e 	bl	80062d8 <UART_WaitOnFlagUntilTimeout>
 80061bc:	1e03      	subs	r3, r0, #0
 80061be:	d022      	beq.n	8006206 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061c0:	f3ef 8310 	mrs	r3, PRIMASK
 80061c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80061c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061ca:	2301      	movs	r3, #1
 80061cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d0:	f383 8810 	msr	PRIMASK, r3
}
 80061d4:	46c0      	nop			@ (mov r8, r8)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2180      	movs	r1, #128	@ 0x80
 80061e2:	438a      	bics	r2, r1
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ec:	f383 8810 	msr	PRIMASK, r3
}
 80061f0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2288      	movs	r2, #136	@ 0x88
 80061f6:	2120      	movs	r1, #32
 80061f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2284      	movs	r2, #132	@ 0x84
 80061fe:	2100      	movs	r1, #0
 8006200:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e060      	b.n	80062c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2204      	movs	r2, #4
 800620e:	4013      	ands	r3, r2
 8006210:	2b04      	cmp	r3, #4
 8006212:	d146      	bne.n	80062a2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006216:	2280      	movs	r2, #128	@ 0x80
 8006218:	03d1      	lsls	r1, r2, #15
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4a2c      	ldr	r2, [pc, #176]	@ (80062d0 <UART_CheckIdleState+0x14c>)
 800621e:	9200      	str	r2, [sp, #0]
 8006220:	2200      	movs	r2, #0
 8006222:	f000 f859 	bl	80062d8 <UART_WaitOnFlagUntilTimeout>
 8006226:	1e03      	subs	r3, r0, #0
 8006228:	d03b      	beq.n	80062a2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800622a:	f3ef 8310 	mrs	r3, PRIMASK
 800622e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006230:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006232:	637b      	str	r3, [r7, #52]	@ 0x34
 8006234:	2301      	movs	r3, #1
 8006236:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f383 8810 	msr	PRIMASK, r3
}
 800623e:	46c0      	nop			@ (mov r8, r8)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4922      	ldr	r1, [pc, #136]	@ (80062d4 <UART_CheckIdleState+0x150>)
 800624c:	400a      	ands	r2, r1
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f383 8810 	msr	PRIMASK, r3
}
 800625a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800625c:	f3ef 8310 	mrs	r3, PRIMASK
 8006260:	61bb      	str	r3, [r7, #24]
  return(result);
 8006262:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006264:	633b      	str	r3, [r7, #48]	@ 0x30
 8006266:	2301      	movs	r3, #1
 8006268:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	f383 8810 	msr	PRIMASK, r3
}
 8006270:	46c0      	nop			@ (mov r8, r8)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2101      	movs	r1, #1
 800627e:	438a      	bics	r2, r1
 8006280:	609a      	str	r2, [r3, #8]
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	f383 8810 	msr	PRIMASK, r3
}
 800628c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	228c      	movs	r2, #140	@ 0x8c
 8006292:	2120      	movs	r1, #32
 8006294:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2284      	movs	r2, #132	@ 0x84
 800629a:	2100      	movs	r1, #0
 800629c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e012      	b.n	80062c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2288      	movs	r2, #136	@ 0x88
 80062a6:	2120      	movs	r1, #32
 80062a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	228c      	movs	r2, #140	@ 0x8c
 80062ae:	2120      	movs	r1, #32
 80062b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2284      	movs	r2, #132	@ 0x84
 80062c2:	2100      	movs	r1, #0
 80062c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	0018      	movs	r0, r3
 80062ca:	46bd      	mov	sp, r7
 80062cc:	b010      	add	sp, #64	@ 0x40
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	01ffffff 	.word	0x01ffffff
 80062d4:	fffffedf 	.word	0xfffffedf

080062d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	1dfb      	adds	r3, r7, #7
 80062e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e8:	e051      	b.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	3301      	adds	r3, #1
 80062ee:	d04e      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f0:	f7fc fac0 	bl	8002874 <HAL_GetTick>
 80062f4:	0002      	movs	r2, r0
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d302      	bcc.n	8006306 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e051      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2204      	movs	r2, #4
 8006312:	4013      	ands	r3, r2
 8006314:	d03b      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b80      	cmp	r3, #128	@ 0x80
 800631a:	d038      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b40      	cmp	r3, #64	@ 0x40
 8006320:	d035      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	2208      	movs	r2, #8
 800632a:	4013      	ands	r3, r2
 800632c:	2b08      	cmp	r3, #8
 800632e:	d111      	bne.n	8006354 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2208      	movs	r2, #8
 8006336:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	0018      	movs	r0, r3
 800633c:	f000 f83c 	bl	80063b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2290      	movs	r2, #144	@ 0x90
 8006344:	2108      	movs	r1, #8
 8006346:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2284      	movs	r2, #132	@ 0x84
 800634c:	2100      	movs	r1, #0
 800634e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e02c      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69da      	ldr	r2, [r3, #28]
 800635a:	2380      	movs	r3, #128	@ 0x80
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	401a      	ands	r2, r3
 8006360:	2380      	movs	r3, #128	@ 0x80
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	429a      	cmp	r2, r3
 8006366:	d112      	bne.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2280      	movs	r2, #128	@ 0x80
 800636e:	0112      	lsls	r2, r2, #4
 8006370:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	0018      	movs	r0, r3
 8006376:	f000 f81f 	bl	80063b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2290      	movs	r2, #144	@ 0x90
 800637e:	2120      	movs	r1, #32
 8006380:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2284      	movs	r2, #132	@ 0x84
 8006386:	2100      	movs	r1, #0
 8006388:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e00f      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	4013      	ands	r3, r2
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	425a      	negs	r2, r3
 800639e:	4153      	adcs	r3, r2
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	001a      	movs	r2, r3
 80063a4:	1dfb      	adds	r3, r7, #7
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d09e      	beq.n	80062ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	0018      	movs	r0, r3
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b004      	add	sp, #16
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08e      	sub	sp, #56	@ 0x38
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063c0:	f3ef 8310 	mrs	r3, PRIMASK
 80063c4:	617b      	str	r3, [r7, #20]
  return(result);
 80063c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ca:	2301      	movs	r3, #1
 80063cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	f383 8810 	msr	PRIMASK, r3
}
 80063d4:	46c0      	nop			@ (mov r8, r8)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4926      	ldr	r1, [pc, #152]	@ (800647c <UART_EndRxTransfer+0xc4>)
 80063e2:	400a      	ands	r2, r1
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	f383 8810 	msr	PRIMASK, r3
}
 80063f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f2:	f3ef 8310 	mrs	r3, PRIMASK
 80063f6:	623b      	str	r3, [r7, #32]
  return(result);
 80063f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80063fc:	2301      	movs	r3, #1
 80063fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006402:	f383 8810 	msr	PRIMASK, r3
}
 8006406:	46c0      	nop			@ (mov r8, r8)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	491b      	ldr	r1, [pc, #108]	@ (8006480 <UART_EndRxTransfer+0xc8>)
 8006414:	400a      	ands	r2, r1
 8006416:	609a      	str	r2, [r3, #8]
 8006418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	f383 8810 	msr	PRIMASK, r3
}
 8006422:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006428:	2b01      	cmp	r3, #1
 800642a:	d118      	bne.n	800645e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800642c:	f3ef 8310 	mrs	r3, PRIMASK
 8006430:	60bb      	str	r3, [r7, #8]
  return(result);
 8006432:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006434:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006436:	2301      	movs	r3, #1
 8006438:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f383 8810 	msr	PRIMASK, r3
}
 8006440:	46c0      	nop			@ (mov r8, r8)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2110      	movs	r1, #16
 800644e:	438a      	bics	r2, r1
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f383 8810 	msr	PRIMASK, r3
}
 800645c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	228c      	movs	r2, #140	@ 0x8c
 8006462:	2120      	movs	r1, #32
 8006464:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006472:	46c0      	nop			@ (mov r8, r8)
 8006474:	46bd      	mov	sp, r7
 8006476:	b00e      	add	sp, #56	@ 0x38
 8006478:	bd80      	pop	{r7, pc}
 800647a:	46c0      	nop			@ (mov r8, r8)
 800647c:	fffffedf 	.word	0xfffffedf
 8006480:	effffffe 	.word	0xeffffffe

08006484 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2284      	movs	r2, #132	@ 0x84
 8006490:	5c9b      	ldrb	r3, [r3, r2]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d101      	bne.n	800649a <HAL_UARTEx_DisableFifoMode+0x16>
 8006496:	2302      	movs	r3, #2
 8006498:	e027      	b.n	80064ea <HAL_UARTEx_DisableFifoMode+0x66>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2284      	movs	r2, #132	@ 0x84
 800649e:	2101      	movs	r1, #1
 80064a0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2288      	movs	r2, #136	@ 0x88
 80064a6:	2124      	movs	r1, #36	@ 0x24
 80064a8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2101      	movs	r1, #1
 80064be:	438a      	bics	r2, r1
 80064c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4a0b      	ldr	r2, [pc, #44]	@ (80064f4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2288      	movs	r2, #136	@ 0x88
 80064dc:	2120      	movs	r1, #32
 80064de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2284      	movs	r2, #132	@ 0x84
 80064e4:	2100      	movs	r1, #0
 80064e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	0018      	movs	r0, r3
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b004      	add	sp, #16
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	46c0      	nop			@ (mov r8, r8)
 80064f4:	dfffffff 	.word	0xdfffffff

080064f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2284      	movs	r2, #132	@ 0x84
 8006506:	5c9b      	ldrb	r3, [r3, r2]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800650c:	2302      	movs	r3, #2
 800650e:	e02e      	b.n	800656e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2284      	movs	r2, #132	@ 0x84
 8006514:	2101      	movs	r1, #1
 8006516:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2288      	movs	r2, #136	@ 0x88
 800651c:	2124      	movs	r1, #36	@ 0x24
 800651e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2101      	movs	r1, #1
 8006534:	438a      	bics	r2, r1
 8006536:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	08d9      	lsrs	r1, r3, #3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	0018      	movs	r0, r3
 8006550:	f000 f854 	bl	80065fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2288      	movs	r2, #136	@ 0x88
 8006560:	2120      	movs	r1, #32
 8006562:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2284      	movs	r2, #132	@ 0x84
 8006568:	2100      	movs	r1, #0
 800656a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	0018      	movs	r0, r3
 8006570:	46bd      	mov	sp, r7
 8006572:	b004      	add	sp, #16
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2284      	movs	r2, #132	@ 0x84
 8006586:	5c9b      	ldrb	r3, [r3, r2]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800658c:	2302      	movs	r3, #2
 800658e:	e02f      	b.n	80065f0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2284      	movs	r2, #132	@ 0x84
 8006594:	2101      	movs	r1, #1
 8006596:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2288      	movs	r2, #136	@ 0x88
 800659c:	2124      	movs	r1, #36	@ 0x24
 800659e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2101      	movs	r1, #1
 80065b4:	438a      	bics	r2, r1
 80065b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	4a0e      	ldr	r2, [pc, #56]	@ (80065f8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	0019      	movs	r1, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	0018      	movs	r0, r3
 80065d2:	f000 f813 	bl	80065fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2288      	movs	r2, #136	@ 0x88
 80065e2:	2120      	movs	r1, #32
 80065e4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2284      	movs	r2, #132	@ 0x84
 80065ea:	2100      	movs	r1, #0
 80065ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	0018      	movs	r0, r3
 80065f2:	46bd      	mov	sp, r7
 80065f4:	b004      	add	sp, #16
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	f1ffffff 	.word	0xf1ffffff

080065fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006608:	2b00      	cmp	r3, #0
 800660a:	d108      	bne.n	800661e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	226a      	movs	r2, #106	@ 0x6a
 8006610:	2101      	movs	r1, #1
 8006612:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2268      	movs	r2, #104	@ 0x68
 8006618:	2101      	movs	r1, #1
 800661a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800661c:	e043      	b.n	80066a6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800661e:	260f      	movs	r6, #15
 8006620:	19bb      	adds	r3, r7, r6
 8006622:	2208      	movs	r2, #8
 8006624:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006626:	200e      	movs	r0, #14
 8006628:	183b      	adds	r3, r7, r0
 800662a:	2208      	movs	r2, #8
 800662c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	0e5b      	lsrs	r3, r3, #25
 8006636:	b2da      	uxtb	r2, r3
 8006638:	240d      	movs	r4, #13
 800663a:	193b      	adds	r3, r7, r4
 800663c:	2107      	movs	r1, #7
 800663e:	400a      	ands	r2, r1
 8006640:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	0f5b      	lsrs	r3, r3, #29
 800664a:	b2da      	uxtb	r2, r3
 800664c:	250c      	movs	r5, #12
 800664e:	197b      	adds	r3, r7, r5
 8006650:	2107      	movs	r1, #7
 8006652:	400a      	ands	r2, r1
 8006654:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006656:	183b      	adds	r3, r7, r0
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	197a      	adds	r2, r7, r5
 800665c:	7812      	ldrb	r2, [r2, #0]
 800665e:	4914      	ldr	r1, [pc, #80]	@ (80066b0 <UARTEx_SetNbDataToProcess+0xb4>)
 8006660:	5c8a      	ldrb	r2, [r1, r2]
 8006662:	435a      	muls	r2, r3
 8006664:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006666:	197b      	adds	r3, r7, r5
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	4a12      	ldr	r2, [pc, #72]	@ (80066b4 <UARTEx_SetNbDataToProcess+0xb8>)
 800666c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800666e:	0019      	movs	r1, r3
 8006670:	f7f9 fdd2 	bl	8000218 <__divsi3>
 8006674:	0003      	movs	r3, r0
 8006676:	b299      	uxth	r1, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	226a      	movs	r2, #106	@ 0x6a
 800667c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800667e:	19bb      	adds	r3, r7, r6
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	193a      	adds	r2, r7, r4
 8006684:	7812      	ldrb	r2, [r2, #0]
 8006686:	490a      	ldr	r1, [pc, #40]	@ (80066b0 <UARTEx_SetNbDataToProcess+0xb4>)
 8006688:	5c8a      	ldrb	r2, [r1, r2]
 800668a:	435a      	muls	r2, r3
 800668c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800668e:	193b      	adds	r3, r7, r4
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	4a08      	ldr	r2, [pc, #32]	@ (80066b4 <UARTEx_SetNbDataToProcess+0xb8>)
 8006694:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006696:	0019      	movs	r1, r3
 8006698:	f7f9 fdbe 	bl	8000218 <__divsi3>
 800669c:	0003      	movs	r3, r0
 800669e:	b299      	uxth	r1, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2268      	movs	r2, #104	@ 0x68
 80066a4:	5299      	strh	r1, [r3, r2]
}
 80066a6:	46c0      	nop			@ (mov r8, r8)
 80066a8:	46bd      	mov	sp, r7
 80066aa:	b005      	add	sp, #20
 80066ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ae:	46c0      	nop			@ (mov r8, r8)
 80066b0:	08006b90 	.word	0x08006b90
 80066b4:	08006b98 	.word	0x08006b98

080066b8 <memset>:
 80066b8:	0003      	movs	r3, r0
 80066ba:	1882      	adds	r2, r0, r2
 80066bc:	4293      	cmp	r3, r2
 80066be:	d100      	bne.n	80066c2 <memset+0xa>
 80066c0:	4770      	bx	lr
 80066c2:	7019      	strb	r1, [r3, #0]
 80066c4:	3301      	adds	r3, #1
 80066c6:	e7f9      	b.n	80066bc <memset+0x4>

080066c8 <__libc_init_array>:
 80066c8:	b570      	push	{r4, r5, r6, lr}
 80066ca:	2600      	movs	r6, #0
 80066cc:	4c0c      	ldr	r4, [pc, #48]	@ (8006700 <__libc_init_array+0x38>)
 80066ce:	4d0d      	ldr	r5, [pc, #52]	@ (8006704 <__libc_init_array+0x3c>)
 80066d0:	1b64      	subs	r4, r4, r5
 80066d2:	10a4      	asrs	r4, r4, #2
 80066d4:	42a6      	cmp	r6, r4
 80066d6:	d109      	bne.n	80066ec <__libc_init_array+0x24>
 80066d8:	2600      	movs	r6, #0
 80066da:	f000 f9cf 	bl	8006a7c <_init>
 80066de:	4c0a      	ldr	r4, [pc, #40]	@ (8006708 <__libc_init_array+0x40>)
 80066e0:	4d0a      	ldr	r5, [pc, #40]	@ (800670c <__libc_init_array+0x44>)
 80066e2:	1b64      	subs	r4, r4, r5
 80066e4:	10a4      	asrs	r4, r4, #2
 80066e6:	42a6      	cmp	r6, r4
 80066e8:	d105      	bne.n	80066f6 <__libc_init_array+0x2e>
 80066ea:	bd70      	pop	{r4, r5, r6, pc}
 80066ec:	00b3      	lsls	r3, r6, #2
 80066ee:	58eb      	ldr	r3, [r5, r3]
 80066f0:	4798      	blx	r3
 80066f2:	3601      	adds	r6, #1
 80066f4:	e7ee      	b.n	80066d4 <__libc_init_array+0xc>
 80066f6:	00b3      	lsls	r3, r6, #2
 80066f8:	58eb      	ldr	r3, [r5, r3]
 80066fa:	4798      	blx	r3
 80066fc:	3601      	adds	r6, #1
 80066fe:	e7f2      	b.n	80066e6 <__libc_init_array+0x1e>
 8006700:	08006be0 	.word	0x08006be0
 8006704:	08006be0 	.word	0x08006be0
 8006708:	08006be4 	.word	0x08006be4
 800670c:	08006be0 	.word	0x08006be0

08006710 <atan2f>:
 8006710:	b510      	push	{r4, lr}
 8006712:	f000 f825 	bl	8006760 <__ieee754_atan2f>
 8006716:	bd10      	pop	{r4, pc}

08006718 <roundf>:
 8006718:	0dc3      	lsrs	r3, r0, #23
 800671a:	b2db      	uxtb	r3, r3
 800671c:	3b7f      	subs	r3, #127	@ 0x7f
 800671e:	0002      	movs	r2, r0
 8006720:	b510      	push	{r4, lr}
 8006722:	2b16      	cmp	r3, #22
 8006724:	dc13      	bgt.n	800674e <roundf+0x36>
 8006726:	2b00      	cmp	r3, #0
 8006728:	da07      	bge.n	800673a <roundf+0x22>
 800672a:	0fc2      	lsrs	r2, r0, #31
 800672c:	07d0      	lsls	r0, r2, #31
 800672e:	3301      	adds	r3, #1
 8006730:	d102      	bne.n	8006738 <roundf+0x20>
 8006732:	23fe      	movs	r3, #254	@ 0xfe
 8006734:	059b      	lsls	r3, r3, #22
 8006736:	4318      	orrs	r0, r3
 8006738:	bd10      	pop	{r4, pc}
 800673a:	4908      	ldr	r1, [pc, #32]	@ (800675c <roundf+0x44>)
 800673c:	4119      	asrs	r1, r3
 800673e:	4208      	tst	r0, r1
 8006740:	d0fa      	beq.n	8006738 <roundf+0x20>
 8006742:	2080      	movs	r0, #128	@ 0x80
 8006744:	03c0      	lsls	r0, r0, #15
 8006746:	4118      	asrs	r0, r3
 8006748:	1880      	adds	r0, r0, r2
 800674a:	4388      	bics	r0, r1
 800674c:	e7f4      	b.n	8006738 <roundf+0x20>
 800674e:	2b80      	cmp	r3, #128	@ 0x80
 8006750:	d1f2      	bne.n	8006738 <roundf+0x20>
 8006752:	1c01      	adds	r1, r0, #0
 8006754:	f7f9 ff8a 	bl	800066c <__aeabi_fadd>
 8006758:	e7ee      	b.n	8006738 <roundf+0x20>
 800675a:	46c0      	nop			@ (mov r8, r8)
 800675c:	007fffff 	.word	0x007fffff

08006760 <__ieee754_atan2f>:
 8006760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006762:	25ff      	movs	r5, #255	@ 0xff
 8006764:	004a      	lsls	r2, r1, #1
 8006766:	9101      	str	r1, [sp, #4]
 8006768:	0852      	lsrs	r2, r2, #1
 800676a:	05ed      	lsls	r5, r5, #23
 800676c:	42aa      	cmp	r2, r5
 800676e:	d804      	bhi.n	800677a <__ieee754_atan2f+0x1a>
 8006770:	0043      	lsls	r3, r0, #1
 8006772:	0007      	movs	r7, r0
 8006774:	085b      	lsrs	r3, r3, #1
 8006776:	42ab      	cmp	r3, r5
 8006778:	d902      	bls.n	8006780 <__ieee754_atan2f+0x20>
 800677a:	f7f9 ff77 	bl	800066c <__aeabi_fadd>
 800677e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006780:	24fe      	movs	r4, #254	@ 0xfe
 8006782:	05a4      	lsls	r4, r4, #22
 8006784:	42a1      	cmp	r1, r4
 8006786:	d102      	bne.n	800678e <__ieee754_atan2f+0x2e>
 8006788:	f000 f864 	bl	8006854 <atanf>
 800678c:	e7f7      	b.n	800677e <__ieee754_atan2f+0x1e>
 800678e:	2602      	movs	r6, #2
 8006790:	178c      	asrs	r4, r1, #30
 8006792:	4034      	ands	r4, r6
 8006794:	0fc6      	lsrs	r6, r0, #31
 8006796:	4334      	orrs	r4, r6
 8006798:	2b00      	cmp	r3, #0
 800679a:	d105      	bne.n	80067a8 <__ieee754_atan2f+0x48>
 800679c:	2c02      	cmp	r4, #2
 800679e:	d045      	beq.n	800682c <__ieee754_atan2f+0xcc>
 80067a0:	2c03      	cmp	r4, #3
 80067a2:	d1ec      	bne.n	800677e <__ieee754_atan2f+0x1e>
 80067a4:	4823      	ldr	r0, [pc, #140]	@ (8006834 <__ieee754_atan2f+0xd4>)
 80067a6:	e7ea      	b.n	800677e <__ieee754_atan2f+0x1e>
 80067a8:	2a00      	cmp	r2, #0
 80067aa:	d103      	bne.n	80067b4 <__ieee754_atan2f+0x54>
 80067ac:	2f00      	cmp	r7, #0
 80067ae:	db3f      	blt.n	8006830 <__ieee754_atan2f+0xd0>
 80067b0:	4821      	ldr	r0, [pc, #132]	@ (8006838 <__ieee754_atan2f+0xd8>)
 80067b2:	e7e4      	b.n	800677e <__ieee754_atan2f+0x1e>
 80067b4:	42aa      	cmp	r2, r5
 80067b6:	d10e      	bne.n	80067d6 <__ieee754_atan2f+0x76>
 80067b8:	3c01      	subs	r4, #1
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d104      	bne.n	80067c8 <__ieee754_atan2f+0x68>
 80067be:	4b1f      	ldr	r3, [pc, #124]	@ (800683c <__ieee754_atan2f+0xdc>)
 80067c0:	2c02      	cmp	r4, #2
 80067c2:	d905      	bls.n	80067d0 <__ieee754_atan2f+0x70>
 80067c4:	481e      	ldr	r0, [pc, #120]	@ (8006840 <__ieee754_atan2f+0xe0>)
 80067c6:	e7da      	b.n	800677e <__ieee754_atan2f+0x1e>
 80067c8:	2000      	movs	r0, #0
 80067ca:	2c02      	cmp	r4, #2
 80067cc:	d8d7      	bhi.n	800677e <__ieee754_atan2f+0x1e>
 80067ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006844 <__ieee754_atan2f+0xe4>)
 80067d0:	00a4      	lsls	r4, r4, #2
 80067d2:	58e0      	ldr	r0, [r4, r3]
 80067d4:	e7d3      	b.n	800677e <__ieee754_atan2f+0x1e>
 80067d6:	42ab      	cmp	r3, r5
 80067d8:	d0e8      	beq.n	80067ac <__ieee754_atan2f+0x4c>
 80067da:	1a9b      	subs	r3, r3, r2
 80067dc:	15db      	asrs	r3, r3, #23
 80067de:	2b3c      	cmp	r3, #60	@ 0x3c
 80067e0:	dc14      	bgt.n	800680c <__ieee754_atan2f+0xac>
 80067e2:	2900      	cmp	r1, #0
 80067e4:	da01      	bge.n	80067ea <__ieee754_atan2f+0x8a>
 80067e6:	333c      	adds	r3, #60	@ 0x3c
 80067e8:	db12      	blt.n	8006810 <__ieee754_atan2f+0xb0>
 80067ea:	f7fa f931 	bl	8000a50 <__aeabi_fdiv>
 80067ee:	f000 f941 	bl	8006a74 <fabsf>
 80067f2:	f000 f82f 	bl	8006854 <atanf>
 80067f6:	2c01      	cmp	r4, #1
 80067f8:	d00c      	beq.n	8006814 <__ieee754_atan2f+0xb4>
 80067fa:	2c02      	cmp	r4, #2
 80067fc:	d00e      	beq.n	800681c <__ieee754_atan2f+0xbc>
 80067fe:	2c00      	cmp	r4, #0
 8006800:	d0bd      	beq.n	800677e <__ieee754_atan2f+0x1e>
 8006802:	4911      	ldr	r1, [pc, #68]	@ (8006848 <__ieee754_atan2f+0xe8>)
 8006804:	f7f9 ff32 	bl	800066c <__aeabi_fadd>
 8006808:	4910      	ldr	r1, [pc, #64]	@ (800684c <__ieee754_atan2f+0xec>)
 800680a:	e00c      	b.n	8006826 <__ieee754_atan2f+0xc6>
 800680c:	480a      	ldr	r0, [pc, #40]	@ (8006838 <__ieee754_atan2f+0xd8>)
 800680e:	e7f2      	b.n	80067f6 <__ieee754_atan2f+0x96>
 8006810:	2000      	movs	r0, #0
 8006812:	e7f0      	b.n	80067f6 <__ieee754_atan2f+0x96>
 8006814:	2380      	movs	r3, #128	@ 0x80
 8006816:	061b      	lsls	r3, r3, #24
 8006818:	18c0      	adds	r0, r0, r3
 800681a:	e7b0      	b.n	800677e <__ieee754_atan2f+0x1e>
 800681c:	490a      	ldr	r1, [pc, #40]	@ (8006848 <__ieee754_atan2f+0xe8>)
 800681e:	f7f9 ff25 	bl	800066c <__aeabi_fadd>
 8006822:	1c01      	adds	r1, r0, #0
 8006824:	4809      	ldr	r0, [pc, #36]	@ (800684c <__ieee754_atan2f+0xec>)
 8006826:	f7fa fc3b 	bl	80010a0 <__aeabi_fsub>
 800682a:	e7a8      	b.n	800677e <__ieee754_atan2f+0x1e>
 800682c:	4807      	ldr	r0, [pc, #28]	@ (800684c <__ieee754_atan2f+0xec>)
 800682e:	e7a6      	b.n	800677e <__ieee754_atan2f+0x1e>
 8006830:	4807      	ldr	r0, [pc, #28]	@ (8006850 <__ieee754_atan2f+0xf0>)
 8006832:	e7a4      	b.n	800677e <__ieee754_atan2f+0x1e>
 8006834:	c0490fdb 	.word	0xc0490fdb
 8006838:	3fc90fdb 	.word	0x3fc90fdb
 800683c:	08006bac 	.word	0x08006bac
 8006840:	3f490fdb 	.word	0x3f490fdb
 8006844:	08006ba0 	.word	0x08006ba0
 8006848:	33bbbd2e 	.word	0x33bbbd2e
 800684c:	40490fdb 	.word	0x40490fdb
 8006850:	bfc90fdb 	.word	0xbfc90fdb

08006854 <atanf>:
 8006854:	23a1      	movs	r3, #161	@ 0xa1
 8006856:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006858:	0045      	lsls	r5, r0, #1
 800685a:	1c04      	adds	r4, r0, #0
 800685c:	9001      	str	r0, [sp, #4]
 800685e:	086d      	lsrs	r5, r5, #1
 8006860:	05db      	lsls	r3, r3, #23
 8006862:	429d      	cmp	r5, r3
 8006864:	d30f      	bcc.n	8006886 <atanf+0x32>
 8006866:	23ff      	movs	r3, #255	@ 0xff
 8006868:	05db      	lsls	r3, r3, #23
 800686a:	429d      	cmp	r5, r3
 800686c:	d904      	bls.n	8006878 <atanf+0x24>
 800686e:	1c01      	adds	r1, r0, #0
 8006870:	f7f9 fefc 	bl	800066c <__aeabi_fadd>
 8006874:	1c04      	adds	r4, r0, #0
 8006876:	e004      	b.n	8006882 <atanf+0x2e>
 8006878:	9b01      	ldr	r3, [sp, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	dc00      	bgt.n	8006880 <atanf+0x2c>
 800687e:	e0cc      	b.n	8006a1a <atanf+0x1c6>
 8006880:	4c67      	ldr	r4, [pc, #412]	@ (8006a20 <atanf+0x1cc>)
 8006882:	1c20      	adds	r0, r4, #0
 8006884:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006886:	4b67      	ldr	r3, [pc, #412]	@ (8006a24 <atanf+0x1d0>)
 8006888:	429d      	cmp	r5, r3
 800688a:	d80f      	bhi.n	80068ac <atanf+0x58>
 800688c:	23c4      	movs	r3, #196	@ 0xc4
 800688e:	059b      	lsls	r3, r3, #22
 8006890:	429d      	cmp	r5, r3
 8006892:	d208      	bcs.n	80068a6 <atanf+0x52>
 8006894:	4964      	ldr	r1, [pc, #400]	@ (8006a28 <atanf+0x1d4>)
 8006896:	f7f9 fee9 	bl	800066c <__aeabi_fadd>
 800689a:	21fe      	movs	r1, #254	@ 0xfe
 800689c:	0589      	lsls	r1, r1, #22
 800689e:	f7f9 fdcd 	bl	800043c <__aeabi_fcmpgt>
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d1ed      	bne.n	8006882 <atanf+0x2e>
 80068a6:	2601      	movs	r6, #1
 80068a8:	4276      	negs	r6, r6
 80068aa:	e01b      	b.n	80068e4 <atanf+0x90>
 80068ac:	f000 f8e2 	bl	8006a74 <fabsf>
 80068b0:	4b5e      	ldr	r3, [pc, #376]	@ (8006a2c <atanf+0x1d8>)
 80068b2:	1c04      	adds	r4, r0, #0
 80068b4:	429d      	cmp	r5, r3
 80068b6:	d87b      	bhi.n	80069b0 <atanf+0x15c>
 80068b8:	4b5d      	ldr	r3, [pc, #372]	@ (8006a30 <atanf+0x1dc>)
 80068ba:	429d      	cmp	r5, r3
 80068bc:	d867      	bhi.n	800698e <atanf+0x13a>
 80068be:	1c01      	adds	r1, r0, #0
 80068c0:	f7f9 fed4 	bl	800066c <__aeabi_fadd>
 80068c4:	21fe      	movs	r1, #254	@ 0xfe
 80068c6:	0589      	lsls	r1, r1, #22
 80068c8:	f7fa fbea 	bl	80010a0 <__aeabi_fsub>
 80068cc:	2180      	movs	r1, #128	@ 0x80
 80068ce:	1c05      	adds	r5, r0, #0
 80068d0:	05c9      	lsls	r1, r1, #23
 80068d2:	1c20      	adds	r0, r4, #0
 80068d4:	f7f9 feca 	bl	800066c <__aeabi_fadd>
 80068d8:	1c01      	adds	r1, r0, #0
 80068da:	1c28      	adds	r0, r5, #0
 80068dc:	f7fa f8b8 	bl	8000a50 <__aeabi_fdiv>
 80068e0:	2600      	movs	r6, #0
 80068e2:	1c04      	adds	r4, r0, #0
 80068e4:	1c21      	adds	r1, r4, #0
 80068e6:	1c20      	adds	r0, r4, #0
 80068e8:	f7fa fa80 	bl	8000dec <__aeabi_fmul>
 80068ec:	1c01      	adds	r1, r0, #0
 80068ee:	1c07      	adds	r7, r0, #0
 80068f0:	f7fa fa7c 	bl	8000dec <__aeabi_fmul>
 80068f4:	494f      	ldr	r1, [pc, #316]	@ (8006a34 <atanf+0x1e0>)
 80068f6:	1c05      	adds	r5, r0, #0
 80068f8:	f7fa fa78 	bl	8000dec <__aeabi_fmul>
 80068fc:	494e      	ldr	r1, [pc, #312]	@ (8006a38 <atanf+0x1e4>)
 80068fe:	f7f9 feb5 	bl	800066c <__aeabi_fadd>
 8006902:	1c29      	adds	r1, r5, #0
 8006904:	f7fa fa72 	bl	8000dec <__aeabi_fmul>
 8006908:	494c      	ldr	r1, [pc, #304]	@ (8006a3c <atanf+0x1e8>)
 800690a:	f7f9 feaf 	bl	800066c <__aeabi_fadd>
 800690e:	1c29      	adds	r1, r5, #0
 8006910:	f7fa fa6c 	bl	8000dec <__aeabi_fmul>
 8006914:	494a      	ldr	r1, [pc, #296]	@ (8006a40 <atanf+0x1ec>)
 8006916:	f7f9 fea9 	bl	800066c <__aeabi_fadd>
 800691a:	1c29      	adds	r1, r5, #0
 800691c:	f7fa fa66 	bl	8000dec <__aeabi_fmul>
 8006920:	4948      	ldr	r1, [pc, #288]	@ (8006a44 <atanf+0x1f0>)
 8006922:	f7f9 fea3 	bl	800066c <__aeabi_fadd>
 8006926:	1c29      	adds	r1, r5, #0
 8006928:	f7fa fa60 	bl	8000dec <__aeabi_fmul>
 800692c:	4946      	ldr	r1, [pc, #280]	@ (8006a48 <atanf+0x1f4>)
 800692e:	f7f9 fe9d 	bl	800066c <__aeabi_fadd>
 8006932:	1c39      	adds	r1, r7, #0
 8006934:	f7fa fa5a 	bl	8000dec <__aeabi_fmul>
 8006938:	4944      	ldr	r1, [pc, #272]	@ (8006a4c <atanf+0x1f8>)
 800693a:	1c07      	adds	r7, r0, #0
 800693c:	1c28      	adds	r0, r5, #0
 800693e:	f7fa fa55 	bl	8000dec <__aeabi_fmul>
 8006942:	4943      	ldr	r1, [pc, #268]	@ (8006a50 <atanf+0x1fc>)
 8006944:	f7fa fbac 	bl	80010a0 <__aeabi_fsub>
 8006948:	1c29      	adds	r1, r5, #0
 800694a:	f7fa fa4f 	bl	8000dec <__aeabi_fmul>
 800694e:	4941      	ldr	r1, [pc, #260]	@ (8006a54 <atanf+0x200>)
 8006950:	f7fa fba6 	bl	80010a0 <__aeabi_fsub>
 8006954:	1c29      	adds	r1, r5, #0
 8006956:	f7fa fa49 	bl	8000dec <__aeabi_fmul>
 800695a:	493f      	ldr	r1, [pc, #252]	@ (8006a58 <atanf+0x204>)
 800695c:	f7fa fba0 	bl	80010a0 <__aeabi_fsub>
 8006960:	1c29      	adds	r1, r5, #0
 8006962:	f7fa fa43 	bl	8000dec <__aeabi_fmul>
 8006966:	493d      	ldr	r1, [pc, #244]	@ (8006a5c <atanf+0x208>)
 8006968:	f7fa fb9a 	bl	80010a0 <__aeabi_fsub>
 800696c:	1c29      	adds	r1, r5, #0
 800696e:	f7fa fa3d 	bl	8000dec <__aeabi_fmul>
 8006972:	1c01      	adds	r1, r0, #0
 8006974:	1c38      	adds	r0, r7, #0
 8006976:	f7f9 fe79 	bl	800066c <__aeabi_fadd>
 800697a:	1c21      	adds	r1, r4, #0
 800697c:	f7fa fa36 	bl	8000dec <__aeabi_fmul>
 8006980:	1c73      	adds	r3, r6, #1
 8006982:	d134      	bne.n	80069ee <atanf+0x19a>
 8006984:	1c01      	adds	r1, r0, #0
 8006986:	1c20      	adds	r0, r4, #0
 8006988:	f7fa fb8a 	bl	80010a0 <__aeabi_fsub>
 800698c:	e772      	b.n	8006874 <atanf+0x20>
 800698e:	21fe      	movs	r1, #254	@ 0xfe
 8006990:	0589      	lsls	r1, r1, #22
 8006992:	f7fa fb85 	bl	80010a0 <__aeabi_fsub>
 8006996:	21fe      	movs	r1, #254	@ 0xfe
 8006998:	1c05      	adds	r5, r0, #0
 800699a:	0589      	lsls	r1, r1, #22
 800699c:	1c20      	adds	r0, r4, #0
 800699e:	f7f9 fe65 	bl	800066c <__aeabi_fadd>
 80069a2:	1c01      	adds	r1, r0, #0
 80069a4:	1c28      	adds	r0, r5, #0
 80069a6:	f7fa f853 	bl	8000a50 <__aeabi_fdiv>
 80069aa:	2601      	movs	r6, #1
 80069ac:	1c04      	adds	r4, r0, #0
 80069ae:	e799      	b.n	80068e4 <atanf+0x90>
 80069b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006a60 <atanf+0x20c>)
 80069b2:	429d      	cmp	r5, r3
 80069b4:	d814      	bhi.n	80069e0 <atanf+0x18c>
 80069b6:	21ff      	movs	r1, #255	@ 0xff
 80069b8:	0589      	lsls	r1, r1, #22
 80069ba:	f7fa fb71 	bl	80010a0 <__aeabi_fsub>
 80069be:	21ff      	movs	r1, #255	@ 0xff
 80069c0:	1c05      	adds	r5, r0, #0
 80069c2:	0589      	lsls	r1, r1, #22
 80069c4:	1c20      	adds	r0, r4, #0
 80069c6:	f7fa fa11 	bl	8000dec <__aeabi_fmul>
 80069ca:	21fe      	movs	r1, #254	@ 0xfe
 80069cc:	0589      	lsls	r1, r1, #22
 80069ce:	f7f9 fe4d 	bl	800066c <__aeabi_fadd>
 80069d2:	1c01      	adds	r1, r0, #0
 80069d4:	1c28      	adds	r0, r5, #0
 80069d6:	f7fa f83b 	bl	8000a50 <__aeabi_fdiv>
 80069da:	2602      	movs	r6, #2
 80069dc:	1c04      	adds	r4, r0, #0
 80069de:	e781      	b.n	80068e4 <atanf+0x90>
 80069e0:	1c01      	adds	r1, r0, #0
 80069e2:	4820      	ldr	r0, [pc, #128]	@ (8006a64 <atanf+0x210>)
 80069e4:	f7fa f834 	bl	8000a50 <__aeabi_fdiv>
 80069e8:	2603      	movs	r6, #3
 80069ea:	1c04      	adds	r4, r0, #0
 80069ec:	e77a      	b.n	80068e4 <atanf+0x90>
 80069ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006a68 <atanf+0x214>)
 80069f0:	00b6      	lsls	r6, r6, #2
 80069f2:	58f1      	ldr	r1, [r6, r3]
 80069f4:	f7fa fb54 	bl	80010a0 <__aeabi_fsub>
 80069f8:	1c21      	adds	r1, r4, #0
 80069fa:	f7fa fb51 	bl	80010a0 <__aeabi_fsub>
 80069fe:	4d1b      	ldr	r5, [pc, #108]	@ (8006a6c <atanf+0x218>)
 8006a00:	1c01      	adds	r1, r0, #0
 8006a02:	5970      	ldr	r0, [r6, r5]
 8006a04:	f7fa fb4c 	bl	80010a0 <__aeabi_fsub>
 8006a08:	9b01      	ldr	r3, [sp, #4]
 8006a0a:	1c04      	adds	r4, r0, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	db00      	blt.n	8006a12 <atanf+0x1be>
 8006a10:	e737      	b.n	8006882 <atanf+0x2e>
 8006a12:	2380      	movs	r3, #128	@ 0x80
 8006a14:	061b      	lsls	r3, r3, #24
 8006a16:	18c4      	adds	r4, r0, r3
 8006a18:	e733      	b.n	8006882 <atanf+0x2e>
 8006a1a:	4c15      	ldr	r4, [pc, #84]	@ (8006a70 <atanf+0x21c>)
 8006a1c:	e731      	b.n	8006882 <atanf+0x2e>
 8006a1e:	46c0      	nop			@ (mov r8, r8)
 8006a20:	3fc90fdb 	.word	0x3fc90fdb
 8006a24:	3edfffff 	.word	0x3edfffff
 8006a28:	7149f2ca 	.word	0x7149f2ca
 8006a2c:	3f97ffff 	.word	0x3f97ffff
 8006a30:	3f2fffff 	.word	0x3f2fffff
 8006a34:	3c8569d7 	.word	0x3c8569d7
 8006a38:	3d4bda59 	.word	0x3d4bda59
 8006a3c:	3d886b35 	.word	0x3d886b35
 8006a40:	3dba2e6e 	.word	0x3dba2e6e
 8006a44:	3e124925 	.word	0x3e124925
 8006a48:	3eaaaaab 	.word	0x3eaaaaab
 8006a4c:	bd15a221 	.word	0xbd15a221
 8006a50:	3d6ef16b 	.word	0x3d6ef16b
 8006a54:	3d9d8795 	.word	0x3d9d8795
 8006a58:	3de38e38 	.word	0x3de38e38
 8006a5c:	3e4ccccd 	.word	0x3e4ccccd
 8006a60:	401bffff 	.word	0x401bffff
 8006a64:	bf800000 	.word	0xbf800000
 8006a68:	08006bb8 	.word	0x08006bb8
 8006a6c:	08006bc8 	.word	0x08006bc8
 8006a70:	bfc90fdb 	.word	0xbfc90fdb

08006a74 <fabsf>:
 8006a74:	0040      	lsls	r0, r0, #1
 8006a76:	0840      	lsrs	r0, r0, #1
 8006a78:	4770      	bx	lr
	...

08006a7c <_init>:
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7e:	46c0      	nop			@ (mov r8, r8)
 8006a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a82:	bc08      	pop	{r3}
 8006a84:	469e      	mov	lr, r3
 8006a86:	4770      	bx	lr

08006a88 <_fini>:
 8006a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8a:	46c0      	nop			@ (mov r8, r8)
 8006a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a8e:	bc08      	pop	{r3}
 8006a90:	469e      	mov	lr, r3
 8006a92:	4770      	bx	lr
